;
; +-------------------------------------------------------------------------+
; |   This file has been generated by The Interactive Disassembler (IDA)    |
; |        Copyright (c) 2009 by Hex-Rays, <support@hex-rays.com>           |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	F39FD5A146426CF261F207D7FC878675

; File Name   :	th01/REIIDEN.EXE
; Format      :	MS-DOS executable (EXE)
; Base Address:	0h Range: 0h-3B660h Loaded length: 36C14h
; Entry	Point :	0:0
; OS type	  :  MS	DOS
; Application type:  Executable	16bit

		.386
		.model use16 large _TEXT

BINARY = 'M'

include ReC98.inc
include th01/th01.inc

STAGES_PER_SCENE = 5

; ===========================================================================

; Segment type:	Pure code
_TEXT		segment	word public 'CODE' use16
		assume cs:_TEXT
		assume es:nothing, ds:_DATA, fs:nothing, gs:nothing

include libs/master.lib/text_clear.asm
include libs/master.lib/text_fillca.asm
include libs/master.lib/graph_400line.asm
include libs/master.lib/graph_clear.asm
include libs/master.lib/graph_show.asm
include libs/master.lib/graph_start.asm
include libs/master.lib/palette_show.asm
include libs/master.lib/palette_init.asm
include libs/master.lib/respal_exist.asm
include libs/master.lib/respal_free.asm
include libs/master.lib/resdata.asm
include libs/master.lib/file_read.asm
include libs/master.lib/file_close.asm
include libs/master.lib/file_exist.asm
include libs/master.lib/file_ropen.asm
include libs/master.lib/file_write.asm
include libs/master.lib/file_create.asm
include libs/master.lib/file_seek.asm
include libs/master.lib/dos_free.asm
include libs/master.lib/dos_axdx.asm
include libs/master.lib/keystart.asm
include libs/master.lib/key_sense.asm
include libs/master.lib/dos_ropen.asm
include libs/master.lib/grcg_setcolor.asm
include libs/master.lib/grcg_pset.asm
include libs/master.lib/egc.asm
include libs/master.lib/iatan2.asm
include libs/master.lib/isqrt.asm
include libs/master.lib/random.asm
_TEXT		ends

; ===========================================================================

; Segment type:	Pure code
main_01_TEXT	segment	byte public 'CODE' use16
		assume cs:main_01_TEXT
		;org 2
		assume es:nothing, ss:nothing, ds:_DATA, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_E319	proc far
		push	bp
		mov	bp, sp
		call	@CPellets@$bctr$qv c, offset _Pellets, ds
		mov	_Shots.SHOT_unknown[0 * word], 50h
		mov	_Shots.SHOT_unknown[1 * word], 60h
		mov	_Shots.SHOT_unknown[2 * word], 70h

		@@i = 0
		rept SHOT_COUNT
			mov	_Shots.SHOT_moving[@@i], 0
			@@i = @@i + 1
		endm

		pop	bp
		retf
sub_E319	endp
main_01_TEXT	ends

; ===========================================================================

; Segment type:	Pure code
frmdelay_TEXT	segment	byte public 'CODE' use16
frmdelay_TEXT	ends

; ===========================================================================

; Segment type:	Pure code
vsync_TEXT	segment	byte public 'CODE' use16
vsync_TEXT	ends

; ===========================================================================

; Segment type:	Pure code
ztext_TEXT	segment	byte public 'CODE' use16
ztext_TEXT	ends

; ===========================================================================

; Segment type:	Pure code
initexit_TEXT	segment	byte public 'CODE' use16
initexit_TEXT	ends

; ===========================================================================

; Segment type:	Pure code
graph_TEXT	segment	byte public 'CODE' use16
graph_TEXT	ends

; ===========================================================================

; Segment type:	Pure code
SHARED	segment	byte public 'CODE' use16
SHARED	ends

; ===========================================================================

; Segment type:	Pure code
PTN_GRP_GRZ	segment	byte public 'CODE' use16
PTN_GRP_GRZ	ends

; ===========================================================================

; Segment type:	Pure code
main_09_TEXT	segment	byte public 'CODE' use16
main_09_TEXT	ends

; ===========================================================================

BULLET_L_TEXT	segment	byte public 'CODE' use16
BULLET_L_TEXT	ends

; ===========================================================================

main_11_TEXT	segment	byte public 'CODE' use16
main_11_TEXT	ends

; ===========================================================================

; Segment type:	Pure code
resstuff_TEXT	segment	byte public 'CODE' use16
resstuff_TEXT	ends

; ===========================================================================

; Segment type:	Pure code
GRAPH_EX_TEXT	segment	byte public 'CODE' use16
GRAPH_EX_TEXT	ends

; ===========================================================================

main_14_TEXT	segment	byte public 'CODE' use16
main_14_TEXT	ends

; ===========================================================================

; Segment type:	Pure code
main_15_TEXT	segment	byte public 'CODE' use16
main_15_TEXT	ends

; ===========================================================================

; Segment type:	Pure code
mdrv2_TEXT	segment	byte public 'CODE' use16
mdrv2_TEXT	ends

; ===========================================================================

; Segment type:	Pure code
main_17_TEXT	segment	byte public 'CODE' use16
main_17_TEXT	ends

; ===========================================================================

; Segment type:	Pure code
main_18_TEXT	segment	byte public 'CODE' use16
main_18_TEXT	ends

; ===========================================================================

; Segment type:	Pure code
main_19_TEXT	segment	byte public 'CODE' use16
main_19_TEXT	ends

; ===========================================================================

; Segment type:	Pure code
main_20_TEXT	segment	byte public 'CODE' use16
main_20_TEXT	ends

; ===========================================================================

; Segment type:	Pure code
main_21_TEXT	segment	byte public 'CODE' use16
main_21_TEXT	ends

; ===========================================================================

; Segment type:	Pure code
PF_TEXT	segment	byte public 'CODE' use16
PF_TEXT	ends

; ===========================================================================

; Segment type:	Pure code
main_23_TEXT	segment	byte public 'CODE' use16
main_23_TEXT	ends

; ===========================================================================

; Segment type:	Pure code
main_24_TEXT	segment	byte public 'CODE' use16
main_24_TEXT	ends

; ===========================================================================

; Segment type:	Pure code
main_25_TEXT	segment	byte public 'CODE' use16
main_25_TEXT	ends

; ===========================================================================

; Segment type:	Pure code
main_26_TEXT	segment	byte public 'CODE' use16
main_26_TEXT	ends

; ===========================================================================

; Segment type:	Pure code
main_27_TEXT	segment	byte public 'CODE' use16
main_27_TEXT	ends

; ===========================================================================

main_28_TEXT	segment	byte public 'CODE' use16
main_28_TEXT	ends

; ===========================================================================

; Segment type:	Pure code
main_29_TEXT	segment	byte public 'CODE' use16
main_29_TEXT	ends

; ===========================================================================

; Segment type:	Pure code
main_30_TEXT	segment	byte public 'CODE' use16
main_30_TEXT	ends

; ===========================================================================

; Segment type:	Pure code
main_31_TEXT	segment	byte public 'CODE' use16
main_31_TEXT	ends

; ===========================================================================

; Segment type:	Pure code
main_32_TEXT	segment	byte public 'CODE' use16
main_32_TEXT	ends

; ===========================================================================

; Segment type:	Pure code
main_33_TEXT	segment	byte public 'CODE' use16
main_33_TEXT	ends

; ===========================================================================

; Segment type:	Pure code
main_34_TEXT	segment	byte public 'CODE' use16
main_34_TEXT	ends

; ===========================================================================

; Segment type:	Pure code
main_35_TEXT	segment	byte public 'CODE' use16
main_35_TEXT	ends

; ===========================================================================

; Segment type:	Pure code
main_36_TEXT	segment	byte public 'CODE' use16
main_36_TEXT	ends

; ===========================================================================

; Segment type:	Pure code
main_37_TEXT	segment	byte public 'CODE' use16
main_37_TEXT	ends

; ===========================================================================

; Segment type:	Pure code
main_38_TEXT	segment	byte public 'CODE' use16
	extern @CPellets@$bctr$qv:proc
main_38_TEXT	ends

	.data

	; libs/master.lib/tx[data].asm
	extern TextVramSeg:word

	; libs/master.lib/grp[data].asm
	extern graph_VramSeg:word
	extern graph_VramWords:word
	extern graph_VramLines:word
	extern graph_VramZoom:word

	; libs/master.lib/pal[data].asm
	extern PaletteTone:word
	extern PalettesInit:rgb_t:COLOR_COUNT
	extern PaletteNote:word
	extern ResPalSeg:word

	; libs/master.lib/respal_exist[data].asm
IDLEN EQU 10
	extern ResPalID:byte:IDLEN

	; libs/master.lib/fil[data].asm
	extern file_BufferSize:word
	extern file_Handle:word

	; libs/master.lib/keytable[data].asm
	extern key_table_normal:word
	extern key_table_shift:word
	extern key_table_ctrl:word
	extern key_table_alt:word

	; libs/master.lib/keystart[data].asm
	extern key_started:word

	; libs/master.lib/keyback[data].asm
	extern key_back_buffer:word

	; libs/master.lib/dos_ropen[data].asm
	extern file_sharingmode:word

	; libs/master.lib/clip[data].asm
	extern ClipXL:word
	extern ClipXW:word
	extern ClipXR:word
	extern ClipYT:word
	extern ClipYH:word
	extern ClipYB:word
	extern ClipYT_seg:word
	extern ClipYB_adr:word

	; libs/master.lib/atan8[data].asm
	extern AtanTable8:word

	; libs/master.lib/rand[data].asm
	extern random_seed:dword

_INIT_	segment word public 'INITDATA' use16
		db    1
		db  20h
		dd sub_E319
_INIT_	ends

	.data?

CEntities macro name:req, count:req
	public name
	name label byte
	dw count dup(?) ; left
	dw count dup(?) ; top
endm

public _credit_bombs, _player_swing_deflection_frames
_credit_bombs	db ?
_player_swing_deflection_frames	db ?
public _frame_rand, _coreleft_prev, _stage_wait_for_shot_to_begin
_frame_rand	dd ?
_coreleft_prev	dd ?
_stage_wait_for_shot_to_begin	db ?
public _mode_debug, _frames_since_start_of_binary
_mode_debug	db ?
_frames_since_start_of_binary	dd ?
include th01/main/player/player[bss].asm
public _orb_cur_left, _orb_cur_top, _orb_force_frame
_orb_cur_left	dw ?
_orb_cur_top 	dw ?
_orb_force_frame	dw ?

PTN_W = 32
PTN_H = 32
STAGEOBJ_W = PTN_W
STAGEOBJ_H = PTN_H
STAGEOBJS_X = (PLAYFIELD_W / STAGEOBJ_W)
STAGEOBJS_Y = (PLAYFIELD_H / STAGEOBJ_H)

STAGEOBJS_COUNT = (STAGEOBJS_X * STAGEOBJS_Y)
STAGEDAT_STAGE_SIZE = ((STAGEOBJS_COUNT) + (STAGEOBJS_COUNT / 4) + 5)

public _scene_stage
_scene_stage db (STAGEDAT_STAGE_SIZE * STAGES_PER_SCENE) dup(?)

include th01/main/player/anim[bss].asm
include th01/main/bullet/pellets[bss].asm
include th01/main/player/shot[bss].asm
		db 4 dup(?)
public _input_prev, _palette_white, _bomb_palette_flash_bright
public _bomb_white_to_blue_speed
_input_prev	db 16 dup (?)

_palette_white	          	palette_t <?>
_bomb_palette_flash_bright	palette_t <?>
_bomb_white_to_blue_speed 	db ?

KUJI_COUNT = 9
KUJI_RINGS = 2

public _bomb_entity
_bomb_entity label byte
	dw ((KUJI_COUNT * KUJI_RINGS) + 9) dup (?)	; left
	dw ((KUJI_COUNT * KUJI_RINGS) + 9) dup (?)	; top
	db ?                                      	; angle

include th01/main/player/inv_spr[bss].asm
public _memory_check_cycle, _heapcheck_ret_prev, _player_left_prev
_memory_check_cycle	dd ?
_heapcheck_ret_prev	dw ?
_player_left_prev	dw ?

	; libs/master.lib/pal[bss].asm
	extern Palettes:rgb_t:COLOR_COUNT

	; libs/master.lib/fil[bss].asm
	extern file_Buffer:dword
	extern file_BufferPos:dword
	extern file_BufPtr:word
	extern file_InReadBuf:word
	extern file_Eof:word
	extern file_ErrorStat:word

	; libs/master.lib/keystart[bss].asm
	extern key_backup:byte:786
	extern keywork:byte:10

		end
