;
; +-------------------------------------------------------------------------+
; |   This file has been generated by The Interactive Disassembler (IDA)    |
; |        Copyright (c) 2009 by Hex-Rays, <support@hex-rays.com>           |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	DE5454973591EBD937B11452A8B4882D

; File Name   :	th01/ZUNSOFT.COM
; Format      :	MS-DOS COM-file
; Base Address:	0h Range: 100h-2870h Loaded length: 2770h
; OS type	  :  MS	DOS
; Application type:  Executable	16bit

		.286 ; Force the .model directive to create 16-bit default segments...
		.model tiny
		__TINY__ equ 1
		.386 ; ... then switch to what we actually need.
		; And yes, we can't move this to an include file for some reason.

include ReC98.inc
include th01/th01.asm

CIRCLE_COUNT = 4
STAR_COUNT = 50

; ===========================================================================

; Segment type:	Pure code
_TEXT		segment	word public 'CODE' use16
		assume cs:_TEXT
		org 100h
		assume es:nothing, ss:_TEXT, ds:_TEXT, fs:nothing, gs:nothing

include libs/BorlandC/c0.asm

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_367		proc near
		push	bp
		mov	bp, sp
		mov	dx, 0A6h
		mov	al, 1
		out	dx, al
		call	graph_clear
		mov	dx, 0A6h
		mov	al, 0
		out	dx, al
		call	graph_clear
		mov	dx, 0A4h
		mov	al, 0
		out	dx, al
		pop	bp
		retn
sub_367		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_384		proc near
		push	bp
		mov	bp, sp
		call	mem_assign_all
		call	graph_start
		call	key_beep_off
		call	text_systemline_hide
		call	text_cursor_hide
		call	egc_start
		call	sub_367
		call	text_clear
		mov	page_write, 0
		mov	page_show, 1
		call	grc_setclip pascal, 96, 100, 543, 299
		call	graph_hide
		call	super_entry_bfnt pascal, offset aTouhou_dat
		call	palette_show
		mov	PaletteTone, 0
		call	palette_show
		call	graph_show
		pop	bp
		retn
sub_384		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_3D0		proc near
		push	bp
		mov	bp, sp
		call	super_free
		call	sub_367
		call	mem_unassign
		call	text_clear
		call	egc_start
		pop	bp
		retn
sub_3D0		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_3E4		proc near

arg_0		= word ptr  4
arg_2		= byte ptr  6
arg_4		= word ptr  8
arg_6		= word ptr  0Ah

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	si, [bp+arg_6]
		mov	di, [bp+arg_4]
		mov	ax, [bp+arg_0]
		cwd
		mov	bl, [bp+arg_2]
		mov	bh, 0
		and	bx, 0FFh
		add	bx, bx
		push	ax
		mov	ax, _CosTable8[bx]
		push	dx
		cwd
		pop	cx
		pop	bx
		call	N_LXMUL@
		mov	cl, 8
		call	N_LXRSH@
		mov	[si], ax
		mov	ax, [bp+arg_0]
		cwd
		mov	bl, [bp+arg_2]
		mov	bh, 0
		and	bx, 0FFh
		add	bx, bx
		push	ax
		mov	ax, _SinTable8[bx]
		push	dx
		cwd
		pop	cx
		pop	bx
		call	N_LXMUL@
		mov	cl, 8
		call	N_LXRSH@
		mov	[di], ax
		pop	di
		pop	si
		pop	bp
		retn	8
sub_3E4		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_439		proc near
		push	bp
		mov	bp, sp
		push	si
		mov	(circle_pos[0 * size Point]).x, 128
		mov	circle_speed_x[0*2], -8
		mov	(circle_pos[0 * size Point]).y, 320
		mov	circle_speed_y[0*2], 8
		mov	(circle_pos[1 * size Point]).x, 256
		mov	circle_speed_x[1*2], -8
		mov	(circle_pos[1 * size Point]).y, 240
		mov	circle_speed_y[1*2], 8
		mov	(circle_pos[2 * size Point]).x, 384
		mov	circle_speed_x[2*2], -8
		mov	(circle_pos[2 * size Point]).y, 160
		mov	circle_speed_y[2*2], 8
		mov	(circle_pos[3 * size Point]).x, 512
		mov	circle_speed_x[3*2], -8
		mov	(circle_pos[3 * size Point]).y, 80
		mov	circle_speed_y[3*2], 8
		mov	frame, 0
		mov	tone, 0
		mov	logo_num, 0
		mov	wave_len, 23
		mov	wave_phase, 0
		mov	byte ptr wave_amp, 0
		xor	si, si
		jmp	short loc_4F5
; ---------------------------------------------------------------------------

loc_4C0:
		call	IRand
		mov	bx, 640
		cwd
		idiv	bx
		mov	bx, si
		shl	bx, 2
		mov	star_pos[bx].x, dx
		call	IRand
		mov	bx, 400
		cwd
		idiv	bx
		mov	bx, si
		shl	bx, 2
		mov	star_pos[bx].y, dx
		call	IRand
		mov	bx, 32
		cwd
		idiv	bx
		add	dl, 6
		mov	star_speed[si], dl
		inc	si

loc_4F5:
		cmp	si, STAR_COUNT
		jl	short loc_4C0
		mov	star_angle, 64
		pop	si

loc_500:
		pop	bp
		retn
sub_439		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_502		proc near
		push	bp
		mov	bp, sp
		push	si
		mov	si, CIRCLE_COUNT - 1
		jmp	loc_5A6
; ---------------------------------------------------------------------------

loc_50C:
		push	GC_RMW
		mov	al, CIRCLE_COLORS[si]
		cbw
		push	ax
		call	grcg_setcolor
		mov	bx, si
		shl	bx, 2
		push	circle_pos[bx].x
		mov	bx, si
		shl	bx, 2
		push	circle_pos[bx].y
		push	96
		call	grcg_circlefill
		mov	bx, si
		add	bx, bx
		mov	ax, circle_speed_x[bx]
		mov	bx, si
		shl	bx, 2
		add	circle_pos[bx].x, ax
		mov	bx, si
		add	bx, bx
		mov	ax, circle_speed_y[bx]
		mov	bx, si
		shl	bx, 2
		add	circle_pos[bx].y, ax
		mov	bx, si
		shl	bx, 2
		cmp	circle_pos[bx].x, 32
		jle	short loc_56A
		mov	bx, si
		shl	bx, 2
		cmp	circle_pos[bx].x, 607
		jle	short loc_57B

loc_56A:
		mov	bx, si
		add	bx, bx
		mov	dx, -1
		mov	ax, circle_speed_x[bx]
		imul	dx
		mov	circle_speed_x[bx], ax

loc_57B:
		mov	bx, si
		shl	bx, 2
		cmp	circle_pos[bx].y, 32
		jle	short loc_594
		mov	bx, si
		shl	bx, 2
		cmp	circle_pos[bx].y, 367
		jle	short loc_5A5

loc_594:
		mov	bx, si
		add	bx, bx
		mov	dx, -1
		mov	ax, circle_speed_y[bx]
		imul	dx
		mov	circle_speed_y[bx], ax

loc_5A5:
		dec	si

loc_5A6:
		or	si, si
		jl	short loc_5AD
		jmp	loc_50C
; ---------------------------------------------------------------------------

loc_5AD:
		mov	dx, 7Ch
		mov	al, GC_OFF
		out	dx, al
		pop	si
		pop	bp
		retn
sub_502		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_5B6		proc near

var_4		= word ptr -4
var_2		= word ptr -2

		enter	4, 0
		push	si
		call	grcg_setcolor pascal, GC_RMW, 5
		xor	si, si
		jmp	loc_66E
; ---------------------------------------------------------------------------

loc_5C8:
		mov	bx, si
		shl	bx, 2
		push	star_pos[bx].x
		mov	bx, si
		shl	bx, 2
		push	star_pos[bx].y
		call	grcg_pset
		lea	ax, [bp+var_2]
		push	ax
		lea	ax, [bp+var_4]
		push	ax
		push	word ptr star_angle
		mov	al, star_speed[si]
		mov	ah, 0
		push	ax
		call	sub_3E4
		mov	bx, si
		shl	bx, 2
		mov	ax, [bp+var_2]
		add	star_pos[bx].x, ax
		mov	bx, si
		shl	bx, 2
		mov	ax, [bp+var_4]
		add	star_pos[bx].y, ax
		mov	bx, si
		shl	bx, 2
		cmp	star_pos[bx].x, 0
		jge	short loc_624
		mov	bx, si
		shl	bx, 2
		add	star_pos[bx].x, 640
		jmp	short loc_63C
; ---------------------------------------------------------------------------

loc_624:
		mov	bx, si
		shl	bx, 2
		cmp	star_pos[bx].x, 640
		jl	short loc_63C
		mov	bx, si
		shl	bx, 2
		sub	star_pos[bx].x, 640

loc_63C:
		mov	bx, si
		shl	bx, 2
		cmp	star_pos[bx].y, 0
		jge	short loc_655
		mov	bx, si
		shl	bx, 2
		add	star_pos[bx].y, 400
		jmp	short loc_66D
; ---------------------------------------------------------------------------

loc_655:
		mov	bx, si
		shl	bx, 2
		cmp	star_pos[bx].y, 400
		jl	short loc_66D
		mov	bx, si
		shl	bx, 2
		sub	star_pos[bx].y, 400

loc_66D:
		inc	si

loc_66E:
		cmp	si, STAR_COUNT
		jge	short loc_676
		jmp	loc_5C8
; ---------------------------------------------------------------------------

loc_676:
		inc	star_angle
		mov	dx, 7Ch
		mov	al, GC_OFF
		out	dx, al
		pop	si
		leave
		retn
sub_5B6		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_683		proc near
		push	bp
		mov	bp, sp

loc_686:
		out	5Fh, al
		in	al, 0A0h	; PIC 2	 same as 0020 for PIC 1
		test	al, 20h
		jnz	short loc_686

loc_68E:
		out	5Fh, al
		in	al, 0A0h	; PIC 2	 same as 0020 for PIC 1
		test	al, 20h
		jz	short loc_68E
		pop	bp
		retn
sub_683		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_698		proc near
		push	bp
		mov	bp, sp
		cmp	frame, 50
		jge	short loc_6A5
		jmp	loc_7CB
; ---------------------------------------------------------------------------

loc_6A5:
		cmp	frame, 90
		jge	short loc_6CD
		cmp	frame, 55
		jnz	short loc_6B6
		jmp	loc_7A6
; ---------------------------------------------------------------------------

loc_6B6:
		cmp	frame, 60
		jnz	short loc_6C0
		jmp	loc_7A6
; ---------------------------------------------------------------------------

loc_6C0:
		cmp	frame, 65
		jz	short loc_6CA
		jmp	loc_7AE
; ---------------------------------------------------------------------------

loc_6CA:
		jmp	loc_7A6
; ---------------------------------------------------------------------------

loc_6CD:
		cmp	frame, 110
		jge	short loc_720
		push	256
		push	192
		mov	al, logo_num
		cbw
		push	ax
		mov	al, wave_len
		cbw
		push	ax
		push	wave_amp
		mov	al, wave_phase
		cbw
		push	ax
		call	super_wave_put
		push	320
		push	192
		mov	al, logo_num
		cbw
		inc	ax
		push	ax
		mov	al, wave_len
		cbw
		push	ax
		push	wave_amp
		mov	al, wave_phase
		cbw
		push	ax
		call	super_wave_put
		dec	wave_len

loc_711:
		mov	al, wave_phase
		add	al, 4
		mov	wave_phase, al
		mov	al, byte ptr wave_amp
		add	al, 4
		jmp	short loc_781
; ---------------------------------------------------------------------------

loc_720:
		cmp	frame, 130
		jge	short loc_786
		cmp	frame, 110
		jnz	short loc_737
		mov	al, logo_num
		add	al, 2
		mov	logo_num, al

loc_737:
		push	256
		push	192
		mov	al, logo_num
		cbw
		push	ax
		mov	al, wave_len
		cbw
		push	ax
		push	wave_amp
		mov	al, wave_phase
		cbw
		push	ax
		call	super_wave_put
		push	320
		push	192
		mov	al, logo_num
		cbw
		inc	ax
		push	ax
		mov	al, wave_len
		cbw
		push	ax
		push	wave_amp
		mov	al, wave_phase
		cbw
		push	ax
		call	super_wave_put
		inc	wave_len
		mov	al, wave_phase
		add	al, 4
		mov	wave_phase, al
		mov	al, byte ptr wave_amp
		add	al, -4

loc_781:
		mov	byte ptr wave_amp, al
		pop	bp
		retn
; ---------------------------------------------------------------------------

loc_786:
		cmp	frame, 170
		jge	short loc_7CB
		cmp	frame, 155
		jz	short loc_7A6
		cmp	frame, 160
		jz	short loc_7A6
		cmp	frame, 165
		jnz	short loc_7AE

loc_7A6:
		mov	al, logo_num
		add	al, 2
		mov	logo_num, al

loc_7AE:
		push	256
		push	192
		mov	al, logo_num
		cbw
		push	ax
		call	super_put_8
		push	320
		push	192
		mov	al, logo_num
		cbw
		inc	ax
		push	ax
		call	super_put_8

loc_7CB:
		pop	bp
		retn
sub_698		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
_main		proc near

_argc		= word ptr  4
_argv		= word ptr  6
_envp		= word ptr  8

		push	bp
		mov	bp, sp
		push	si
		push	di
		xor	ax, ax
		mov	es, ax
		test	byte ptr es:[045Ch], 40h
		jz	short loc_7F0
		mov	al, 7
		out	6Ah, al		; PC-98	GDC (6a):
					;
		mov	al, 20h
		out	6Ah, al		; PC-98	GDC (6a):
					;
		mov	al, 6
		out	6Ah, al		; PC-98	GDC (6a):
					;
		and	byte ptr es:[54Dh], 7Fh

loc_7F0:
		call	sub_384
		call	sub_439

loc_7F6:
		cmp	frame, 180
		jle	short loc_80C
		cmp	tone, 0
		jle	short loc_873
		mov	al, tone
		add	al, -2
		jmp	short loc_818
; ---------------------------------------------------------------------------

loc_80C:
		cmp	tone, 100
		jge	short loc_822
		mov	al, tone
		add	al, 2

loc_818:
		mov	tone, al
		cbw
		mov	PaletteTone, ax
		call	palette_show

loc_822:
		call	grcg_setcolor pascal, GC_RMW, 0
		call	grcg_byteboxfill_x pascal, 12, 100, 67, 299
		call	sub_5B6
		call	sub_502
		call	sub_698
		call	sub_683
		call	sub_683
		mov	al, page_write
		mov	page_show, al
		out	0A4h, al
		xor	page_write, 1
		mov	al, page_write
		out	0A6h, al
		xor	di, di
		xor	si, si
		jmp	short loc_864
; ---------------------------------------------------------------------------

loc_85D:
		push	si
		call	key_sense
		or	di, ax
		inc	si

loc_864:
		cmp	si, 8
		jl	short loc_85D
		or	di, di
		jnz	short loc_873
		inc	frame
		jmp	short loc_7F6
; ---------------------------------------------------------------------------

loc_873:
		call	sub_3D0
		pop	di
		pop	si
		pop	bp
		retn
_main		endp

include libs/master.lib/text_clear.asm
include libs/master.lib/txesc.asm
include libs/master.lib/graph_400line.asm
include libs/master.lib/graph_clear.asm
include libs/master.lib/graph_hide.asm
include libs/master.lib/graph_show.asm
include libs/master.lib/graph_start.asm
include libs/master.lib/palette_show.asm
include libs/master.lib/palette_init.asm
include libs/master.lib/keybeep.asm
include libs/master.lib/key_sense.asm
include libs/master.lib/bfnt_header_read.asm
include libs/master.lib/bfnt_entry_pat.asm
include libs/master.lib/bfnt_header_analysis.asm
include libs/master.lib/bfnt_palette_set.asm
include libs/master.lib/dos_close.asm
include libs/master.lib/dos_ropen.asm
include libs/master.lib/super_entry_bfnt.asm
include libs/master.lib/super_cancel_pat.asm
include libs/master.lib/super_entry_pat.asm
include libs/master.lib/super_put_8.asm
include libs/master.lib/super_free.asm
include libs/master.lib/super_entry_at.asm
include libs/master.lib/super_wave_put.asm
include libs/master.lib/smem_wget.asm
include libs/master.lib/smem_release.asm
include libs/master.lib/memheap.asm
include libs/master.lib/mem_assign.asm
include libs/master.lib/mem_unassign.asm
include libs/master.lib/grc_setclip.asm
include libs/master.lib/grcg_hline.asm
include libs/master.lib/grcg_setcolor.asm
include libs/master.lib/grcg_pset.asm
include libs/master.lib/egc.asm
include libs/master.lib/grcg_circlefill.asm
include libs/master.lib/grcg_byteboxfill_x.asm
include libs/master.lib/random.asm
include libs/BorlandC/_abort.asm
include libs/BorlandC/atexit.asm
include libs/BorlandC/errormsg.asm
include libs/BorlandC/exit.asm
include libs/BorlandC/H_LRSH.ASM
include libs/BorlandC/ioerror.asm
include libs/BorlandC/_isatty.asm
include libs/BorlandC/lseek.asm
include libs/BorlandC/N_LXMUL.ASM
include libs/BorlandC/setupio.asm
include libs/BorlandC/brk.asm
include libs/BorlandC/nearheap.asm
include libs/BorlandC/fflush.asm
include libs/BorlandC/flushall.asm
include libs/BorlandC/fseek.asm
include libs/BorlandC/setvbuf.asm
include libs/BorlandC/_strlen.asm
include libs/BorlandC/write.asm
include libs/BorlandC/writea.asm
include libs/BorlandC/xfflush.asm

; ---------------------------------------------------------------------------
		db 0
		db    0
		db    0
include libs/BorlandC/c0[data].asm
aTOUHOU_DAT	db 'touhou.dat',0
CIRCLE_COLORS	db 4, 3, 2, 1, 0
include libs/master.lib/version[data].asm
include libs/master.lib/grp[data].asm
include libs/master.lib/pal[data].asm
include libs/master.lib/bfnt_id[data].asm
include libs/master.lib/dos_ropen[data].asm
include libs/master.lib/super_entry_bfnt[data].asm
include libs/master.lib/superpa[data].asm
include libs/master.lib/mem[data].asm
include libs/master.lib/clip[data].asm
include libs/master.lib/edges[data].asm
include libs/master.lib/sin8[data].asm
include libs/master.lib/sin7[data].asm
include libs/master.lib/rand[data].asm
include libs/BorlandC/_abort[data].asm
include libs/BorlandC/atexit[data].asm
include libs/BorlandC/exit[data].asm
include libs/BorlandC/files[data].asm
__heaplen	dw 0
include libs/BorlandC/ioerror[data].asm
include libs/BorlandC/stklen[data].asm
include libs/BorlandC/nearheap[data].asm
include libs/BorlandC/setvbuf[data].asm
include libs/BorlandC/sysnerr[data].asm

InitStart	label byte
include libs/BorlandC/setupio[initdata].asm
InitEnd	label byte

ExitStart	label byte
ExitEnd	label byte

bdata@	label byte
; TODO: Missing clip[bss].asm (8 bytes) somewhere in there...
page_write	db ?
page_show	db ?
tone	db ?
logo_num	db ?
wave_len	db ?
wave_phase	db ?
wave_amp	dw ?
circle_pos	Point CIRCLE_COUNT dup(<?>)
star_pos	Point STAR_COUNT dup(<?>)
frame		dw ?
circle_speed_x	dw CIRCLE_COUNT dup(?)
circle_speed_y	dw CIRCLE_COUNT dup(?)
star_angle	db ?
star_speed	db STAR_COUNT dup(?)
		db    ?	;
include libs/master.lib/pal[bss].asm
include libs/master.lib/superpa[bss].asm
include libs/master.lib/super_wave_put[bss].asm
include libs/master.lib/mem[bss].asm
		dd ?
		dd ?
		dd ?
		dd ?
include libs/BorlandC/atexit[bss].asm
edata@	label byte

_TEXT		ends


		end startx
