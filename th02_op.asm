;
; +-------------------------------------------------------------------------+
; |   This file has been generated by The Interactive Disassembler (IDA)    |
; |        Copyright (c) 2009 by Hex-Rays, <support@hex-rays.com>           |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	9FB2839DB50F38119D0B98D4FB70CD0E

; File Name   :	th02/OP.EXE
; Format      :	MS-DOS executable (EXE)
; Base Address:	0h Range: 0h-F9F0h Loaded length: E8F8h
; Entry	Point :	0:0
; OS type	  :  MS	DOS
; Application type:  Executable	16bit

		.286 ; Force the .model directive to create 16-bit default segments...
		.model large op_02_TEXT
		__LARGE__ equ 1
		.386 ; ... then switch to what we actually need.
		; And yes, we can't move this to an include file for some reason.

include ReC98.inc
include th02/th02.asm
include th02/music/music.inc

	extern F_LMOD@:proc
	extern LDIV@:proc
	extern LXMUL@:proc
	extern LXRSH@:proc
	extern SCOPY@:proc
	extern __mbcjmstojis:proc
	extern __mbctype:byte
	extern _execl:proc
	extern _memcpy:proc

; ===========================================================================

; Segment type:	Pure code
_TEXT		segment	word public 'CODE' use16
		assume cs:_TEXT
		assume es:nothing, ds:_DATA, fs:nothing, gs:nothing

include libs/master.lib/bfnt_entry_pat.asm
include libs/master.lib/bfnt_extend_header_skip.asm
include libs/master.lib/bfnt_header_read.asm
include libs/master.lib/bfnt_header_analysis.asm
include libs/master.lib/bcloser.asm
include libs/master.lib/bfill.asm
include libs/master.lib/bfnt_palette_set.asm
include libs/master.lib/bgetc.asm
include libs/master.lib/palette_black_in.asm
include libs/master.lib/palette_black_out.asm
include libs/master.lib/bopenr.asm
include libs/master.lib/bread.asm
include libs/master.lib/bseek.asm
include libs/master.lib/bseek_.asm
include libs/master.lib/dos_axdx.asm
include libs/master.lib/dos_setvect.asm
include libs/master.lib/egc.asm
include libs/master.lib/file_close.asm
include libs/master.lib/file_create.asm
include libs/master.lib/file_exist.asm
include libs/master.lib/file_read.asm
include libs/master.lib/file_ropen.asm
include libs/master.lib/file_seek.asm
include libs/master.lib/file_write.asm
include libs/master.lib/dos_close.asm
include libs/master.lib/dos_ropen.asm
include libs/master.lib/grcg_boxfill.asm
include libs/master.lib/grc_setclip.asm
include libs/master.lib/grcg_fill.asm
include libs/master.lib/grcg_hline.asm
include libs/master.lib/grcg_polygon_c.asm
include libs/master.lib/grcg_round_boxfill.asm
include libs/master.lib/grcg_setcolor.asm
include libs/master.lib/gaiji_backup.asm
include libs/master.lib/gaiji_entry_bfnt.asm
include libs/master.lib/gaiji_putca.asm
include libs/master.lib/gaiji_putsa.asm
include libs/master.lib/gaiji_read.asm
include libs/master.lib/gaiji_write.asm
include libs/master.lib/graph_400line.asm
include libs/master.lib/graph_clear.asm
include libs/master.lib/graph_copy_page.asm
include libs/master.lib/graph_extmode.asm
include libs/master.lib/graph_gaiji_putc.asm
include libs/master.lib/graph_gaiji_puts.asm
include libs/master.lib/graph_pi_free.asm
include libs/master.lib/graph_pi_load_pack.asm
include libs/master.lib/graph_pack_put_8.asm
include libs/master.lib/graph_show.asm
include libs/master.lib/graph_start.asm
include libs/master.lib/keybeep.asm
include libs/master.lib/draw_trapezoid.asm
include libs/master.lib/make_linework.asm
include libs/master.lib/palette_init.asm
include libs/master.lib/palette_show.asm
include libs/master.lib/pfclose.asm
include libs/master.lib/pfgetc.asm
include libs/master.lib/pfread.asm
include libs/master.lib/pfrewind.asm
include libs/master.lib/pfseek.asm
include libs/master.lib/random.asm
include libs/master.lib/palette_entry_rgb.asm
include libs/master.lib/rottbl.asm
include libs/master.lib/smem_release.asm
include libs/master.lib/smem_wget.asm
include libs/master.lib/text_clear.asm
include libs/master.lib/txesc.asm
include libs/master.lib/text_fillca.asm
include libs/master.lib/text_putca.asm
include libs/master.lib/text_putsa.asm
include libs/master.lib/vsync.asm
include libs/master.lib/vsync_wait.asm
include libs/master.lib/palette_white_in.asm
include libs/master.lib/hmem_lallocate.asm
include libs/master.lib/mem_assign_dos.asm
include libs/master.lib/mem_assign.asm
include libs/master.lib/memheap.asm
include libs/master.lib/mem_unassign.asm
include libs/master.lib/super_free.asm
include libs/master.lib/super_entry_pat.asm
include libs/master.lib/super_entry_at.asm
include libs/master.lib/super_entry_bfnt.asm
include libs/master.lib/super_cancel_pat.asm
include libs/master.lib/super_put_rect.asm
include libs/master.lib/super_put.asm
include libs/master.lib/pfint21.asm
		db 0
include th02/formats/pfopen.asm
include libs/master.lib/pf_str_ieq.asm
_TEXT		ends

; ===========================================================================

; Segment type:	Pure code
op_01_TEXT	segment	byte public 'CODE' use16
		assume cs:op_01_TEXT
		assume es:nothing, ss:nothing, ds:_DATA, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_9BF0	proc far

var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= byte ptr -8
var_7		= byte ptr -7
var_6		= byte ptr -6
var_5		= byte ptr -5
var_4		= byte ptr -4
var_3		= word ptr -3
var_1		= byte ptr -1

		enter	0Ch, 0
		mov	[bp+var_A], ds
		mov	[bp+var_C], 163h
		push	[bp+var_A]
		push	[bp+var_C]
		call	file_exist
		or	ax, ax
		jnz	short loc_9C0E
		jmp	loc_9C9D
; ---------------------------------------------------------------------------

loc_9C0E:
		push	[bp+var_A]
		push	[bp+var_C]
		call	file_ropen
		push	ss
		lea	ax, [bp+var_8]
		push	ax
		push	8
		call	file_read
		mov	al, [bp+var_8]
		mov	_rank, al
		mov	al, [bp+var_7]
		mov	_snd_bgm_mode, al
		mov	al, [bp+var_6]
		mov	byte_F3E2, al
		mov	al, [bp+var_5]
		mov	byte_F3E1, al
		mov	ax, [bp+var_3]
		mov	word_E900, ax
		cmp	word_E900, 0
		jz	short loc_9C9D
		mov	ax, word_E900
		mov	word ptr _mikoconfig+2, ax
		mov	word ptr _mikoconfig, 0
		les	bx, _mikoconfig
		mov	al, [bp+var_4]
		mov	es:[bx+mikoconfig_t.perf], al
		mov	al, [bp+var_1]
		mov	es:[bx+mikoconfig_t.debug_flag], al
		call	file_close
		cmp	_snd_bgm_mode, SND_BGM_OFF
		jnz	short loc_9C80
		mov	_snd_fm_possible, 0
		mov	_snd_active, 0
		jmp	short loc_9C99
; ---------------------------------------------------------------------------

loc_9C80:
		cmp	_snd_bgm_mode, SND_BGM_FM
		jnz	short loc_9C8E
		mov	_snd_midi_active, 0
		jmp	short loc_9C94
; ---------------------------------------------------------------------------

loc_9C8E:
		mov	al, _snd_midi_possible
		mov	_snd_midi_active, al

loc_9C94:
		call	_snd_determine_mode

loc_9C99:
		xor	ax, ax
		leave
		retf
; ---------------------------------------------------------------------------

loc_9C9D:
		mov	ax, 1
		leave
		retf
sub_9BF0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_9CA2	proc far

var_C		= byte ptr -0Ch
var_B		= byte ptr -0Bh
var_A		= byte ptr -0Ah
var_9		= byte ptr -9
var_8		= byte ptr -8
var_5		= byte ptr -5
var_4		= word ptr -4
var_2		= word ptr -2

		enter	0Ch, 0
		mov	[bp+var_2], ds
		mov	[bp+var_4], 163h
		mov	[bp+var_5], 0
		mov	al, _rank
		mov	[bp+var_C], al
		mov	al, _snd_bgm_mode
		mov	[bp+var_B], al
		mov	al, byte_F3E2
		mov	[bp+var_A], al
		mov	al, byte_F3E1
		mov	[bp+var_9], al
		les	bx, _mikoconfig
		mov	al, es:[bx+mikoconfig_t.perf]
		mov	[bp+var_8], al
		push	[bp+var_2]
		push	[bp+var_4]
		call	file_create
		push	ss
		lea	ax, [bp+var_C]
		push	ax
		push	5
		call	file_write
		push	ds
		push	offset word_E900
		push	2
		call	file_write
		push	ss
		lea	ax, [bp+var_5]
		push	ax
		push	1
		call	file_write
		call	file_close
		leave
		retf
sub_9CA2	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_9D0A	proc far
		push	bp
		mov	bp, sp
		call	text_clear
		call	text_fillca pascal, ' ', TX_BLACK + TX_REVERSE
		pop	bp
		retf
sub_9D0A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_9D1D	proc near

arg_0		= byte ptr  4
arg_2		= word ptr  6

		push	bp
		mov	bp, sp
		call	_pi_slot_load stdcall, 0, [bp+arg_2], ds
		mov	dx, 0A6h ; '¦'
		mov	al, [bp+arg_0]
		out	dx, al
		call	_pi_slot_palette_apply stdcall, 0
		call	_pi_slot_put stdcall, 0, 0, 0
		add	sp, 0Eh
		freePISlot	0
		pop	bp
		retn	4
sub_9D1D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_9D5C	proc far

var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2

		enter	6, 0
		push	si
		mov	dx, word ptr gZUN+2
		mov	ax, word ptr gZUN
		mov	[bp+var_4], dx
		mov	[bp+var_6], ax
		call	sub_9D0A
		call	_snd_load stdcall, offset aHuuma_efc, ds, SND_LOAD_SE
		push	177h
		push	1
		call	sub_9D1D
		push	17Eh
		push	0
		call	sub_9D1D
		call	_pi_slot_load stdcall, 0, offset aOpa_pi, ds
		call	_pi_slot_load stdcall, 1, offset aOpb_pi, ds
		call	_pi_slot_load stdcall, 2, offset aOpc_pi, ds
		add	sp, 18h
		mov	PaletteTone, 0C8h	; 'È'
		call	far ptr	palette_show
		mov	[bp+var_2], 0
		jmp	short loc_9E0F
; ---------------------------------------------------------------------------

loc_9DC4:
		xor	si, si
		jmp	short loc_9DED
; ---------------------------------------------------------------------------

loc_9DC8:
		mov	ax, 39
		sub	ax, [bp+var_2]
		call	text_putca pascal, ax, si, ' ', TX_WHITE
		mov	ax, [bp+var_2]
		add	ax, 40
		call	text_putca pascal, ax, si, ' ', TX_WHITE
		inc	si

loc_9DED:
		cmp	si, 25
		jl	short loc_9DC8
		mov	ax, [bp+var_2]
		add	ax, ax
		mov	dx, 0C8h ; 'È'
		sub	dx, ax
		mov	PaletteTone, dx
		call	far ptr	palette_show
		push	1
		call	frame_delay
		inc	[bp+var_2]

loc_9E0F:
		cmp	[bp+var_2], 28h	; '('
		jl	short loc_9DC4
		mov	[bp+var_2], 28h	; '('
		jmp	short loc_9E39
; ---------------------------------------------------------------------------

loc_9E1C:
		mov	ax, [bp+var_2]
		add	ax, ax
		mov	dx, 0C8h ; 'È'
		sub	dx, ax
		mov	PaletteTone, dx
		call	far ptr	palette_show
		push	1
		call	frame_delay
		inc	[bp+var_2]

loc_9E39:
		cmp	[bp+var_2], 32h	; '2'
		jl	short loc_9E1C
		mov	PaletteTone, 64h ; 'd'
		call	far ptr	palette_show
		les	bx, _mikoconfig
		cmp	es:[bx+mikoconfig_t.demo_num], 0
		jnz	short loc_9E97
		mov	[bp+var_2], 0
		cmp	_snd_midi_possible, 0
		jz	short loc_9E7D
		mov	al, _snd_midi_active
		mov	ah, 0
		mov	[bp+var_2], ax
		mov	_snd_midi_active, 1
		call	_snd_load c, offset aOp_m, ds, SND_LOAD_SONG

loc_9E7D:
		mov	_snd_midi_active, 0
		call	_snd_load c, offset aOp_m, ds, SND_LOAD_SONG
		mov	al, byte ptr [bp+var_2]
		mov	_snd_midi_active, al

loc_9E97:
		push	12h
		call	frame_delay
		call	_title_flash
		mov	PaletteTone, 0C8h	; 'È'
		call	far ptr	palette_show
		mov	dx, 0A6h ; '¦'
		mov	al, 1
		out	dx, al
		push	224h
		push	180h
		push	0DFh ; 'ß'
		push	0
		call	graph_gaiji_putc
		push	234h
		push	180h
		push	10h
		push	ss
		lea	ax, [bp+var_6]
		push	ax
		push	0
		call	graph_gaiji_puts
		push	220h
		push	17Ch
		push	0DFh ; 'ß'
		push	6
		call	graph_gaiji_putc
		push	230h
		push	17Ch
		push	10h
		push	ss
		lea	ax, [bp+var_6]
		push	ax
		push	6
		call	graph_gaiji_puts
		push	0
		call	graph_copy_page
		les	bx, _mikoconfig
		cmp	es:[bx+mikoconfig_t.demo_num], 0
		jnz	short loc_9F16
		kajacall	KAJA_SONG_PLAY
		pop	cx

loc_9F16:
		les	bx, _mikoconfig
		mov	es:[bx+mikoconfig_t.demo_num], 0
		push	ds
		push	offset aOp_rgb	; "op.rgb"
		call	palette_entry_rgb
		call	far ptr	palette_show
		push	6
		call	palette_white_in
		pop	si
		leave
		retf
sub_9D5C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_9F37	proc near
		push	bp
		mov	bp, sp
		call	_snd_se_reset
		call	_snd_se_play stdcall, 13
		pop	cx
		call	_snd_se_update
		push	14h
		call	frame_delay
		les	bx, _mikoconfig
		mov	al, byte_F3E1
		mov	es:[bx+mikoconfig_t.rem_lives], al
		mov	al, byte_F3E2
		mov	es:[bx+mikoconfig_t.rem_bombs], al
		mov	al, byte_F3E1
		mov	es:[bx+mikoconfig_t.start_lives], al
		mov	al, byte_F3E2
		mov	es:[bx+mikoconfig_t.start_bombs], al
		mov	al, _snd_bgm_mode
		mov	es:[bx+mikoconfig_t.bgm_mode], al
		mov	es:[bx+mikoconfig_t.start_power], 0
		mov	word ptr es:[bx+mikoconfig_t.score+2], 0
		mov	word ptr es:[bx+mikoconfig_t.score], 0
		mov	es:[bx+mikoconfig_t.continues_used], 0
		mov	es:[bx+mikoconfig_t.unused_3], 0
		mov	es:[bx+mikoconfig_t.unused_1], 0
		mov	es:[bx+mikoconfig_t.demo_num], 0
		mov	word ptr es:[bx+mikoconfig_t.score_highest+2], 0
		mov	word ptr es:[bx+mikoconfig_t.score_highest], 0
		pop	bp
		retn
sub_9F37	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_9FAF	proc far
		push	bp
		mov	bp, sp
		call	sub_9F37
		les	bx, _mikoconfig
		mov	al, _rank
		mov	es:[bx+mikoconfig_t.rank], al
		mov	es:[bx+mikoconfig_t.stage], 0
		call	sub_9CA2
		call	_pi_slot_load stdcall, 0, offset aTs1_pi, ds
		call	text_clear
		call	shottype_menu
		kajacall	KAJA_SONG_FADE, 15
		add	sp, 8
		call	gaiji_restore
		call	super_free
		call	sub_B019
		les	bx, _mikoconfig
		cmp	es:[bx+mikoconfig_t.debug_flag], 0
		jz	short loc_A011
		push	0
		push	0
		push	ds
		push	offset aSelect	; "select"
		push	ds
		push	offset aSelect	; "select"
		jmp	short loc_A01D
; ---------------------------------------------------------------------------

loc_A011:
		push	0
		push	0
		push	ds
		push	offset path	; "main"
		push	ds
		push	offset path	; "main"

loc_A01D:
		call	_execl
		add	sp, 0Ch
		pop	bp
		retf
sub_9FAF	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_A027	proc far
		push	bp
		mov	bp, sp
		les	bx, _mikoconfig
		mov	es:[bx+mikoconfig_t.rem_lives], 2
		mov	es:[bx+mikoconfig_t.rem_bombs], 3
		mov	es:[bx+mikoconfig_t.start_lives], 2
		mov	es:[bx+mikoconfig_t.start_bombs], 3
		mov	al, _snd_bgm_mode
		mov	es:[bx+mikoconfig_t.bgm_mode], al
		mov	es:[bx+mikoconfig_t.rank], 1
		mov	es:[bx+mikoconfig_t.continues_used], 0
		mov	es:[bx+mikoconfig_t.unused_3], 0
		mov	al, byte_E8FE
		mov	es:[bx+27h], al
		mov	es:[bx+mikoconfig_t.shottype], 0
		call	sub_9CA2
		call	text_clear
		freePISlot	0
		freePISlot	1
		freePISlot	2
		call	gaiji_restore
		call	super_free
		call	sub_B019
		push	0
		push	0
		push	ds
		push	offset path	; "main"
		push	ds
		push	offset path	; "main"
		call	_execl
		add	sp, 0Ch
		pop	bp
		retf
sub_A027	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_A0C6	proc far
		push	bp
		mov	bp, sp
		call	sub_9F37
		les	bx, _mikoconfig
		mov	es:[bx+mikoconfig_t.rank], 4
		mov	es:[bx+mikoconfig_t.stage], 5
		mov	es:[bx+mikoconfig_t.rem_lives], 2
		mov	es:[bx+mikoconfig_t.rem_bombs], 1
		mov	es:[bx+mikoconfig_t.start_lives], 2
		mov	es:[bx+mikoconfig_t.start_bombs], 1
		call	sub_9CA2
		call	_pi_slot_load stdcall, 0, offset aTs1_pi, ds
		call	text_clear
		call	shottype_menu
		kajacall	KAJA_SONG_FADE, 15
		add	sp, 8
		call	gaiji_restore
		call	super_free
		call	sub_B019
		les	bx, _mikoconfig
		cmp	es:[bx+mikoconfig_t.debug_flag], 0
		jz	short loc_A13A
		push	0
		push	0
		push	ds
		push	offset aSelect	; "select"
		push	ds
		push	offset aSelect	; "select"
		jmp	short loc_A146
; ---------------------------------------------------------------------------

loc_A13A:
		push	0
		push	0
		push	ds
		push	offset path	; "main"
		push	ds
		push	offset path	; "main"

loc_A146:
		call	_execl
		add	sp, 0Ch
		pop	bp
		retf
sub_A0C6	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_A150	proc near
		push	bp
		mov	bp, sp
		push	11Ch
		push	104h
		push	10h
		push	ds
		push	offset gSTART
		push	0
		call	graph_gaiji_puts
		push	0ECh
		push	114h
		push	10h
		push	ds
		push	offset gEXTRA_START
		push	0
		call	graph_gaiji_puts
		push	10Ch
		push	124h
		push	10h
		push	ds
		push	offset gHISCORE
		push	0
		call	graph_gaiji_puts
		push	114h
		push	134h
		push	10h
		push	ds
		push	offset gOPTION
		push	0
		call	graph_gaiji_puts
		push	0F4h
		push	144h
		push	10h
		push	ds
		push	offset gMUSIC_MODE
		push	0
		call	graph_gaiji_puts
		push	124h
		push	154h
		push	10h
		push	ds
		push	offset gQUIT
		push	0
		call	graph_gaiji_puts
		push	0D4h
		push	174h
		push	10h
		push	ds
		push	offset gRANK
		push	0
		call	graph_gaiji_puts
		push	134h
		push	174h
		push	10h
		push	ds
		mov	al, _rank
		cbw
		shl	ax, 3
		add	ax, offset gcEASY
		push	ax
		push	0
		call	graph_gaiji_puts
		pop	bp
		retn
sub_A150	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_A1F5	proc near

arg_0		= word ptr  4
arg_2		= word ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	si, [bp+arg_2]
		mov	di, [bp+arg_0]
		or	si, si
		jnz	short loc_A20E
		push	35
		push	16
		push	ds
		push	offset gSTART
		jmp	short loc_A248
; ---------------------------------------------------------------------------

loc_A20E:
		cmp	si, 2
		jnz	short loc_A21D
		push	33
		push	18
		push	ds
		push	offset gHISCORE
		jmp	short loc_A248
; ---------------------------------------------------------------------------

loc_A21D:
		cmp	si, 3
		jnz	short loc_A22C
		push	34
		push	19
		push	ds
		push	offset gOPTION
		jmp	short loc_A248
; ---------------------------------------------------------------------------

loc_A22C:
		cmp	si, 4
		jnz	short loc_A23B
		push	30
		push	20
		push	ds
		push	offset gMUSIC_MODE
		jmp	short loc_A248
; ---------------------------------------------------------------------------

loc_A23B:
		cmp	si, 5
		jnz	short loc_A24E
		push	36
		push	21
		push	ds
		push	offset gQUIT

loc_A248:
		push	di
		call	gaiji_putsa

loc_A24E:
		cmp	si, 1
		jnz	short loc_A274
		cmp	_extra_unlocked, 0
		jz	short loc_A265
		push	29
		push	17
		push	ds
		push	offset gEXTRA_START
		push	di
		jmp	short loc_A26F
; ---------------------------------------------------------------------------

loc_A265:
		push	29
		push	17
		push	ds
		push	offset gEXTRA_START
		push	TX_BLUE

loc_A26F:
		call	gaiji_putsa

loc_A274:
		call	gaiji_putsa pascal, 26, 23, ds, offset gRANK, TX_GREEN
		push	38
		push	23
		push	ds
		mov	al, _rank
		cbw
		shl	ax, 3
		add	ax, offset gcEASY
		push	ax
		push	TX_GREEN
		call	gaiji_putsa
		pop	di
		pop	si
		pop	bp
		retn	4
sub_A1F5	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_A2A2	proc near

arg_0		= byte ptr  4
arg_2		= byte ptr  6

		push	bp
		mov	bp, sp
		mov	al, byte_D6C0
		cbw
		call	fp_E902 pascal, ax, TX_YELLOW
		mov	al, [bp+arg_0]
		add	byte_D6C0, al
		cmp	byte_D6C1, 0
		jnz	short loc_A2D1
		cmp	_extra_unlocked, 0
		jnz	short loc_A2D1
		cmp	byte_D6C0, 1
		jnz	short loc_A2D1
		add	byte_D6C0, al

loc_A2D1:
		cmp	byte_D6C0, 0
		jge	short loc_A2DE
		mov	al, [bp+arg_2]
		mov	byte_D6C0, al

loc_A2DE:
		mov	al, byte_D6C0
		cmp	al, [bp+arg_2]
		jle	short loc_A2EB
		mov	byte_D6C0, 0

loc_A2EB:
		mov	al, byte_D6C0
		cbw
		push	ax
		push	0E1h
		call	fp_E902
		pop	bp
		retn	4
sub_A2A2	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_A2FB	proc far
		push	bp
		mov	bp, sp
		push	si
		cmp	byte_D790, 0
		jnz	short loc_A356
		mov	byte_E8F8, 0
		mov	byte_D790, 1
		call	text_clear
		mov	dx, 0A4h ; '¤'
		mov	al, 1
		out	dx, al
		push	0
		call	graph_copy_page
		call	sub_A150
		mov	dx, 0A4h ; '¤'
		mov	al, 0
		out	dx, al
		mov	word_E8FC, 0
		xor	si, si
		jmp	short loc_A34B
; ---------------------------------------------------------------------------

loc_A335:
		push	si
		mov	al, byte_D6C0
		cbw
		cmp	ax, si
		jnz	short loc_A343
		mov	ax, TX_WHITE
		jmp	short loc_A346
; ---------------------------------------------------------------------------

loc_A343:
		mov	ax, TX_YELLOW

loc_A346:
		push	ax
		call	sub_A1F5
		inc	si

loc_A34B:
		cmp	si, 6
		jl	short loc_A335
		mov	fp_E902, offset sub_A1F5

loc_A356:
		cmp	_input, 0
		jnz	short loc_A362
		mov	byte_E8F8, 1

loc_A362:
		cmp	byte_E8F8, 0
		jnz	short loc_A36C
		jmp	loc_A466
; ---------------------------------------------------------------------------

loc_A36C:
		test	byte ptr _input, INPUT_UP
		jz	short loc_A37A
		push	5
		push	0FFFFh
		call	sub_A2A2

loc_A37A:
		test	byte ptr _input, INPUT_DOWN
		jz	short loc_A388
		push	5
		push	1
		call	sub_A2A2

loc_A388:
		test	byte ptr _input, INPUT_SHOT
		jnz	short loc_A399
		test	byte ptr _input, INPUT_OK
		jnz	short loc_A399
		jmp	loc_A448
; ---------------------------------------------------------------------------

loc_A399:
		mov	al, byte_D6C0
		cbw
		mov	bx, ax
		cmp	bx, 5
		jbe	short loc_A3A7
		jmp	loc_A448
; ---------------------------------------------------------------------------

loc_A3A7:
		add	bx, bx
		jmp	cs:off_A475[bx]

loc_A3AE:
		call	sub_9FAF
		jmp	loc_A448
; ---------------------------------------------------------------------------

loc_A3B5:
		call	sub_A0C6
		jmp	loc_A448
; ---------------------------------------------------------------------------

loc_A3BC:
		mov	_score_duration, 7D0h
		call	text_clear
		call	score_menu
		mov	dx, 0A6h ; '¦'
		mov	al, 1
		out	dx, al
		mov	dx, 0A4h ; '¤'
		mov	al, 0
		out	dx, al
		call	_pi_slot_load stdcall, 0, offset aOp2_pi, ds
		call	_pi_slot_palette_apply stdcall, 0
		call	_pi_slot_put stdcall, 0, 0, 0
		add	sp, 0Eh
		freePISlot	0
		push	ds
		push	offset aOp_rgb	; "op.rgb"
		call	palette_entry_rgb
		call	far ptr	palette_show
		push	0
		call	graph_copy_page
		mov	dx, 0A6h ; '¦'
		mov	al, 0
		out	dx, al

loc_A424:
		mov	byte_D790, 0
		jmp	short loc_A448
; ---------------------------------------------------------------------------

loc_A42B:
		mov	byte_D6C0, 0
		mov	byte_D6C1, 1
		jmp	short loc_A424
; ---------------------------------------------------------------------------

loc_A437:
		call	text_clear
		call	musicroom
		jmp	short loc_A424
; ---------------------------------------------------------------------------

loc_A443:
		mov	byte_D6C2, 1

loc_A448:
		test	byte ptr _input, INPUT_CANCEL
		jz	short loc_A454
		mov	byte_D6C2, 1

loc_A454:
		cmp	_input, 0
		jz	short loc_A466
		mov	byte_E8F8, 0
		mov	word_E8FC, 0

loc_A466:
		cmp	word_E8FC, 280h
		jbe	short loc_A472
		call	sub_A027

loc_A472:
		pop	si
		pop	bp
		retf
sub_A2FB	endp

; ---------------------------------------------------------------------------
off_A475	dw offset loc_A3AE
		dw offset loc_A3B5
		dw offset loc_A3BC
		dw offset loc_A42B
		dw offset loc_A437
		dw offset loc_A443

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_A481	proc near
		push	bp
		mov	bp, sp
		push	0C4h ; 'Ä'
		push	104h
		push	10h
		push	ds
		push	offset gRANK
		push	0
		call	graph_gaiji_puts
		push	0C4h ; 'Ä'
		push	114h
		push	10h
		push	ds
		push	offset gMUSIC
		push	0
		call	graph_gaiji_puts
		push	0C4h ; 'Ä'
		push	124h
		push	10h
		push	ds
		push	offset gPLAYER
		push	0
		call	graph_gaiji_puts
		push	0C4h ; 'Ä'
		push	134h
		push	10h
		push	ds
		push	offset gBOMB
		push	0
		call	graph_gaiji_puts
		push	word ptr PERF_TITLE+2
		push	word ptr PERF_TITLE
		push	0
		push	144h
		push	0C4h ; 'Ä'
		call	_graph_putsa_fx
		add	sp, 0Ah
		push	11Ch
		push	154h
		push	10h
		push	ds
		push	offset gRESET
		push	0
		call	graph_gaiji_puts
		push	124h
		push	174h
		push	10h
		push	ds
		push	offset gQUIT
		push	0
		call	graph_gaiji_puts
		pop	bp
		retn
sub_A481	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_A510	proc near

arg_0		= word ptr  4
arg_2		= word ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	di, [bp+arg_2]
		mov	si, [bp+arg_0]
		or	di, di
		jnz	short loc_A568
		push	24
		push	16
		push	ds
		push	offset gRANK
		push	si
		call	gaiji_putsa
		push	42
		push	16
		push	ds
		mov	al, _rank
		cbw
		shl	ax, 3
		add	ax, offset gcEASY
		push	ax
		push	si
		call	gaiji_putsa
		push	150h
		push	104h
		push	80h
		push	10h
		call	graph_copy_region_from_1_to_0
		push	154h
		push	104h
		push	10h
		push	ds
		mov	al, _rank
		cbw
		shl	ax, 3
		add	ax, offset gcEASY
		jmp	short loc_A5B3
; ---------------------------------------------------------------------------

loc_A568:
		cmp	di, 1
		jnz	short loc_A5BE
		call	gaiji_putsa pascal, 24, 17, ds, offset gMUSIC, si
		push	47
		push	17
		push	ds
		mov	al, _snd_bgm_mode
		cbw
		imul	ax, 5
		add	ax, offset gOFF
		push	ax
		push	si
		call	gaiji_putsa
		push	178h
		push	114h
		push	40h
		push	10h
		call	graph_copy_region_from_1_to_0
		push	17Ch
		push	114h
		push	10h
		push	ds
		mov	al, _snd_bgm_mode
		cbw
		imul	ax, 5
		add	ax, 145h

loc_A5B3:
		push	ax
		push	0
		call	graph_gaiji_puts
		jmp	loc_A6E9
; ---------------------------------------------------------------------------

loc_A5BE:
		cmp	di, 2
		jnz	short loc_A60A
		call	gaiji_putsa pascal, 24, 18, ds, offset gPLAYER, si
		push	49
		push	18
		mov	al, byte_F3E1
		cbw
		add	ax, 0A1h ; '¡'
		push	ax
		push	si
		call	gaiji_putca
		push	188h
		push	124h
		push	20h ; ' '
		push	10h
		call	graph_copy_region_from_1_to_0
		push	18Ch
		push	124h
		mov	al, byte_F3E1
		cbw
		add	ax, 0A1h ; '¡'
		push	ax
		push	0
		call	graph_gaiji_putc
		jmp	loc_A6E9
; ---------------------------------------------------------------------------

loc_A60A:
		cmp	di, 3
		jnz	short loc_A656
		call	gaiji_putsa pascal, 24, 19, ds, offset gBOMB, si
		push	49
		push	19
		mov	al, byte_F3E2
		cbw
		add	ax, 0A0h
		push	ax
		push	si
		call	gaiji_putca
		push	188h
		push	134h
		push	20h ; ' '
		push	10h
		call	graph_copy_region_from_1_to_0
		push	18Ch
		push	134h
		mov	al, byte_F3E2
		cbw
		add	ax, 0A0h
		push	ax
		push	0
		call	graph_gaiji_putc
		jmp	loc_A6E9
; ---------------------------------------------------------------------------

loc_A656:
		cmp	di, 4
		jnz	short loc_A6C7
		call	text_putsa pascal, 24, 20, word ptr PERF_TITLE+2, word ptr PERF_TITLE, si
		push	45
		push	20
		les	bx, _mikoconfig
		mov	al, es:[bx+mikoconfig_t.perf]
		mov	ah, 0
		shl	ax, 2
		mov	bx, ax
		push	word ptr (PERF_OPTION+2)[bx]
		push	word ptr PERF_OPTION[bx]
		push	si
		call	text_putsa
		push	168h
		push	144h
		push	80h
		push	10h
		call	graph_copy_region_from_1_to_0
		les	bx, _mikoconfig
		mov	al, es:[bx+mikoconfig_t.perf]
		mov	ah, 0
		shl	ax, 2
		mov	bx, ax
		push	word ptr (PERF_OPTION+2)[bx]
		push	word ptr PERF_OPTION[bx]
		push	0
		push	144h
		push	16Ch
		call	_graph_putsa_fx
		add	sp, 0Ah
		jmp	short loc_A6E9
; ---------------------------------------------------------------------------

loc_A6C7:
		cmp	di, 5
		jnz	short loc_A6D6
		push	35
		push	21
		push	ds
		push	offset gRESET
		jmp	short loc_A6E3
; ---------------------------------------------------------------------------

loc_A6D6:
		cmp	di, 6
		jnz	short loc_A6E9
		push	36
		push	23
		push	ds
		push	offset gQUIT

loc_A6E3:
		push	si
		call	gaiji_putsa

loc_A6E9:
		pop	di
		pop	si
		pop	bp
		retn	4
sub_A510	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_A6EF	proc near
		push	bp
		mov	bp, sp
		cmp	_snd_bgm_mode, SND_BGM_OFF
		jnz	short loc_A70E
		mov	_snd_fm_possible, 0
		kajacall	KAJA_SONG_STOP
		pop	cx
		mov	_snd_active, 0
		pop	bp
		retn
; ---------------------------------------------------------------------------

loc_A70E:
		cmp	_snd_bgm_mode, SND_BGM_FM
		jnz	short loc_A725
		kajacall	KAJA_SONG_STOP
		pop	cx
		mov	_snd_midi_active, 0
		jmp	short loc_A73B
; ---------------------------------------------------------------------------

loc_A725:
		cmp	_snd_bgm_mode, SND_BGM_MIDI
		jnz	short loc_A748
		kajacall	KAJA_SONG_STOP
		pop	cx
		mov	al, _snd_midi_possible
		mov	_snd_midi_active, al

loc_A73B:
		call	_snd_determine_mode
		kajacall	KAJA_SONG_PLAY
		pop	cx

loc_A748:
		pop	bp
		retn
sub_A6EF	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_A74A	proc far
		push	bp
		mov	bp, sp
		push	si
		cmp	byte_D792, 0
		jnz	short loc_A79F
		mov	byte_D791, 0
		mov	byte_D792, 1
		call	text_clear
		mov	dx, 0A4h ; '¤'
		mov	al, 1
		out	dx, al
		push	0
		call	graph_copy_page
		call	sub_A481
		mov	dx, 0A4h ; '¤'
		mov	al, 0
		out	dx, al
		xor	si, si
		jmp	short loc_A794
; ---------------------------------------------------------------------------

loc_A77E:
		push	si
		mov	al, byte_D6C0
		cbw
		cmp	ax, si
		jnz	short loc_A78C
		mov	ax, TX_WHITE
		jmp	short loc_A78F
; ---------------------------------------------------------------------------

loc_A78C:
		mov	ax, TX_YELLOW

loc_A78F:
		push	ax
		call	sub_A510
		inc	si

loc_A794:
		cmp	si, 7
		jl	short loc_A77E
		mov	fp_E902, offset sub_A510

loc_A79F:
		cmp	_input, 0
		jnz	short loc_A7AB
		mov	byte_D791, 1

loc_A7AB:
		cmp	byte_D791, 0
		jnz	short loc_A7B5
		jmp	loc_A9A1
; ---------------------------------------------------------------------------

loc_A7B5:
		test	byte ptr _input, INPUT_UP
		jz	short loc_A7C3
		push	6
		push	0FFFFh
		call	sub_A2A2

loc_A7C3:
		test	byte ptr _input, INPUT_DOWN
		jz	short loc_A7D1
		push	6
		push	1
		call	sub_A2A2

loc_A7D1:
		test	byte ptr _input, INPUT_RIGHT
		jnz	short loc_A7DB
		jmp	loc_A85C
; ---------------------------------------------------------------------------

loc_A7DB:
		mov	al, byte_D6C0
		cbw
		call	sub_A510 pascal, ax, TX_YELLOW
		mov	al, byte_D6C0
		cbw
		mov	bx, ax
		cmp	bx, 4
		ja	short loc_A851
		add	bx, bx
		jmp	cs:off_A9AF[bx]

loc_A7F8:
		inc	_rank
		cmp	_rank, 3
		jle	short loc_A851
		mov	_rank, 0
		jmp	short loc_A851
; ---------------------------------------------------------------------------

loc_A80A:
		inc	_snd_bgm_mode
		cmp	_snd_bgm_mode, SND_BGM_MIDI
		jle	short loc_A81A
		mov	_snd_bgm_mode, SND_BGM_OFF

loc_A81A:
		call	sub_A6EF
		jmp	short loc_A851
; ---------------------------------------------------------------------------

loc_A81F:
		inc	byte_F3E1
		cmp	byte_F3E1, 4
		jle	short loc_A851
		mov	byte_F3E1, 0
		jmp	short loc_A851
; ---------------------------------------------------------------------------

loc_A831:
		inc	byte_F3E2
		cmp	byte_F3E2, 3
		jle	short loc_A851
		mov	byte_F3E2, 0
		jmp	short loc_A851
; ---------------------------------------------------------------------------

loc_A843:
		les	bx, _mikoconfig
		mov	al, 1
		sub	al, es:[bx+mikoconfig_t.perf]
		mov	es:[bx+mikoconfig_t.perf], al

loc_A851:
		mov	al, byte_D6C0
		cbw
		call	sub_A510 pascal, ax, TX_WHITE

loc_A85C:
		test	byte ptr _input, INPUT_LEFT
		jnz	short loc_A866
		jmp	loc_A8E7
; ---------------------------------------------------------------------------

loc_A866:
		mov	al, byte_D6C0
		cbw
		call	sub_A510 pascal, ax, TX_YELLOW
		mov	al, byte_D6C0
		cbw
		mov	bx, ax
		cmp	bx, 4
		ja	short loc_A8DC
		add	bx, bx
		jmp	cs:off_A9A5[bx]

loc_A883:
		dec	_rank
		cmp	_rank, 0
		jge	short loc_A8DC
		mov	_rank, 3
		jmp	short loc_A8DC
; ---------------------------------------------------------------------------

loc_A895:
		dec	_snd_bgm_mode
		cmp	_snd_bgm_mode, SND_BGM_OFF
		jge	short loc_A8A5
		mov	_snd_bgm_mode, SND_BGM_MIDI

loc_A8A5:
		call	sub_A6EF
		jmp	short loc_A8DC
; ---------------------------------------------------------------------------

loc_A8AA:
		dec	byte_F3E1
		cmp	byte_F3E1, 0
		jge	short loc_A8DC
		mov	byte_F3E1, 4
		jmp	short loc_A8DC
; ---------------------------------------------------------------------------

loc_A8BC:
		dec	byte_F3E2
		cmp	byte_F3E2, 0
		jge	short loc_A8DC
		mov	byte_F3E2, 3
		jmp	short loc_A8DC
; ---------------------------------------------------------------------------

loc_A8CE:
		les	bx, _mikoconfig
		mov	al, 1
		sub	al, es:[bx+mikoconfig_t.perf]
		mov	es:[bx+mikoconfig_t.perf], al

loc_A8DC:
		mov	al, byte_D6C0
		cbw
		push	ax
		push	0E1h
		call	sub_A510

loc_A8E7:
		test	byte ptr _input, INPUT_SHOT
		jnz	short loc_A8F8
		test	byte ptr _input, INPUT_OK
		jnz	short loc_A8F8
		jmp	loc_A97F
; ---------------------------------------------------------------------------

loc_A8F8:
		mov	al, byte_D6C0
		cbw
		cmp	ax, 5
		jz	short loc_A908
		cmp	ax, 6
		jz	short loc_A970
		jmp	short loc_A97F
; ---------------------------------------------------------------------------

loc_A908:
		mov	_rank, 1
		mov	_snd_bgm_mode, SND_BGM_FM
		kajacall	KAJA_SONG_STOP
		mov	_snd_midi_active, 0
		call	_snd_determine_mode
		kajacall	KAJA_SONG_PLAY
		add	sp, 4
		mov	byte_F3E1, 2
		mov	byte_F3E2, 3
		les	bx, _mikoconfig
		mov	es:[bx+mikoconfig_t.unused_2], 1
		mov	es:[bx+mikoconfig_t.perf], 0
		call	sub_A510 pascal, 0, TX_YELLOW
		call	sub_A510 pascal, 1, TX_YELLOW
		call	sub_A510 pascal, 2, TX_YELLOW
		call	sub_A510 pascal, 3, TX_YELLOW
		call	sub_A510 pascal, 4, TX_YELLOW
		jmp	short loc_A97F
; ---------------------------------------------------------------------------

loc_A970:
		mov	byte_D6C0, 3
		mov	byte_D6C1, 0
		mov	byte_D792, 0

loc_A97F:
		test	byte ptr _input, INPUT_CANCEL
		jz	short loc_A995
		mov	byte_D6C0, 3
		mov	byte_D6C1, 0
		mov	byte_D792, 0

loc_A995:
		cmp	_input, 0
		jz	short loc_A9A1
		mov	byte_D791, 0

loc_A9A1:
		pop	si
		pop	bp
		retf
sub_A74A	endp

; ---------------------------------------------------------------------------
		db 0
off_A9A5	dw offset loc_A883
		dw offset loc_A895
		dw offset loc_A8AA
		dw offset loc_A8BC
		dw offset loc_A8CE
off_A9AF	dw offset loc_A7F8
		dw offset loc_A80A
		dw offset loc_A81F
		dw offset loc_A831
		dw offset loc_A843

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl main(int _argc, const char **_argv, const	char **_envp)
public _main
_main		proc far

var_2		= byte ptr -2
var_1		= byte ptr -1
_argc		= word ptr  6
_argv		= dword	ptr  8
_envp		= dword	ptr  0Ch

		enter	2, 0
		call	_snd_pmd_resident
		or	ax, ax
		jz	short loc_A9EE
		call	_snd_mmd_resident
		call	sub_AFB0
		or	ax, ax
		jz	short loc_A9DD
		push	3
		call	sub_AB41
		jmp	short loc_A9EE
; ---------------------------------------------------------------------------

loc_A9DD:
		call	score_cleared_load
		mov	_extra_unlocked, al
		call	sub_9BF0
		cmp	ax, 1
		jnz	short loc_A9F3

loc_A9EE:
		mov	ax, 1
		leave
		retf
; ---------------------------------------------------------------------------

loc_A9F3:
		call	gaiji_backup
		push	ds
		push	offset aMikoft_bft ; "MIKOFT.bft"
		call	gaiji_entry_bfnt
		les	bx, _mikoconfig
		cmp	es:[bx+mikoconfig_t.demo_num], 0
		jnz	short loc_AA1C
		mov	byte_E8FE, 1
		kajacall	KAJA_SONG_STOP
		pop	cx
		jmp	short loc_AA4A
; ---------------------------------------------------------------------------

loc_AA1C:
		les	bx, _mikoconfig
		mov	al, es:[bx+27h]
		inc	al
		mov	byte_E8FE, al
		cmp	byte_E8FE, 3
		jbe	short loc_AA35
		mov	byte_E8FE, 1

loc_AA35:
		mov	_score_duration, 15Eh
		call	score_menu
		mov	dx, 0A4h ; '¤'
		mov	al, 0
		out	dx, al
		mov	dx, 0A6h ; '¦'
		out	dx, al

loc_AA4A:
		mov	_input, 0
		mov	al, _snd_bgm_mode
		mov	_snd_active, al
		les	bx, _mikoconfig
		cmp	es:[bx+mikoconfig_t.demo_num], 0
		jnz	short loc_AA8F
		cmp	_snd_midi_possible, 0
		jz	short loc_AA8F
		mov	al, _snd_midi_active
		mov	[bp+var_2], al
		mov	_snd_midi_active, 1
		call	_snd_load stdcall, offset aGminit_m, ds, SND_LOAD_SONG
		kajacall	KAJA_SONG_PLAY
		add	sp, 8
		mov	al, [bp+var_2]
		mov	_snd_midi_active, al

loc_AA8F:
		call	sub_9D5C
		call	_pi_slot_load stdcall, 2, offset aTs3_pi, ds
		call	_pi_slot_load stdcall, 1, offset aTs2_pi, ds
		add	sp, 0Ch
		mov	_input, 0
		mov	word_E8FC, 0
		jmp	short loc_AAF0
; ---------------------------------------------------------------------------

loc_AABA:
		call	_input_sense
		cmp	byte_D6C1, 0
		jnz	short loc_AACC
		call	sub_A2FB
		jmp	short loc_AAD7
; ---------------------------------------------------------------------------

loc_AACC:
		cmp	byte_D6C1, 1
		jnz	short loc_AAD7
		call	sub_A74A

loc_AAD7:
		les	bx, _mikoconfig
		add	word ptr es:[bx+mikoconfig_t.frame], 1
		adc	word ptr es:[bx+mikoconfig_t.frame+2], 0
		inc	word_E8FC
		push	1
		call	frame_delay

loc_AAF0:
		cmp	byte_D6C2, 0
		jz	short loc_AABA
		les	bx, _mikoconfig
		mov	al, es:[bx+mikoconfig_t.main_retval]
		mov	[bp+var_1], al
		mov	word_E900, 0
		call	sub_9CA2
		call	text_clear
		call	graph_clear
		call	sub_AB28
		call	gaiji_restore
		mov	al, [bp-1]
		mov	ah, 0
		leave
		retf
_main		endp
		db 0

op_01_TEXT	ends

; ===========================================================================

; Segment type:	Pure code
op_02_TEXT	segment	word public 'CODE' use16
		assume cs:op_02_TEXT
		;org 8
		assume es:nothing, ss:nothing, ds:_DATA, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_AB28	proc far
		push	bp
		mov	bp, sp
		nopcall	sub_B019
		call	key_beep_on
		call	text_systemline_show
		call	text_cursor_show
		pop	bp
		retf
sub_AB28	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_AB41	proc far

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		mov	ax, [bp+arg_0]
		int	59h		; GSS Computer Graphics	Interface (GSS*CGI)
					; DS:DX	-> block of 5 array pointers
					; Return:   CF set on error, AX	= error	code
					; CF clear if successful, AX = return code
		pop	bp
		retf	2
sub_AB41	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

public _graph_putsa_fx
_graph_putsa_fx	proc far

var_32		= byte ptr -32h
var_12		= word ptr -12h
var_10		= word ptr -10h
var_E		= word ptr -0Eh
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= dword	ptr -8
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= dword	ptr  0Ch

		enter	32h, 0
		push	si
		push	di
		mov	di, [bp+arg_0]
		mov	ax, [bp+arg_4]
		sar	ax, 4
		and	ax, 3
		mov	[bp+var_E], ax
		mov	ax, [bp+arg_4]
		sar	ax, 6
		and	ax, 7
		mov	[bp+var_10], ax
		call	grcg_setcolor pascal, GC_RMW, [bp+arg_4]
		mov	dx, 68h	; 'h'
		mov	al, 0Bh
		out	dx, al
		jmp	loc_AD92
; ---------------------------------------------------------------------------

loc_AB82:
		mov	ax, [bp+arg_2]
		imul	ax, 50h
		push	ax
		mov	ax, di
		mov	bx, 8
		cwd
		idiv	bx
		pop	dx
		add	dx, ax
		mov	word ptr [bp+var_8+2], 0A800h
		mov	word ptr [bp+var_8], dx
		mov	ax, di
		cwd
		idiv	bx
		mov	[bp+var_C], dx
		les	bx, [bp+arg_6]
		mov	al, es:[bx]
		mov	ah, 0
		mov	bx, ax
		test	__mbctype+1[bx], 4
		jz	short loc_ABD7
		mov	bx, word ptr [bp+arg_6]
		mov	al, es:[bx]
		cbw
		shl	ax, 8
		mov	dl, es:[bx+1]
		mov	dh, 0
		add	ax, dx
		push	ax
		call	__mbcjmstojis
		pop	cx
		mov	[bp+var_2], ax
		add	word ptr [bp+arg_6], 2
		jmp	short loc_AC1D
; ---------------------------------------------------------------------------

loc_ABD7:
		les	bx, [bp+arg_6]
		mov	al, es:[bx]
		mov	ah, 0
		mov	bx, ax
		test	__mbctype+1[bx], 3
		jz	short loc_ABF5
		mov	bx, word ptr [bp+arg_6]
		mov	al, es:[bx]
		mov	ah, 0
		add	ax, 2980h
		jmp	short loc_AC10
; ---------------------------------------------------------------------------

loc_ABF5:
		les	bx, [bp+arg_6]
		mov	al, es:[bx]
		cbw
		mov	bx, ax
		test	byte ptr [bx+0E91h], 5Eh
		jz	short loc_AC15
		mov	bx, word ptr [bp+arg_6]
		mov	al, es:[bx]
		mov	ah, 0
		add	ax, 2900h

loc_AC10:
		mov	[bp+var_2], ax
		jmp	short loc_AC1A
; ---------------------------------------------------------------------------

loc_AC15:
		mov	[bp+var_2], 2B21h

loc_AC1A:
		inc	word ptr [bp+arg_6]

loc_AC1D:
		mov	al, byte ptr [bp+var_2]
		and	al, 0FFh
		mov	dx, 0A1h ; '¡'
		out	dx, al
		mov	ax, [bp+var_2]
		shr	ax, 8
		sub	al, 20h	; ' '
		mov	dx, 0A3h ; '£'
		out	dx, al
		cmp	[bp+var_2], 2921h
		jb	short loc_AC7E
		cmp	[bp+var_2], 2B7Eh
		ja	short loc_AC7E
		cmp	di, 278h
		jg	loc_AD9D
		mov	[bp+var_12], 0
		jmp	short loc_AC71
; ---------------------------------------------------------------------------

loc_AC4F:
		mov	al, byte ptr [bp+var_12]
		or	al, 20h
		mov	dx, 0A5h ; '¥'
		out	dx, al
		mov	dx, 0A9h ; '©'
		in	al, dx
		mov	ah, 0
		shl	ax, 8
		mov	bx, [bp+var_12]
		add	bx, bx
		lea	dx, [bp+var_32]
		add	bx, dx
		mov	ss:[bx], ax
		inc	[bp+var_12]

loc_AC71:
		cmp	[bp+var_12], 10h
		jl	short loc_AC4F
		mov	[bp+var_A], 0
		jmp	short loc_ACD4
; ---------------------------------------------------------------------------

loc_AC7E:
		cmp	di, 270h
		jg	loc_AD9D
		mov	[bp+var_12], 0
		jmp	short loc_ACC9
; ---------------------------------------------------------------------------

loc_AC8D:
		mov	al, byte ptr [bp+var_12]
		or	al, 20h
		mov	dx, 0A5h ; '¥'
		out	dx, al
		mov	dx, 0A9h ; '©'
		in	al, dx
		mov	ah, 0
		shl	ax, 8
		mov	bx, [bp+var_12]
		add	bx, bx
		lea	dx, [bp+var_32]
		add	bx, dx
		mov	ss:[bx], ax
		mov	dx, 0A5h ; '¥'
		mov	al, byte ptr [bp+var_12]
		out	dx, al
		mov	dx, 0A9h ; '©'
		in	al, dx
		mov	ah, 0
		mov	bx, [bp+var_12]
		add	bx, bx
		lea	dx, [bp+var_32]
		add	bx, dx
		add	ss:[bx], ax
		inc	[bp+var_12]

loc_ACC9:
		cmp	[bp+var_12], 10h
		jl	short loc_AC8D
		mov	[bp+var_A], 1

loc_ACD4:
		mov	[bp+var_12], 0
		jmp	loc_AD79
; ---------------------------------------------------------------------------

loc_ACDC:
		mov	bx, [bp+var_12]
		add	bx, bx
		lea	ax, [bp+var_32]
		add	bx, ax
		mov	ax, ss:[bx]
		mov	[bp+var_4], ax
		mov	ax, [bp+var_E]
		cmp	ax, 1
		jz	short loc_AD00
		cmp	ax, 2
		jz	short loc_AD16
		cmp	ax, 3
		jz	short loc_AD0C
		jmp	short loc_AD2C
; ---------------------------------------------------------------------------

loc_AD00:
		mov	si, [bp+var_4]
		mov	ax, si
		add	ax, ax
		or	[bp+var_4], ax
		jmp	short loc_AD2C
; ---------------------------------------------------------------------------

loc_AD0C:
		mov	si, [bp+var_4]
		mov	ax, si
		add	ax, ax
		or	[bp+var_4], ax

loc_AD16:
		mov	si, [bp+var_4]
		mov	ax, si
		add	ax, ax
		or	[bp+var_4], ax
		xor	si, [bp+var_4]
		mov	ax, si
		add	ax, ax
		not	ax
		and	[bp+var_4], ax

loc_AD2C:
		cmp	[bp+var_C], 0
		jz	short loc_AD5F
		mov	cl, byte ptr [bp+var_C]
		add	cl, 8
		mov	ax, [bp+var_4]
		shr	ax, cl
		les	bx, [bp+var_8]
		mov	es:[bx], al
		mov	ax, [bp+var_4]
		mov	cl, byte ptr [bp+var_C]
		shr	ax, cl
		mov	es:[bx+1], al
		mov	cl, 8
		sub	cl, byte ptr [bp+var_C]
		mov	al, byte ptr [bp+var_4]
		shl	al, cl
		mov	es:[bx+2], al
		jmp	short loc_AD72
; ---------------------------------------------------------------------------

loc_AD5F:
		mov	ax, [bp+var_4]
		shr	ax, 8
		les	bx, [bp+var_8]
		mov	es:[bx], al
		mov	al, byte ptr [bp+var_4]
		mov	es:[bx+1], al

loc_AD72:
		add	word ptr [bp+var_8], 50h ; 'P'
		inc	[bp+var_12]

loc_AD79:
		cmp	[bp+var_12], 10h
		jl	loc_ACDC
		cmp	[bp+var_A], 0
		jz	short loc_AD8A
		add	di, 8

loc_AD8A:
		mov	ax, [bp+var_10]
		add	ax, 8
		add	di, ax

loc_AD92:
		les	bx, [bp+arg_6]
		cmp	byte ptr es:[bx], 0
		jnz	loc_AB82

loc_AD9D:
		mov	dx, 68h	; 'h'
		mov	al, 0Ah
		out	dx, al
		call	grcg_off
		pop	di
		pop	si
		leave
		retf
_graph_putsa_fx	endp

include th01/hardware/vram_planes_set.asm
include th02/formats/pi_slot_load.asm

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame
public GRAPH_COPY_REGION_FROM_1_TO_0
graph_copy_region_from_1_to_0	proc far

var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

		enter	0Ah, 0
		push	si
		push	di
		mov	ax, [bp+arg_6]
		sar	ax, 3
		mov	dx, [bp+arg_4]
		shl	dx, 6
		add	ax, dx
		mov	dx, [bp+arg_4]
		shl	dx, 4
		add	ax, dx
		mov	si, ax
		xor	di, di
		jmp	loc_AEAE
; ---------------------------------------------------------------------------

loc_AE23:
		mov	[bp+var_2], 0
		mov	cx, si
		jmp	short loc_AE9F
; ---------------------------------------------------------------------------

loc_AE2C:
		or	si, si
		jl	short loc_AE99
		mov	dx, 0A6h ; '¦'
		mov	al, 1
		out	dx, al
		les	bx, _VRAM_PLANE_B
		add	bx, cx
		mov	ax, es:[bx]
		mov	[bp+var_A], ax
		les	bx, _VRAM_PLANE_R
		add	bx, cx
		mov	ax, es:[bx]
		mov	[bp+var_8], ax
		les	bx, _VRAM_PLANE_G
		add	bx, cx
		mov	ax, es:[bx]
		mov	[bp+var_6], ax
		les	bx, _VRAM_PLANE_E
		add	bx, cx
		mov	ax, es:[bx]
		mov	[bp+var_4], ax
		mov	al, 0
		out	dx, al
		les	bx, _VRAM_PLANE_B
		add	bx, cx
		mov	ax, [bp+var_A]
		mov	es:[bx], ax
		les	bx, _VRAM_PLANE_R
		add	bx, cx
		mov	ax, [bp+var_8]
		mov	es:[bx], ax
		les	bx, _VRAM_PLANE_G
		add	bx, cx
		mov	ax, [bp+var_6]
		mov	es:[bx], ax
		les	bx, _VRAM_PLANE_E
		add	bx, cx
		mov	ax, [bp+var_4]
		mov	es:[bx], ax

loc_AE99:
		inc	[bp+var_2]
		add	cx, 2

loc_AE9F:
		mov	ax, [bp+arg_2]
		sar	ax, 4
		cmp	ax, [bp+var_2]
		jg	short loc_AE2C
		add	si, 50h	; 'P'
		inc	di

loc_AEAE:
		cmp	di, [bp+arg_0]
		jl	loc_AE23
		pop	di
		pop	si
		leave
		retf	8
graph_copy_region_from_1_to_0	endp

include th02/hardware/frame_delay_.asm
include th02/hardware/input_sense.asm

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_AFB0	proc far
		push	bp
		mov	bp, sp
		push	3E80h
		call	mem_assign_dos
		or	ax, ax
		jz	short loc_AFC4
		mov	ax, 1
		pop	bp
		retf
; ---------------------------------------------------------------------------

loc_AFC4:
		nopcall	vram_planes_set
		call	graph_start
		mov	dx, 0A6h ; '¦'
		mov	al, 1
		out	dx, al
		call	graph_clear
		mov	dx, 0A6h ; '¦'
		mov	al, 0
		out	dx, al
		call	graph_clear
		mov	dx, 0A6h ; '¦'
		mov	al, 0
		out	dx, al
		mov	dx, 0A4h ; '¤'
		out	dx, al
		call	vsync_start
		call	key_beep_off
		call	text_systemline_hide
		call	text_cursor_hide
		call	egc_start
		mov	pfkey, 12h
		push	ds
		push	offset aUmx	; "û.^"
		call	pfstart
		xor	ax, ax
		pop	bp
		retf
sub_AFB0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_B019	proc far
		push	bp
		mov	bp, sp
		call	pfend
		mov	dx, 0A6h ; '¦'
		mov	al, 1
		out	dx, al
		call	graph_clear
		mov	dx, 0A6h ; '¦'
		mov	al, 0
		out	dx, al
		call	graph_clear
		mov	dx, 0A6h ; '¦'
		mov	al, 0
		out	dx, al
		mov	dx, 0A4h ; '¤'
		out	dx, al
		call	vsync_end
		call	mem_unassign
		call	text_clear
		call	egc_start
		pop	bp
		retf
sub_B019	endp

; ---------------------------------------------------------------------------
		db 0

include th02/hardware/snd_mmd_resident.asm
include th02/hardware/snd_determine_mode.asm
include th02/hardware/snd_pmd_resident.asm
include th02/hardware/snd_load.asm
include th02/formats/pi_slot_palette_apply.asm
include th02/formats/pi_slot_put.asm
include th02/hardware/snd_kaja_func.asm

; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		cmp	_snd_active, 0
		jnz	short loc_B232
		push	64h ; 'd'
		nopcall	frame_delay_
		pop	bp
		retf
; ---------------------------------------------------------------------------

loc_B232:
		push	1
		nopcall	frame_delay_
		mov	ah, KAJA_GET_SONG_MEASURE
		cmp	_snd_midi_active, 1
		jz	short loc_B246
		int	60h		; - FTP	Packet Driver -	BASIC FUNC - TERMINATE DRIVER FOR HANDLE
					; BX = handle
					; Return: CF set on error, DH =	error code
					; CF clear if successful
		jmp	short loc_B24B
; ---------------------------------------------------------------------------

loc_B246:
		mov	dx, 0C0h
		int	61h		; reserved for user interrupt

loc_B24B:
		cmp	ax, [bp+6]
		jb	short loc_B232
		pop	bp
		retf
; ---------------------------------------------------------------------------

include th02/hardware/snd_se.asm
include th02/hardware/frame_delay.asm
op_02_TEXT	ends

; ===========================================================================

op_03_TEXT	segment	word public 'CODE' use16
	extern _title_flash:proc
op_03_TEXT	ends

; ===========================================================================

; Segment type:	Pure code
op_04_TEXT	segment	byte public 'CODE' use16
	extern SCORE_MENU:proc
	extern SCORE_CLEARED_LOAD:proc
op_04_TEXT	ends

; ===========================================================================

op_05_TEXT	segment	byte public 'CODE' use16
	extern SHOTTYPE_MENU:proc
op_05_TEXT	ends

; ===========================================================================

op_06_TEXT	segment	byte public 'CODE' use16
	extern MUSICROOM:proc
op_06_TEXT	ends

	.data

byte_D6C0	db 0
byte_D6C1	db 0
byte_D6C2	db 0
		db 0
gZUN		db 0C3h, 0BEh, 0B6h, 0
include th02/strings/ranks_center[data].asm
gHIT_KEY	db 0B1h, 0B2h, 0BDh, 0CFh, 0B4h, 0AEh, 0C2h, 0
g7SPACES	db 0CFh, 0CFh, 0CFh, 0CFh, 0CFh, 0CFh, 0CFh, 0
gSTART		db 0BCh, 0BDh, 0AAh, 0BBh, 0BDh, 0, 0, 0, 0, 0
gEXTRA_START	db 0AEh, 0C1h, 0BDh, 0BBh, 0AAh, 0CFh, 0BCh, 0BDh, 0AAh, 0BBh, 0BDh, 0
gHISCORE	db 0B1h, 0B2h, 0BCh, 0ACh, 0B8h, 0BBh, 0AEh, 0,	0, 0
gOPTION		db 0B8h, 0B9h, 0BDh, 0B2h, 0B8h, 0B6h, 0, 0, 0,	0
gQUIT		db 0BAh, 0BEh, 0B2h, 0BDh, 0, 0, 0, 0, 0, 0
gRANK		db 0BBh, 0AAh, 0B6h, 0B4h, 0, 0, 0, 0, 0, 0
gPLAYER		db 0B9h, 0B5h, 0AAh, 0C2h, 0AEh, 0BBh, 0, 0, 0,	0
gMUSIC		db 0B7h, 0BEh, 0BCh, 0B2h, 0ACh, 0, 0, 0, 0, 0
gBOMB		db 0ABh, 0B8h, 0B7h, 0ABh, 0, 0, 0, 0, 0, 0
gMUSIC_MODE	db 0B7h, 0BEh, 0BCh, 0B2h, 0ACh, 0CFh, 0B7h, 0B8h, 0ADh, 0AEh, 0
gRESET		db 0BBh, 0AEh, 0BCh, 0AEh, 0BDh, 0, 0, 0, 0, 0
gsEASY		db 0E8h, 0E9h, 0
gsNORMAL	db 0EAh, 0EBh, 0
gsHARD		db 0ECh, 0EDh, 0
gsLUNATIC	db 0EEh, 0EFh, 0
gOFF		db 0B8h, 0AFh, 0AFh, 0CFh, 0
gFM		db 0CFh, 0AFh, 0B7h, 0CFh, 0
gMIDI		db 0B7h, 0B2h, 0ADh, 0B2h, 0
PERF_TITLE	dd aPERF_TITLE
PERF_OPTION	dd aPERF_NORMAL
		dd aPERF_TRUNCATE
byte_D790	db 0
byte_D791	db 0
byte_D792	db 0
aHuuma_cfg	db 'huuma.cfg',0
aHuuma_efc	db 'huuma.efc',0
aOp2_pi		db 'op2.pi',0
aOp_pi		db 'op.pi',0
aOpa_pi		db 'opa.pi',0
aOpb_pi		db 'opb.pi',0
aOpc_pi		db 'opc.pi',0
aOp_m		db 'op.m',0
aOp_rgb		db 'op.rgb',0
aTs1_pi		db 'ts1.pi',0
aSelect		db 'select',0
; char path[]
path		db 'main',0
aPERF_TITLE	db 'o',0
aPERF_NORMAL	db '@Êí  ',0
aPERF_TRUNCATE	db 'êy¸',0
aMikoft_bft	db 'MIKOFT.bft',0
aGminit_m	db 'gminit.m',0
aTs3_pi		db 'ts3.pi',0
aTs2_pi		db 'ts2.pi',0
		db 0
include libs/master.lib/bfnt_id[data].asm
include libs/master.lib/clip[data].asm
include libs/master.lib/edges[data].asm
include libs/master.lib/fil[data].asm
include libs/master.lib/dos_ropen[data].asm
include libs/master.lib/gaiji_backup[data].asm
include libs/master.lib/gaiji_entry_bfnt[data].asm
include libs/master.lib/grp[data].asm
include libs/master.lib/pal[data].asm
include libs/master.lib/pf[data].asm
include libs/master.lib/rand[data].asm
include libs/master.lib/sin8[data].asm
include libs/master.lib/tx[data].asm
include libs/master.lib/version[data].asm
include libs/master.lib/vs[data].asm
include libs/master.lib/wordmask[data].asm
include libs/master.lib/mem[data].asm
include libs/master.lib/super_entry_bfnt[data].asm
include libs/master.lib/superpa[data].asm
include th02/formats/pfopen[data].asm
aUmx		db 'û.^',0
_snd_active	db 0
		db 0
include th02/hardware/snd_se[data].asm
extern _rank:byte

	.data?

byte_E8F8	db ?
_snd_bgm_mode	db ?
		dw ?
word_E8FC	dw ?
byte_E8FE	db ?
		db ?
word_E900	dw ?
fp_E902	dw ?
include libs/master.lib/clip[bss].asm
include libs/master.lib/fil[bss].asm
include libs/master.lib/pal[bss].asm
include libs/master.lib/vs[bss].asm
include libs/master.lib/vsync[bss].asm
include libs/master.lib/mem[bss].asm
include libs/master.lib/superpa[bss].asm
include libs/master.lib/super_put_rect[bss].asm
include th01/hardware/vram_planes[bss].asm
include th02/formats/pi_slots[bss].asm
include libs/master.lib/pfint21[bss].asm
include th02/hardware/input_sense[bss].asm
include th02/hardware/snd[bss].asm
include th02/hardware/snd_load[bss].asm
public _mikoconfig
_mikoconfig	dd ?
		db    ?	;
byte_F3E1	db ?
byte_F3E2	db ?
		dd    ?	;
		dd    ?	;
		db    ?	;
extern _extra_unlocked:byte
extern _score_duration:word

		end
