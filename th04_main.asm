;
; +-------------------------------------------------------------------------+
; |   This file has been generated by The Interactive Disassembler (IDA)    |
; |        Copyright (c) 2009 by Hex-Rays, <support@hex-rays.com>           |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	06D74719B6F72B11014A392FD34D5F57

; File Name   :	th04/MAIN.EXE
; Format      :	MS-DOS executable (EXE)
; Base Address:	0h Range: 0h-2D180h Loaded length: 24A62h
; Entry	Point :	0:0
; OS type	  :  MS	DOS
; Application type:  Executable	16bit

		.386
		.model large

; ===========================================================================

; Segment type:	Pure code
seg000		segment	byte public 'CODE' use16
		assume cs:seg000
		assume es:nothing, ss:seg006, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function noreturn

		public start
start		proc far
		mov	dx, seg	dseg
		mov	cs:DGROUP@, dx
		mov	ah, 30h
		int	21h		; DOS -	GET DOS	VERSION
					; Return: AL = major version number (00h for DOS 1.x)
		mov	bp, ds:2
		mov	bx, ds:2Ch
		mov	ds, dx
		assume ds:dseg
		mov	word_213BC, ax
		mov	segx, es
		mov	word_213B6, bx
		mov	word_213CE, bp
		call	sub_178
		mov	ax, word_213B6
		mov	es, ax
		xor	ax, ax
		mov	bx, ax
		mov	di, ax
		mov	cx, 7FFFh
		cld

loc_37:					; CODE XREF: start+3Fj
		repne scasb
		jcxz	short loc_7E
		inc	bx
		cmp	es:[di], al
		jnz	short loc_37
		or	ch, 80h
		neg	cx
		mov	word_213B4, cx
		mov	cx, 2
		shl	bx, cl
		add	bx, 10h
		and	bx, 0FFF0h
		mov	word_213B8, bx
		mov	dx, ss
		sub	bp, dx
		mov	di, seg	dseg
		mov	es, di
		assume es:dseg
		mov	di, es:word_23A56
		cmp	di, 200h
		jnb	short loc_75
		mov	di, 200h
		mov	es:word_23A56, di

loc_75:					; CODE XREF: start+6Bj
		mov	cl, 4
		shr	di, cl
		inc	di
		cmp	bp, di
		jnb	short loc_83

loc_7E:					; CODE XREF: start+39j
		nop
		push	cs
		call	near ptr sub_4270
; ---------------------------------------------------------------------------

loc_83:					; CODE XREF: start+7Cj
		mov	bx, di
		add	bx, dx
		mov	word_213C6, bx
		mov	word_213CA, bx
		mov	ax, segx
		sub	bx, ax
		mov	es, ax
		assume es:nothing
		mov	ah, 4Ah	; 'J'
		push	di
		int	21h		; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
					; ES = segment address of block	to change
					; BX = new size	in paragraphs
		pop	di
		shl	di, cl
		cli
		mov	ss, dx
		assume ss:nothing
		mov	sp, di
		sti
		mov	ax, seg	dseg
		mov	es, ax
		assume es:dseg
		mov	es:word_23A56, di
		xor	ax, ax
		mov	es, cs:DGROUP@
		assume es:nothing
		mov	di, 2A4Eh
		mov	cx, 0BDB2h
		sub	cx, di
		cld
		rep stosb
		cmp	word_239B8, 14h
		jbe	short loc_110
		cmp	byte ptr word_213BC, 3
		jb	short loc_110
		ja	short loc_D7
		cmp	byte ptr word_213BC+1, 1Eh
		jb	short loc_110

loc_D7:					; CODE XREF: start+CEj
		mov	ax, 5801h
		mov	bx, 2
		int	21h		; DOS -	3+ - GET/SET MEMORY ALLOCATION STRATEGY
					; AL = function	code: set allocation strategy
		jb	short loc_10B
		mov	ah, 67h	; 'g'
		mov	bx, word_239B8
		int	21h		; DOS -	3.3+ - SET HANDLE COUNT
					; BX = desired number of handles (max 255)
		jb	short loc_10B
		mov	ah, 48h	; 'H'
		mov	bx, 1
		int	21h		; DOS -	2+ - ALLOCATE MEMORY
					; BX = number of 16-byte paragraphs desired
		jb	short loc_10B
		inc	ax
		mov	word_213CE, ax
		dec	ax
		mov	es, ax
		assume es:nothing
		mov	ah, 49h
		int	21h		; DOS -	2+ - FREE MEMORY
					; ES = segment address of area to be freed
		jb	short loc_10B
		mov	ax, 5801h
		mov	bx, 0
		int	21h		; DOS -	3+ - GET/SET MEMORY ALLOCATION STRATEGY
					; AL = function	code: set allocation strategy
		jnb	short loc_110

loc_10B:				; CODE XREF: start+DFj	start+E9j ...
		nop
		push	cs
		call	near ptr sub_4270
; ---------------------------------------------------------------------------

loc_110:				; CODE XREF: start+C5j	start+CCj ...
		xor	bp, bp
		push	bp
		nop
		push	cs
		call	near ptr __ExceptInit
		pop	ax
		mov	es, cs:DGROUP@
		assume es:nothing
		mov	si, 2A2Ah
		mov	di, 2A48h
		call	sub_1E8
		push	word_213B2
		push	envp		; envp
		push	word_213AE
		push	argv		; argv
		push	argc		; argc
		call	_main
		push	ax		; status
		nop
		push	cs
		call	near ptr _exit
; ---------------------------------------------------------------------------

__cleanup:				; CODE XREF: sub_4505+26p
		mov	es, cs:DGROUP@
		push	si
		push	di
		mov	si, 2A48h
		mov	di, 2A4Eh
		call	sub_22C
		pop	di
		pop	si
		retf
start		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

__checknull	proc far		; CODE XREF: sub_4505+34p
		retf
__checknull	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function noreturn	bp-based frame

__terminate	proc near		; CODE XREF: sub_4548+Dp

arg_2		= byte ptr  4

		mov	bp, sp
		mov	ah, 4Ch	; 'L'
		mov	al, [bp+arg_2]
		int	21h		; DOS -	2+ - QUIT WITH EXIT CODE (EXIT)
__terminate	endp			; AL = exit code

; ---------------------------------------------------------------------------
		mov	dx, 4Bh	; 'K'
		push	ds
		push	dx
		nop
		push	cs
		call	near ptr ___ErrorMessage
		pop	dx
		pop	ds
		mov	ax, 3
		push	ax
		nop
		push	cs
		call	near ptr __exit

; =============== S U B	R O U T	I N E =======================================


sub_178		proc near		; CODE XREF: start+25p
		push	ds
		mov	ax, 3500h
		int	21h		; DOS -	2+ - GET INTERRUPT VECTOR
					; AL = interrupt number
					; Return: ES:BX	= value	of interrupt vector

loc_17E:				; DATA XREF: sub_1337E+12r
		mov	word ptr dword_2139A, bx

loc_182:				; DATA XREF: sub_133AC+4r
		mov	word ptr dword_2139A+2,	es
		mov	ax, 3504h
		int	21h		; DOS -	2+ - GET INTERRUPT VECTOR
					; AL = interrupt number
					; Return: ES:BX	= value	of interrupt vector
		mov	word ptr dword_2139E, bx
		mov	word ptr dword_2139E+2,	es
		mov	ax, 3505h
		int	21h		; DOS -	2+ - GET INTERRUPT VECTOR
					; AL = interrupt number
					; Return: ES:BX	= value	of interrupt vector
		mov	word ptr dword_213A2, bx

loc_19C:				; DATA XREF: sub_418A+7r
		mov	word ptr dword_213A2+2,	es
		mov	ax, 3506h
		int	21h		; DOS -	2+ - GET INTERRUPT VECTOR
					; AL = interrupt number
					; Return: ES:BX	= value	of interrupt vector
		mov	word ptr dword_213A6, bx
		mov	word ptr dword_213A6+2,	es
		mov	ax, 2500h
		mov	dx, cs
		mov	ds, dx
		assume ds:seg000
		mov	dx, 163h
		int	21h		; DOS -	SET INTERRUPT VECTOR
					; AL = interrupt number
					; DS:DX	= new vector to	be used	for specified interrupt
		pop	ds
		assume ds:dseg
		retn
sub_178		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

__restorezero	proc far		; CODE XREF: sub_4505+2Fp
		push	ds
		mov	ax, 2500h
		lds	dx, dword_2139A
		int	21h		; DOS -	SET INTERRUPT VECTOR
					; AL = interrupt number
					; DS:DX	= new vector to	be used	for specified interrupt
		pop	ds
		push	ds
		mov	ax, 2504h
		lds	dx, dword_2139E
		int	21h		; DOS -	SET INTERRUPT VECTOR
					; AL = interrupt number
					; DS:DX	= new vector to	be used	for specified interrupt
		pop	ds
		push	ds
		mov	ax, 2505h
		lds	dx, dword_213A2
		int	21h		; DOS -	SET INTERRUPT VECTOR
					; AL = interrupt number
					; DS:DX	= new vector to	be used	for specified interrupt
		pop	ds
		push	ds
		mov	ax, 2506h
		lds	dx, dword_213A6
		int	21h		; DOS -	SET INTERRUPT VECTOR
					; AL = interrupt number
					; DS:DX	= new vector to	be used	for specified interrupt
		pop	ds
		retf
__restorezero	endp


; =============== S U B	R O U T	I N E =======================================


sub_1E8		proc near		; CODE XREF: start+124p sub_1E8+3Aj ...
		mov	ax, 100h
		mov	dx, di
		mov	bx, si

loc_1EF:				; CODE XREF: sub_1E8+22j
		cmp	bx, di
		jz	short loc_20C

loc_1F3:				; DATA XREF: sub_1A1A-71r sub_1A1A-6Er
		cmp	byte ptr es:[bx], 0FFh
		jz	short loc_207
		mov	cl, es:[bx+1]
		xor	ch, ch
		cmp	cx, ax
		jnb	short loc_207
		mov	ax, cx
		mov	dx, bx

loc_207:				; CODE XREF: sub_1E8+Fj sub_1E8+19j
		add	bx, 6
		jmp	short loc_1EF
; ---------------------------------------------------------------------------

loc_20C:				; CODE XREF: sub_1E8+9j
		cmp	dx, di
		jz	short locret_22B
		mov	bx, dx
		cmp	byte ptr es:[bx], 0
		mov	byte ptr es:[bx], 0FFh
		push	es
		jz	short loc_224
		call	dword ptr es:[bx+2]
		pop	es
		jmp	short sub_1E8
; ---------------------------------------------------------------------------

loc_224:				; CODE XREF: sub_1E8+33j
		call	word ptr es:[bx+2]
		pop	es
		jmp	short sub_1E8
; ---------------------------------------------------------------------------

locret_22B:				; CODE XREF: sub_1E8+26j
		retn
sub_1E8		endp


; =============== S U B	R O U T	I N E =======================================


sub_22C		proc near		; CODE XREF: start+153p sub_22C+37j ...
		mov	ah, 0
		mov	dx, di
		mov	bx, si

loc_232:				; CODE XREF: sub_22C+1Fj
		cmp	bx, di
		jz	short loc_24D
		cmp	byte ptr es:[bx], 0FFh
		jz	short loc_248
		cmp	es:[bx+1], ah
		jb	short loc_248
		mov	ah, es:[bx+1]
		mov	dx, bx

loc_248:				; CODE XREF: sub_22C+Ej sub_22C+14j
		add	bx, 6
		jmp	short loc_232
; ---------------------------------------------------------------------------

loc_24D:				; CODE XREF: sub_22C+8j
		cmp	dx, di
		jz	short locret_26C
		mov	bx, dx
		cmp	byte ptr es:[bx], 0
		mov	byte ptr es:[bx], 0FFh
		push	es
		jz	short loc_265
		call	dword ptr es:[bx+2]
		pop	es
		jmp	short sub_22C
; ---------------------------------------------------------------------------

loc_265:				; CODE XREF: sub_22C+30j
		call	word ptr es:[bx+2]
		pop	es
		jmp	short sub_22C
; ---------------------------------------------------------------------------

locret_26C:				; CODE XREF: sub_22C+23j
		retn
sub_22C		endp

; ---------------------------------------------------------------------------
DGROUP@		dw 0			; DATA XREF: start+3w start+B0r ...
; ---------------------------------------------------------------------------

__MMODEL:
		add	al, 0C0h ; 'À'
		add	byte_2A16E, bl
		push	ds
		pop	di
		add	cx, word_27628
		pop	ds
		mov	ax, 0FFF3h

loc_27F:				; CODE XREF: seg000:02D9j seg000:02E1j
		pop	si
		pop	di
		pop	ds
		pop	bp
		retf	8
; ---------------------------------------------------------------------------

loc_286:				; CODE XREF: sub_2A74+60p
		push	bp
		mov	bp, sp
		push	ds
		push	si
		push	di
		mov	ax, [bp+6]
		mov	cs:word_36D, ax
		mov	cs:word_35F, ds
		mov	ax, [bp+0Ch]
		mov	cs:word_2ED, ax
		push	ds
		lds	bx, [bp+8]
		mov	ax, [bx+8]
		mov	cx, [bx+0Ah]
		mov	bp, [bx+0Eh]
		sub	bp, [bx+0Ch]
		inc	bp
		pop	ds
		shr	ax, 3
		mov	cs:byte_309, al
		mov	dh, al
		mov	dl, cl
		mov	cs:word_364, dx
		mov	cs:byte_307, cl
		mul	cx
		mov	cs:word_302, ax
		shl	ax, 2
		mov	cs:word_2E8, ax
		xchg	ax, bx
		push	bx
		push	cs
		call	near ptr sub_21F4
		jb	short loc_27F
		xchg	ax, cx
		push	bx
		push	cs
		call	near ptr sub_21F4
		jb	short loc_27F
		mov	es, ax
		mov	ds, cx
; ---------------------------------------------------------------------------
		db 0B9h
word_2E8	dw 1234h		; DATA XREF: seg000:02CFw
		db 33h,	0D2h, 0BBh
word_2ED	dw 1234h		; DATA XREF: seg000:029Bw
		db 0B4h, 3Fh, 0CDh, 21h, 73h, 3, 0E9h, 7Ah, 0FFh, 3Bh
		db 0C1h, 74h, 3, 0E9h, 73h, 0FFh, 33h, 0F6h, 0BAh
word_302	dw 1234h		; DATA XREF: seg000:02C8w
		db 33h,	0DBh, 0B5h
byte_307	db 11h			; DATA XREF: seg000:02C1w
		db 0B1h
byte_309	db 11h			; DATA XREF: seg000:02B4w
		db 51h,	52h, 53h, 0ADh,	8Bh, 0D8h, 0ADh, 8Bh, 0D0h, 0BFh
		db 4, 0, 0D0h, 0C3h, 0D0h, 0D5h, 0D0h, 0C3h, 0D0h, 0D1h
		db 0D0h, 0C3h, 0D0h, 0D4h, 0D0h, 0C3h, 3 dup(0D0h), 0C3h
		db 0D0h, 0D5h, 0D0h, 0C3h, 0D0h, 0D1h, 0D0h, 0C3h, 0D0h
		db 0D4h, 0D0h, 0C3h, 2 dup(0D0h), 8Ah, 0DFh, 8Ah, 0FAh
		db 8Ah,	0D6h, 4Fh, 75h,	0D7h, 5Bh, 5Ah,	26h, 88h, 1, 3
		db 0FAh, 26h, 88h, 21h,	3, 0FAh, 26h, 88h, 9, 3, 0FAh
		db 26h,	88h, 29h, 59h, 43h, 0FEh, 0C9h,	75h, 0B1h, 0FEh
		db 0CDh, 75h, 0ABh, 1Eh, 0B8h
word_35F	dw 1234h		; DATA XREF: seg000:0293w
		db 8Eh,	0D8h, 0B8h
word_364	dw 1234h		; DATA XREF: seg000:02BCw
		db 6, 50h, 6, 33h, 0C0h, 50h, 0B8h
word_36D	dw 1234h		; DATA XREF: seg000:028Fw
		db 50h,	0Eh, 0E8h, 18h,	24h, 7,	1Fh, 72h, 6, 4Dh, 74h
		db 1Fh,	0E9h, 69h, 0FFh, 1Eh, 2Eh, 8Eh,	1Eh, 5Fh, 3, 8Bh
		db 0C8h, 6, 0Eh, 0E8h, 53h, 1Eh, 0Eh, 0E8h, 4Fh, 1Eh, 8Bh
		db 0C1h, 0F9h, 5Eh, 5Fh, 1Fh, 5Dh, 0CAh, 8, 0, 90h, 1Eh
		db 2Eh,	8Eh, 1Eh, 5Fh, 3, 6, 0Eh, 0E8h,	39h, 1Eh, 0Eh
		db 0E8h, 35h, 1Eh, 0B8h, 2 dup(0), 0F8h, 5Eh, 5Fh, 1Fh
		db 5Dh,	0CAh, 8, 0

; =============== S U B	R O U T	I N E =======================================


sub_3B4		proc far		; CODE XREF: sub_1A76+57p
		mov	bx, sp
		mov	cx, ss:[bx+8]
		les	bx, ss:[bx+4]
		mov	dx, es:[bx+1Ch]
		mov	ax, 4201h
		mov	bx, cx
		xor	cx, cx
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method: offset from present location
		mov	ax, 0FFF3h
		jb	short locret_3D3
		mov	ax, 0

locret_3D3:				; CODE XREF: sub_3B4+1Aj
		retf	6
sub_3B4		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_3D6		proc far		; CODE XREF: sub_1A76+31p sub_2A74+1Dp

arg_0		= dword	ptr  6
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		push	ds
		lds	dx, [bp+arg_0]
		mov	bx, [bp+arg_4]
		mov	ah, 3Fh	; '?'
		mov	cx, 20h	; ' '
		int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
					; BX = file handle, CX = number	of bytes to read
					; DS:DX	-> buffer
		push	ds
		pop	es
		assume es:dseg
		pop	ds
		sbb	cx, cx
		xor	ax, cx
		sub	ax, cx
		jb	short loc_40D
		push	si
		push	di
		mov	si, 326h
		mov	di, dx
		mov	cx, 5
		repe cmpsb
		pop	di
		pop	si

loc_400:				; DATA XREF: sub_1A1A-1BFr
		jnz	short loc_409
		mov	ax, 0
		pop	bp
		retf	6
; ---------------------------------------------------------------------------

loc_409:				; CODE XREF: sub_3D6:loc_400j
		mov	ax, 0FFF3h
		stc

loc_40D:				; CODE XREF: sub_3D6+1Aj
		pop	bp
		retf	6
sub_3D6		endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_412		proc far		; CODE XREF: sub_2A74+3Fp

arg_0		= dword	ptr  6
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		push	si
		cld
		push	ds
		lds	bx, [bp+arg_0]
		mov	cx, [bx+1Ch]
		mov	si, [bx+1Eh]
		pop	ds
		mov	ax, 0
		jcxz	short loc_46C
		push	cx
		push	cs
		call	near ptr sub_21F4
		jb	short loc_46C
		push	ds
		mov	ds, ax
		xor	dx, dx
		mov	bx, [bp+arg_4]
		mov	ah, 3Fh
		int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
					; BX = file handle, CX = number	of bytes to read
					; DS:DX	-> buffer
		mov	ax, 0FFF3h
		jb	short loc_464
		mov	dx, si
		xor	si, si
		nop

loc_444:				; CODE XREF: sub_412+45j
		lodsb
		cmp	al, 10h
		jz	short loc_45E
		add	si, dx
		sub	si, 3
		lodsw
		or	ax, ax
		jz	short loc_459
		sub	cx, dx
		mov	dx, ax
		ja	short loc_444

loc_459:				; CODE XREF: sub_412+3Fj
		xor	ax, ax

loc_45B:				; DATA XREF: sub_1A1A:loc_1867r
					; sub_1CF4+4r
		jmp	short loc_464
; ---------------------------------------------------------------------------
		nop

loc_45E:				; CODE XREF: sub_412+35j
		lodsw
		lodsb
		and	ax, 0Fh
		nop

loc_464:				; CODE XREF: sub_412+2Bj
					; sub_412:loc_45Bj
		mov	bx, ds
		pop	ds
		push	bx
		push	cs
		call	near ptr sub_21DE

loc_46C:				; CODE XREF: sub_412+13j sub_412+1Aj
		pop	si
		pop	bp
		retf	6
sub_412		endp

; ---------------------------------------------------------------------------
		nop
; ---------------------------------------------------------------------------
word_472	dw 0			; DATA XREF: seg000:04A9r
word_474	dw 0			; DATA XREF: seg000:04A4r seg000:04CAw
; ---------------------------------------------------------------------------

loc_476:				; CODE XREF: sub_39B8+40p sub_39FC+25p
		cmp	bx, 2
		jnb	short locret_4BC
		shl	bx, 1
		mov	[bx+320h], ax
		mov	ax, word_21660
		or	ax, word_21662
		add	ax, 0FFFFh
		sbb	ax, ax
		cmp	ax, word_2165E
		jz	short locret_4BC
		mov	word_2165E, ax
		ja	short loc_4BE
		cli
		mov	al, 0Bh
		out	70h, al		; CMOS Memory:
					; used by real-time clock
		mov	al, byte_21665
		out	71h, al		; CMOS Memory:
					; used by real-time clock
		push	70h ; 'p'
		push	cs:word_474
		push	cs:word_472
		nop
		push	cs
		call	near ptr sub_89A
		in	al, 0A1h	; Interrupt Controller #2, 8259A
		or	al, byte_21664
		out	0A1h, al	; Interrupt Controller #2, 8259A
		sti

locret_4BC:				; CODE XREF: seg000:0479j seg000:0491j
		retn
; ---------------------------------------------------------------------------
		nop

loc_4BE:				; CODE XREF: seg000:0496j
		cli
		push	70h ; 'p'
		push	cs
		push	offset byte_51A
		nop
		push	cs
		call	near ptr sub_89A
		mov	cs:word_474, dx
; ---------------------------------------------------------------------------
		db 2Eh
byte_4D0	db 0A3h			; DATA XREF: sub_1A1A-16Er
		db 72h,	4, 0B4h, 0Ah, 0BBh, 4, 0F0h, 0E8h, 2Ch,	0, 0B0h
		db 0Bh,	0E6h, 70h, 0E4h, 71h, 0A2h, 25h, 3, 0Ch, 40h, 8Ah
		db 0E0h, 0B0h, 0Bh, 0E6h, 70h, 8Ah, 0C4h, 0E6h,	71h, 0E4h
		db 0A1h, 8Ah, 0E0h, 24h, 0FEh, 0E6h, 0A1h, 32h,	0C4h, 0A2h
		db 24h,	3, 0FBh, 0FAh, 0B0h, 0Ch
byte_501	db 0E6h			; DATA XREF: sub_1A1A-1C8r sub_36F6+Cr ...
		db 70h,	0E4h, 71h, 0FBh, 0C3h, 8Ah, 0C4h, 0E6h,	70h, 0E4h
		db 71h,	22h, 0C7h, 0Ah,	0C3h, 86h, 0E0h, 0E6h, 70h, 86h
		db 0E0h, 0E6h, 71h, 0C3h
byte_51A	db 50h,	1Eh, 0B8h	; DATA XREF: seg000:04C2o
		dw seg dseg
		db 8Eh,	0D8h, 0FCh, 68h, 3Ch, 5, 83h, 3Eh, 20h,	3, 0
byte_52A	db 74h			; DATA XREF: sub_137A4:loc_1385Cr
		db 4
byte_52C	db 0FFh			; DATA XREF: sub_137A4:loc_1384Cr
byte_52D	db 36h			; DATA XREF: sub_137A4:loc_1386Cr
		db 20h
byte_52F	db 3			; DATA XREF: sub_137A4:loc_13833r
byte_530	db 83h			; DATA XREF: sub_137A4:loc_1387Cr
byte_531	db 3Eh			; DATA XREF: sub_137A4+4r
byte_532	db 22h			; DATA XREF: sub_137A4:loc_13804r
byte_533	db 3			; DATA XREF: sub_137A4:loc_137D5r
		db 0, 74h, 4, 0FFh, 36h, 22h, 3, 0C3h, 80h, 3Eh, 24h, 3
		db 0, 1Fh, 75h,	6, 58h,	2Eh, 0FFh, 2Eh,	72h, 4,	0B0h, 20h
		db 0E6h
byte_54D	db 0A0h			; DATA XREF: sub_1C82+1Fr
; ---------------------------------------------------------------------------
		out	20h, al		; Interrupt controller,	8259A.
		mov	al, 0Ch
		out	70h, al		; CMOS Memory:
					; used by real-time clock
		in	al, 71h		; CMOS Memory
		mov	al, 0Ch
		out	70h, al		; CMOS Memory:
					; used by real-time clock
		in	al, 71h		; CMOS Memory
		pop	ax
		iret

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_55E		proc far		; CODE XREF: sub_200E+Cp sub_3506+102p

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		mov	es, [bp+arg_0]
		assume es:nothing
		mov	bx, es:0
		mov	ah, 3Eh
		int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
					; BX = file handle
		push	es
		push	cs
		call	near ptr sub_267C
		pop	bp
		retf	2
sub_55E		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_576		proc far		; CODE XREF: sub_5F2+29p

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		push	ds
		mov	ds, [bp+arg_0]
		mov	bx, word_21340
		mov	cx, off_21346
		mov	dx, 8
		mov	ah, 3Fh
		int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
					; BX = file handle, CX = number	of bytes to read
					; DS:DX	-> buffer
		jb	short loc_5A6
		or	ax, ax
		jz	short loc_5A6
		dec	ax
		mov	word_21342, ax
		mov	off_21344, 1
		mov	al, byte ptr off_21348
		xor	ah, ah
		pop	ds
		pop	bp
		retf	2
; ---------------------------------------------------------------------------

loc_5A6:				; CODE XREF: sub_576+16j sub_576+1Aj
		xor	ax, ax
		mov	word_21342, ax
		dec	ax
		pop	ds
		pop	bp
		retf	2
sub_576		endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_5B2		proc far		; CODE XREF: sub_2A74+53p

arg_0		= dword	ptr  6
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		push	ds
		lds	bx, [bp+arg_0]
		test	byte ptr [bx+5], 80h
		pop	ds
		jz	short loc_5EA
		mov	ah, 3Fh	; '?'
		mov	bx, [bp+arg_4]
		mov	cx, 30h	; '0'
		mov	dx, 2A82h
		int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
					; BX = file handle, CX = number	of bytes to read
					; DS:DX	-> buffer
		jb	short loc_5EA
		mov	bx, dx
		mov	cx, 1004h

loc_5D4:				; CODE XREF: sub_5B2+31j
		mov	dl, [bx]
		mov	ax, [bx+1]
		mov	[bx], ax
		mov	[bx+2],	dl
		add	bx, 3
		dec	ch
		jnz	short loc_5D4
		mov	ax, 0
		jmp	short loc_5EE
; ---------------------------------------------------------------------------

loc_5EA:				; CODE XREF: sub_5B2+Cj sub_5B2+1Bj
		stc
		mov	ax, 0FFF3h

loc_5EE:				; CODE XREF: sub_5B2+36j
		pop	bp
		retf	6
sub_5B2		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_5F2		proc far		; CODE XREF: seg000:070Cp sub_2086+3Fp

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		mov	es, [bp+arg_0]
		cmp	word ptr es:2, 0
		jz	short loc_619
		dec	word ptr es:2
		mov	bx, es:4
		inc	word ptr es:4
		mov	al, es:[bx+8]
		xor	ah, ah
		pop	bp
		retf	2
; ---------------------------------------------------------------------------

loc_619:				; CODE XREF: sub_5F2+Cj
		push	es
		push	cs
		call	near ptr sub_576
		pop	bp
		retf	2
sub_5F2		endp


; =============== S U B	R O U T	I N E =======================================


sub_622		proc far		; CODE XREF: sub_B616+65P sub_D1BC+A4P
		mov	bx, sp
		push	si
		push	di
		mov	si, ss:[bx+4]
		mov	word_216E4, 0
		nop
		push	cs
		call	near ptr sub_2462

loc_635:				; CODE XREF: sub_622+31j
		nop
		push	cs
		call	loc_1F04
		mov	di, si
		cmp	di, 0
		jle	short loc_649

loc_641:				; CODE XREF: sub_622+25j
		nop
		push	cs
		call	near ptr sub_2462
		dec	di
		jnz	short loc_641

loc_649:				; CODE XREF: sub_622+1Dj
		add	word_216E4, 6
		cmp	word_216E4, 64h	; 'd'
		jl	short loc_635
		mov	word_216E4, 64h	; 'd'
		nop
		push	cs
		call	loc_1F04
		pop	di
		pop	si
		retf	2
sub_622		endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_666		proc far		; CODE XREF: sub_AED0+290P
					; seg001:0988P	...
		mov	bx, sp
		push	si
		push	di
		mov	si, ss:[bx+4]
		mov	word_216E4, 64h	; 'd'
		nop
		push	cs
		call	near ptr sub_2462

loc_679:				; CODE XREF: sub_666+2Cj
		nop
		push	cs
		call	loc_1F04
		mov	di, si
		cmp	di, 0
		jle	short loc_68D

loc_685:				; CODE XREF: sub_666+25j
		nop
		push	cs
		call	near ptr sub_2462
		dec	di
		jnz	short loc_685

loc_68D:				; CODE XREF: sub_666+1Dj
		sub	word_216E4, 6
		jg	short loc_679
		mov	word_216E4, 0
		nop
		push	cs
		call	loc_1F04
		pop	di
		pop	si
		retf	2
sub_666		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6A4		proc far		; CODE XREF: sub_3506+1Fp

arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		mov	word_21AC2, 6
		mov	ax, word_2171C
		add	ax, 9
		push	ax
		push	cs
		call	near ptr sub_2578
		jb	short loc_6E0
		mov	es, ax
		push	[bp+arg_2]
		push	[bp+arg_0]
		push	cs
		call	near ptr sub_105C
		jb	short loc_6E7
		mov	es:0, ax
		mov	word ptr es:2, 0
		mov	ax, word_2171C
		mov	es:6, ax
		mov	ax, es
		pop	bp
		retf	4
; ---------------------------------------------------------------------------

loc_6E0:				; CODE XREF: sub_6A4+14j
		mov	byte ptr word_2171E, 3
		jmp	short loc_6F1
; ---------------------------------------------------------------------------

loc_6E7:				; CODE XREF: sub_6A4+22j
		push	es
		push	cs
		call	near ptr sub_267C
		mov	byte ptr word_2171E, 1

loc_6F1:				; CODE XREF: sub_6A4+41j
		xor	ax, ax
		pop	bp
		retf	4
sub_6A4		endp

; ---------------------------------------------------------------------------
		nop
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	di, [bp+0Ah]
		mov	si, [bp+8]
		cmp	si, 0
		jle	short loc_71D

loc_708:				; CODE XREF: seg000:071Bj
		push	word ptr [bp+6]
		push	cs
		call	near ptr sub_5F2
		inc	ah

loc_711:				; DATA XREF: sub_1CF4:loc_1D39r
					; sub_2266+9r
		jz	short loc_71D
		mov	es, word ptr [bp+0Ch]
		mov	es:[di], al
		inc	di
		dec	si
		jnz	short loc_708

loc_71D:				; CODE XREF: seg000:0706j
					; seg000:loc_711j
		mov	ax, di
		sub	ax, [bp+0Ah]
		pop	di
		pop	si
		pop	bp
		retf	8
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		mov	es, word ptr [bp+0Ah]
		mov	ax, es:2
		mov	dx, [bp+6]
		mov	cx, [bp+8]
		or	cx, cx
		jnz	short loc_750
		cmp	dx, ax
		ja	short loc_750
		sub	es:2, dx
		add	es:4, dx
		xor	ax, ax
		pop	bp
		retf	6
; ---------------------------------------------------------------------------

loc_750:				; CODE XREF: seg000:073Aj seg000:073Ej
		mov	bx, es:0
		sub	dx, ax
		sbb	cx, 0
		mov	ax, 4201h
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method: offset from present location
		sbb	ax, ax
		mov	es:2, ax
		pop	bp
		retf	6
; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_76A		proc far		; CODE XREF: sub_2106+34p sub_3506+78p

arg_0		= byte ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

		push	bp
		mov	bp, sp
		mov	es, [bp+arg_6]
		mov	bx, 0
		xchg	bx, es:2
		mov	al, [bp+arg_0]
		mov	dx, [bp+arg_2]
		mov	cx, [bp+arg_4]
		cmp	al, 1
		jnz	short loc_78A
		sub	dx, bx
		sbb	cx, 0

loc_78A:				; CODE XREF: sub_76A+19j
		mov	bx, es:0
		mov	ah, 42h
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method:
					; 0-from beginnig,1-from current,2-from	end
		sbb	ax, ax
		pop	bp
		retf	8
sub_76A		endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_79A		proc near		; CODE XREF: sub_1562+64p sub_1562+6Fp
		or	bl, bl
		jz	short loc_7D6
		test	bl, 3
		jz	short loc_7DA
		test	bl, 1
		jz	short loc_7AE
		mov	ax, word_2166C
		jmp	short loc_7B1
; ---------------------------------------------------------------------------
		nop

loc_7AE:				; CODE XREF: sub_79A+Cj
		mov	ax, word_21670

loc_7B1:				; CODE XREF: sub_79A+11j
		sub	cx, si
		jz	short loc_7D6
		mov	dx, di
		sub	dx, bp
		mov	di, ax
		sub	ax, si
		imul	dx
		idiv	cx
		add	ax, bp
		mov	cx, di
		mov	di, ax
		xor	ax, ax
		or	di, di
		js	short loc_7E4
		mov	ax, word_21674
		cmp	di, ax
		jg	short loc_7E4

loc_7D4:				; CODE XREF: sub_79A+6Ej
		xor	bl, bl

loc_7D6:				; CODE XREF: sub_79A+2j sub_79A+19j ...
		or	bx, bx
		retn
; ---------------------------------------------------------------------------
		nop

loc_7DA:				; CODE XREF: sub_79A+7j
		xor	ax, ax
		test	bl, 4
		jz	short loc_7E4
		mov	ax, word_21674

loc_7E4:				; CODE XREF: sub_79A+31j sub_79A+38j ...
		sub	di, bp
		jz	short loc_7D6
		mov	dx, cx
		sub	dx, si
		mov	cx, ax
		sub	ax, bp
		imul	dx
		idiv	di
		add	ax, si
		mov	di, cx
		mov	cx, ax
		cmp	word_2166C, cx
		jle	short loc_804
		mov	bl, 1
		retn
; ---------------------------------------------------------------------------
		nop

loc_804:				; CODE XREF: sub_79A+64j
		cmp	cx, word_21670
		jle	short loc_7D4
		mov	bl, 2
		retn
sub_79A		endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_80E		proc far		; CODE XREF: sub_D34+1Ap sub_E04+1Dp

arg_0		= dword	ptr  6
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		push	ds
		lds	dx, [bp+arg_0]
		mov	ax, [bp+arg_4]
		int	21h		; DOS -
		pop	ds
		sbb	dx, dx
		xor	ax, dx
		sub	ax, dx
		pop	bp
		retf	6
sub_80E		endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_826		proc far		; CODE XREF: sub_F92+5p
		mov	bx, sp
		mov	bx, ss:[bx+4]
		mov	ax, 4201h
		xor	cx, cx
		mov	dx, cx
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method: offset from present location
		jb	short loc_856
		push	si
		push	di
		push	ax
		push	dx
		xor	dx, dx
		mov	ax, 4202h
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method: offset from end of file
		mov	si, ax
		mov	di, dx
		pop	cx
		pop	dx
		mov	ax, 4200h
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method: offset from beginning of	file
		mov	ax, si
		mov	dx, di
		pop	di
		pop	si
		retf	2
; ---------------------------------------------------------------------------

loc_856:				; CODE XREF: sub_826+Fj
		neg	ax
		sbb	dx, dx
		retf	2
sub_826		endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_85E		proc far		; CODE XREF: sub_1E14+2p
		mov	ax, 0C00h
		int	21h		; DOS -	CLEAR KEYBOARD BUFFER
					; AL must be 01h, 06h, 07h, 08h, or 0Ah.
		retf
sub_85E		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_864		proc far		; CODE XREF: sub_3878+51p

arg_0		= word ptr  6
arg_2		= dword	ptr  8
arg_6		= word ptr  0Ch

		push	bp
		mov	bp, sp
		push	ds
		mov	bx, [bp+arg_6]
		lds	dx, [bp+arg_2]
		mov	cx, [bp+arg_0]
		mov	ah, 3Fh
		int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
					; BX = file handle, CX = number	of bytes to read
					; DS:DX	-> buffer
		pop	ds
		jnb	short loc_87A
		neg	ax

loc_87A:				; CODE XREF: sub_864+12j
		pop	bp
		retf	8
sub_864		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_87E		proc far		; CODE XREF: sub_3878+2Fp sub_3878+3Dp

arg_0		= byte ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

		push	bp
		mov	bp, sp
		mov	bx, [bp+arg_6]
		mov	dx, [bp+arg_2]
		mov	cx, [bp+arg_4]
		mov	al, [bp+arg_0]
		mov	ah, 42h
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method:
					; 0-from beginnig,1-from current,2-from	end
		jnb	short loc_896
		neg	ax
		cwd

loc_896:				; CODE XREF: sub_87E+13j
		pop	bp
		retf	8
sub_87E		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_89A		proc far		; CODE XREF: seg000:04B0p seg000:04C7p ...

arg_0		= dword	ptr  6
arg_4		= byte ptr  0Ah

		push	bp
		mov	bp, sp
		push	ds
		push	bx
		push	es
		mov	al, [bp+arg_4]
		lds	dx, [bp+arg_0]
		mov	ah, 35h
		int	21h		; DOS -	2+ - GET INTERRUPT VECTOR
					; AL = interrupt number
					; Return: ES:BX	= value	of interrupt vector
		mov	ah, 25h
		int	21h		; DOS -	SET INTERRUPT VECTOR
					; AL = interrupt number
					; DS:DX	= new vector to	be used	for specified interrupt
		mov	ax, bx
		mov	dx, es
		pop	es
		pop	bx
		pop	ds
		pop	bp
		retf	6
sub_89A		endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_8BA		proc far		; CODE XREF: sub_8F0+1p
		mov	al, 0

loc_8BC:				; DATA XREF: seg001:5E46o
		out	7Ch, al
		mov	al, 7

loc_8C0:				; DATA XREF: seg001:5E46o
		out	6Ah, al		; PC-98	GDC (6a):
					;
		mov	al, 5
		out	6Ah, al		; PC-98	GDC (6a):
					;
		mov	al, 80h	; ''

loc_8C8:				; DATA XREF: seg001:5E46o
		out	7Ch, al
		mov	al, 6
		out	6Ah, al		; PC-98	GDC (6a):
					;
		retf
sub_8BA		endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_8D0		proc far		; CODE XREF: sub_8F0+27p sub_B835+BEP	...
		mov	ax, 0FFF0h
		mov	dx, 4A0h
		out	dx, ax

loc_8D7:				; DATA XREF: seg001:5E46o
		mov	ax, 0FFFFh
		mov	dx, 4A8h
		out	dx, ax

loc_8DE:				; DATA XREF: seg001:5E46o
		mov	al, 7
		out	6Ah, al		; PC-98	GDC (6a):
					;
		mov	al, 4
		out	6Ah, al		; PC-98	GDC (6a):
					;
		mov	al, 0
		out	7Ch, al
		mov	al, 6

loc_8EC:				; DATA XREF: seg001:5E46o
		out	6Ah, al		; PC-98	GDC (6a):
					;
		retf
sub_8D0		endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_8F0		proc far		; CODE XREF: sub_1361E+3CP
					; sub_13666+27P
		push	cs
		call	near ptr sub_8BA

loc_8F4:				; DATA XREF: seg001:5E46o
		mov	dx, 4A0h
		mov	ax, 0FFF0h
		out	dx, ax

loc_8FB:				; DATA XREF: seg001:5E46o
		mov	dx, 4A2h
		mov	ax, 0FFh
		out	dx, ax
		mov	dx, 4A8h

loc_905:				; DATA XREF: seg001:5E46o
		mov	ax, 0FFFFh
		out	dx, ax
		mov	dx, 4ACh
		xor	ax, ax
		out	dx, ax
		mov	dx, 4AEh
		mov	ax, 0Fh
		out	dx, ax
		push	cs
		call	near ptr sub_8D0
		retf
sub_8F0		endp

; ---------------------------------------------------------------------------
		nop

loc_91C:				; CODE XREF: seg001:22F0P
					; DATA XREF: sub_10898+Fo
		push	bp
		mov	bp, sp
		push	ds
		push	si
		push	di
		mov	cx, [bp+0Eh]
		mov	dx, [bp+0Ah]
		mov	si, [bp+8]
		mov	di, [bp+6]
		mov	ax, di
		shl	ax, 2
		add	ax, di
		shl	ax, 4
		mov	cs:word_9F1, ax
		mov	ax, si
		sub	ax, [bp+0Ch]
		mov	bx, ax
		inc	bx
		mov	ax, si
		shl	si, 2
		add	si, ax
		shl	si, 4
		mov	ax, dx
		shr	ax, 3
		and	ax, 0FFFEh
		add	si, ax
		shr	ax, 1
		mov	bp, cx
		shr	bp, 4
		sub	ax, bp
		inc	ax
		mov	bp, dx
		sub	bp, cx
		mov	cx, ax
		and	dl, 0Fh
		mov	dh, 0Fh
		sub	dh, dl
		mov	dl, dh
		xor	dh, dh
		mov	ax, dx
		push	bx
		push	bp
		mov	bx, bp
		add	bx, ax
		shr	bx, 4
		add	bp, dx
		shr	bp, 4
		cmp	al, dl
		jz	short loc_996
		jl	short loc_990
		cmp	bx, bp
		jnz	short loc_996
		jmp	short loc_994
; ---------------------------------------------------------------------------
		nop

loc_990:				; CODE XREF: seg000:0987j
		cmp	bx, bp
		jge	short loc_996

loc_994:				; CODE XREF: seg000:098Dj
		inc	cx
		nop

loc_996:				; CODE XREF: seg000:0985j seg000:098Bj ...
		pop	bp
		pop	bx
		shl	dl, 4
		or	dl, al
		mov	di, dx
		mov	ax, 29h	; ')'
		sub	ax, cx
		shl	ax, 1
		mov	cs:byte_A00, al
		mov	cs:byte_A03, al
		mov	al, 7
		out	6Ah, al		; PC-98	GDC (6a):
					;
		mov	al, 80h	; ''
		out	7Ch, al
		mov	al, 5
		out	6Ah, al		; PC-98	GDC (6a):
					;
		mov	dx, 4A0h
		mov	ax, 0FFF0h
		out	dx, ax
		mov	dx, 4A2h
		mov	ax, 0FFh
		out	dx, ax
		mov	dx, 4A4h
		mov	ax, 28F0h
		out	dx, ax
		mov	dx, 4A8h
		mov	ax, 0FFFFh
		out	dx, ax
		mov	dx, 4ACh
		mov	ax, di
		or	ax, 1000h
		out	dx, ax
		mov	dx, 4AEh
		mov	ax, bp
		out	dx, ax
		std
		mov	ax, 0A800h
		mov	ds, ax
		assume ds:nothing
		mov	es, ax
		assume es:nothing
		mov	di, si
; ---------------------------------------------------------------------------
		db 81h,	0C7h
word_9F1	dw 1111h		; DATA XREF: seg000:0938w
		db 8Bh,	0D1h, 90h, 8Bh,	0CAh, 0F3h, 0A5h, 2 dup(46h), 2	dup(47h)
		db 83h,	0EEh
byte_A00	db 50h			; DATA XREF: seg000:09A6w
		db 83h,	0EFh
byte_A03	db 50h			; DATA XREF: seg000:09AAw
		db 4Bh,	75h, 0EFh, 0FCh, 0BAh, 0A0h, 4,	0B8h, 0F0h, 0FFh
		db 0EFh, 0B0h, 4, 0E6h,	6Ah, 0B0h, 0, 0E6h, 7Ch, 0B0h
		db 6, 0E6h, 6Ah, 5Fh, 5Eh, 1Fh,	5Dh, 0CAh, 0Ah,	0
; ---------------------------------------------------------------------------

loc_A22:				; CODE XREF: seg001:2291P
		push	bp
		mov	bp, sp
		push	ds
		push	si
		push	di
		mov	cx, [bp+0Eh]
		mov	si, [bp+0Ch]
		mov	dx, [bp+0Ah]
		mov	bx, [bp+8]
		mov	di, [bp+6]
		mov	ax, di
		dec	ax
		shr	ax, 4
		shl	ax, 1
		mov	cs:byte_AF5, al
		sub	bx, si
		inc	bx
		mov	ax, si
		shl	si, 2
		add	si, ax
		shl	si, 4
		mov	ax, cx
		shr	ax, 3
		and	ax, 0FFFEh
		add	si, ax
		shr	ax, 1
		mov	bp, dx
		shr	bp, 4
		sub	bp, ax
		inc	bp
		mov	ax, bp
		mov	bp, dx
		sub	bp, cx
		mov	es, cx
		assume es:nothing
		mov	cx, ax
		mov	dx, es
		sub	dx, di
		and	dx, 0Fh
		mov	ax, es
		and	ax, 0Fh
		push	bx
		push	bp
		mov	bx, bp
		add	bx, ax
		shr	bx, 4
		add	bp, dx
		shr	bp, 4
		cmp	al, dl
		jz	short loc_A9A
		jl	short loc_A94
		cmp	bx, bp
		jnz	short loc_A9A
		jmp	short loc_A98
; ---------------------------------------------------------------------------

loc_A94:				; CODE XREF: seg000:0A8Cj
		cmp	bx, bp
		jge	short loc_A9A

loc_A98:				; CODE XREF: seg000:0A92j
		inc	cx
		nop

loc_A9A:				; CODE XREF: seg000:0A8Aj seg000:0A90j ...
		pop	bp
		pop	bx
		shl	dl, 4
		or	dl, al
		xor	dh, dh
		mov	di, dx
		mov	ax, 29h	; ')'
		sub	ax, cx
		shl	ax, 1
		mov	cs:byte_B02, al
		mov	cs:byte_B05, al
		mov	al, 7
		out	6Ah, al		; PC-98	GDC (6a):
					;
		mov	al, 80h	; ''
		out	7Ch, al
		mov	al, 5
		out	6Ah, al		; PC-98	GDC (6a):
					;
		mov	dx, 4A0h
		mov	ax, 0FFF0h
		out	dx, ax
		mov	dx, 4A2h
		mov	ax, 0FFh
		out	dx, ax
		mov	dx, 4A4h
		mov	ax, 28F0h
		out	dx, ax
		mov	dx, 4A8h
		mov	ax, 0FFFFh
		out	dx, ax
		mov	dx, 4ACh
		mov	ax, di
		out	dx, ax
		mov	dx, 4AEh
		mov	ax, bp
		out	dx, ax
		mov	ax, 0A800h
		mov	ds, ax
		mov	es, ax
		assume es:nothing
		mov	di, si
		dec	di
		dec	di
; ---------------------------------------------------------------------------
		db 83h,	0EFh
byte_AF5	db 50h			; DATA XREF: seg000:0A3Fw
		db 8Bh,	0D1h, 8Bh, 0CAh, 0F3h, 0A5h, 2 dup(4Eh), 2 dup(4Fh)
		db 83h,	0C6h
byte_B02	db 50h			; DATA XREF: seg000:0AACw
		db 83h,	0C7h
byte_B05	db 50h			; DATA XREF: seg000:0AB0w
		db 4Bh,	75h, 0EFh, 0BAh, 0A0h, 4, 0B8h,	0F0h, 0FFh, 0EFh
		db 0B0h, 4, 0E6h, 6Ah, 0B0h, 0,	0E6h, 7Ch, 0B0h, 6, 0E6h
		db 6Ah,	5Fh, 5Eh, 1Fh, 5Dh, 0CAh, 0Ah, 0, 90h
; ---------------------------------------------------------------------------

loc_B24:				; CODE XREF: seg001:22AFP
		push	bp
		mov	bp, sp
		push	ds
		push	si
		push	di
		mov	cx, [bp+0Eh]
		mov	dx, [bp+0Ah]
		mov	si, [bp+8]
		mov	di, [bp+6]
		mov	ax, di
		dec	ax
		shr	ax, 4
		shl	ax, 1
		mov	cs:byte_C05, al
		mov	ax, si
		sub	ax, [bp+0Ch]
		mov	bx, ax
		inc	bx
		mov	ax, si
		shl	si, 2
		add	si, ax
		shl	si, 4
		mov	ax, dx
		shr	ax, 3
		and	ax, 0FFFEh
		add	si, ax
		shr	ax, 1
		mov	bp, cx
		shr	bp, 4
		sub	ax, bp
		inc	ax
		mov	bp, dx
		sub	bp, cx
		mov	cx, ax
		mov	ax, dx
		add	dx, di
		and	dl, 0Fh
		mov	dh, 0Fh
		sub	dh, dl
		and	al, 0Fh
		mov	ah, 0Fh
		sub	ah, al
		mov	al, ah
		xor	ah, ah
		mov	dl, dh
		xor	dh, dh
		push	bx
		push	bp
		mov	bx, bp
		add	bx, ax
		shr	bx, 4
		add	bp, dx
		shr	bp, 4
		cmp	al, dl
		jz	short loc_BA8
		jl	short loc_BA2
		cmp	bx, bp
		jnz	short loc_BA8
		jmp	short loc_BA6
; ---------------------------------------------------------------------------
		nop

loc_BA2:				; CODE XREF: seg000:0B99j
		cmp	bx, bp
		jge	short loc_BA8

loc_BA6:				; CODE XREF: seg000:0B9Fj
		inc	cx
		nop

loc_BA8:				; CODE XREF: seg000:0B97j seg000:0B9Dj ...
		pop	bp
		pop	bx
		shl	dl, 4
		or	dl, al
		mov	di, dx
		mov	ax, 29h	; ')'
		sub	ax, cx
		shl	ax, 1
		mov	cs:byte_C12, al
		mov	cs:byte_C15, al
		mov	al, 7
		out	6Ah, al		; PC-98	GDC (6a):
					;
		mov	al, 80h	; ''
		out	7Ch, al
		mov	al, 5
		out	6Ah, al		; PC-98	GDC (6a):
					;
		mov	dx, 4A0h
		mov	ax, 0FFF0h
		out	dx, ax
		mov	dx, 4A2h
		mov	ax, 0FFh
		out	dx, ax
		mov	dx, 4A4h
		mov	ax, 28F0h
		out	dx, ax
		mov	dx, 4A8h
		mov	ax, 0FFFFh
		out	dx, ax
		mov	dx, 4ACh
		mov	ax, di
		or	ax, 1000h
		out	dx, ax
		mov	dx, 4AEh
		mov	ax, bp
		out	dx, ax
		std
		mov	ax, 0A800h
		mov	ds, ax
		mov	es, ax
		mov	di, si
		inc	di
		inc	di
; ---------------------------------------------------------------------------
		db 83h,	0C7h
byte_C05	db 50h			; DATA XREF: seg000:0B3Ew
		db 8Bh,	0D1h, 8Bh, 0CAh, 0F3h, 0A5h, 2 dup(46h), 2 dup(47h)
		db 83h,	0EEh
byte_C12	db 50h			; DATA XREF: seg000:0BB8w
		db 83h,	0EFh
byte_C15	db 50h			; DATA XREF: seg000:0BBCw
		db 4Bh,	75h, 0EFh, 0FCh, 0BAh, 0A0h, 4,	0B8h, 0F0h, 0FFh
		db 0EFh, 0B0h, 4, 0E6h,	6Ah, 0B0h, 0, 0E6h, 7Ch, 0B0h
		db 6, 0E6h, 6Ah, 5Fh, 5Eh, 1Fh,	5Dh, 0CAh, 0Ah,	0
; ---------------------------------------------------------------------------

loc_C34:				; CODE XREF: seg001:22D2P
		push	bp
		mov	bp, sp
		push	ds
		push	si
		push	di
		mov	cx, [bp+0Eh]
		mov	si, [bp+0Ch]
		mov	dx, [bp+0Ah]
		mov	bx, [bp+8]
		mov	di, [bp+6]
		mov	ax, di
		shl	ax, 2
		add	ax, di
		shl	ax, 4
		mov	cs:word_D03, ax
		sub	bx, si
		inc	bx
		mov	ax, si
		shl	si, 2
		add	si, ax
		shl	si, 4
		mov	ax, cx
		shr	ax, 3
		and	ax, 0FFFEh
		add	si, ax
		shr	ax, 1
		mov	bp, dx
		shr	bp, 4
		sub	bp, ax
		inc	bp
		mov	ax, bp
		mov	bp, dx
		sub	bp, cx
		mov	es, cx
		assume es:nothing
		mov	cx, ax
		mov	ax, es
		and	ax, 0Fh
		mov	dx, ax
		push	bx
		push	bp
		mov	bx, bp
		add	bx, ax
		shr	bx, 4
		add	bp, dx
		shr	bp, 4
		cmp	al, dl
		jz	short loc_CAA
		jl	short loc_CA4
		cmp	bx, bp
		jnz	short loc_CAA
		jmp	short loc_CA8
; ---------------------------------------------------------------------------
		nop

loc_CA4:				; CODE XREF: seg000:0C9Bj
		cmp	bx, bp
		jge	short loc_CAA

loc_CA8:				; CODE XREF: seg000:0CA1j
		inc	cx
		nop

loc_CAA:				; CODE XREF: seg000:0C99j seg000:0C9Fj ...
		pop	bp
		pop	bx
		shl	dl, 4
		or	dl, al
		xor	dh, dh
		mov	di, dx
		mov	ax, 29h	; ')'
		sub	ax, cx
		shl	ax, 1
		mov	cs:byte_D12, al
		mov	cs:byte_D15, al
		mov	al, 7
		out	6Ah, al		; PC-98	GDC (6a):
					;
		mov	al, 80h	; ''
		out	7Ch, al
		mov	al, 5
		out	6Ah, al		; PC-98	GDC (6a):
					;
		mov	dx, 4A0h
		mov	ax, 0FFF0h
		out	dx, ax
		mov	dx, 4A2h
		mov	ax, 0FFh
		out	dx, ax
		mov	dx, 4A4h
		mov	ax, 28F0h
		out	dx, ax
		mov	dx, 4A8h
		mov	ax, 0FFFFh
		out	dx, ax
		mov	dx, 4ACh
		mov	ax, di
		out	dx, ax
		mov	dx, 4AEh
		mov	ax, bp
		out	dx, ax
		mov	ax, 0A800h
		mov	ds, ax
		mov	es, ax
		assume es:nothing
		mov	di, si
; ---------------------------------------------------------------------------
		db 81h,	0EFh
word_D03	dw 1111h		; DATA XREF: seg000:0C53w
		db 8Bh,	0D1h, 90h, 8Bh,	0CAh, 0F3h, 0A5h, 2 dup(4Eh), 2	dup(4Fh)
		db 83h,	0C6h
byte_D12	db 50h			; DATA XREF: seg000:0CBCw
		db 83h,	0C7h
byte_D15	db 50h			; DATA XREF: seg000:0CC0w
		db 4Bh,	75h, 0EFh, 0BAh, 0A0h, 4, 0B8h,	0F0h, 0FFh, 0EFh
		db 0B0h, 4, 0E6h, 6Ah, 0B0h, 0,	0E6h, 7Ch, 0B0h, 6, 0E6h
		db 6Ah,	5Fh, 5Eh, 1Fh, 5Dh, 0CAh, 0Ah, 0, 90h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_D34		proc far		; CODE XREF: sub_12B1E+DP

arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		mov	ax, 0
		mov	bx, ds:360h
		cmp	bx, 0FFFFh
		jnz	short loc_D84
		mov	ax, 3D02h
		push	ax
		push	[bp+arg_2]
		push	[bp+arg_0]
		push	cs
		call	near ptr sub_80E
		or	ax, dx
		mov	ds:360h, ax
		mov	cx, ax
		xor	ax, ax
		mov	ds:2A74h, ax
		mov	ds:2A72h, ax
		mov	ds:2A76h, ax
		mov	ds:2A78h, ax
		mov	ds:2A6Eh, ax
		mov	ds:2A70h, ax
		inc	dx
		jz	short loc_D84
		mov	bx, cx
		xor	cx, cx
		mov	dx, cx
		mov	ax, 4202h
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method: offset from end of file
		mov	ds:2A6Eh, ax
		mov	ds:2A70h, dx
		mov	ax, 1

loc_D84:				; CODE XREF: sub_D34+Dj sub_D34+39j
		pop	bp
		retf	4
sub_D34		endp


; =============== S U B	R O U T	I N E =======================================


sub_D88		proc far		; CODE XREF: sub_DF4+1p sub_F50+1p
		mov	bx, ds:360h
		cmp	bx, 0FFFFh
		jz	short locret_DF2
		mov	ax, ds:2A72h
		cmp	ds:2A74h, ax
		jnb	short loc_DC6
		push	ds
		mov	cx, ds:2A72h
		lds	dx, ds:2A6Ah
		assume ds:dseg
		mov	ah, 40h
		int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
					; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer
		pop	ds
		jb	short loc_DB9
		add	word_23DAE, ax
		adc	word_23DB0, 0
		cmp	word_23DB2, ax
		jz	short loc_DBF

loc_DB9:				; CODE XREF: sub_D88+20j
		mov	word_23DB8, 1

loc_DBF:				; CODE XREF: sub_D88+2Fj
		mov	word_23DB2, 0
		retf
; ---------------------------------------------------------------------------

loc_DC6:				; CODE XREF: sub_D88+10j
		cmp	word_23DB4, 0
		jz	short locret_DF2
		mov	dx, ax
		mov	cx, 0
		add	dx, word_23DAE
		mov	word_23DB4, cx
		mov	word_23DB2, cx
		adc	cx, word_23DB0
		mov	ax, 4200h
		mov	bx, word_216A0
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method: offset from beginning of	file
		mov	word_23DAE, ax
		mov	word_23DB0, dx

locret_DF2:				; CODE XREF: sub_D88+7j sub_D88+43j
		retf
sub_D88		endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_DF4		proc far		; CODE XREF: sub_3284+53p sub_B3EE+44P ...
		push	cs
		call	near ptr sub_D88
		mov	ah, 3Eh
		int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
					; BX = file handle
		mov	word_216A0, 0FFFFh
		retf
sub_DF4		endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_E04		proc far		; CODE XREF: sub_12A0A+7DP

arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		mov	ax, 0
		mov	bx, word_216A0
		cmp	bx, 0FFFFh
		jnz	short loc_E40
		mov	cx, 20h	; ' '
		mov	ah, 3Ch	; '<'
		push	ax
		push	[bp+arg_2]
		push	[bp+arg_0]
		nop
		push	cs
		call	near ptr sub_80E
		or	ax, dx
		mov	word_216A0, ax
		xor	ax, ax
		mov	word_23DB4, ax
		mov	word_23DB2, ax
		mov	word_23DB6, ax
		mov	word_23DB8, ax
		mov	word_23DAE, ax
		mov	word_23DB0, ax
		mov	ax, dx
		inc	ax

loc_E40:				; CODE XREF: sub_E04+Dj
		pop	bp
		retf	4
sub_E04		endp


; =============== S U B	R O U T	I N E =======================================


sub_E44		proc far		; CODE XREF: sub_12AB7+7P
		mov	bx, sp
		push	word ptr ss:[bx+6]
		push	word ptr ss:[bx+4]
		nop
		push	cs
		call	near ptr sub_105C
		jb	short loc_E5A
		xchg	ax, bx
		mov	ah, 3Eh
		int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
					; BX = file handle

loc_E5A:				; CODE XREF: sub_E44+Fj
		sbb	ax, ax
		inc	ax
		retf	4
sub_E44		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_E60		proc far		; CODE XREF: sub_3284+2Cp sub_3284+4Fp ...

arg_0		= word ptr  6
arg_2		= dword	ptr  8

		push	bp
		mov	bp, sp
		push	si
		push	di
		cmp	word_2169E, 0
		jz	short loc_EE4
		mov	bx, [bp+arg_0]
		les	di, [bp+arg_2]
		assume es:nothing

loc_E72:				; CODE XREF: sub_E60+7Fj
		mov	ax, word_23DB4
		cmp	word_23DB2, ax
		jb	short loc_EA8
		add	word_23DAE, ax
		adc	word_23DB0, 0
		push	bx
		push	ds
		mov	cx, word_2169E
		mov	bx, word_216A0
		lds	dx, dword_23DAA
		mov	ah, 3Fh
		int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
					; BX = file handle, CX = number	of bytes to read
					; DS:DX	-> buffer
		pop	ds
		pop	bx
		cmc
		sbb	dx, dx
		and	ax, dx
		mov	word_23DB4, ax
		jz	short loc_F03
		mov	word_23DB2, 0

loc_EA8:				; CODE XREF: sub_E60+19j
		mov	si, word_23DB4
		sub	si, word_23DB2
		sub	si, bx
		sbb	ax, ax
		and	si, ax
		add	si, bx
		mov	ax, es
		or	ax, di
		jz	short loc_ED9
		or	si, si
		jz	short loc_ED9
		push	si
		push	ds
		mov	cx, si
		mov	ax, word_23DB2
		lds	si, dword_23DAA
		add	si, ax
		shr	cx, 1
		rep movsw
		adc	cx, cx
		rep movsb
		pop	ds
		pop	si

loc_ED9:				; CODE XREF: sub_E60+5Cj sub_E60+60j
		add	word_23DB2, si
		sub	bx, si
		jnz	short loc_E72
		jmp	short loc_F09
; ---------------------------------------------------------------------------
		nop

loc_EE4:				; CODE XREF: sub_E60+Aj
		push	ds
		mov	cx, [bp+arg_0]
		mov	bx, word_216A0
		lds	dx, [bp+arg_2]
		mov	ah, 3Fh
		int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
					; BX = file handle, CX = number	of bytes to read
					; DS:DX	-> buffer
		pop	ds
		add	word_23DAE, ax
		adc	word_23DB0, 0
		mov	bx, cx
		sub	bx, ax
		jz	short loc_F09

loc_F03:				; CODE XREF: sub_E60+40j
		mov	word_23DB6, 1

loc_F09:				; CODE XREF: sub_E60+81j sub_E60+A1j
		mov	ax, [bp+arg_0]
		sub	ax, bx
		pop	di
		pop	si
		pop	bp
		retf	6
sub_E60		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_F14		proc far		; CODE XREF: sub_3284+1Bp sub_B3EE+32P ...

arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		xor	ax, ax
		mov	bx, word_216A0
		cmp	bx, 0FFFFh
		jnz	short loc_F4B
		push	[bp+arg_2]
		push	[bp+arg_0]
		nop
		push	cs
		call	near ptr sub_105C
		sbb	bx, bx
		or	ax, bx
		mov	word_216A0, ax
		xor	ax, ax
		mov	word_23DB4, ax
		mov	word_23DAE, ax
		mov	word_23DB0, ax
		mov	word_23DB2, ax
		mov	word_23DB6, ax
		mov	word_23DB8, ax
		lea	ax, [bx+1]

loc_F4B:				; CODE XREF: sub_F14+Cj
		pop	bp
		retf	4
sub_F14		endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_F50		proc far		; CODE XREF: sub_12AB7+2AP
					; sub_12AB7+42P ...
		push	cs
		call	near ptr sub_D88
		cmp	bx, 0FFFFh
		jz	short locret_F81
		push	bp
		mov	bp, sp
		mov	al, [bp+6]
		mov	ah, 42h	; 'B'
		mov	dx, [bp+8]
		mov	cx, [bp+0Ah]
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method:
					; 0-from beginnig,1-from current,2-from	end
		pop	bp
		mov	ax, 4201h
		mov	dx, 0
		mov	cx, dx
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method: offset from present location
		mov	word_23DB6, 0
		mov	word_23DAE, ax
		mov	word_23DB0, dx

locret_F81:				; CODE XREF: sub_F50+7j
		retf	6
sub_F50		endp

; ---------------------------------------------------------------------------
		mov	ax, word_23DB2
		xor	dx, dx
		add	ax, word_23DAE
		adc	dx, word_23DB0
		retf

; =============== S U B	R O U T	I N E =======================================


sub_F92		proc far		; CODE XREF: sub_CE93+16P
		push	word_216A0
		push	cs
		call	near ptr sub_826
		jb	short loc_F9D
		retf
; ---------------------------------------------------------------------------

loc_F9D:				; CODE XREF: sub_F92+8j
		mov	ax, dx
		retf
sub_F92		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_FA0		proc far		; CODE XREF: sub_12A0A+93P
					; sub_12B1E+47P

arg_0		= word ptr  6
arg_2		= dword	ptr  8

		push	bp
		mov	bp, sp
		push	si
		push	di
		cmp	word_2169E, 0
		jz	short loc_1016
		mov	bx, [bp+arg_0]
		mov	si, word ptr [bp+arg_2]

loc_FB2:				; CODE XREF: sub_FA0+6Ej
		mov	cx, word_2169E
		sub	cx, word_23DB2
		sub	cx, bx
		sbb	ax, ax
		and	cx, ax
		add	cx, bx
		les	di, dword_23DAA
		add	di, word_23DB2
		sub	bx, cx
		add	word_23DB2, cx
		push	ds
		mov	ds, word ptr [bp+arg_2+2]
		shr	cx, 1
		rep movsw
		adc	cx, cx
		rep movsb
		pop	ds
		or	ax, ax
		jns	short loc_100C
		push	ds
		push	bx
		mov	cx, word_2169E
		mov	bx, word_216A0
		lds	dx, dword_23DAA
		mov	ah, 40h
		int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
					; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer
		pop	bx
		pop	ds
		jb	short loc_1028
		cmp	word_2169E, ax
		jnz	short loc_1028
		mov	word_23DB2, 0
		add	word_23DAE, ax
		adc	word_23DB0, 0

loc_100C:				; CODE XREF: sub_FA0+3Fj
		or	bx, bx
		jnz	short loc_FB2
		mov	ax, 1
		jmp	short loc_103E
; ---------------------------------------------------------------------------
		nop

loc_1016:				; CODE XREF: sub_FA0+Aj
		push	ds
		mov	cx, [bp+arg_0]
		mov	bx, word_216A0
		lds	dx, [bp+arg_2]
		mov	ah, 40h
		int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
					; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer
		pop	ds
		jnb	short loc_1030

loc_1028:				; CODE XREF: sub_FA0+55j sub_FA0+5Bj
		mov	word_23DB8, 1
		xor	ax, ax

loc_1030:				; CODE XREF: sub_FA0+86j
		add	word_23DAE, ax
		adc	word_23DB0, 0
		add	ax, 0FFFFh
		sbb	ax, ax

loc_103E:				; CODE XREF: sub_FA0+73j
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf	6
sub_FA0		endp


; =============== S U B	R O U T	I N E =======================================


sub_1046	proc far		; CODE XREF: sub_2A74+68p sub_2A74+7Dp ...
		mov	bx, sp
		mov	ah, 3Eh	; '>'
		mov	bx, ss:[bx+4]
		int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
					; BX = file handle
		mov	ax, 0
		jnb	short locret_1058
		mov	ax, 0FFF3h

locret_1058:				; CODE XREF: sub_1046+Dj
		retf	2
sub_1046	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_105C	proc far		; CODE XREF: sub_6A4+1Fp sub_E44+Cp ...
		mov	bx, sp
		mov	ah, 3Dh	; '='
		mov	al, byte_216A2
		push	ds
		lds	dx, ss:[bx+4]
		int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
					; DS:DX	-> ASCIZ filename
					; AL = access mode
					; 0 - read
		pop	ds
		jb	short loc_1070
		retf	4
; ---------------------------------------------------------------------------

loc_1070:				; CODE XREF: sub_105C+Fj
		mov	ax, 0FFFEh
		retf	4
sub_105C	endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_107C

loc_1076:				; CODE XREF: sub_107C+1Fj sub_107C+35j ...
		pop	di
		pop	si
		pop	bp
		retf	8
; END OF FUNCTION CHUNK	FOR sub_107C

; =============== S U B	R O U T	I N E =======================================


sub_107C	proc far		; CODE XREF: sub_E2C3+CEP sub_E2C3+E9P ...

; FUNCTION CHUNK AT 1076 SIZE 00000006 BYTES

		push	bp
		push	si
		push	di
		cli
		add	sp, 0Ah
		pop	di
		pop	si
		pop	ax
		pop	bx
		sub	sp, 12h
		sti
		cmp	bx, si
		jle	short loc_1091
		xchg	bx, si

loc_1091:				; CODE XREF: sub_107C+11j
		mov	bp, word_2166C
		mov	dx, word_2166E
		sub	si, bp
		jl	short loc_1076
		sub	bx, bp
		cmp	bx, 8000h
		sbb	cx, cx
		and	bx, cx
		sub	si, dx
		sbb	cx, cx
		and	si, cx
		add	si, dx
		sub	si, bx
		jl	short loc_1076
		add	bx, bp
		cmp	ax, di
		jle	short loc_10BA
		xchg	ax, di

loc_10BA:				; CODE XREF: sub_107C+3Bj
		mov	dx, word_21672
		mov	bp, word_21674
		sub	di, dx
		js	short loc_1076
		sub	ax, dx
		cmp	ax, 8000h
		sbb	cx, cx
		and	ax, cx
		sub	di, bp
		sbb	cx, cx
		and	di, cx
		add	di, bp
		sub	di, ax
		jl	short loc_1076
		mov	dx, ax
		shl	ax, 2
		add	ax, dx
		add	ax, word_21678
		mov	es, ax
		mov	dx, di
		shl	di, 2
		add	di, dx
		shl	di, 4
		mov	dx, bx
		shr	dx, 4
		shl	dx, 1
		add	di, dx
		and	bx, 0Fh
		add	si, bx
		sub	si, 10h
		shl	bx, 1
		mov	dx, [bx+33Ch]
		not	dx
		mov	bx, si
		and	bx, 0Fh
		shl	bx, 1
		mov	bx, [bx+33Eh]
		sar	si, 4
		js	short loc_1138
		lea	bp, [si+2Ah]
		shl	bp, 1

loc_1120:				; CODE XREF: sub_107C+B3j
		mov	ax, dx
		stosw
		mov	ax, 0FFFFh
		mov	cx, si
		rep stosw
		mov	ax, bx
		stosw
		sub	di, bp
		jnb	short loc_1120
		pop	di
		pop	si
		pop	bp
		retf	8
; ---------------------------------------------------------------------------
		nop

loc_1138:				; CODE XREF: sub_107C+9Dj
		mov	bp, 52h	; 'R'
		mov	ax, dx
		and	ax, bx
		nop

loc_1140:				; CODE XREF: sub_107C+C7j
		stosw
		sub	di, bp
		jnb	short loc_1140
		pop	di
		pop	si
		pop	bp
		retf	8
sub_107C	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_114C	proc far		; CODE XREF: sub_E2C3+B5P
					; sub_E2C3+114P ...

var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

		enter	2, 0
		push	si
		push	di
		mov	ax, [bp+arg_0]
		test	ax, ax
		jz	short loc_11D2
		mov	si, ax
		mov	[bp+var_2], ax
		mov	di, 0

loc_1161:				; CODE XREF: sub_114C+7Ej
		mov	bx, [bp+arg_4]
		mov	ax, bx
		sub	ax, si
		push	ax
		add	bx, si
		push	bx
		mov	ax, [bp+arg_2]
		sub	ax, di
		push	ax
		push	cs
		call	near ptr sub_14DC
		mov	bx, [bp+arg_4]
		mov	ax, bx
		sub	ax, si
		push	ax
		add	bx, si
		push	bx
		mov	ax, [bp+arg_2]
		add	ax, di
		push	ax
		push	cs
		call	near ptr sub_14DC
		mov	ax, di
		stc
		rcl	ax, 1
		sub	[bp+var_2], ax
		jns	short loc_11C7
		mov	bx, [bp+arg_4]
		mov	ax, bx
		sub	ax, di
		push	ax
		add	bx, di
		push	bx
		mov	ax, [bp+arg_2]
		sub	ax, si
		push	ax
		push	cs
		call	near ptr sub_14DC
		mov	bx, [bp+arg_4]
		mov	ax, bx
		sub	ax, di
		push	ax
		add	bx, di
		push	bx
		mov	ax, [bp+arg_2]
		add	ax, si
		push	ax
		push	cs
		call	near ptr sub_14DC
		dec	si
		mov	ax, si
		shl	ax, 1
		add	[bp+var_2], ax

loc_11C7:				; CODE XREF: sub_114C+47j
		inc	di
		cmp	si, di
		jnb	short loc_1161
		pop	di
		pop	si
		leave
		retf	6
; ---------------------------------------------------------------------------

loc_11D2:				; CODE XREF: sub_114C+Bj
		push	[bp+arg_4]
		push	[bp+arg_2]
		push	cs
		call	near ptr sub_1700
		pop	di
		pop	si
		leave
		retf	6
sub_114C	endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_11EC

loc_11E2:				; CODE XREF: sub_11EC+4Fj
		pop	si
		pop	bp
		jmp	loc_135A
; ---------------------------------------------------------------------------

loc_11E7:				; CODE XREF: sub_11EC+18j sub_11EC+22j ...
		pop	si
		pop	bp
		retf	6
; END OF FUNCTION CHUNK	FOR sub_11EC

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_11EC	proc far		; CODE XREF: sub_C718+21P seg001:6D1DP ...

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

; FUNCTION CHUNK AT 11E2 SIZE 0000000A BYTES

		push	bp
		mov	bp, sp
		push	si
		mov	si, [bp+arg_0]
		xor	cx, cx
		mov	ax, [bp+arg_2]
		sub	ax, word_21672
		mov	dx, ax
		sub	ax, si
		cmp	ax, word_21674
		jg	short loc_11E7
		shl	ax, 1
		rcl	cx, 1
		mov	ax, dx
		add	ax, si
		js	short loc_11E7
		cmp	word_21674, ax
		rcl	cx, 1
		mov	ax, [bp+arg_4]
		mov	bx, ax
		sub	ax, si
		cmp	ax, word_21670
		jg	short loc_11E7
		sub	ax, word_2166C
		shl	ax, 1
		rcl	cx, 1
		mov	ax, bx
		add	ax, si
		cmp	ax, word_2166C
		jl	short loc_11E7
		cmp	word_21670, ax
		rcl	cx, 1
		jcxz	short loc_11E2
		or	si, si
		jz	short loc_11E7
		push	di
		mov	al, byte ptr word_216D6
		mov	cs:byte_128D, al
		mov	cs:byte_12F9, al
		mov	es, word_21678
		mov	ax, bx
		mov	word_23DBA, ax
		mov	word_23DBC, dx
		xor	di, di
		mov	bp, si

loc_125E:				; CODE XREF: sub_11EC+8Fj
		call	loc_1286
		cmp	si, di
		jz	short loc_126C
		xchg	si, di
		call	loc_1286
		xchg	si, di

loc_126C:				; CODE XREF: sub_11EC+77j
		stc
		sbb	bp, di
		sub	bp, di
		jns	short loc_1278
		dec	si
		add	bp, si
		add	bp, si

loc_1278:				; CODE XREF: sub_11EC+85j
		inc	di
		cmp	si, di
		jge	short loc_125E
		pop	di
		pop	si
		pop	bp
		retf	6
sub_11EC	endp

; ---------------------------------------------------------------------------
		nop
		retn
; ---------------------------------------------------------------------------
		nop

loc_1286:				; CODE XREF: sub_11EC:loc_125Ep
					; sub_11EC+7Bp
		mov	ax, word_23DBC
		mov	bx, di
; ---------------------------------------------------------------------------
		db 0C1h, 0EBh
byte_128D	db 9			; DATA XREF: sub_11EC+59w
		db 0Bh,	0DBh, 74h, 6Ah,	2Bh, 0C3h, 78h,	5Ch, 3Bh, 6, 34h
		db 3, 7Fh, 0E8h, 8Bh, 0D0h, 0C1h, 0E2h,	2, 3, 0D0h, 0C1h
		db 0E2h, 4, 0A1h, 7Ah, 2Ah, 0Bh, 0F6h, 74h, 26h, 2Bh, 0C6h
		db 3Bh,	6, 2Ch,	3, 7Ch,	19h, 3Bh, 6, 30h, 3, 7Fh, 0C9h
		db 8Bh,	0D8h, 8Bh, 0C8h, 0C1h, 0EBh, 2 dup(3), 0DAh, 80h
		db 0E1h, 7, 0B5h, 80h, 0D2h, 0EDh, 26h,	88h, 2Fh, 0A1h
		db 7Ah,	2Ah, 3,	0C6h, 3Bh, 6, 2Ch, 3, 7Ch, 19h,	3Bh, 6
		db 30h,	3, 7Fh,	13h, 8Bh, 0D8h,	8Bh, 0CBh, 0C1h, 0EBh
		db 2 dup(3), 0DAh, 80h,	0E1h, 7, 0B5h, 80h, 0D2h, 0EDh
		db 26h,	88h, 2Fh, 0A1h,	7Ch, 2Ah, 8Bh, 0DFh, 0C1h, 0EBh
byte_12F9	db 9			; DATA XREF: sub_11EC+5Dw
; ---------------------------------------------------------------------------
		add	ax, bx
		cmp	ax, word_21674
		jnb	short locret_1358
		mov	dx, ax
		shl	dx, 2
		add	dx, ax
		shl	dx, 4
		mov	ax, word_23DBA
		or	si, si
		jz	short loc_1339
		sub	ax, si
		cmp	ax, word_2166C
		jl	short loc_1334
		cmp	ax, word_21670
		jg	short locret_1358
		mov	bx, ax
		mov	cx, ax
		shr	bx, 3
		add	bx, dx
		and	cl, 7
		mov	ch, 80h	; ''
		shr	ch, cl
		mov	es:[bx], ch

loc_1334:				; CODE XREF: seg000:1319j
		mov	ax, word_23DBA
		add	ax, si

loc_1339:				; CODE XREF: seg000:1311j
		cmp	ax, word_2166C
		jl	short locret_1358
		cmp	ax, word_21670
		jg	short locret_1358
		mov	bx, ax
		mov	cx, bx
		shr	bx, 3
		add	bx, dx
		and	cl, 7
		mov	ch, 80h	; ''
		shr	ch, cl
		mov	es:[bx], ch

locret_1358:				; CODE XREF: seg000:1300j seg000:131Fj ...
		retn
; ---------------------------------------------------------------------------
		db    0
; ---------------------------------------------------------------------------

loc_135A:				; CODE XREF: sub_11EC-8j
		push	bp
		mov	bp, sp
		push	si
		push	di
		push	ds
		mov	dx, [bp+6]
		test	dx, dx
		jz	short loc_1394
		mov	al, byte ptr word_216D6
		mov	cs:byte_13B5, al
		mov	cs:byte_13FF, al
		mov	ax, [bp+8]
		sub	ax, word_21672
		mov	bx, [bp+0Ah]
		mov	ds, word_21678
		mov	cs:word_13AF, bx
		mov	cs:word_13B7, ax
		mov	cs:word_1401, ax
		xor	ax, ax
		mov	bp, dx
		jmp	short loc_13AD
; ---------------------------------------------------------------------------
		nop

loc_1394:				; CODE XREF: seg000:1365j seg000:13ABj
		pop	ds
		pop	di
		pop	si
		pop	bp
		retf	6
; ---------------------------------------------------------------------------
		nop

loc_139C:				; CODE XREF: seg000:1446j
		stc
		sbb	bp, ax
		sub	bp, ax
		jns	short loc_13A8
		dec	dx
		add	bp, dx
		add	bp, dx

loc_13A8:				; CODE XREF: seg000:13A1j
		inc	ax
		cmp	dx, ax
		jl	short loc_1394

loc_13AD:				; CODE XREF: seg000:1391j
		push	bp
; ---------------------------------------------------------------------------
		db 0BDh
word_13AF	dw 1234h		; DATA XREF: seg000:1380w
		db 8Bh,	0F8h, 0C1h, 0EFh
byte_13B5	db 9			; DATA XREF: seg000:136Aw
		db 0BBh
word_13B7	dw 1234h		; DATA XREF: seg000:1385w
		db 8Bh,	0F3h, 2Bh, 0F7h, 3, 0FBh, 8Bh, 0DEh, 0C1h, 0E6h
		db 2, 3, 0F3h, 0C1h, 0E6h, 4, 8Bh, 0DFh, 0C1h, 0E7h, 2
		db 3, 0FBh, 0C1h, 0E7h,	4, 8Bh,	0DDh, 2Bh, 0DAh, 8Bh, 0CBh
		db 0C1h, 0EBh, 3, 80h, 0E1h, 7,	0B5h, 80h, 0D2h, 0EDh
		db 88h,	29h, 88h, 28h, 8Bh, 0DDh, 3, 0DAh, 8Bh,	0CBh, 0C1h
		db 0EBh, 3, 80h, 0E1h, 7, 0B5h,	80h, 0D2h, 0EDh, 88h, 29h
		db 88h,	28h, 8Bh, 0FAh,	0C1h, 0EFh
byte_13FF	db 9			; DATA XREF: seg000:136Ew
		db 0BBh
word_1401	dw 1234h		; DATA XREF: seg000:1389w
; ---------------------------------------------------------------------------
		mov	si, bx
		sub	si, di
		add	di, bx
		mov	bx, si
		shl	si, 2
		add	si, bx
		shl	si, 4
		mov	bx, di
		shl	di, 2
		add	di, bx
		shl	di, 4
		mov	bx, bp
		sub	bx, ax
		mov	cx, bx
		shr	bx, 3
		and	cl, 7
		mov	ch, 80h	; ''
		shr	ch, cl
		mov	[bx+di], ch
		mov	[bx+si], ch
		mov	bx, bp
		add	bx, ax
		mov	cx, bx
		shr	bx, 3
		and	cl, 7
		mov	ch, 80h	; ''
		shr	ch, cl
		mov	[bx+di], ch
		mov	[bx+si], ch
		pop	bp
		jmp	loc_139C
; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_144A	proc far		; CODE XREF: sub_11ECB+52P

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

		push	bp
		mov	bp, sp
		mov	ax, [bp+arg_6]
		mov	bx, [bp+arg_2]
		test	ax, bx
		js	short loc_14D6
		cmp	ax, bx
		jl	short loc_145C
		xchg	ax, bx

loc_145C:				; CODE XREF: sub_144A+Fj
		cmp	ax, 8000h
		sbb	dx, dx
		and	ax, dx
		mov	cx, word_216D4
		shl	cx, 3
		dec	cx
		sub	bx, cx
		sbb	dx, dx
		and	bx, dx
		add	bx, cx
		sub	bx, ax
		jl	short loc_14D6
		mov	word_2166C, ax
		mov	word_2166E, bx
		add	ax, bx
		mov	word_21670, ax
		mov	ax, [bp+arg_4]
		mov	bx, [bp+arg_0]
		test	ax, bx
		js	short loc_14D6
		cmp	ax, bx
		jl	short loc_1492
		xchg	ax, bx

loc_1492:				; CODE XREF: sub_144A+45j
		cmp	ax, 8000h
		sbb	dx, dx
		and	ax, dx
		mov	cx, word_216D2
		dec	cx
		sub	bx, cx
		sbb	dx, dx
		and	bx, dx
		add	bx, cx
		sub	bx, ax
		jl	short loc_14D6
		mov	word_21672, ax
		mov	cx, ax
		mov	word_21674, bx
		add	ax, bx
		mov	word_21676, ax
		mov	ax, word_216D4
		xchg	ax, bx
		mul	bx
		mov	word_2167A, ax
		mov	ax, bx
		shr	ax, 4
		mul	cx
		add	ax, word_216CE
		mov	word_21678, ax
		mov	ax, 1
		pop	bp
		retf	8
; ---------------------------------------------------------------------------

loc_14D6:				; CODE XREF: sub_144A+Bj sub_144A+2Bj	...
		xor	ax, ax
		pop	bp
		retf	8
sub_144A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_14DC	proc far		; CODE XREF: sub_114C+27p sub_114C+3Cp ...

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		push	di
		mov	dx, [bp+arg_0]
		sub	dx, word_21672
		cmp	dx, word_21674
		ja	short loc_155C
		mov	cx, [bp+arg_4]
		mov	bx, [bp+arg_2]
		mov	bp, dx
		shl	bp, 2
		add	bp, dx
		shl	bp, 4
		mov	ax, word_2166C
		sub	cx, ax
		sub	bx, ax
		test	cx, bx
		js	short loc_155C
		cmp	cx, bx
		jg	short loc_150E
		xchg	cx, bx

loc_150E:				; CODE XREF: sub_14DC+2Ej
		cmp	bx, 8000h
		sbb	dx, dx
		and	bx, dx
		mov	di, word_2166E
		sub	cx, di
		sbb	dx, dx
		and	cx, dx
		add	cx, di
		sub	cx, bx
		jl	short loc_155C
		mov	es, word_21678
		add	bx, ax
		mov	di, bx
		shr	di, 4
		shl	di, 1
		add	di, bp
		and	bx, 0Fh
		add	cx, bx
		sub	cx, 10h
		shl	bx, 1
		mov	ax, [bx+33Ch]
		not	ax
		mov	bx, cx
		and	bx, 0Fh
		shl	bx, 1
		sar	cx, 4
		js	short loc_1557
		stosw
		mov	ax, 0FFFFh
		rep stosw

loc_1557:				; CODE XREF: sub_14DC+73j
		and	ax, [bx+33Eh]
		stosw

loc_155C:				; CODE XREF: sub_14DC+Fj sub_14DC+2Aj	...
		pop	di
		pop	bp
		retf	6
sub_14DC	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_1562	proc far		; CODE XREF: sub_EC8E+33P sub_EC8E+61P ...
		push	bp
		push	si
		push	di
		cli
		add	sp, 0Ah
		pop	bp
		pop	si
		pop	di
		pop	cx
		sub	sp, 12h
		sti
		mov	ax, word_21672
		sub	di, ax
		sub	bp, ax
		mov	ax, word_2166C
		mov	dx, word_21674
		mov	bx, 505h
		cmp	ax, cx
		jg	short loc_1592
		xor	bl, 3
		cmp	cx, word_21670
		jg	short loc_1592
		xor	bl, 2

loc_1592:				; CODE XREF: sub_1562+22j sub_1562+2Bj
		cmp	di, dx
		jg	short loc_15A0
		xor	bl, 0Ch
		or	di, di
		js	short loc_15A0
		xor	bl, 8

loc_15A0:				; CODE XREF: sub_1562+32j sub_1562+39j
		cmp	ax, si
		jg	short loc_15B0
		xor	bh, 3
		cmp	si, word_21670
		jg	short loc_15B0
		xor	bh, 2

loc_15B0:				; CODE XREF: sub_1562+40j sub_1562+49j
		cmp	bp, dx
		jg	short loc_15BE
		xor	bh, 0Ch
		or	bp, bp
		js	short loc_15BE
		xor	bh, 8

loc_15BE:				; CODE XREF: sub_1562+50j sub_1562+57j
		test	bh, bl
		jnz	short loc_1629
		or	bx, bx
		jz	short loc_15D6
		call	sub_79A
		jz	short loc_15D6
		xchg	bh, bl
		xchg	cx, si
		xchg	di, bp
		call	sub_79A
		jnz	short loc_1629

loc_15D6:				; CODE XREF: sub_1562+62j sub_1562+67j
		mov	es, word_21678
		sub	si, cx
		jnb	short loc_15E4
		add	cx, si
		neg	si
		xchg	di, bp

loc_15E4:				; CODE XREF: sub_1562+7Aj
		sub	bp, di
		sbb	dx, dx
		mov	bx, 50h	; 'P'
		add	bx, dx
		xor	bx, dx
		add	bp, dx
		xor	dx, bp
		mov	ax, di
		shl	ax, 2
		add	di, ax
		shl	di, 4
		mov	ax, cx
		shr	ax, 3
		add	di, ax
		xor	ax, ax
		cmp	si, dx
		jg	short loc_167E
		jz	short loc_163C
		dec	bx
		xchg	dx, si
		div	si
		mov	dx, 8000h
		mov	bp, ax
		and	cl, 7
		mov	al, dh
		shr	al, cl
		lea	cx, [si+1]

loc_1620:				; CODE XREF: sub_1562+C5j sub_1562+D2j
		stosb
		add	dx, bp
		jb	short loc_1630
		add	di, bx
		loop	loc_1620

loc_1629:				; CODE XREF: sub_1562+5Ej sub_1562+72j
		pop	di
		pop	si
		pop	bp
		retf	8
; ---------------------------------------------------------------------------
		nop

loc_1630:				; CODE XREF: sub_1562+C1j
		ror	al, 1
		adc	di, bx
		loop	loc_1620
		pop	di
		pop	si
		pop	bp
		retf	8
; ---------------------------------------------------------------------------

loc_163C:				; CODE XREF: sub_1562+A8j
		dec	bx
		and	cl, 7
		mov	al, 80h	; ''
		shr	al, cl
		lea	cx, [si+1]
		shr	cx, 1
		jnb	short loc_1650
		stosb
		ror	al, 1
		adc	di, bx

loc_1650:				; CODE XREF: sub_1562+E7j
		jcxz	short loc_1678
		shr	cx, 1
		jnb	short loc_1660
		stosb
		ror	al, 1
		adc	di, bx
		stosb
		ror	al, 1
		adc	di, bx

loc_1660:				; CODE XREF: sub_1562+F2j
		jcxz	short loc_1678

loc_1662:				; CODE XREF: sub_1562+114j
		stosb
		ror	al, 1
		adc	di, bx
		stosb
		ror	al, 1
		adc	di, bx
		stosb
		ror	al, 1
		adc	di, bx
		stosb
		ror	al, 1
		adc	di, bx
		loop	loc_1662

loc_1678:				; CODE XREF: sub_1562:loc_1650j
					; sub_1562:loc_1660j
		pop	di
		pop	si
		pop	bp
		retf	8
; ---------------------------------------------------------------------------

loc_167E:				; CODE XREF: sub_1562+A6j
		and	di, 0FFFEh
		or	dx, dx
		jz	short loc_16D2
		div	si
		mov	dx, 8000h
		mov	bp, dx
		and	cl, 0Fh
		shr	dx, cl
		mov	cx, si
		inc	cx
		mov	si, ax
		xor	ax, ax

loc_1698:				; CODE XREF: sub_1562+140j
					; sub_1562+155j ...
		or	ax, dx
		ror	dx, 1
		jb	short loc_16AE
		add	bp, si
		jb	short loc_16C0
		loop	loc_1698
		xchg	ah, al
		stosw
		pop	di
		pop	si
		pop	bp
		retf	8
; ---------------------------------------------------------------------------
		nop

loc_16AE:				; CODE XREF: sub_1562+13Aj
		xchg	ah, al
		stosw
		xor	ax, ax
		add	bp, si
		jb	short loc_16C7
		loop	loc_1698
		pop	di
		pop	si
		pop	bp
		retf	8
; ---------------------------------------------------------------------------
		nop

loc_16C0:				; CODE XREF: sub_1562+13Ej
		xchg	ah, al
		mov	es:[di], ax
		xor	ax, ax

loc_16C7:				; CODE XREF: sub_1562+153j
		add	di, bx
		loop	loc_1698
		pop	di
		pop	si
		pop	bp
		retf	8
; ---------------------------------------------------------------------------
		nop

loc_16D2:				; CODE XREF: sub_1562+121j
		mov	bx, cx
		and	bx, 0Fh
		lea	cx, [bx+si-10h]
		shl	bx, 1
		mov	ax, [bx+33Ch]
		not	ax
		mov	bx, cx
		and	bx, 0Fh
		shl	bx, 1
		sar	cx, 4
		js	short loc_16F4
		stosw
		mov	ax, 0FFFFh
		rep stosw

loc_16F4:				; CODE XREF: sub_1562+18Aj
		and	ax, [bx+33Eh]
		stosw
		pop	di
		pop	si
		pop	bp
		retf	8
sub_1562	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1700	proc far		; CODE XREF: sub_114C+8Dp

arg_0		= word ptr  4
arg_2		= word ptr  6

		mov	bx, bp
		mov	bp, sp
		mov	cx, [bp+arg_2]
		mov	dx, [bp+arg_0]
		mov	bp, bx
		cmp	cx, word_2166C
		jl	short locret_1740
		cmp	cx, word_21670
		jg	short locret_1740
		sub	dx, word_21672
		jl	short locret_1740
		cmp	dx, word_21674
		jg	short locret_1740
		mov	ax, dx
		shl	ax, 2
		add	dx, ax
		add	dx, word_21678
		mov	es, dx
		mov	bx, cx
		shr	bx, 3
		and	cl, 7
		mov	al, 80h	; ''
		shr	al, cl
		mov	es:[bx], al

locret_1740:				; CODE XREF: sub_1700+10j sub_1700+16j ...
		retf	4
sub_1700	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_1744	proc far		; CODE XREF: sub_BF16+EP sub_CFBE+AP ...
		mov	bx, sp
		mov	al, ss:[bx+6]
		mov	ah, ss:[bx+4]
		mov	dx, 7Eh	; '~'
		pushf
		cli
		out	7Ch, al
		shr	ah, 1
		sbb	al, al
		out	dx, al
		shr	ah, 1
		sbb	al, al
		out	dx, al
		shr	ah, 1
		sbb	al, al
		out	dx, al
		shr	ah, 1
		sbb	al, al
		out	dx, al
		popf
		retf	4
sub_1744	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_176E	proc far		; CODE XREF: seg000:3274p
		xor	al, al
		out	7Ch, al
		retf
sub_176E	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1774	proc far		; CODE XREF: sub_E2C3+4BP seg001:85EAP

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		push	di
		mov	ax, word_21672
		mov	cx, word_21674
		mov	bx, [bp+arg_2]
		mov	dx, [bp+arg_0]
		cmp	bx, dx
		jl	short loc_178B
		xchg	bx, dx

loc_178B:				; CODE XREF: sub_1774+13j
		sub	dx, ax
		jl	short loc_17F4
		sub	bx, ax
		cmp	bh, 80h	; ''
		sbb	di, di
		and	bx, di
		cmp	bx, cx
		jg	short loc_17F4
		sub	dx, cx
		sbb	di, di
		and	dx, di
		add	dx, cx
		mov	ax, [bp+arg_4]
		cmp	ax, word_2166C
		jl	short loc_17F4
		cmp	ax, word_21670
		jg	short loc_17F4
		mov	cx, ax
		and	cl, 7
		shr	ax, 3
		mov	di, ax
		mov	al, 80h	; ''
		shr	al, cl
		mov	cx, dx
		mov	dx, 4Fh	; 'O'
		sub	cx, bx
		imul	bx, 50h
		add	di, bx
		mov	es, word_21678
		inc	cx
		shr	cx, 1
		jnb	short loc_17D9
		stosb
		add	di, dx

loc_17D9:				; CODE XREF: sub_1774+60j
		shr	cx, 1
		jnb	short loc_17E3
		stosb
		add	di, dx
		stosb
		add	di, dx

loc_17E3:				; CODE XREF: sub_1774+67j
		jcxz	short loc_17F4
		nop

loc_17E6:				; CODE XREF: sub_1774+7Ej
		stosb
		add	di, dx
		stosb
		add	di, dx
		stosb
		add	di, dx
		stosb
		add	di, dx
		loop	loc_17E6

loc_17F4:				; CODE XREF: sub_1774+19j sub_1774+26j ...
		pop	di
		pop	bp
		retf	6
sub_1774	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_17FA	proc near		; CODE XREF: sub_1D50+3Ap sub_1D50+43p ...
		out	0A0h, al	; PIC 2	 same as 0020 for PIC 1
		mov	al, ah
		jmp	short $+2
		jmp	short $+2
		out	0A0h, al	; PIC 2	 same as 0020 for PIC 1
		retn
sub_17FA	endp

; ---------------------------------------------------------------------------
		db    0
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_1A1A

loc_1806:				; CODE XREF: sub_1A1A+11j
		push	cs
		call	near ptr sub_1A0C
		jnz	short loc_1811
		mov	ax, 40h	; '@'
		jmp	short loc_187D
; ---------------------------------------------------------------------------

loc_1811:				; CODE XREF: sub_1A1A-210j
		xor	al, al
		mov	dx, 0FFF7h
		mov	es, dx
		assume es:nothing
		mov	dx, 1827h
		cmp	dx, es:0
		jnz	short loc_1826
		or	al, 2Ah
		jmp	short loc_1867
; ---------------------------------------------------------------------------

loc_1826:				; CODE XREF: sub_1A1A-1FAj
		mov	dx, 0FD80h
		mov	es, dx
		assume es:nothing
		mov	dx, 2A27h
		cmp	dx, es:2
		jnz	short loc_184E
		mov	ah, es:4
		mov	bx, 364h
		or	al, 22h

loc_183F:				; CODE XREF: sub_1A1A-1D2j
		mov	dl, [bx]
		or	dl, dl
		jz	short loc_1867
		inc	bx
		cmp	ah, dl
		jnz	short loc_183F
		or	al, 21h
		jmp	short loc_1867
; ---------------------------------------------------------------------------

loc_184E:				; CODE XREF: sub_1A1A-1E7j
		xor	bx, bx
		mov	es, bx
		assume es:seg000
		or	al, es:byte_501
		and	al, 8
		or	al, 20h
		mov	dh, byte ptr es:loc_400
		and	dh, 80h
		rol	dh, 1
		or	al, dh

loc_1867:				; CODE XREF: sub_1A1A-1F6j
					; sub_1A1A-1D7j ...
		mov	dh, byte ptr es:loc_45B+1
		and	dh, 40h
		ror	dh, 1
		ror	dh, 1
		ror	dh, 1
		ror	dh, 1
		or	al, dh
		xor	ah, ah
		xor	al, 1

loc_187D:				; CODE XREF: sub_1A1A-20Bj
		mov	word_216E2, ax
		jmp	loc_19DA
; END OF FUNCTION CHUNK	FOR sub_1A1A
; ---------------------------------------------------------------------------
		nop
; START	OF FUNCTION CHUNK FOR sub_1A1A

loc_1884:				; CODE XREF: sub_1A1A:loc_1A2Ej
		push	cs
		call	near ptr sub_1A0C
		jnz	short loc_1890
		mov	ax, 80h	; ''
		jmp	loc_19B9
; ---------------------------------------------------------------------------

loc_1890:				; CODE XREF: sub_1A1A-192j
		xor	bx, bx
		mov	ax, 4F01h
		int	2Fh
		or	bx, bx
		jz	short loc_18C1
		push	ds
		mov	ax, 0F000h
		mov	ds, ax
		assume ds:nothing
		mov	al, ds:0E010h
		cmp	al, 54h	; 'T'
		jnz	short loc_18BB
		xor	ax, ax
		mov	ds, ax
		assume ds:seg000
		mov	al, byte_4D0
		not	al
		and	al, 1
		or	al, 16h
		xor	ah, ah
		pop	ds
		assume ds:dseg
		jmp	loc_19B9
; ---------------------------------------------------------------------------

loc_18BB:				; CODE XREF: sub_1A1A-174j
		pop	ds

loc_18BC:				; CODE XREF: sub_1A1A-136j
		mov	bx, 1Ah
		jmp	short loc_190C
; ---------------------------------------------------------------------------

loc_18C1:				; CODE XREF: sub_1A1A-181j
		xor	bx, bx
		mov	ax, 5001h
		int	10h		; - VIDEO - SCROLOCK.COM - INSTALLATION	CHECK
					; Return: BX = 1954h if	installed
					; AL = 00 if inactive, nonzero if active
		or	bl, bl
		jz	short loc_18DC
		mov	ax, 14h
		cmp	bx, 51h	; 'Q'
		jnz	short loc_18D7
		jmp	loc_19B9
; ---------------------------------------------------------------------------

loc_18D7:				; CODE XREF: sub_1A1A-148j
		or	ax, bx
		jmp	loc_19B9
; ---------------------------------------------------------------------------

loc_18DC:				; CODE XREF: sub_1A1A-150j
		mov	ax, 3000h
		int	21h		; DOS -	GET DOS	VERSION
					; Return: AL = major version number (00h for DOS 1.x)
		cmp	bh, 0FFh
		jz	short loc_18BC
		and	bh, 0FEh
		cmp	bh, 0EEh ; 'î'
		jnz	short loc_18F2
		mov	dl, 18h
		jmp	short loc_190C
; ---------------------------------------------------------------------------

loc_18F2:				; CODE XREF: sub_1A1A-12Ej
		mov	ax, 4900h
		pushf
		int	15h
		sbb	ax, ax
		popf
		test	ax, ax
		jz	short loc_1902
		jmp	loc_19A4
; ---------------------------------------------------------------------------

loc_1902:				; CODE XREF: sub_1A1A-11Dj
		or	bl, bl
		jz	short loc_1909
		jmp	loc_19A4
; ---------------------------------------------------------------------------

loc_1909:				; CODE XREF: sub_1A1A-116j
		mov	bx, 12h

loc_190C:				; CODE XREF: sub_1A1A-15Bj
					; sub_1A1A-12Aj
		push	ds
		push	si
		xor	ax, ax
		mov	ds, ax
		assume ds:seg000
		mov	ax, 6300h
		int	21h		; DOS -	3.2+ only - GET	DOUBLE BYTE CHARACTER SET LEAD TABLE
		mov	ax, [si]
		not	ax
		and	ax, 1
		or	bx, ax
		pop	si
		pop	ds
		assume ds:dseg
		pushf
		push	bx
		mov	ax, 5010h
		int	15h
		cmp	ah, 86h	; ''
		jnz	short loc_1932
		xor	ax, ax
		jmp	short loc_1939
; ---------------------------------------------------------------------------

loc_1932:				; CODE XREF: sub_1A1A-EEj
		mov	ax, es:[bx+2]
		and	ax, 1

loc_1939:				; CODE XREF: sub_1A1A-EAj
		pop	bx
		popf
		jb	short loc_1967
		ror	al, 1
		ror	al, 1
		or	ax, bx
		test	ax, 40h
		jz	short loc_1967
		mov	bx, ax
		mov	dx, 36Eh
		mov	ax, 3D00h
		int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
					; DS:DX	-> ASCIZ filename
					; AL = access mode
					; 0 - read
		jnb	short loc_195B
		xor	bx, 40h
		mov	ax, bx
		jmp	short loc_19B9
; ---------------------------------------------------------------------------

loc_195B:				; CODE XREF: sub_1A1A-C8j
		push	bx
		mov	bx, ax
		mov	ah, 3Eh
		int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
					; BX = file handle
		pop	bx
		mov	ax, bx
		jmp	short loc_19B9
; ---------------------------------------------------------------------------

loc_1967:				; CODE XREF: sub_1A1A-DFj sub_1A1A-D4j
		push	bx
		mov	dx, 377h
		mov	ax, 3D00h
		int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
					; DS:DX	-> ASCIZ filename
					; AL = access mode
					; 0 - read
		jb	short loc_199F
		push	ax
		mov	dx, 380h
		mov	cx, 4
		mov	bx, ax
		mov	ax, 4402h
		int	21h		; DOS -	2+ - IOCTL - READ CHARACTER DEVICE CONTROL STRING
					; BX = device handle, CX = number of bytes to read DS:DX -> buffer
		pop	ax
		pushf
		mov	bx, ax
		mov	ah, 3Eh
		int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
					; BX = file handle
		popf
		jb	short loc_199F
		mov	ax, 50F1h
		call	dword_216C0
		or	ah, ah
		jnz	short loc_199F
		pop	bx
		or	bx, 200h
		mov	ax, bx
		jmp	short loc_19B9
; ---------------------------------------------------------------------------

loc_199F:				; CODE XREF: sub_1A1A-AAj sub_1A1A-91j ...
		pop	bx
		mov	ax, bx
		jmp	short loc_19B9
; ---------------------------------------------------------------------------

loc_19A4:				; CODE XREF: sub_1A1A-11Bj
					; sub_1A1A-114j
		push	ds
		xor	ax, ax
		mov	ds, ax
		assume ds:seg000
		mov	ax, word ptr loc_1F3+1
		or	ax, word ptr loc_1F3+3
		pop	ds
		assume ds:dseg
		mov	ax, 10h
		jnz	short loc_19B9
		mov	ax, 11h

loc_19B9:				; CODE XREF: sub_1A1A-18Dj
					; sub_1A1A-162j ...
		mov	dx, ax
		mov	ax, 1A00h
		xor	bx, bx
		xor	cx, cx
		int	2Fh		; - Multiplex -	DOS 4+ ANSI.SYS	internal - INSTALLATION	CHECK
					; Return: AL = FFh if installed
		mov	ah, al
		cmp	ax, 0FFFFh
		jnz	short loc_19D0
		and	ax, 110h
		or	dx, ax

loc_19D0:				; CODE XREF: sub_1A1A-51j
		mov	word_216E2, dx
		mov	ax, dx
		; Hack
		db 0e9h
		db 001h
		db 000h
; END OF FUNCTION CHUNK	FOR sub_1A1A
; ---------------------------------------------------------------------------
		nop
; START	OF FUNCTION CHUNK FOR sub_1A1A

loc_19DA:				; CODE XREF: sub_1A1A-19Aj
					; sub_1A1A-44j
		mov	ax, 3306h
		int	21h		; DOS -	5+ Get TRUE Version Number (BL major, BH minor,	DL revision, DH	flags)
		cmp	al, 0FFh
		jz	short loc_19F8
		cmp	bx, 3205h
		jz	short loc_1A01
		cmp	bl, 0Ah
		jz	short loc_1A01
		cmp	bl, 14h
		jz	short loc_1A01
		cmp	bl, 1Eh
		jz	short loc_1A01

loc_19F8:				; CODE XREF: sub_1A1A-39j
		mov	ax, 1600h
		int	2Fh		; - Multiplex -	MS WINDOWS - ENHANCED WINDOWS INSTALLATION CHECK
					; Return: AL = anything	else
					; AL = Windows major version number >= 3
					; AH = Windows minor version number
		and	al, 7Fh
		jz	short loc_1A07

loc_1A01:				; CODE XREF: sub_1A1A-33j sub_1A1A-2Ej ...
		or	word_216E2, 8000h

loc_1A07:				; CODE XREF: sub_1A1A-1Bj
		mov	ax, word_216E2
		retf
; END OF FUNCTION CHUNK	FOR sub_1A1A
; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_1A0C	proc far		; CODE XREF: sub_1A1A-213p
					; sub_1A1A-195p ...
		mov	ax, 0FFFFh
		mov	es, ax
		assume es:nothing
		mov	ax, 0FC00h
		sub	ax, es:3
		retf
sub_1A0C	endp


; =============== S U B	R O U T	I N E =======================================


sub_1A1A	proc far		; CODE XREF: sub_3DB4+Ap

; FUNCTION CHUNK AT 1806 SIZE 0000007D BYTES
; FUNCTION CHUNK AT 1884 SIZE 00000155 BYTES
; FUNCTION CHUNK AT 19DA SIZE 00000031 BYTES

		push	cs
		call	near ptr sub_1A0C
		jz	short loc_1A31
		mov	ah, 0Fh
		int	10h		; - VIDEO - GET	CURRENT	VIDEO MODE
					; Return: AH = number of columns on screen
					; AL = current video mode
					; BH = current active display page
		cmp	ah, 0Fh
		jnz	short loc_1A2E
		nop
		nop
		jmp	loc_1806
; ---------------------------------------------------------------------------

loc_1A2E:				; CODE XREF: sub_1A1A+Dj
		jmp	loc_1884
; ---------------------------------------------------------------------------

loc_1A31:				; CODE XREF: sub_1A1A+4j
		mov	ax, 40h	; '@'
		retf
sub_1A1A	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_1A36	proc far		; CODE XREF: _main+2EP
		xor	ax, ax
		cmp	word_216C4, ax
		jnz	short locret_1A59
		mov	ax, 200h
		push	ax
		nop
		push	cs
		call	near ptr sub_258C
		or	ax, ax
		jz	short locret_1A59
		mov	word_216C4, ax
		push	ax
		xor	ax, ax
		push	ax
		push	cs
		call	near ptr sub_1BEE
		mov	ax, 1

locret_1A59:				; CODE XREF: sub_1A36+6j sub_1A36+13j
		retf
sub_1A36	endp


; =============== S U B	R O U T	I N E =======================================


sub_1A5A	proc far		; CODE XREF: sub_E7FD+85P
		mov	ax, word_216C4
		test	ax, ax
		jz	short locret_1A75
		push	ax
		push	ax
		xor	ax, ax
		mov	word_216C4, ax
		push	ax
		push	cs
		call	near ptr sub_1C5C
		nop
		push	cs
		call	near ptr sub_267C
		mov	ax, 1

locret_1A75:				; CODE XREF: sub_1A5A+5j
		retf
sub_1A5A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1A76	proc far		; CODE XREF: _main+37P

arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		push	si
		push	di
		sub	sp, 20h
		push	[bp+arg_2]
		push	[bp+arg_0]
		nop
		push	cs
		call	near ptr sub_105C
		mov	bp, ax
		mov	ax, 0
		jb	short loc_1B03
		mov	ax, 2000h
		push	ax
		nop
		push	cs
		call	near ptr sub_21F4
		mov	si, ax
		mov	ax, 0
		jb	short loc_1AFB
		mov	ax, sp
		push	bp
		push	ss
		push	ax
		nop
		push	cs
		call	near ptr sub_3D6
		jb	short loc_1AF1
		mov	di, sp
		push	ss
		pop	es
		assume es:nothing
		cmp	byte ptr es:[di+5], 0
		jnz	short loc_1AF1
		add	di, 8
		push	si
		mov	si, 386h
		mov	cx, 4
		repe cmpsw
		pop	si
		jnz	short loc_1AF1
		mov	ax, sp
		push	bp
		push	ss
		push	ax
		nop
		push	cs
		call	near ptr sub_3B4
		push	ds
		mov	ds, si
		mov	bx, bp
		xor	dx, dx
		mov	cx, 2000h
		mov	ah, 3Fh
		int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
					; BX = file handle, CX = number	of bytes to read
					; DS:DX	-> buffer
		pop	ds
		cmp	ax, 2000h
		jnz	short loc_1AF1
		push	si
		xor	ax, ax
		push	ax
		push	cs
		call	near ptr sub_1C5C
		mov	ax, 1
		jmp	short loc_1AF3
; ---------------------------------------------------------------------------

loc_1AF1:				; CODE XREF: sub_1A76+34j sub_1A76+3Fj ...
		xor	ax, ax

loc_1AF3:				; CODE XREF: sub_1A76+79j
		push	ax
		push	si
		nop
		push	cs
		call	near ptr sub_21DE
		pop	ax

loc_1AFB:				; CODE XREF: sub_1A76+28j
		push	ax
		mov	bx, bp
		mov	ah, 3Eh
		int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
					; BX = file handle
		pop	ax

loc_1B03:				; CODE XREF: sub_1A76+18j
		add	sp, 20h
		pop	di
		pop	si
		pop	bp
		retf	4
sub_1A76	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1B0C	proc far		; CODE XREF: sub_D1BC+16EP
					; sub_E461+53P	...

arg_0		= word ptr  4
arg_2		= byte ptr  6
arg_4		= word ptr  8
arg_6		= word ptr  0Ah

		mov	dx, bp
		mov	bp, sp
		mov	cx, di
		mov	ax, [bp+arg_4]
		mov	di, ax
		shl	ax, 1
		shl	ax, 1
		add	di, ax
		shl	di, 1
		add	di, word_21AA8
		mov	es, di
		mov	di, [bp+arg_6]
		shl	di, 1
		mov	ah, [bp+arg_2]
		mov	al, 0
		rol	ax, 1
		shr	ax, 1
		adc	ax, 56h	; 'V'
		mov	bx, [bp+arg_0]
		mov	bp, dx
		mov	es:[di+2000h], bx
		stosw
		or	ah, 80h
		mov	es:[di+2000h], bx
		stosw
		mov	di, cx
		retf	8
sub_1B0C	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1B50	proc far		; CODE XREF: sub_B2CF+21P sub_B2CF+33P ...

arg_0		= word ptr  4
arg_2		= dword	ptr  6
arg_6		= word ptr  0Ah
arg_8		= word ptr  0Ch

		mov	dx, bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, [bp+arg_6]
		mov	di, ax
		shl	ax, 1
		shl	ax, 1
		add	di, ax
		shl	di, 1
		add	di, word_21AA8
		mov	es, di
		mov	di, [bp+arg_8]
		shl	di, 1
		push	ds
		lds	si, [bp+arg_2]
		mov	cx, di
		mov	bx, [bp+arg_0]
		mov	bp, dx
		lodsb
		or	al, al
		jz	short loc_1B92

loc_1B7E:				; CODE XREF: sub_1B50+40j
		mov	ah, al
		mov	al, 0
		rol	ax, 1
		shr	ax, 1
		adc	al, 56h	; 'V'
		stosw
		or	ah, 80h
		stosw
		lodsb
		or	al, al
		jnz	short loc_1B7E

loc_1B92:				; CODE XREF: sub_1B50+2Cj
		xchg	cx, di
		sub	cx, di
		shr	cx, 1
		mov	ax, bx
		add	di, 2000h
		rep stosw
		pop	ds
		pop	di
		pop	si
		retf	0Ah
sub_1B50	endp


; =============== S U B	R O U T	I N E =======================================


sub_1BA6	proc near		; CODE XREF: seg000:1BE2p sub_1BEE+15p
		out	0A1h, al	; Interrupt Controller #2, 8259A
		mov	al, ah
		out	0A3h, al	; Interrupt Controller #2, 8259A
		mov	cx, 10h
		mov	bx, 0

loc_1BB2:				; CODE XREF: sub_1BA6+1Ej
		mov	al, bl
		out	0A5h, al	; Interrupt Controller #2, 8259A
		in	al, 0A9h	; Interrupt Controller #2, 8259A
		mov	ah, al
		mov	al, bl
		or	al, 20h
		out	0A5h, al	; Interrupt Controller #2, 8259A
		in	al, 0A9h	; Interrupt Controller #2, 8259A
		stosw
		inc	bx
		loop	loc_1BB2
		retn
sub_1BA6	endp

; ---------------------------------------------------------------------------
		nop
		push	di
		mov	dx, sp
		cli
		add	sp, 6
		pop	di
		pop	es
		pop	ax
		mov	sp, dx
		sti
		mov	ah, 0
		add	ax, 5680h
		and	al, 7Fh
		push	ax
		mov	al, 0Bh
		out	68h, al
		pop	ax
		call	sub_1BA6
		mov	al, 0Ah
		out	68h, al
		pop	di
		retf	6
; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_1BEE	proc far		; CODE XREF: sub_1A36+1Dp
		push	di
		mov	di, sp
		les	di, ss:[di+6]
		mov	al, 0Bh
		out	68h, al
		mov	dx, 0

loc_1BFC:				; CODE XREF: sub_1BEE+1Aj
		mov	ax, dx
		adc	ax, 5680h
		and	al, 7Fh
		call	sub_1BA6
		inc	dl
		jnz	short loc_1BFC
		mov	al, 0Ah
		out	68h, al
		pop	di
		retf	4
sub_1BEE	endp


; =============== S U B	R O U T	I N E =======================================


sub_1C12	proc near		; CODE XREF: seg000:1C4Fp sub_1C5C+16p
		out	0A1h, al	; Interrupt Controller #2, 8259A
		mov	al, ah
		out	0A3h, al	; Interrupt Controller #2, 8259A
		mov	cx, 10h
		mov	bx, 0

loc_1C1E:				; CODE XREF: sub_1C12+1Ej
		mov	al, bl
		or	al, 20h
		out	0A5h, al	; Interrupt Controller #2, 8259A
		lodsw
		out	0A9h, al	; Interrupt Controller #2, 8259A
		mov	al, bl
		out	0A5h, al	; Interrupt Controller #2, 8259A
		mov	al, ah
		out	0A9h, al	; Interrupt Controller #2, 8259A
		inc	bx
		loop	loc_1C1E
		retn
sub_1C12	endp

; ---------------------------------------------------------------------------
		nop
		push	ds
		push	si
		mov	dx, sp
		cli
		add	sp, 8
		pop	si
		pop	ds
		pop	ax
		mov	sp, dx
		sti
		mov	ah, 0
		add	ax, 5680h
		and	al, 7Fh
		push	ax
		mov	al, 0Bh
		out	68h, al
		pop	ax
		call	sub_1C12
		mov	al, 0Ah
		out	68h, al
		pop	si
		pop	ds
		retf	6
; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_1C5C	proc far		; CODE XREF: sub_1A5A+10p sub_1A76+73p
		push	ds
		push	si
		mov	si, sp
		lds	si, ss:[si+8]
		mov	al, 0Bh
		out	68h, al
		mov	dx, 0

loc_1C6B:				; CODE XREF: sub_1C5C+1Bj
		mov	ax, dx
		adc	ax, 5680h
		and	al, 7Fh
		call	sub_1C12
		inc	dl
		jnz	short loc_1C6B
		mov	al, 0Ah
		out	68h, al
		pop	si
		pop	ds
		retf	4
sub_1C5C	endp


; =============== S U B	R O U T	I N E =======================================


sub_1C82	proc far		; CODE XREF: sub_13666+2CP
		mov	ah, 42h	; 'B'
		mov	ch, 0C0h ; 'À'
		int	18h		; TRANSFER TO ROM BASIC
					; causes transfer to ROM-based BASIC (IBM-PC)
					; often	reboots	a compatible; often has	no effect at all
		mov	ax, 0A800h
		mov	word_216CE, ax
		mov	word_21678, ax
		mov	word_216D0, 3E80h
		xor	ax, ax
		mov	word_2166C, ax
		mov	word_21672, ax
		mov	es, ax
		assume es:seg000
		mov	ah, es:byte_54D
		and	ah, 4
		add	ah, 3Fh	; '?'
		and	ah, 40h
		mov	word_216D6, ax
		mov	ax, 27Fh
		mov	word_21670, ax
		mov	word_2166E, ax
		mov	ax, 190h
		mov	word_216D2, ax
		dec	ax
		mov	word_21676, ax
		mov	word_21674, ax
		mov	word_2167A, 7CB0h
		retf
sub_1C82	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_1CD0	proc far		; CODE XREF: sub_1361E+EP
					; sub_1361E+19P
		mov	al, 80h	; ''
		pushf
		cli
		out	7Ch, al
		popf
		xor	ax, ax
		mov	dx, 7Eh	; '~'
		out	dx, al
		out	dx, al
		out	dx, al
		out	dx, al
		mov	bx, di
		xor	di, di
		mov	cx, word_216D0
		mov	es, word_216CE
		assume es:nothing
		rep stosw
		mov	di, bx
		out	7Ch, al
		retf
sub_1CD0	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_1CF4	proc far		; CODE XREF: sub_236C+5p
		xor	ax, ax
		mov	es, ax
		assume es:seg000
		test	byte ptr es:loc_45B+1, 40h
		jz	short locret_1D47
		mov	bx, sp
		mov	cx, ss:[bx+6]
		mov	dx, ss:[bx+4]
		mov	ah, 31h	; '1'
		int	18h		; TRANSFER TO ROM BASIC
					; causes transfer to ROM-based BASIC (IBM-PC)
					; often	reboots	a compatible; often has	no effect at all
		mov	ah, bh
		jcxz	short locret_1D47
		and	dx, cx
		not	cx
		and	ax, cx
		or	ax, dx
		mov	cx, ax
		mov	bh, ah
		mov	ah, 30h	; '0'
		int	18h		; TRANSFER TO ROM BASIC
					; causes transfer to ROM-based BASIC (IBM-PC)
					; often	reboots	a compatible; often has	no effect at all
		test	word_21AAC, 1
		jz	short loc_1D2E
		mov	ah, 0Ch
		int	18h		; TRANSFER TO ROM BASIC
					; causes transfer to ROM-based BASIC (IBM-PC)
					; often	reboots	a compatible; often has	no effect at all

loc_1D2E:				; CODE XREF: sub_1CF4+34j
		test	cl, 1
		jz	short loc_1D39
		mov	ah, 0Eh
		xor	dx, dx
		int	18h		; TRANSFER TO ROM BASIC
					; causes transfer to ROM-based BASIC (IBM-PC)
					; often	reboots	a compatible; often has	no effect at all

loc_1D39:				; CODE XREF: sub_1CF4+3Dj
		test	byte ptr es:loc_711, 1
		jz	short loc_1D45
		mov	ah, 11h
		int	18h		; TRANSFER TO ROM BASIC
					; causes transfer to ROM-based BASIC (IBM-PC)
					; often	reboots	a compatible; often has	no effect at all

loc_1D45:				; CODE XREF: sub_1CF4+4Bj
		mov	ax, cx

locret_1D47:				; CODE XREF: sub_1CF4+Aj sub_1CF4+1Cj
		retf	4
sub_1CF4	endp


; =============== S U B	R O U T	I N E =======================================


sub_1D4A	proc far		; CODE XREF: sub_E7FD+7BP
		mov	ah, 41h	; 'A'
		int	18h		; TRANSFER TO ROM BASIC
					; causes transfer to ROM-based BASIC (IBM-PC)
					; often	reboots	a compatible; often has	no effect at all
		retf
sub_1D4A	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1D50	proc far		; CODE XREF: sub_CCD6+23P
					; sub_D1BC:loc_D2E2P ...

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		mov	bx, [bp+arg_0]
		mov	dx, word_216D2
		sub	bx, dx
		sbb	ax, ax
		and	bx, ax
		add	bx, dx
		sub	dx, bx
		mov	bp, bx
		mov	cx, word_216D6
		shl	bx, cl
		shl	dx, cl
		mov	cl, 4

loc_1D70:				; CODE XREF: sub_1D50+26j
		jmp	short $+2
		in	al, 0A0h	; PIC 2	 same as 0020 for PIC 1
		test	al, cl
		jz	short loc_1D70
		mov	al, 70h	; 'p'
		out	0A2h, al	; Interrupt Controller #2, 8259A
		mov	ax, bp
		shl	ax, 1
		shl	ax, 1
		add	ax, bp
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		call	sub_17FA
		mov	ax, dx
		shl	ax, cl
		or	ah, ch
		call	sub_17FA
		xor	ax, ax
		call	sub_17FA
		mov	ax, bx
		shl	ax, cl
		or	ah, ch
		call	sub_17FA
		pop	bp
		retf	2
sub_1D50	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1DA8	proc far		; CODE XREF: sub_F33C+16P
					; sub_12461+177P ...

arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		mov	cx, [bp+arg_2]
		mov	bp, [bp+arg_0]
		mov	ax, cx
		or	ax, bp
		jz	short loc_1E0F
		mov	ax, cx
		cwd
		xor	ax, dx
		sub	ax, dx
		mov	bx, ax
		mov	ax, bp
		cwd
		xor	ax, dx
		sub	ax, dx
		mov	dx, ax
		cmp	dx, bx
		jz	short loc_1DE4
		jl	short loc_1DE8
		mov	ax, bx
		mov	bx, dx
		xor	dh, dh
		mov	dl, ah
		mov	ah, al
		mov	al, dh
		div	bx
		mov	bx, 21Eh
		xlat
		jmp	short loc_1DFC
; ---------------------------------------------------------------------------
		nop

loc_1DE4:				; CODE XREF: sub_1DA8+23j
		mov	al, 20h	; ' '
		jmp	short loc_1DFC
; ---------------------------------------------------------------------------

loc_1DE8:				; CODE XREF: sub_1DA8+25j
		mov	ax, dx
		xor	dh, dh
		mov	dl, ah
		mov	ah, al
		mov	al, dh
		div	bx
		mov	bx, 21Eh
		xlat
		neg	al
		add	al, 40h	; '@'

loc_1DFC:				; CODE XREF: sub_1DA8+39j sub_1DA8+3Ej
		xor	ah, ah
		or	bp, bp
		jge	short loc_1E07
		neg	ax
		add	ax, 80h	; ''

loc_1E07:				; CODE XREF: sub_1DA8+58j
		or	cx, cx
		jge	short loc_1E0D
		neg	al

loc_1E0D:				; CODE XREF: sub_1DA8+61j
		xor	ah, ah

loc_1E0F:				; CODE XREF: sub_1DA8+Dj
		pop	bp
		retf	4
sub_1DA8	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_1E14	proc far		; CODE XREF: sub_1361E+37P
		nop
		push	cs
		call	near ptr sub_85E
		retf
sub_1E14	endp

; ---------------------------------------------------------------------------
		db 0, 3, 0Ch, 0Fh, 30h,	33h, 3Ch, 3Fh, 0C0h, 0C3h, 0CCh
		db 0CFh, 0F0h, 0F3h, 0FCh, 0FFh

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1E2A	proc far		; CODE XREF: sub_ED71+61P seg001:6B48P ...

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		push	ds
		push	si
		push	di
		mov	es, word_216CE
		assume es:nothing
		mov	cx, [bp+arg_4]
		mov	di, [bp+arg_2]
		mov	ax, di
		shl	ax, 2
		add	di, ax
		shl	di, 4
		mov	ax, cx
		and	cx, 7
		shr	ax, 3
		add	di, ax
		mov	cs:word_1EC1, di
		mov	bx, [bp+arg_0]
		shl	bx, 1
		mov	dx, [bx+2EC4h]
		xor	si, si
		mov	ds, word ptr [bx+2AC4h]
		mov	bx, dx
		xor	bh, bh
		mov	dl, dh
		xor	dh, dh
		mov	cs:byte_1EBF, bl
		mov	ax, 0A0h ; ' '
		sub	ax, dx
		sub	ax, dx
		mov	cs:word_1EFA, ax
		mov	al, 0C0h ; 'À'
		out	7Ch, al
		xor	al, al
		out	7Eh, al
		out	7Eh, al
		out	7Eh, al
		out	7Eh, al
		mov	dh, dl
		call	near ptr byte_1EBE
		mov	al, 0FFh
		out	7Eh, al
		out	7Eh, al
		out	7Eh, al
		out	7Eh, al
		mov	al, 0CEh ; 'Î'
		out	7Ch, al
		call	near ptr byte_1EBE
		mov	al, 0CDh ; 'Í'
		out	7Ch, al
		call	near ptr byte_1EBE
		mov	al, 0CBh ; 'Ë'
		out	7Ch, al
		call	near ptr byte_1EBE
		mov	al, 0C7h ; 'Ç'
		out	7Ch, al
		call	near ptr byte_1EBE
		xor	al, al
		out	7Ch, al
		pop	di
		pop	si
		pop	ds
		pop	bp
		retf	6
sub_1E2A	endp

; ---------------------------------------------------------------------------
byte_1EBE	db 0B5h			; CODE XREF: sub_1E2A+60p sub_1E2A+71p ...
byte_1EBF	db 11h			; DATA XREF: sub_1E2A+40w
		db 0BFh
word_1EC1	dw 1111h		; DATA XREF: sub_1E2A+24w
; ---------------------------------------------------------------------------
		nop

loc_1EC4:				; CODE XREF: seg000:1EF6j
		lodsb
		mov	bp, ax
		and	ax, 0F0h
		shr	ax, 4
		mov	bx, ax
		mov	al, cs:[bx+1E1Ah]
		xor	ah, ah
		ror	ax, cl
		mov	es:[di], ax
		mov	es:[di+50h], ax
		inc	di
		and	bp, 0Fh
		mov	al, cs:[bp+1E1Ah]
		xor	ah, ah
		ror	ax, cl
		mov	es:[di], ax
		mov	es:[di+50h], ax
		inc	di
		dec	dh
		jnz	short loc_1EC4
; ---------------------------------------------------------------------------
		db  81h	; 
		db 0C7h	; Ç
word_1EFA	dw 1111h		; DATA XREF: sub_1E2A+4Cw
		db 8Ah,	0F2h, 0FEh, 0CDh, 75h, 0C2h, 0C3h, 0
; ---------------------------------------------------------------------------

loc_1F04:				; CODE XREF: sub_622+15p sub_622+3Bp ...
		cld
		push	si
		mov	ax, word_216E4
		cwd
		not	dx
		and	ax, dx
		sub	ax, 0C8h ; 'È'
		sbb	dx, dx
		and	ax, dx
		add	ax, 0C8h ; 'È'
		mov	dh, al
		xor	bx, bx
		mov	ch, bl
		cmp	dh, 64h	; 'd'
		jbe	short loc_1F2A
		mov	ch, 0Fh
		sub	dh, 0C8h ; 'È'
		neg	dh

loc_1F2A:				; CODE XREF: seg000:1F21j
		mov	si, 2A82h
		mov	dl, 64h	; 'd'
		cmp	word_21716, bx
		jnz	short loc_1F6E

loc_1F35:				; CODE XREF: seg000:1F69j
		mov	al, bl
		out	0A8h, al	; Interrupt Controller #2, 8259A
		lodsw
		shr	ax, 4
		mov	cl, ah
		and	al, 0Fh
		xor	al, ch
		mul	dh
		div	dl
		xor	al, ch
		out	0ACh, al	; Interrupt Controller #2, 8259A
		mov	al, cl
		xor	al, ch
		mul	dh
		div	dl
		xor	al, ch
		out	0AAh, al	; Interrupt Controller #2, 8259A
		lodsb
		shr	al, 4
		xor	al, ch
		mul	dh
		div	dl
		xor	al, ch
		out	0AEh, al	; Interrupt Controller #2, 8259A
		inc	bx
		cmp	bx, 10h
		jl	short loc_1F35
		pop	si
		retf
; ---------------------------------------------------------------------------
		nop

loc_1F6E:				; CODE XREF: seg000:1F33j
		mov	bx, dx
		mov	dx, 871Eh
		mov	al, 0A0h ; ' '
		out	0F6h, al
		in	al, dx
		cmp	al, 0FFh
		jnz	short loc_1F83
		mov	dx, 0AE8Eh
		in	al, dx
		shr	al, 2

loc_1F83:				; CODE XREF: seg000:1F7Aj
		shr	al, 1
		cmc
		sbb	al, al
		mov	cs:byte_1FEC, al
		mov	dx, bx
		push	di
		mov	di, 0

loc_1F92:				; CODE XREF: seg000:2009j
		mov	ax, di
		out	0A8h, al	; Interrupt Controller #2, 8259A
		lodsw
		mov	bx, ax
		shr	bx, 4
		and	bl, ch
		lodsb
		and	al, ch
		xor	al, ch
		mul	dh
		div	dl
		xor	al, ch
		xchg	al, bh
		xor	al, ch
		mul	dh
		div	dl
		xor	al, ch
		xchg	al, bl
		xor	al, ch
		mul	dh
		div	dl
		xor	al, ch
		xchg	al, bl
		mov	ah, bh
		cmp	bh, al
		ja	short loc_1FC7
		mov	bh, al

loc_1FC7:				; CODE XREF: seg000:1FC3j
		cmp	bh, bl
		ja	short loc_1FCD
		mov	bh, bl

loc_1FCD:				; CODE XREF: seg000:1FC9j
		shl	al, 1
		add	al, bl
		shl	al, 1
		add	al, ah
		add	al, bh
		mov	cl, 3
		mul	cl
		mov	cl, 14h
		div	cl
		shr	al, 1
		adc	al, 0
		sub	al, 2
		cmc
		sbb	ah, ah
		and	ah, al
; ---------------------------------------------------------------------------
		db 80h,	0F4h
byte_1FEC	db 0			; DATA XREF: seg000:1F88w
; ---------------------------------------------------------------------------
		shr	ah, 1
		sbb	al, al
		and	al, 0Fh
		out	0AEh, al	; Interrupt Controller #2, 8259A
		shr	ah, 1
		sbb	al, al
		and	al, 0Fh
		out	0ACh, al	; Interrupt Controller #2, 8259A
		shr	ah, 1
		sbb	al, al
		and	al, 0Fh
		out	0AAh, al	; Interrupt Controller #2, 8259A
		inc	di
		cmp	di, 10h
		jl	short loc_1F92
		pop	di
		pop	si
		retf

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_200E	proc far		; CODE XREF: sub_3340+2Cp seg000:3421p

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		mov	es, [bp+arg_0]
		push	word ptr es:0
		push	cs
		call	near ptr sub_55E
		push	[bp+arg_0]
		push	cs
		call	near ptr sub_267C
		pop	bp
		retf	2
sub_200E	endp

; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		mov	es, word ptr [bp+6]
		call	word ptr es:2
		pop	bp
		retf	2
; ---------------------------------------------------------------------------
		nop
		cmp	word ptr es:1Ah, 0
		jz	short loc_2056
		dec	word ptr es:1Ah
		add	word ptr es:12h, 1
		adc	word ptr es:14h, 0
		mov	ax, es:1Ch
		retn
; ---------------------------------------------------------------------------

loc_2056:				; CODE XREF: seg000:203Ej
		call	word ptr es:4
		test	ah, ah
		jnz	short locret_2085
		cmp	ax, es:1Ch
		mov	es:1Ch,	ax
		jnz	short locret_2085
		push	ax
		call	word ptr es:4
		test	ah, ah
		jnz	short loc_2084
		mov	es:1Ah,	ax
		sub	word ptr es:12h, 1
		sbb	word ptr es:14h, 0

loc_2084:				; CODE XREF: seg000:2072j
		pop	ax

locret_2085:				; CODE XREF: seg000:205Dj seg000:2068j
		retn

; =============== S U B	R O U T	I N E =======================================


sub_2086	proc near		; CODE XREF: seg000:20CAp
		mov	ax, es:0Ah
		mov	dx, es:0Ch
		cmp	dx, es:8
		jb	short loc_20A3
		ja	short loc_209F
		cmp	ax, es:6
		jb	short loc_20A3

loc_209F:				; CODE XREF: sub_2086+10j
		mov	ax, 0FFFFh
		retn
; ---------------------------------------------------------------------------

loc_20A3:				; CODE XREF: sub_2086+Ej sub_2086+17j
		add	ax, 1
		adc	dx, 0
		mov	es:0Ah,	ax
		mov	es:0Ch,	dx
		add	word ptr es:12h, 1
		adc	word ptr es:14h, 0
		push	es
		push	word ptr es:0
		push	cs
		call	near ptr sub_5F2
		pop	es
		retn
sub_2086	endp

; ---------------------------------------------------------------------------
		call	sub_2086
		or	ah, ah
		jnz	short locret_20D6
		xor	al, es:1Eh

locret_20D6:				; CODE XREF: seg000:20CFj
		retn
; ---------------------------------------------------------------------------
		db    0

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_20D8	proc far		; CODE XREF: seg000:3441p

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

		push	bp
		mov	bp, sp
		push	si
		push	di
		cld
		mov	si, [bp+arg_2]
		mov	di, [bp+arg_4]
		test	si, si
		jz	short loc_20FB

loc_20E8:				; CODE XREF: sub_20D8+21j
		mov	es, [bp+arg_0]
		call	word ptr es:2
		inc	ah
		jz	short loc_20FB
		mov	es, [bp+arg_6]
		stosb
		dec	si
		jnz	short loc_20E8

loc_20FB:				; CODE XREF: sub_20D8+Ej sub_20D8+1Aj
		mov	ax, di
		sub	ax, [bp+arg_4]
		pop	di
		pop	si
		pop	bp
		retf	8
sub_20D8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_2106	proc far		; CODE XREF: seg000:3476p

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		mov	es, [bp+arg_0]
		xor	ax, ax
		mov	es:1Ah,	ax
		mov	word ptr es:1Ch, 0FFFFh
		mov	es:0Ah,	ax
		mov	es:0Ch,	ax
		mov	es:12h,	ax
		mov	es:14h,	ax
		push	word ptr es:0
		push	word ptr es:10h
		push	word ptr es:0Eh
		push	ax
		push	cs
		call	near ptr sub_76A
		pop	bp
		retf	2
sub_2106	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_2142	proc far		; CODE XREF: seg000:3482p

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		push	di
		mov	es, [bp+arg_4]
		inc	[bp+arg_2]
		mov	di, [bp+arg_0]
		or	di, di
		jz	short loc_215F

loc_2153:				; CODE XREF: sub_2142+1Bj sub_2142+20j
		call	word ptr es:2
		test	ah, ah
		jnz	short loc_2164
		dec	di
		jnz	short loc_2153

loc_215F:				; CODE XREF: sub_2142+Fj
		dec	[bp+arg_2]
		jnz	short loc_2153

loc_2164:				; CODE XREF: sub_2142+18j
		mov	ax, es:12h
		mov	dx, es:14h
		pop	di
		pop	bp
		retf	6
sub_2142	endp


; =============== S U B	R O U T	I N E =======================================


sub_2172	proc far		; CODE XREF: sub_BC58:loc_BC5CP
					; sub_C314:loc_C31CP ...
		mov	ax, 4E35h
		mul	word ptr dword_21722+2
		mov	cx, ax
		mov	ax, 15Ah
		mul	word ptr dword_21722
		add	cx, ax
		mov	ax, 4E35h
		mul	word ptr dword_21722
		add	ax, 1
		adc	dx, cx
		mov	word ptr dword_21722, ax
		mov	ax, dx
		mov	word ptr dword_21722+2,	ax
		and	ah, 7Fh
		retf
sub_2172	endp


; =============== S U B	R O U T	I N E =======================================


sub_219C	proc far		; CODE XREF: sub_AED0+8BP
		mov	bx, sp
		push	word ptr ss:[bx+6]
		push	word ptr ss:[bx+4]
		nop
		push	cs
		call	near ptr sub_105C
		jb	short locret_21DB
		mov	bx, ax
		mov	dx, 2A82h
		mov	cx, 30h	; '0'
		mov	ah, 3Fh
		int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
					; BX = file handle, CX = number	of bytes to read
					; DS:DX	-> buffer
		sbb	cx, cx
		push	bx
		mov	bx, 2Fh	; '/'

loc_21BF:				; CODE XREF: sub_219C+2Fj
		mov	al, [bx+2A82h]
		shl	al, 4
		or	[bx+2A82h], al
		dec	bx
		jns	short loc_21BF
		pop	bx
		mov	ah, 3Eh
		int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
					; BX = file handle
		mov	ax, 0
		jcxz	short locret_21DB
		mov	ax, 0FFF3h
		stc

locret_21DB:				; CODE XREF: sub_219C+Fj sub_219C+39j
		retf	4
sub_219C	endp


; =============== S U B	R O U T	I N E =======================================


sub_21DE	proc far		; CODE XREF: sub_412+57p sub_1A76+81p	...
		push	bx
		mov	bx, sp
		mov	bx, ss:[bx+6]
		mov	word_23E02, bx
		pop	bx
		retf	2
sub_21DE	endp

; ---------------------------------------------------------------------------
		nop
; START	OF FUNCTION CHUNK FOR sub_21F4

loc_21EE:				; CODE XREF: sub_21F4+5j
		push	cs
		call	near ptr sub_2550
		jb	short loc_2223
; END OF FUNCTION CHUNK	FOR sub_21F4

; =============== S U B	R O U T	I N E =======================================


sub_21F4	proc far		; CODE XREF: seg000:02D6p seg000:02DEp ...

; FUNCTION CHUNK AT 21EE SIZE 00000006 BYTES

		cmp	word_21ABE, 0
		jz	short loc_21EE
		push	bx
		mov	bx, sp
		mov	bx, ss:[bx+6]
		add	bx, 0Fh
		rcr	bx, 1
		shr	bx, 1
		shr	bx, 1
		shr	bx, 1
		mov	ax, word_23E02
		add	bx, ax
		jb	short loc_2222
		cmp	word_23DFE, bx
		jb	short loc_2222
		mov	word_23E02, bx
		pop	bx
		retf	2
; ---------------------------------------------------------------------------

loc_2222:				; CODE XREF: sub_21F4+1Ej sub_21F4+24j
		pop	bx

loc_2223:				; CODE XREF: sub_21F4-2j
		mov	ax, 0FFF8h
		retf	2
sub_21F4	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_222A	proc near		; CODE XREF: sub_34DC+1Ep sub_3658+2p
		mov	dx, 188h

loc_222D:				; CODE XREF: sub_222A+6j
		in	al, dx
		test	al, 80h
		jnz	short loc_222D
		mov	al, bh
		out	dx, al

loc_2235:				; CODE XREF: sub_222A+Ej
		in	al, dx
		test	al, 80h
		jnz	short loc_2235
		inc	dx
		inc	dx
		mov	al, bl
		out	dx, al
		retn
sub_222A	endp


; =============== S U B	R O U T	I N E =======================================


sub_2240	proc near		; CODE XREF: sub_34DC+15p
		mov	dx, 188h

loc_2243:				; CODE XREF: sub_2240+6j
		in	al, dx
		test	al, 80h
		jnz	short loc_2243
		mov	al, bh
		out	dx, al

loc_224B:				; CODE XREF: sub_2240+Ej
		in	al, dx
		test	al, 80h
		jnz	short loc_224B
		inc	dx
		inc	dx
		in	al, dx
		retn
sub_2240	endp


; =============== S U B	R O U T	I N E =======================================


sub_2254	proc far		; CODE XREF: _main+29P	sub_E7FD+80P ...
		mov	al, 1Bh
		int	29h		; DOS 2+ internal - FAST PUTCHAR
					; AL = character to display
		mov	al, 5Bh	; '['
		int	29h		; DOS 2+ internal - FAST PUTCHAR
					; AL = character to display
		mov	al, 32h	; '2'
		int	29h		; DOS 2+ internal - FAST PUTCHAR
					; AL = character to display
		mov	al, 4Ah	; 'J'
		int	29h		; DOS 2+ internal - FAST PUTCHAR
					; AL = character to display
		retf
sub_2254	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_2266	proc far		; CODE XREF: sub_AED0+35P

arg_0		= word ptr  4
arg_2		= word ptr  6

		mov	bx, bp
		mov	bp, sp
		push	di
		xor	ax, ax
		mov	es, ax
		assume es:seg000
		mov	al, byte ptr es:loc_711+1
		inc	ax
		mov	dx, ax
		shl	dx, 1
		shl	dx, 1
		add	dx, ax
		mov	cl, 4
		shl	dx, cl
		mov	cx, dx
		mov	es, word_21AA8
		assume es:nothing
		xor	di, di
		mov	ax, [bp+arg_2]
		rep stosw
		mov	cx, dx
		mov	di, 2000h
		mov	ax, [bp+arg_0]
		rep stosw
		pop	di
		mov	bp, bx
		retf	4
sub_2266	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_229E	proc far		; CODE XREF: sub_D56C+A8P
					; sub_10D4B+17P ...

arg_0		= word ptr  4
arg_2		= word ptr  6
arg_4		= word ptr  8
arg_6		= word ptr  0Ah

		mov	dx, bp
		mov	bp, sp
		mov	cx, di
		mov	ax, [bp+arg_4]
		mov	di, ax
		shl	ax, 1
		shl	ax, 1
		add	di, ax
		shl	di, 1
		add	di, word_21AA8
		mov	es, di
		assume es:nothing
		mov	di, [bp+arg_6]
		shl	di, 1
		mov	ax, [bp+arg_2]
		mov	bx, [bp+arg_0]
		mov	bp, dx
		or	ah, ah
		jz	short loc_22EA
		cmp	ah, 80h	; ''
		jb	short loc_22DE
		shl	ah, 1
		cmp	al, 9Fh	; ''
		jnb	short loc_22D8
		cmp	al, 80h	; ''
		adc	ax, 0FEDFh

loc_22D8:				; CODE XREF: sub_229E+33j
		sbb	ax, 0DFFEh
		and	ax, 7F7Fh

loc_22DE:				; CODE XREF: sub_229E+2Dj
		xchg	ah, al
		sub	al, 20h	; ' '
		mov	es:[di+2000h], bx
		stosw
		or	al, 80h

loc_22EA:				; CODE XREF: sub_229E+28j
		mov	es:[di+2000h], bx
		stosw
		mov	di, cx
		retf	8
sub_229E	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_22F6	proc far		; CODE XREF: sub_B2CF+F1P
					; sub_B2CF+103P ...

arg_0		= word ptr  4
arg_2		= dword	ptr  6
arg_6		= word ptr  0Ah
arg_8		= word ptr  0Ch

		mov	dx, bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, [bp+arg_6]
		mov	di, ax
		shl	ax, 1
		shl	ax, 1
		add	di, ax
		shl	di, 1
		add	di, word_21AA8
		mov	es, di
		mov	di, [bp+arg_8]
		shl	di, 1
		mov	cx, di
		push	[bp+arg_0]
		push	ds
		lds	si, [bp+arg_2]
		mov	bp, dx
		mov	bx, 0FEDFh
		mov	dx, 9F80h
		lodsb
		or	al, al
		jz	short loc_2355

loc_232A:				; CODE XREF: sub_22F6+5Dj
		xor	ah, ah
		cmp	al, dl
		jbe	short loc_234F
		cmp	al, dh
		jbe	short loc_2338
		cmp	al, bl
		jbe	short loc_234F

loc_2338:				; CODE XREF: sub_22F6+3Cj
		mov	ah, al
		lodsb
		shl	ah, 1
		cmp	al, dh
		jnb	short loc_2345
		cmp	al, dl
		adc	ax, bx

loc_2345:				; CODE XREF: sub_22F6+49j
		sbb	al, bh
		and	ax, 7F7Fh
		xchg	ah, al
		stosw
		or	al, dl

loc_234F:				; CODE XREF: sub_22F6+38j sub_22F6+40j
		stosw
		lodsb
		or	al, al
		jnz	short loc_232A

loc_2355:				; CODE XREF: sub_22F6+32j
		pop	ds
		xchg	cx, di
		sub	cx, di
		shr	cx, 1
		add	di, 2000h
		pop	ax
		rep stosw
		pop	di
		pop	si
		retf	0Ah
sub_22F6	endp

; ---------------------------------------------------------------------------
dword_2368	dd 0			; DATA XREF: sub_236C+5Ew seg000:23D7r ...

; =============== S U B	R O U T	I N E =======================================


sub_236C	proc far		; CODE XREF: sub_13666+22P
		xor	ax, ax
		push	ax
		push	ax
		push	cs
		call	near ptr sub_1CF4
		and	ax, 0Ch
		cmp	ax, 0Ch
		mov	word_21AB2, 33FFh
		jz	short loc_2388
		mov	word_21AB2, 0

loc_2388:				; CODE XREF: sub_236C+14j
		xor	ax, ax
		mov	word_23DF2, ax
		mov	word_23DF4, ax
		cmp	byte_21AB4, al
		jnz	short locret_23D5
		mov	al, 0Ah
		push	ax
		push	cs
		mov	ax, 23E0h
		push	ax
		nop
		push	cs
		call	near ptr sub_89A
		mov	word_23DF6, ax
		mov	word_23DF8, dx
		pushf
		cli
		in	al, 2		; DMA controller, 8237A-5.
					; channel 1 current address
		mov	ah, al
		and	al, 0FBh
		out	2, al		; DMA controller, 8237A-5.
					; channel 1 base address
					; (also	sets current address)
		popf
		or	ah, 0FBh
		mov	byte_21AB4, ah
		mov	ax, 18h
		push	ax
		push	cs
		mov	ax, 23D6h
		push	ax
		nop
		push	cs
		call	near ptr sub_89A
		mov	word ptr cs:dword_2368,	ax
		mov	word ptr cs:dword_2368+2, dx
		out	64h, al		; AT Keyboard controller 8042.

locret_23D5:				; CODE XREF: sub_236C+28j
		retf
sub_236C	endp

; ---------------------------------------------------------------------------
		pushf
		call	cs:dword_2368
		out	64h, al		; AT Keyboard controller 8042.
		iret
; ---------------------------------------------------------------------------
		nop
		push	ax
		push	ds
		mov	ax, seg	dseg
		mov	ds, ax
		mov	ax, word_21AB2
		add	word_23DFA, ax
		jb	short loc_2411
		inc	word_23DF2
		inc	word_23DF4
		cmp	word_21AB0, 0
		jz	short loc_2411
		push	bx
		push	cx
		push	dx
		push	si
		push	di
		push	es
		cld
		call	dword ptr unk_21AAE
		pop	es
		pop	di
		pop	si
		pop	dx
		pop	cx
		pop	bx
		cli

loc_2411:				; CODE XREF: seg000:23EEj seg000:23FDj
		pop	ds
		mov	al, 20h	; ' '
		out	0, al
		out	64h, al		; AT Keyboard controller 8042.
		pop	ax
		iret

; =============== S U B	R O U T	I N E =======================================


sub_241A	proc far		; CODE XREF: sub_1361E+2DP
		cmp	byte_21AB4, 0
		jz	short locret_2460
		mov	ax, 18h
		push	ax
		push	word ptr cs:dword_2368+2
		push	word ptr cs:dword_2368
		nop
		push	cs
		call	near ptr sub_89A
		pushf
		cli
		in	al, 2		; DMA controller, 8237A-5.
					; channel 1 current address
		or	al, 4
		out	2, al		; DMA controller, 8237A-5.
					; channel 1 base address
					; (also	sets current address)
		popf
		mov	ax, 0Ah
		push	ax
		push	word_23DF8
		push	word_23DF6
		nop
		push	cs
		call	near ptr sub_89A
		pushf
		cli
		in	al, 2		; DMA controller, 8237A-5.
					; channel 1 current address
		and	al, byte_21AB4
		out	2, al		; DMA controller, 8237A-5.
					; channel 1 base address
					; (also	sets current address)
		popf
		out	64h, al		; AT Keyboard controller 8042.
		xor	al, al
		mov	byte_21AB4, al

locret_2460:				; CODE XREF: sub_241A+5j
		retf
sub_241A	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_2462	proc far		; CODE XREF: sub_622+10p sub_622+21p ...
		cmp	byte_21AB4, 0
		jnz	short loc_247E

loc_2469:				; CODE XREF: sub_2462+Fj
		jmp	short $+2
		jmp	short $+2
		in	al, 0A0h	; PIC 2	 same as 0020 for PIC 1
		test	al, 20h
		jnz	short loc_2469

loc_2473:				; CODE XREF: sub_2462+19j
		jmp	short $+2
		jmp	short $+2
		in	al, 0A0h	; PIC 2	 same as 0020 for PIC 1
		test	al, 20h
		jz	short loc_2473
		retf
; ---------------------------------------------------------------------------

loc_247E:				; CODE XREF: sub_2462+5j
		mov	ax, word_23DF2

loc_2481:				; CODE XREF: sub_2462+23j
					; DATA XREF: seg001:7DAFo ...
		cmp	ax, word_23DF2
		jz	short loc_2481
		retf
sub_2462	endp


; =============== S U B	R O U T	I N E =======================================


sub_2488	proc far		; CODE XREF: sub_D1BC+EAP
		mov	bx, sp
		push	si
		push	di

loc_248C:				; DATA XREF: seg001:7DBBo seg001:7DC3o
		mov	si, ss:[bx+4]

loc_2490:				; DATA XREF: seg001:7DB1o seg001:7DB3o ...
		mov	word_216E4, 0C8h ; 'È'
		push	cs
		call	near ptr sub_2462

loc_249A:				; CODE XREF: sub_2488+2Ej
		push	cs
		call	loc_1F04
		mov	di, si
		cmp	di, 0
		jle	short loc_24AC

loc_24A5:				; CODE XREF: sub_2488+22j
		push	cs
		call	near ptr sub_2462
		dec	di
		jnz	short loc_24A5

loc_24AC:				; CODE XREF: sub_2488+1Bj
		sub	word_216E4, 6
		cmp	word_216E4, 64h	; 'd'
		jg	short loc_249A
		mov	word_216E4, 64h	; 'd'
		push	cs
		call	loc_1F04
		pop	di
		pop	si
		retf	2
sub_2488	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_24C8	proc far		; CODE XREF: sub_D1BC+F5P
		mov	bx, sp
		push	si
		push	di
		mov	si, ss:[bx+4]
		mov	word_216E4, 64h	; 'd'
		push	cs
		call	near ptr sub_2462

loc_24DA:				; CODE XREF: sub_24C8+2Fj
		push	cs
		call	loc_1F04
		mov	di, si
		cmp	di, 0
		jle	short loc_24EC

loc_24E5:				; CODE XREF: sub_24C8+22j
		push	cs
		call	near ptr sub_2462
		dec	di
		jnz	short loc_24E5

loc_24EC:				; CODE XREF: sub_24C8+1Bj
		add	word_216E4, 6
		cmp	word_216E4, 0C8h ; 'È'
		jl	short loc_24DA
		mov	word_216E4, 0C8h ; 'È'
		push	cs
		call	loc_1F04
		pop	di
		pop	si
		retf	2
sub_24C8	endp


; =============== S U B	R O U T	I N E =======================================


sub_2508	proc far		; CODE XREF: sub_13666+7P
		push	bx
		mov	bx, sp
		mov	bx, ss:[bx+6]
		mov	ah, 48h
		int	21h		; DOS -	2+ - ALLOCATE MEMORY
					; BX = number of 16-byte paragraphs desired
		jb	short loc_2523
		push	ax
		push	bx
		push	cs
		call	near ptr sub_252A
		xor	ax, ax

loc_251D:				; DATA XREF: seg001:7D8Do seg001:7D8Fo ...
		mov	word_21AC0, 1

loc_2523:				; CODE XREF: sub_2508+Bj
		neg	ax
		pop	bx
		retf	2
sub_2508	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_252A	proc far		; CODE XREF: sub_2508+10p sub_2550+1Bp

arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		mov	ax, [bp+arg_2]
		mov	word_21ABE, ax
		mov	word_23E02, ax
		add	ax, [bp+arg_0]
		mov	word_23DFC, ax
		mov	word_23DFE, ax
		mov	word_23E00, 0
		mov	word_21AC0, 0
		clc
		pop	bp
		retf	4
sub_252A	endp


; =============== S U B	R O U T	I N E =======================================


sub_2550	proc far		; CODE XREF: sub_21F4-5p sub_258C+Fp
		push	bx
		mov	bx, 0FFFFh
		mov	ah, 48h
		int	21h		; DOS -	2+ - ALLOCATE MEMORY
					; BX = number of 16-byte paragraphs desired
		mov	ax, word_21AC4
		cmp	bx, ax
		jbe	short loc_2561
		sub	bx, ax

loc_2561:				; CODE XREF: sub_2550+Dj
		mov	ah, 48h
		int	21h		; DOS -	2+ - ALLOCATE MEMORY
					; BX = number of 16-byte paragraphs desired
		jb	short loc_2575
		push	ax
		push	ax
		push	bx
		push	cs
		call	near ptr sub_252A
		mov	word_21AC0, 1
		pop	ax

loc_2575:				; CODE XREF: sub_2550+15j
		pop	bx
		retf
sub_2550	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_2578	proc far		; CODE XREF: sub_6A4+11p sub_278C+21p	...
		push	bx
		mov	bx, sp
		mov	bx, ss:[bx+6]
		add	bx, 0Fh
		rcr	bx, 1
		shr	bx, 1
		shr	bx, 1
		shr	bx, 1
		jmp	short loc_2593
sub_2578	endp


; =============== S U B	R O U T	I N E =======================================


sub_258C	proc far		; CODE XREF: sub_1A36+Ep sub_2A00+23p
		push	bx
		mov	bx, sp
		mov	bx, ss:[bx+6]

loc_2593:				; CODE XREF: sub_2578+12j
		cmp	word_21ABE, 0
		jnz	short loc_259E
		push	cs
		call	near ptr sub_2550

loc_259E:				; CODE XREF: sub_258C+Cj
		push	cx
		push	es
		test	bx, bx
		jz	short loc_25FF

loc_25A4:				; DATA XREF: seg001:7D95o seg001:7D97o
		mov	ax, word_23DFC
		sub	ax, word_23E02
		cmp	bx, ax
		jnb	short loc_25FF
		inc	bx
		mov	ax, word_23E00
		test	ax, ax
		jz	short loc_25DB
		mov	cx, word_23DFC

loc_25BB:				; CODE XREF: sub_258C+4Dj
		mov	es, ax
		mov	ax, es:2
		cmp	word ptr es:0, 0
		jnz	short loc_25D7
		mov	cx, es
		add	cx, bx
		jb	short loc_25D3
		cmp	cx, ax
		jbe	short loc_260C

loc_25D3:				; CODE XREF: sub_258C+41j
		mov	cx, word_23DFC

loc_25D7:				; CODE XREF: sub_258C+3Bj
		cmp	ax, cx
		jnz	short loc_25BB

loc_25DB:				; CODE XREF: sub_258C+29j
		mov	ax, word_23DFE
		mov	cx, ax
		sub	ax, bx
		jb	short loc_25FF
		cmp	ax, word_23E02
		jb	short loc_25FF
		mov	word_23DFE, ax
		mov	es, ax
		mov	es:2, cx
		mov	word ptr es:0, 1
		mov	bx, ax
		jmp	short loc_2665
; ---------------------------------------------------------------------------

loc_25FF:				; CODE XREF: sub_258C+16j sub_258C+21j ...
		mov	ax, 0
		mov	word_21AC2, ax
		stc
		pop	es
		pop	cx
		pop	bx

locret_2609:				; DATA XREF: seg001:7D99o seg001:7D9Bo ...
		retf	2
; ---------------------------------------------------------------------------

loc_260C:				; CODE XREF: sub_258C+45j
		sub	ax, cx
		cmp	ax, 1
		jbe	short loc_263C
		add	ax, cx
		mov	word ptr es:0, 1
		mov	es:2, cx
		mov	bx, es
		mov	es, cx
		mov	es:2, ax
		mov	word ptr es:0, 0
		cmp	bx, word_23E00
		jnz	short loc_2665
		mov	word_23E00, cx
		jmp	short loc_2665
; ---------------------------------------------------------------------------

loc_263C:				; CODE XREF: sub_258C+85j
		mov	word ptr es:0, 1
		mov	bx, es
		cmp	bx, word_23E00
		jnz	short loc_2665
		mov	ax, word_23DFC
		mov	cx, bx
		push	bx

loc_2651:				; CODE XREF: sub_258C+D0j
		les	cx, es:0
		jcxz	short loc_2660
		mov	bx, es
		cmp	bx, ax
		jb	short loc_2651
		xor	bx, bx

loc_2660:				; CODE XREF: sub_258C+CAj
		mov	word_23E00, bx
		pop	bx

loc_2665:				; CODE XREF: sub_258C+71j sub_258C+A8j ...
		mov	es, bx
		mov	ax, 0
		xchg	ax, word_21AC2
		mov	es:4, ax
		lea	ax, [bx+1]
		clc

loc_2676:				; CODE XREF: sub_267C+12j sub_267C+1Aj
		pop	es
		pop	cx
		pop	bx
		retf	2
sub_258C	endp


; =============== S U B	R O U T	I N E =======================================


sub_267C	proc far		; CODE XREF: sub_55E+11p sub_6A4+45p ...
		push	bx
		mov	bx, sp
		push	cx
		push	es
		mov	bx, ss:[bx+6]
		dec	bx
		mov	es, bx
		cmp	bx, word_23DFE
		jz	short loc_26E0
		jb	short loc_2676

loc_2690:				; DATA XREF: seg001:7D9Do seg001:7D9Fo ...
		xor	bx, bx
		cmp	word ptr es:[bx], 1
		jnz	short loc_2676
		mov	es:[bx], bx
		mov	cx, word_23E00
		mov	ax, es
		mov	word_23E00, ax
		jcxz	short loc_271D
		cmp	ax, cx
		jb	short loc_26AF
		mov	ax, cx
		mov	word_23E00, ax

loc_26AF:				; CODE XREF: sub_267C+2Cj
		mov	cx, ax
		mov	ax, es:[bx+2]
		cmp	ax, word_23DFC
		jnz	short loc_26BD
		mov	ax, es

loc_26BD:				; CODE XREF: sub_267C+3Dj
		push	ds

loc_26BE:				; CODE XREF: sub_267C+4Dj sub_267C+54j
		mov	ds, cx
		mov	cx, [bx+2]
		cmp	cx, ax
		ja	short loc_26DD
		cmp	[bx], bx
		jnz	short loc_26BE

loc_26CB:				; CODE XREF: sub_267C+5Fj
		mov	es, cx
		cmp	es:[bx], bx
		jnz	short loc_26BE
		mov	cx, es:[bx+2]
		mov	[bx+2],	cx
		cmp	cx, ax
		jbe	short loc_26CB

loc_26DD:				; CODE XREF: sub_267C+49j
		pop	ds
		jmp	short loc_271D
; ---------------------------------------------------------------------------

loc_26E0:				; CODE XREF: sub_267C+10j
		xor	bx, bx
		mov	ax, es:[bx+2]
		mov	word_23DFE, ax
		cmp	ax, word_23DFC
		jz	short loc_271D
		mov	es, ax
		cmp	es:[bx], bx
		jnz	short loc_271D
		mov	ax, es:[bx+2]
		mov	word_23DFE, ax
		mov	cx, word_23DFC
		cmp	ax, cx
		jz	short loc_2719
		jmp	short loc_2710
; ---------------------------------------------------------------------------
		nop

loc_2708:				; CODE XREF: sub_267C+99j
		mov	ax, es:[bx+2]
		cmp	ax, cx
		jz	short loc_2719

loc_2710:				; CODE XREF: sub_267C+89j
		mov	es, ax
		cmp	es:[bx], bx
		jnz	short loc_2708
		mov	bx, es

loc_2719:				; CODE XREF: sub_267C+87j sub_267C+92j
		mov	word_23E00, bx

loc_271D:				; CODE XREF: sub_267C+28j sub_267C+62j ...
		clc
		pop	es
		pop	cx
		pop	bx

locret_2721:				; DATA XREF: seg001:7DA9o seg001:7DABo
		retf	2
sub_267C	endp


; =============== S U B	R O U T	I N E =======================================


sub_2724	proc far		; CODE XREF: sub_1361E+28P
		cmp	word_21ABE, 0
		jz	short loc_273F
		mov	ax, word_21ABE
		mov	es, ax
		xor	ax, ax
		cmp	word_21AC0, ax
		mov	word_21ABE, ax
		jz	short loc_273F
		mov	ah, 49h
		int	21h		; DOS -	2+ - FREE MEMORY
					; ES = segment address of area to be freed

loc_273F:				; CODE XREF: sub_2724+5j sub_2724+15j
		mov	ax, 1
		retf
sub_2724	endp

; ---------------------------------------------------------------------------
		xor	ax, ax
		stc
		retf
; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_2748	proc far		; CODE XREF: sub_E7FD+76P
		cmp	word_21AE6, 0
		jz	short locret_2777
		push	word_21AE6
		push	cs
		call	near ptr sub_267C
		mov	word_21AE6, 0
		jmp	short loc_2765
; ---------------------------------------------------------------------------

loc_275F:				; CODE XREF: sub_2748+22j
		dec	ax
		push	ax
		push	cs
		call	near ptr sub_2AFE

loc_2765:				; CODE XREF: sub_2748+15j
		mov	ax, word_21AE8
		test	ax, ax
		jnz	short loc_275F
		cmp	word_21AEA, 0
		jz	short locret_2777
		call	word_21AEA

locret_2777:				; CODE XREF: sub_2748+5j sub_2748+29j
		retf
sub_2748	endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_278C

loc_2778:				; CODE XREF: sub_278C+32j
		push	ax
		push	es
		push	cs
		call	near ptr sub_267C
		pop	ax
		jmp	short loc_2785
; END OF FUNCTION CHUNK	FOR sub_278C
; ---------------------------------------------------------------------------
		nop
; START	OF FUNCTION CHUNK FOR sub_278C

loc_2782:				; CODE XREF: sub_278C+24j
		mov	ax, 0FFF8h

loc_2785:				; CODE XREF: sub_278C-Dj
		stc
		pop	di
		pop	si
		pop	bp
		retf	8
; END OF FUNCTION CHUNK	FOR sub_278C

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_278C	proc far

arg_0		= word ptr  6
arg_2		= dword	ptr  8
arg_6		= word ptr  0Ch

; FUNCTION CHUNK AT 2778 SIZE 00000009 BYTES
; FUNCTION CHUNK AT 2782 SIZE 0000000A BYTES

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	di, word_21AE8
		shl	di, 1
		mov	ax, [bp+arg_6]
		mov	dx, ax
		mul	ah
		mov	bx, ax
		shl	ax, 2
		add	ax, bx
		mov	word_21AC2, 4
		push	ax
		push	cs
		call	near ptr sub_2578
		jb	short loc_2782
		mov	es, ax

loc_27B4:				; DATA XREF: seg001:7DADo
		push	word_21AE8
		push	dx
		push	ax
		push	cs
		call	near ptr sub_2A00
		jb	short loc_2778
		push	ds
		lds	si, [bp+arg_2]
		mov	di, bx
		mov	cx, bx
		shl	cx, 1
		rep movsw
		push	es
		pop	ds
		mov	si, bx
		mov	dx, [bp+arg_0]
		mov	dh, dl
		mov	cx, bx
		xor	di, di
		shr	dh, 1
		jb	short loc_27E2
		rep movsb
		jmp	short loc_27E8
; ---------------------------------------------------------------------------
		nop

loc_27E2:				; CODE XREF: sub_278C+4Fj sub_278C+5Aj
		lodsb
		not	al
		stosb
		loop	loc_27E2

loc_27E8:				; CODE XREF: sub_278C+53j
		mov	cx, bx
		xor	di, di
		shr	dh, 1
		sbb	ah, ah

loc_27F0:				; CODE XREF: sub_278C+6Aj
		lodsb
		xor	al, ah
		or	[di], al
		inc	di
		loop	loc_27F0
		mov	cx, bx
		xor	di, di
		shr	dh, 1
		sbb	ah, ah

loc_2800:				; CODE XREF: sub_278C+7Aj
		lodsb
		xor	al, ah
		or	[di], al
		inc	di
		loop	loc_2800
		mov	cx, bx
		xor	di, di
		shr	dh, 1
		sbb	ah, ah

loc_2810:				; CODE XREF: sub_278C+8Aj
		lodsb
		xor	al, ah
		or	[di], al
		inc	di
		loop	loc_2810
		test	dl, dl
		jz	short loc_282C
		mov	ah, 4

loc_281E:				; CODE XREF: sub_278C+9Ej
		xor	si, si
		mov	cx, bx

loc_2822:				; CODE XREF: sub_278C+9Aj
		lodsb
		and	[di], al
		inc	di
		loop	loc_2822
		dec	ah
		jnz	short loc_281E

loc_282C:				; CODE XREF: sub_278C+8Ej
		pop	ds
		mov	ax, word_21AE8
		dec	ax
		pop	di
		pop	si
		pop	bp
		retf	8
sub_278C	endp

; ---------------------------------------------------------------------------
		nop

loc_2838:				; CODE XREF: sub_E8A3+6DP sub_E8A3+C9P ...
		push	bp
		mov	bp, sp
		push	ds
		push	si
		push	di
		mov	cx, [bp+0Eh]
		mov	di, [bp+0Ch]
		mov	si, [bp+8]
		mov	ax, [bp+6]
		out	7Ch, al
		mov	al, ah
		out	7Eh, al
		out	7Eh, al
		out	7Eh, al
		out	7Eh, al
		mov	ax, di
		shl	ax, 2
		add	di, ax
		shl	di, 4
		mov	ax, cx
		and	cx, 7
		shr	ax, 3
		add	di, ax
		mov	bx, [bp+0Ah]
		shl	bx, 1
		mov	dx, [bx+2EC4h]
		push	bx
		mov	al, dh
		xor	ah, ah
		mul	dl
		mov	bp, ax
		pop	ax

loc_287D:				; DATA XREF: sub_12461+BCr
		xor	bx, bx
		or	si, si
		jz	short loc_2888

loc_2883:				; CODE XREF: seg000:2886j
		add	bx, bp
		dec	si
		jnz	short loc_2883

loc_2888:				; CODE XREF: seg000:2881j
		mov	es, bx
		mov	si, cx
		mov	bl, [si+776h]
		mov	ch, dh
		shr	ch, 1
		test	di, 1
		jz	short loc_289D
		jmp	loc_293E
; ---------------------------------------------------------------------------

loc_289D:				; CODE XREF: seg000:2898j
		mov	bp, di

loc_289F:				; DATA XREF: sub_12461+1Er
		test	dh, 1
		jnz	short loc_28EC
		mov	cs:byte_28D0, bl
		mov	cs:byte_28E5, ch
		mov	bx, ax
		mov	si, es
		mov	ds, word ptr [bx+2AC4h]
		mov	bx, dx
		xor	bh, bh
		mov	al, 50h	; 'P'
		sub	al, dh
		mov	cs:byte_28E3, al
		mov	ax, 0A800h
		mov	es, ax
		assume es:nothing
		xor	dl, dl
		nop

loc_28CA:				; CODE XREF: seg000:28E7j
		lodsw
		ror	ax, cl
		mov	dh, al
; ---------------------------------------------------------------------------
		db 24h
byte_28D0	db 11h			; DATA XREF: seg000:28A4w
		db 32h,	0F0h, 0Ah, 0C2h, 0ABh, 8Ah, 0D6h, 0FEh,	0CDh, 75h
		db 0EEh, 26h, 88h, 15h,	8Ah, 0D5h, 83h,	0C7h
byte_28E3	db 50h			; DATA XREF: seg000:28BEw
		db 0B5h
byte_28E5	db 11h			; DATA XREF: seg000:28A9w
; ---------------------------------------------------------------------------
		dec	bx
		jnz	short loc_28CA
		jmp	loc_29F5
; ---------------------------------------------------------------------------

loc_28EC:				; CODE XREF: seg000:28A2j
		mov	cs:byte_291C, bl
		mov	cs:byte_2937, ch
		mov	bx, ax
		mov	si, es
		mov	ds, word ptr [bx+2AC4h]
		mov	bx, dx
		xor	bh, bh
		mov	al, 50h	; 'P'
		sub	al, dh
		mov	cs:byte_2935, al
		mov	ax, 0A800h
		mov	es, ax
		xor	dl, dl
		nop

loc_2912:				; CODE XREF: seg000:2939j
		or	ch, ch
		jz	short loc_2928

loc_2916:				; CODE XREF: seg000:2926j
		lodsw
		ror	ax, cl
		mov	dh, al
; ---------------------------------------------------------------------------
		db 24h
byte_291C	db 11h			; DATA XREF: seg000:loc_28ECw
; ---------------------------------------------------------------------------
		xor	dh, al
		or	al, dl
		stosw
		mov	dl, dh
		dec	ch
		jnz	short loc_2916

loc_2928:				; CODE XREF: seg000:2914j
		lodsb
		xor	ah, ah
		ror	ax, cl
		or	al, dl
		stosw
		dec	di
		mov	dl, ch
; ---------------------------------------------------------------------------
		db 83h,	0C7h
byte_2935	db 50h			; DATA XREF: seg000:2906w
		db 0B5h
byte_2937	db 11h			; DATA XREF: seg000:28F1w
; ---------------------------------------------------------------------------
		dec	bx
		jnz	short loc_2912
		jmp	loc_29F5
; ---------------------------------------------------------------------------

loc_293E:				; CODE XREF: seg000:289Aj
		dec	di
		mov	bp, di
		test	dh, 1
		jnz	short loc_29A2
		mov	cs:byte_2982, bl
		dec	ch
		mov	cs:byte_299C, ch
		mov	bx, ax
		mov	si, es
		mov	ds, word ptr [bx+2AC4h]
		mov	bx, dx
		xor	bh, bh
		mov	al, 4Eh	; 'N'
		sub	al, dh
		mov	cs:byte_299A, al
		mov	ax, 0A800h
		mov	es, ax
		nop

loc_296C:				; CODE XREF: seg000:299Ej
		lodsb
		xor	ah, ah
		ror	ax, cl
		mov	dl, ah
		xchg	ah, al
		xor	al, al
		stosw
		or	ch, ch
		jz	short loc_298E

loc_297C:				; CODE XREF: seg000:298Cj
		lodsw
		ror	ax, cl
		mov	dh, al
; ---------------------------------------------------------------------------
		db 24h
byte_2982	db 11h			; DATA XREF: seg000:2946w
; ---------------------------------------------------------------------------
		xor	dh, al
		or	al, dl
		stosw
		mov	dl, dh
		dec	ch
		jnz	short loc_297C

loc_298E:				; CODE XREF: seg000:297Aj
		lodsb
		xor	ah, ah
		ror	ax, cl
		or	al, dl
		stosw
		mov	dl, ch
; ---------------------------------------------------------------------------
		db 83h,	0C7h
byte_299A	db 50h			; DATA XREF: seg000:2962w
		db 0B5h
byte_299C	db 11h			; DATA XREF: seg000:294Dw
; ---------------------------------------------------------------------------
		dec	bx
		jnz	short loc_296C
		jmp	short loc_29F5
; ---------------------------------------------------------------------------

loc_29A2:				; CODE XREF: seg000:2944j
		mov	cs:byte_29DC, bl
		mov	cs:byte_29F1, ch
		mov	bx, ax
		mov	si, es
		mov	ds, word ptr [bx+2AC4h]
		mov	bx, dx
		xor	bh, bh
		mov	al, 4Fh	; 'O'
		sub	al, dh
		mov	cs:byte_29EF, al
		mov	ax, 0A800h
		mov	es, ax
		nop

loc_29C6:				; CODE XREF: seg000:29F3j
		lodsb
		xor	ah, ah
		ror	ax, cl
		mov	dl, ah
		xchg	ah, al
		xor	al, al
		stosw
		or	ch, ch
		jz	short loc_29E8

loc_29D6:				; CODE XREF: seg000:29E6j
		lodsw
		ror	ax, cl
		mov	dh, al
; ---------------------------------------------------------------------------
		db 24h
byte_29DC	db 11h			; DATA XREF: seg000:loc_29A2w
; ---------------------------------------------------------------------------
		xor	dh, al
		or	al, dl
		stosw
		mov	dl, dh
		dec	ch
		jnz	short loc_29D6

loc_29E8:				; CODE XREF: seg000:29D4j
		mov	es:[di], dl
		mov	dl, ch
; ---------------------------------------------------------------------------
		db 83h,	0C7h
byte_29EF	db 50h			; DATA XREF: seg000:29BCw
		db 0B5h
byte_29F1	db 11h			; DATA XREF: seg000:29A7w
; ---------------------------------------------------------------------------
		dec	bx
		jnz	short loc_29C6

loc_29F5:				; CODE XREF: seg000:28E9j seg000:293Bj ...
		xor	al, al
		out	7Ch, al
		pop	di
		pop	si
		pop	ds
		pop	bp
		retf	0Ah

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_2A00	proc far		; CODE XREF: sub_278C+2Fp

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		push	bx
		cld
		mov	bx, [bp+arg_4]
		cmp	bx, 200h
		cmc
		mov	ax, 0FFE1h
		jb	short loc_2A6F
		cmp	word_21AE6, 0
		jnz	short loc_2A40
		mov	word_21AC2, 4
		push	240h
		push	cs
		call	near ptr sub_258C
		mov	word_21AE6, ax
		mov	ax, 0FFF8h
		jb	short loc_2A6F
		push	es
		push	cx
		push	di
		push	ds
		pop	es
		assume es:dseg
		xor	ax, ax
		mov	di, 2EC4h
		mov	cx, 200h
		rep stosw
		pop	di
		pop	cx
		pop	es
		assume es:nothing

loc_2A40:				; CODE XREF: sub_2A00+17j
		mov	ax, bx
		shl	bx, 1
		cmp	ax, word_21AE8
		jnb	short loc_2A5B
		cmp	word ptr [bx+2EC4h], 0
		jz	short loc_2A5F
		push	word ptr [bx+2AC4h]
		push	cs
		call	near ptr sub_267C
		jmp	short loc_2A5F
; ---------------------------------------------------------------------------

loc_2A5B:				; CODE XREF: sub_2A00+48j
		inc	ax
		mov	word_21AE8, ax

loc_2A5F:				; CODE XREF: sub_2A00+4Fj sub_2A00+59j
		mov	ax, [bp+arg_2]
		mov	[bx+2EC4h], ax
		mov	ax, [bp+arg_0]
		mov	[bx+2AC4h], ax
		xor	ax, ax

loc_2A6F:				; CODE XREF: sub_2A00+10j sub_2A00+2Cj
		pop	bx
		pop	bp
		retf	6
sub_2A00	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_2A74	proc far		; CODE XREF: sub_AED0:loc_AFA4P
					; sub_AED0+DDP	...

arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		push	ds
		push	si
		push	di
		push	[bp+arg_2]
		push	[bp+arg_0]
		push	cs
		call	near ptr sub_105C
		jb	short loc_2AF6
		mov	bx, ax
		mov	cx, 786h
		push	bx
		push	cx
		push	bx
		push	ds
		push	cx
		push	cs
		call	near ptr sub_3D6
		pop	cx
		pop	bx
		jb	short loc_2AEE
		mov	al, byte_21ACB
		and	al, 7Fh
		cmp	al, 3
		mov	ax, 0FFF3h
		jnz	short loc_2AEE
		xor	si, si
		mov	ax, word_21AE2
		or	ax, ax
		jz	short loc_2ABA
		push	bx
		push	cx
		push	bx
		push	ds
		push	cx
		push	cs
		call	near ptr sub_412
		pop	cx
		pop	bx
		mov	si, ax

loc_2ABA:				; CODE XREF: sub_2A74+37j
		test	byte_21ACB, 80h
		jz	short loc_2ACE
		push	bx
		push	cx
		push	bx
		push	ds
		push	cx
		push	cs
		call	near ptr sub_5B2
		pop	cx
		pop	bx
		jb	short loc_2AEE

loc_2ACE:				; CODE XREF: sub_2A74+4Bj
		push	bx
		push	bx
		push	ds
		push	cx
		push	si
		push	cs
		call	loc_286
		pop	bx
		jb	short loc_2AEE
		push	bx
		push	cs
		call	near ptr sub_1046
		mov	ax, word_21AD4
		sub	ax, word_21AD2
		inc	ax
		pop	di
		pop	si
		pop	ds
		pop	bp
		retf	4
; ---------------------------------------------------------------------------

loc_2AEE:				; CODE XREF: sub_2A74+22j sub_2A74+2Ej ...
		push	ax
		push	bx
		push	cs
		call	near ptr sub_1046
		pop	ax
		stc

loc_2AF6:				; CODE XREF: sub_2A74+10j
		pop	di
		pop	si
		pop	ds
		pop	bp
		retf	4
sub_2A74	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_2AFE	proc far		; CODE XREF: sub_2748+1Ap sub_2B4E+1Dp
		mov	bx, sp
		xor	dx, dx
		mov	bx, ss:[bx+4]
		cmp	bx, word_21AE8
		jnb	short loc_2B46
		mov	cx, bx
		shl	bx, 1
		mov	ax, [bx+2EC4h]
		or	ax, ax
		jz	short loc_2B46
		push	word ptr [bx+2AC4h]
		push	cs
		call	near ptr sub_267C
		mov	[bx+2AC4h], dx
		mov	[bx+2EC4h], dx
		inc	cx
		cmp	cx, word_21AE8
		jnz	short loc_2B3E

loc_2B2F:				; CODE XREF: sub_2AFE+3Dj
		dec	word_21AE8
		jz	short loc_2B3E
		dec	bx
		dec	bx
		mov	cx, [bx+2AC4h]
		jcxz	short loc_2B2F
		nop

loc_2B3E:				; CODE XREF: sub_2AFE+2Fj sub_2AFE+35j
		mov	ax, 0
		clc
		retf	2
; ---------------------------------------------------------------------------
		nop

loc_2B46:				; CODE XREF: sub_2AFE+Cj sub_2AFE+18j
		stc
		mov	ax, 0FFE1h
		retf	2
sub_2AFE	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_2B4E	proc far		; CODE XREF: sub_B29E+18P
					; sub_D1BC+2E2P ...
		push	si
		mov	si, sp
		push	di
		mov	di, ss:[si+6]
		cmp	di, word_21AE8
		jl	short loc_2B61
		mov	di, word_21AE8
		dec	di

loc_2B61:				; CODE XREF: sub_2B4E+Cj
		mov	si, ss:[si+8]
		cmp	si, di
		ja	short loc_2B73

loc_2B69:				; CODE XREF: sub_2B4E+23j
		push	si
		push	cs
		call	near ptr sub_2AFE
		inc	si
		cmp	si, di
		jbe	short loc_2B69

loc_2B73:				; CODE XREF: sub_2B4E+19j
		pop	di
		pop	si
		retf	4
sub_2B4E	endp

; ---------------------------------------------------------------------------

loc_2B78:				; CODE XREF: sub_C778+D8P sub_C778+F3P ...
		push	bp
		mov	bp, sp
		push	ds
		push	si
		push	di
		mov	cx, [bp+0Eh]
		mov	di, [bp+0Ch]
		mov	ax, [bp+6]
		out	7Ch, al
		mov	al, ah
		out	7Eh, al
		out	7Eh, al
		out	7Eh, al
		out	7Eh, al
		mov	ax, di
		shl	di, 2
		add	di, ax
		shl	di, 4
		mov	bx, cx
		and	cx, 7
		shr	bx, 3
		add	di, bx
		mov	bx, [bp+0Ah]
		shl	bx, 1
		mov	dx, [bx+2EC4h]
		push	bx
		mov	bx, cx
		mov	cx, [bp+8]
		mov	bp, ax
		mov	al, dh
		mul	dl
		xor	si, si
		jcxz	short loc_2BC4

loc_2BC0:				; CODE XREF: seg000:2BC2j
		add	si, ax
		loop	loc_2BC0

loc_2BC4:				; CODE XREF: seg000:2BBEj
		mov	al, [bx+776h]
		mov	ch, dh
		shr	ch, 1
		mov	cl, bl
		pop	bx
		mov	ds, word ptr [bx+2AC4h]
		mov	bx, 0A800h
		mov	es, bx
		assume es:nothing
		mov	bx, dx
		xor	bh, bh
		add	bp, bx
		sub	bp, 190h
		jg	short loc_2BE6
		xor	bp, bp

loc_2BE6:				; CODE XREF: seg000:2BE2j
		sub	bx, bp
		test	di, 1
		jz	short loc_2BF1
		jmp	loc_2C86
; ---------------------------------------------------------------------------

loc_2BF1:				; CODE XREF: seg000:2BECj
		xor	dl, dl
		test	dh, 1
		jnz	short loc_2C3A
		mov	cs:byte_2C10, al
		mov	cs:byte_2C25, ch
		mov	al, 50h	; 'P'
		sub	al, dh
		mov	cs:byte_2C23, al
		nop

loc_2C0A:				; CODE XREF: seg000:2C27j seg000:2C38j
		lodsw
		ror	ax, cl
		mov	dh, al
; ---------------------------------------------------------------------------
		db 24h
byte_2C10	db 11h			; DATA XREF: seg000:2BF8w
		db 32h,	0F0h, 0Ah, 0C2h, 0ABh, 8Ah, 0D6h, 0FEh,	0CDh, 75h
		db 0EEh, 26h, 88h, 15h,	8Ah, 0D5h, 83h,	0C7h
byte_2C23	db 50h			; DATA XREF: seg000:2C05w
		db 0B5h
byte_2C25	db 11h			; DATA XREF: seg000:2BFCw
; ---------------------------------------------------------------------------
		dec	bx
		jnz	short loc_2C0A
		or	bp, bp
		jnz	short loc_2C30
		jmp	loc_2D32
; ---------------------------------------------------------------------------

loc_2C30:				; CODE XREF: seg000:2C2Bj
		sub	di, 7D00h
		mov	bx, bp
		xor	bp, bp
		jmp	short loc_2C0A
; ---------------------------------------------------------------------------

loc_2C3A:				; CODE XREF: seg000:2BF6j
		mov	cs:byte_2C56, al
		mov	cs:byte_2C71, ch
		mov	al, 50h	; 'P'
		sub	al, dh
		mov	cs:byte_2C6F, al
		nop

loc_2C4C:				; CODE XREF: seg000:2C73j seg000:2C84j
		or	ch, ch
		jz	short loc_2C62

loc_2C50:				; CODE XREF: seg000:2C60j
		lodsw
		ror	ax, cl
		mov	dh, al
; ---------------------------------------------------------------------------
		db 24h
byte_2C56	db 11h			; DATA XREF: seg000:loc_2C3Aw
; ---------------------------------------------------------------------------
		xor	dh, al
		or	al, dl
		stosw
		mov	dl, dh
		dec	ch
		jnz	short loc_2C50

loc_2C62:				; CODE XREF: seg000:2C4Ej
		lodsb
		xor	ah, ah
		ror	ax, cl
		or	al, dl
		stosw
		dec	di
		mov	dl, ch
; ---------------------------------------------------------------------------
		db 83h,	0C7h
byte_2C6F	db 50h			; DATA XREF: seg000:2C47w
		db 0B5h
byte_2C71	db 11h			; DATA XREF: seg000:2C3Ew
; ---------------------------------------------------------------------------
		dec	bx
		jnz	short loc_2C4C
		or	bp, bp
		jnz	short loc_2C7C
		jmp	loc_2D32
; ---------------------------------------------------------------------------

loc_2C7C:				; CODE XREF: seg000:2C77j
		sub	di, 7D00h
		mov	bx, bp
		xor	bp, bp
		jmp	short loc_2C4C
; ---------------------------------------------------------------------------

loc_2C86:				; CODE XREF: seg000:2BEEj
		dec	di
		test	dh, 1
		jnz	short loc_2CE2
		mov	cs:byte_2CB6, al
		dec	ch
		mov	cs:byte_2CD0, ch
		mov	al, 4Eh	; 'N'
		sub	al, dh
		mov	cs:byte_2CCE, al
		nop

loc_2CA0:				; CODE XREF: seg000:2CD2j seg000:2CE0j
		lodsb
		xor	ah, ah
		ror	ax, cl
		mov	dl, ah
		xchg	ah, al
		xor	al, al
		stosw
		or	ch, ch
		jz	short loc_2CC2

loc_2CB0:				; CODE XREF: seg000:2CC0j
		lodsw
		ror	ax, cl
		mov	dh, al
; ---------------------------------------------------------------------------
		db 24h
byte_2CB6	db 11h			; DATA XREF: seg000:2C8Cw
; ---------------------------------------------------------------------------
		xor	dh, al
		or	al, dl
		stosw
		mov	dl, dh
		dec	ch
		jnz	short loc_2CB0

loc_2CC2:				; CODE XREF: seg000:2CAEj
		lodsb
		xor	ah, ah
		ror	ax, cl
		or	al, dl
		stosw
		mov	dl, ch
; ---------------------------------------------------------------------------
		db 83h,	0C7h
byte_2CCE	db 50h			; DATA XREF: seg000:2C9Bw
		db 0B5h
byte_2CD0	db 11h			; DATA XREF: seg000:2C92w
; ---------------------------------------------------------------------------
		dec	bx
		jnz	short loc_2CA0
		or	bp, bp
		jz	short loc_2D32
		sub	di, 7D00h
		mov	bx, bp
		xor	bp, bp
		jmp	short loc_2CA0
; ---------------------------------------------------------------------------

loc_2CE2:				; CODE XREF: seg000:2C8Aj
		mov	cs:byte_2D0A, al
		mov	cs:byte_2D1F, ch
		mov	al, 4Fh	; 'O'
		sub	al, dh
		mov	cs:byte_2D1D, al
		nop

loc_2CF4:				; CODE XREF: seg000:2D21j seg000:2D2Fj
		lodsb
		xor	ah, ah
		ror	ax, cl
		mov	dl, ah
		xchg	ah, al
		xor	al, al
		stosw
		or	ch, ch
		jz	short loc_2D16

loc_2D04:				; CODE XREF: seg000:2D14j
		lodsw
		ror	ax, cl
		mov	dh, al
; ---------------------------------------------------------------------------
		db 24h
byte_2D0A	db 11h			; DATA XREF: seg000:loc_2CE2w
; ---------------------------------------------------------------------------
		xor	dh, al
		or	al, dl
		stosw
		mov	dl, dh
		dec	ch
		jnz	short loc_2D04

loc_2D16:				; CODE XREF: seg000:2D02j
		mov	es:[di], dl
		mov	dl, ch
; ---------------------------------------------------------------------------
		db 83h,	0C7h
byte_2D1D	db 50h			; DATA XREF: seg000:2CEFw
		db 0B5h
byte_2D1F	db 11h			; DATA XREF: seg000:2CE6w
; ---------------------------------------------------------------------------
		dec	bx
		jnz	short loc_2CF4
		or	bp, bp
		jz	short loc_2D32
		sub	di, 7D00h
		mov	bx, bp
		xor	bp, bp
		jmp	short loc_2CF4
; ---------------------------------------------------------------------------
		nop

loc_2D32:				; CODE XREF: seg000:2C2Dj seg000:2C79j ...
		xor	al, al
		out	7Ch, al
		pop	di
		pop	si
		pop	ds
		pop	bp
		retf	0Ah
; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_2D3E	proc far		; CODE XREF: sub_C778+4CP
					; sub_C778:loc_C7DEP ...

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		push	ds
		push	si
		push	di
		mov	cx, [bp+arg_4]
		mov	di, [bp+arg_2]
		mov	si, di
		shl	di, 2
		add	di, si
		shl	di, 4
		mov	ax, cx
		and	cx, 7
		shr	ax, 3
		add	di, ax
		mov	bx, cx
		mov	al, [bx+776h]
		mov	bx, [bp+arg_0]
		shl	bx, 1
		mov	dx, [bx+2EC4h]
		mov	ch, dh
		shr	ch, 1
		mov	ds, word ptr [bx+2AC4h]
		mov	bx, dx
		xor	bh, bh
		add	si, bx
		sub	si, 190h
		jg	short loc_2D83
		xor	si, si

loc_2D83:				; CODE XREF: sub_2D3E+41j
		sub	bx, si
		mov	cs:word_2E61, si
		mov	cs:word_2E5B, bx
		mov	bp, di
		test	di, 1
		jnz	short loc_2DD0
		test	dh, 1
		jnz	short loc_2DB6
		mov	cs:byte_2E70, al
		mov	cs:byte_2E85, ch
		mov	al, 50h	; 'P'
		sub	al, dh
		mov	cs:byte_2E83, al
		mov	cs:word_2E64, 2E68h
		jmp	short loc_2E0A
; ---------------------------------------------------------------------------

loc_2DB6:				; CODE XREF: sub_2D3E+5Cj
		mov	cs:byte_2EA4, al
		mov	cs:byte_2EBF, ch
		mov	al, 50h	; 'P'
		sub	al, dh
		mov	cs:byte_2EBD, al
		mov	cs:word_2E64, 2E98h
		jmp	short loc_2E0A
; ---------------------------------------------------------------------------

loc_2DD0:				; CODE XREF: sub_2D3E+57j
		dec	bp
		test	dh, 1
		jnz	short loc_2DF2
		mov	cs:byte_2EE8, al
		dec	ch
		mov	cs:byte_2F02, ch
		mov	al, 4Eh	; 'N'
		sub	al, dh
		mov	cs:byte_2F00, al
		mov	cs:word_2E64, 2ED2h
		jmp	short loc_2E0A
; ---------------------------------------------------------------------------

loc_2DF2:				; CODE XREF: sub_2D3E+96j
		mov	cs:byte_2F2C, al
		mov	cs:byte_2F41, ch
		mov	al, 4Fh	; 'O'
		sub	al, dh
		mov	cs:byte_2F3F, al
		mov	cs:word_2E64, 2F16h

loc_2E0A:				; CODE XREF: sub_2D3E+76j sub_2D3E+90j ...
		mov	cs:word_2E5E, bp
		xor	si, si
		mov	ax, 0C0h ; 'À'
		out	7Ch, al
		mov	al, ah
		out	7Eh, al
		out	7Eh, al
		out	7Eh, al
		out	7Eh, al
		mov	ax, 0A800h
		mov	es, ax
		call	near ptr byte_2E5A
		mov	ax, 0FFCEh
		out	7Ch, al
		mov	al, ah
		out	7Eh, al
		out	7Eh, al
		out	7Eh, al
		out	7Eh, al
		call	near ptr byte_2E5A
		mov	al, 0CDh ; 'Í'
		out	7Ch, al
		call	near ptr byte_2E5A
		mov	al, 0CBh ; 'Ë'
		out	7Ch, al
		call	near ptr byte_2E5A
		mov	al, 0C7h ; 'Ç'
		out	7Ch, al
		call	near ptr byte_2E5A
		xor	al, al
		out	7Ch, al
		pop	di
		pop	si
		pop	ds
		pop	bp
		retf	6
sub_2D3E	endp

; ---------------------------------------------------------------------------
byte_2E5A	db 0BBh			; CODE XREF: sub_2D3E+E7p sub_2D3E+F9p ...
word_2E5B	dw 1234h		; DATA XREF: sub_2D3E+4Cw
		db 0BFh
word_2E5E	dw 1234h		; DATA XREF: sub_2D3E:loc_2E0Aw
		db 0BDh
word_2E61	dw 1234h		; DATA XREF: sub_2D3E+47w
		db 0B8h
word_2E64	dw 1234h		; DATA XREF: sub_2D3E+6Fw sub_2D3E+89w ...
; ---------------------------------------------------------------------------
		jmp	ax
; ---------------------------------------------------------------------------
		db 32h,	0D2h, 0ADh, 0D3h, 0C8h,	8Ah, 0F0h, 24h
byte_2E70	db 11h			; DATA XREF: sub_2D3E+5Ew
		db 32h,	0F0h, 0Ah, 0C2h, 0ABh, 8Ah, 0D6h, 0FEh,	0CDh, 75h
		db 0EEh, 26h, 88h, 15h,	8Ah, 0D5h, 83h,	0C7h
byte_2E83	db 50h			; DATA XREF: sub_2D3E+6Bw
		db 0B5h
byte_2E85	db 11h			; DATA XREF: sub_2D3E+62w
		db 4Bh,	75h, 0E1h, 0Bh,	0EDh, 75h, 1, 0C3h, 81h, 0EFh
		db 0, 7Dh, 8Bh,	0DDh, 33h, 0EDh, 0EBh, 0D2h, 32h, 0D2h
		db 0Ah,	0EDh, 74h, 12h,	0ADh, 0D3h, 0C8h, 8Ah, 0F0h, 24h
byte_2EA4	db 11h			; DATA XREF: sub_2D3E:loc_2DB6w
		db 32h,	0F0h, 0Ah, 0C2h, 0ABh, 8Ah, 0D6h, 0FEh,	0CDh, 75h
		db 0EEh, 0ACh, 32h, 0E4h, 0D3h,	0C8h, 0Ah, 0C2h, 0ABh
		db 4Fh,	8Ah, 0D5h, 83h,	0C7h
byte_2EBD	db 50h			; DATA XREF: sub_2D3E+85w
		db 0B5h
byte_2EBF	db 11h			; DATA XREF: sub_2D3E+7Cw
		db 4Bh,	75h, 0D7h, 0Bh,	0EDh, 75h, 1, 0C3h, 81h, 0EFh
		db 0, 7Dh, 8Bh,	0DDh, 33h, 0EDh, 0EBh, 0C8h, 0ACh, 32h
		db 0E4h, 0D3h, 0C8h, 8Ah, 0D4h,	86h, 0E0h, 32h,	0C0h, 0ABh
		db 0Ah,	0EDh, 74h, 12h,	0ADh, 0D3h, 0C8h, 8Ah, 0F0h, 24h
byte_2EE8	db 11h			; DATA XREF: sub_2D3E+98w
		db 32h,	0F0h, 0Ah, 0C2h, 0ABh, 8Ah, 0D6h, 0FEh,	0CDh, 75h
		db 0EEh, 0ACh, 32h, 0E4h, 0D3h,	0C8h, 0Ah, 0C2h, 0ABh
		db 8Ah,	0D5h, 83h, 0C7h
byte_2F00	db 50h			; DATA XREF: sub_2D3E+A7w
		db 0B5h
byte_2F02	db 11h			; DATA XREF: sub_2D3E+9Ew
		db 4Bh,	75h, 0CCh, 0Bh,	0EDh, 75h, 2, 0C3h, 90h, 81h, 0EFh
		db 0, 7Dh, 8Bh,	0DDh, 33h, 0EDh, 0EBh, 0BCh, 0ACh, 32h
		db 0E4h, 0D3h, 0C8h, 8Ah, 0D4h,	86h, 0E0h, 32h,	0C0h, 0ABh
		db 0Ah,	0EDh, 74h, 12h,	0ADh, 0D3h, 0C8h, 8Ah, 0F0h, 24h
byte_2F2C	db 11h			; DATA XREF: sub_2D3E:loc_2DF2w
		db 32h,	0F0h, 0Ah, 0C2h, 0ABh, 8Ah, 0D6h, 0FEh,	0CDh, 75h
		db 0EEh, 26h, 88h, 15h,	8Ah, 0D5h, 83h,	0C7h
byte_2F3F	db 50h			; DATA XREF: sub_2D3E+C1w
		db 0B5h
byte_2F41	db 11h			; DATA XREF: sub_2D3E+B8w
		db 4Bh,	75h, 0D1h, 0Bh,	0EDh, 75h, 1, 0C3h, 81h, 0EFh
		db 0, 7Dh, 8Bh,	0DDh, 33h, 0EDh, 0EBh, 0C2h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_2F54	proc far		; CODE XREF: sub_D955+7CP sub_E8A3+5BP ...

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		push	ds
		push	si
		push	di
		mov	bx, [bp+arg_0]
		shl	bx, 1
		mov	dx, [bx+2EC4h]
		mov	cx, [bp+arg_4]
		mov	bp, [bp+arg_2]
		mov	ax, bp
		shl	ax, 2
		add	bp, ax
		shl	bp, 4
		mov	ax, cx
		and	cx, 7
		shr	ax, 3
		add	bp, ax
		mov	si, cx
		mov	ch, dh
		shr	ch, 1
		mov	al, dl
		mov	ah, [si+776h]
		mov	cs:word_3101, ax
		test	bp, 1
		jnz	short loc_2FC4
		test	dh, 1
		jnz	short loc_2FAE
		mov	cs:byte_3061, ch
		mov	al, 50h	; 'P'
		sub	al, dh
		mov	cs:byte_305F, al
		mov	cs:word_3104, 0FF3Eh
		jmp	short loc_2FF6
; ---------------------------------------------------------------------------

loc_2FAE:				; CODE XREF: sub_2F54+42j
		mov	cs:byte_308F, ch
		mov	al, 50h	; 'P'
		sub	al, dh
		mov	cs:byte_308D, al
		mov	cs:word_3104, 0FF62h
		jmp	short loc_2FF6
; ---------------------------------------------------------------------------

loc_2FC4:				; CODE XREF: sub_2F54+3Dj
		dec	bp
		test	dh, 1
		jnz	short loc_2FE2
		dec	ch
		mov	cs:byte_30C6, ch
		mov	al, 4Eh	; 'N'
		sub	al, dh
		mov	cs:byte_30C4, al
		mov	cs:word_3104, 0FF90h
		jmp	short loc_2FF6
; ---------------------------------------------------------------------------

loc_2FE2:				; CODE XREF: sub_2F54+74j
		mov	cs:byte_30F7, ch
		mov	al, 4Fh	; 'O'
		sub	al, dh
		mov	cs:byte_30F5, al
		mov	cs:word_3104, 0FFC6h

loc_2FF6:				; CODE XREF: sub_2F54+58j sub_2F54+6Ej ...
		mov	ds, word ptr [bx+2AC4h]
		xor	si, si
		mov	al, 0C0h ; 'À'
		out	7Ch, al
		mov	ax, si
		out	7Eh, al
		out	7Eh, al
		out	7Eh, al
		out	7Eh, al
		mov	ax, 0A800h
		mov	es, ax
		call	loc_30FE
		mov	ax, 0FFCEh
		out	7Ch, al
		mov	al, ah
		out	7Eh, al
		out	7Eh, al
		out	7Eh, al
		out	7Eh, al
		call	loc_30FE
		mov	al, 0CDh ; 'Í'
		out	7Ch, al
		call	loc_30FE
		mov	al, 0CBh ; 'Ë'
		out	7Ch, al
		call	loc_30FE
		mov	al, 0C7h ; 'Ç'
		out	7Ch, al
		call	loc_30FE
		xor	al, al
		out	7Ch, al
		pop	di
		pop	si
		pop	ds
		pop	bp
		retf	6
sub_2F54	endp

; ---------------------------------------------------------------------------
		db 32h,	0D2h, 0ADh, 0D3h, 0C8h,	8Ah, 0F0h, 22h,	0C7h, 32h
		db 0F0h, 0Ah, 0C2h, 0ABh, 8Ah, 0D6h, 0FEh, 0CDh, 75h, 0EEh
		db 26h,	88h, 15h, 8Ah, 0D5h, 83h, 0C7h
byte_305F	db 50h			; DATA XREF: sub_2F54+4Dw
		db 0B5h
byte_3061	db 11h			; DATA XREF: sub_2F54+44w
		db 0FEh, 0CBh, 75h, 0E0h, 0C3h,	90h, 32h, 0D2h,	0Ah, 0EDh
		db 74h,	12h, 0ADh, 0D3h, 0C8h, 8Ah, 0F0h, 22h, 0C7h, 32h
		db 0F0h, 0Ah, 0C2h, 0ABh, 8Ah, 0D6h, 0FEh, 0CDh, 75h, 0EEh
		db 0ACh, 32h, 0E4h, 0D3h, 0C8h,	0Ah, 0C2h, 0ABh, 4Fh, 8Ah
		db 0D5h, 83h, 0C7h
byte_308D	db 50h			; DATA XREF: sub_2F54+63w
		db 0B5h
byte_308F	db 11h			; DATA XREF: sub_2F54:loc_2FAEw
		db 0FEh, 0CBh, 75h, 0D6h, 0C3h,	90h, 0ACh, 32h,	0E4h, 0D3h
		db 0C8h, 8Ah, 0D4h, 86h, 0E0h, 32h, 0C0h, 0ABh,	0Ah, 0EDh
		db 74h,	12h, 0ADh, 0D3h, 0C8h, 8Ah, 0F0h, 22h, 0C7h, 32h
		db 0F0h, 0Ah, 0C2h, 0ABh, 8Ah, 0D6h, 0FEh, 0CDh, 75h, 0EEh
		db 0ACh, 32h, 0E4h, 0D3h, 0C8h,	0Ah, 0C2h, 0ABh, 8Ah, 0D5h
		db 83h,	0C7h
byte_30C4	db 50h			; DATA XREF: sub_2F54+81w
		db 0B5h
byte_30C6	db 11h			; DATA XREF: sub_2F54+78w
		db 0FEh, 0CBh, 75h, 0CBh, 0C3h,	0ACh, 32h, 0E4h, 0D3h
		db 0C8h, 8Ah, 0D4h, 86h, 0E0h, 32h, 0C0h, 0ABh,	0Ah, 0EDh
		db 74h,	12h, 0ADh, 0D3h, 0C8h, 8Ah, 0F0h, 22h, 0C7h, 32h
		db 0F0h, 0Ah, 0C2h, 0ABh, 8Ah, 0D6h, 0FEh, 0CDh, 75h, 0EEh
		db 26h,	88h, 15h, 8Ah, 0D5h, 83h, 0C7h
byte_30F5	db 50h			; DATA XREF: sub_2F54+97w
		db 0B5h
byte_30F7	db 11h			; DATA XREF: sub_2F54:loc_2FE2w
		db 0FEh, 0CBh, 75h, 0D0h, 0C3h,	90h
; ---------------------------------------------------------------------------

loc_30FE:				; CODE XREF: sub_2F54+BBp sub_2F54+CDp ...
		mov	di, bp
; ---------------------------------------------------------------------------
		db 0BBh
word_3101	dw 1234h		; DATA XREF: sub_2F54+35w
		db 0E9h
word_3104	dw 0FF3Eh		; DATA XREF: sub_2F54+51w sub_2F54+67w ...

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_3106	proc far		; CODE XREF: sub_AED0+FAP

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		push	ds
		push	si
		push	di
		xor	di, di
		mov	ax, 4
		push	ax
		mov	bx, [bp+arg_0]
		cmp	bx, word_21AE8
		jnb	short loc_3195
		shl	bx, 1
		mov	cx, [bx+2AC4h]
		jcxz	short loc_3195
		mov	ax, [bx+2EC4h]
		mul	ah
		mov	bp, ax
		mov	es, word_21AE6
		assume es:nothing
		mov	ds, cx
		mov	bh, 0FFh

loc_3133:				; CODE XREF: sub_3106+76j
		xor	si, si
		mov	ax, bx
		not	ax
		mov	al, 80h	; ''
		and	ah, 0Fh
		stosw
		mov	cx, bp
		shr	cx, 1
		rep movsw
		sub	di, bp
		mov	bl, 4
		mov	cx, bp
		shr	cx, 1
		nop

loc_314E:				; CODE XREF: sub_3106+5Ej
		ror	bh, 1
		sbb	dx, dx

loc_3152:				; CODE XREF: sub_3106+54j
		lodsw
		xor	ax, dx
		and	es:[di], ax
		inc	di
		inc	di
		loop	loc_3152
		sub	di, bp
		mov	cx, bp
		shr	cx, 1
		dec	bl
		jnz	short loc_314E
		lea	dx, [di-2]
		xor	ax, ax
		repe scasw
		mov	di, dx
		jz	short loc_3179
		lea	di, [bp+di+2]
		pop	ax
		dec	ax
		push	ax
		js	short loc_3195

loc_3179:				; CODE XREF: sub_3106+69j
		sub	bh, 11h
		jnb	short loc_3133
		mov	cx, di
		shr	cx, 1
		push	ds
		push	es
		pop	ds
		pop	es
		xor	ax, ax
		mov	di, ax
		mov	si, ax
		rep movsw
		stosw
		clc
		mov	ax, 0
		jmp	short loc_3199
; ---------------------------------------------------------------------------

loc_3195:				; CODE XREF: sub_3106+13j sub_3106+1Bj ...
		mov	ax, 0FFF3h
		stc

loc_3199:				; CODE XREF: sub_3106+8Dj
		pop	di
		pop	di
		pop	si
		pop	ds
		pop	bp
		retf	2
sub_3106	endp

; ---------------------------------------------------------------------------
		nop

loc_31A2:				; CODE XREF: sub_E8A3+2DP seg001:715FP ...
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	si, [bp+0Ch]
		mov	cs:word_3269, si
		mov	di, [bp+0Ah]
		mov	ax, [bp+6]
		mov	cs:word_322D, ax
		mov	cs:word_326D, ax
		dec	ax
		mov	cs:word_323A, ax
		mov	cs:word_3240, ax
		mov	bx, [bp+8]
		shl	bx, 1
		mov	cx, [bx+2EC4h]
		mov	cs:byte_3267, ch
		mov	es, word ptr [bx+2AC4h]
		mov	ax, cx
		xor	ah, ah
		mul	ch
		mov	bp, ax
		mov	cs:word_31FF, ax
		mov	cs:word_3207, ax
		mov	cs:word_320F, ax
		shl	ax, 1
		add	ax, bp
		dec	ax
		mov	cs:word_3260, ax
		jmp	short $+2

loc_31F7:				; CODE XREF: seg000:3271j
		mov	ah, 8
		mov	bh, es:[bp+0]
; ---------------------------------------------------------------------------
		db 81h,	0C5h
word_31FF	dw 1111h		; DATA XREF: seg000:31E0w
		db 26h,	8Ah, 5Eh, 0, 81h, 0C5h
word_3207	dw 1111h		; DATA XREF: seg000:31E4w
		db 26h,	8Ah, 76h, 0, 81h, 0C5h
word_320F	dw 1111h		; DATA XREF: seg000:31E8w
		db 26h,	8Ah, 56h, 0, 32h, 0C0h,	0D0h, 0E2h, 3 dup(0D0h)
		db 0E6h, 3 dup(0D0h), 0E3h, 3 dup(0D0h), 0E7h, 2 dup(0D0h)
		db 0Ah,	0C0h, 75h, 7, 81h, 0C6h
word_322D	dw 1111h		; DATA XREF: seg000:31B5w
		db 0EBh, 29h, 90h, 50h,	53h, 51h, 52h, 6, 56h, 57h, 0BBh
word_323A	dw 1111h		; DATA XREF: seg000:31BEw
		db 3, 0F3h, 56h, 0BBh
word_3240	dw 1111h		; DATA XREF: seg000:31C2w
		db 3, 0DFh, 53h, 0BBh, 0C0h, 0,	53h, 32h, 0E4h,	50h, 0Eh
		db 0E8h, 0F4h, 0E4h, 0Eh, 0E8h,	28h, 0DEh, 46h,	7, 5Ah
		db 59h,	5Bh, 58h, 0FEh,	0CCh, 75h, 0B7h, 81h, 0EDh
word_3260	dw 1111h		; DATA XREF: seg000:31F1w
		db 0FEh, 0CDh, 75h, 91h, 0B5h
byte_3267	db 11h			; DATA XREF: seg000:31CFw
		db 0BEh
word_3269	dw 1111h		; DATA XREF: seg000:31AAw
		db 81h,	0C7h
word_326D	dw 1111h		; DATA XREF: seg000:31B9w
; ---------------------------------------------------------------------------
		dec	cl
		jnz	short loc_31F7
		push	cs
		call	near ptr sub_176E
		pop	di
		pop	si
		pop	bp
		retf	8
; ---------------------------------------------------------------------------
		nop
; ---------------------------------------------------------------------------
dword_327E	dd 0			; DATA XREF: sub_3284+4r sub_3284+71w	...
byte_3282	db 0			; DATA XREF: seg000:3378r seg000:338Fw ...
		db  90h	; 

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_3284	proc far		; CODE XREF: sub_13666+3AP

arg_0		= dword	ptr  6

		push	bp
		mov	bp, sp
		cld
		mov	ax, word ptr cs:dword_327E
		or	ax, word ptr cs:dword_327E+2
		jz	short loc_3296
		jmp	loc_3317
; ---------------------------------------------------------------------------

loc_3296:				; CODE XREF: sub_3284+Dj
		push	di
		push	si
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		push	cs
		call	near ptr sub_F14
		push	10h
		push	cs
		call	near ptr sub_2578
		mov	di, ax
		push	ax
		push	0
		push	10h
		push	cs
		call	near ptr sub_E60
		mov	ax, di
		mov	es, ax
		mov	di, es:0
		mov	si, es:6
		push	ax
		push	cs
		call	near ptr sub_267C
		push	di
		push	cs
		call	near ptr sub_2578
		mov	word_24698, ax
		push	ax
		push	0
		push	di
		push	cs
		call	near ptr sub_E60
		push	cs
		call	near ptr sub_DF4
		mov	cx, di
		mov	ax, word_24698
		mov	es, ax
		mov	ax, si
		xor	bx, bx

loc_32E5:				; CODE XREF: sub_3284+68j
		xor	es:[bx], al
		sub	al, es:[bx]
		inc	bx
		loop	loc_32E5
		pop	si
		pop	di
		mov	ax, 3521h
		int	21h		; DOS -	2+ - GET INTERRUPT VECTOR
					; AL = interrupt number
					; Return: ES:BX	= value	of interrupt vector
		mov	word ptr cs:dword_327E,	bx
		mov	word ptr cs:dword_327E+2, es
		mov	word_24694, 0
		mov	word_24696, 0FFFFh
		push	ds
		push	cs
		pop	ds
		assume ds:seg000
		mov	dx, 3378h
		mov	ax, 2521h
		int	21h		; DOS -	SET INTERRUPT VECTOR
					; AL = interrupt number
					; DS:DX	= new vector to	be used	for specified interrupt
		pop	ds
		assume ds:dseg

loc_3317:				; CODE XREF: sub_3284+Fj
		push	si
		push	di
		push	ds
		mov	cx, 0FFFFh
		mov	al, 0
		les	di, [bp+arg_0]
		repne scasb
		not	cx
		sub	di, cx
		mov	si, di
		mov	di, 32D4h
		push	ds
		push	es
		pop	ds
		pop	es
		shr	cx, 1
		rep movsw
		adc	cx, cx
		rep movsb
		pop	ds
		pop	di
		pop	si
		pop	bp
		retf	4
sub_3284	endp


; =============== S U B	R O U T	I N E =======================================


sub_3340	proc far		; CODE XREF: sub_1361E+3P
		mov	ax, word ptr cs:dword_327E
		or	ax, word ptr cs:dword_327E+2
		jz	short locret_3377
		push	ds
		lds	dx, cs:dword_327E
		mov	ax, 2521h
		int	21h		; DOS -	SET INTERRUPT VECTOR
					; AL = interrupt number
					; DS:DX	= new vector to	be used	for specified interrupt
		pop	ds
		xor	ax, ax
		mov	word ptr cs:dword_327E,	ax
		mov	word ptr cs:dword_327E+2, ax
		cmp	word_24694, ax
		jz	short locret_3377
		push	word_24694
		push	cs
		call	near ptr sub_200E
		push	word_24698
		push	cs
		call	near ptr sub_267C

locret_3377:				; CODE XREF: sub_3340+9j sub_3340+25j
		retf
sub_3340	endp

; ---------------------------------------------------------------------------
		cmp	cs:byte_3282, 0
		jz	short loc_3385
		jmp	cs:dword_327E
; ---------------------------------------------------------------------------

loc_3385:				; CODE XREF: seg000:337Ej
		pusha
		push	ds
		push	es
		mov	bp, sp
		mov	di, seg	dseg
		mov	ds, di
		inc	cs:byte_3282
		push	word ptr [bp+18h]
		popf
		mov	cs:byte_33DC, ah
		mov	si, 33ACh

loc_33A0:				; CODE XREF: seg000:33A6j
		add	si, 4
		cmp	ah, cs:[si]
		jnz	short loc_33A0
		mov	di, word_24696
		jmp	word ptr cs:[si+2]
; ---------------------------------------------------------------------------
		db 3Dh,	0, 0E0h, 33h, 3Eh, 0, 15h, 34h,	3Fh, 0,	33h, 34h
		db 42h,	0, 47h,	34h, 46h, 0, 0A8h, 34h,	40h, 0,	0ACh, 34h
		db 45h,	0, 0ACh, 34h, 4Ch, 0, 8Ah, 34h,	57h, 0,	0ACh, 34h
		db 5Ch,	0, 0ACh, 34h, 44h, 0, 96h, 34h
byte_33DC	db 0			; DATA XREF: seg000:3398w
		db    0
; ---------------------------------------------------------------------------
		mov	al, 34h	; '4'
		test	al, 0Fh
		jz	short loc_33E7
		jmp	loc_34B0
; ---------------------------------------------------------------------------

loc_33E7:				; CODE XREF: seg000:33E2j
		or	di, di
		js	short loc_33EE
		jmp	loc_34B0
; ---------------------------------------------------------------------------

loc_33EE:				; CODE XREF: seg000:33E9j
		push	ds
		push	offset unk_24614
		push	word ptr [bp+2]
		push	dx
		push	cs
		call	near ptr sub_3506
		or	ax, ax
		jnz	short loc_3401
		jmp	loc_34B0
; ---------------------------------------------------------------------------

loc_3401:				; CODE XREF: seg000:33FCj
		mov	word_24694, ax
		mov	es, ax
		mov	es, word ptr es:0
		mov	ax, es:0
		mov	word_24696, ax
		jmp	loc_34CB
; ---------------------------------------------------------------------------
		cmp	bx, di
		jz	short loc_341C
		jmp	loc_34B0
; ---------------------------------------------------------------------------

loc_341C:				; CODE XREF: seg000:3417j
		push	word_24694
		push	cs
		call	near ptr sub_200E
		mov	word_24694, 0
		mov	word_24696, 0FFFFh
		jmp	loc_34CB
; ---------------------------------------------------------------------------
		cmp	bx, di
		jnz	short loc_34B0
		push	word ptr [bp+2]
		push	dx
		push	cx
		push	word_24694
		push	cs
		call	near ptr sub_20D8
		jmp	loc_34CB
; ---------------------------------------------------------------------------
		cmp	bx, di
		jnz	short loc_34B0
		or	cx, cx
		jl	short loc_34C2
		cmp	al, 1
		jz	short loc_347B
		jl	short loc_346F
		mov	es, word_24694
		mov	dx, es:16h
		mov	cx, es:18h
		sub	dx, es:12h
		sbb	cx, es:14h
		jmp	short loc_347B
; ---------------------------------------------------------------------------

loc_346F:				; CODE XREF: seg000:3453j
		push	cx
		push	dx
		push	word_24694
		push	cs
		call	near ptr sub_2106
		pop	dx
		pop	cx

loc_347B:				; CODE XREF: seg000:3451j seg000:346Dj
		push	word_24694
		push	cx
		push	dx
		push	cs
		call	near ptr sub_2142
		mov	[bp+0Eh], dx
		jmp	short loc_34CB
; ---------------------------------------------------------------------------
		db 2Eh,	0C5h, 16h, 7Eh,	32h, 0B8h, 21h,	25h, 0CDh, 21h
		db 0EBh, 1Ah, 8Ah, 0C8h, 0B8h, 1, 0, 0D3h, 0E0h, 2Eh, 85h
		db 6, 0A6h, 34h, 75h, 8, 0EBh, 0Ah, 0CFh, 14h, 8Bh, 0CFh
		db 74h,	16h, 3Bh, 0DFh,	74h, 12h
; ---------------------------------------------------------------------------

loc_34B0:				; CODE XREF: seg000:33E4j seg000:33EBj ...
		dec	cs:byte_3282
		push	word ptr [bp+18h]
		popf
		pop	es
		pop	ds
		popa
		cli
		jmp	cs:dword_327E
; ---------------------------------------------------------------------------

loc_34C2:				; CODE XREF: seg000:344Dj
		or	byte ptr [bp+18h], 1
		mov	ax, 1
		jmp	short loc_34CF
; ---------------------------------------------------------------------------

loc_34CB:				; CODE XREF: seg000:3412j seg000:3430j ...
		and	byte ptr [bp+18h], 0FEh

loc_34CF:				; CODE XREF: seg000:34C9j
		mov	[bp+12h], ax
		dec	cs:byte_3282
		pop	es
		pop	ds
		popa
		iret
; ---------------------------------------------------------------------------
		db    0

; =============== S U B	R O U T	I N E =======================================


sub_34DC	proc far		; CODE XREF: sub_13666+31P
		mov	cx, 100h
		mov	dx, 188h

loc_34E2:				; CODE XREF: sub_34DC+Bj
		in	al, dx
		inc	al
		jnz	short loc_34ED
		loop	loc_34E2
		xor	ax, ax
		jmp	short loc_3501
; ---------------------------------------------------------------------------

loc_34ED:				; CODE XREF: sub_34DC+9j
		pushf
		cli
		mov	bh, 7
		call	sub_2240
		and	al, 3Fh
		or	al, 80h
		mov	bl, al
		call	sub_222A
		popf
		mov	ax, 1

loc_3501:				; CODE XREF: sub_34DC+Fj
		mov	word_216DA, ax
		retf
sub_34DC	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_3506	proc far		; CODE XREF: seg000:33F7p

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

		enter	0, 0
		push	si
		push	di
		mov	word_21AC2, 7
		push	1Fh
		push	cs
		call	near ptr sub_2578
		jb	loc_3612
		mov	si, ax
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	cs
		call	near ptr sub_6A4
		or	ax, ax
		jz	loc_360B
		mov	es, si
		mov	es:0, ax
		mov	ax, word_24698
		mov	fs, ax
		xor	ax, ax
		mov	di, ax

loc_353D:				; CODE XREF: sub_3506+57j
		mov	al, fs:[di]
		mov	bx, 2
		or	al, al
		jz	short loc_355F
		mov	bx, 3
		add	bx, di
		push	[bp+arg_2]
		push	[bp+arg_0]
		push	fs
		push	bx
		call	sub_3620
		jnz	short loc_3561
		add	di, 20h	; ' '
		jmp	short loc_353D
; ---------------------------------------------------------------------------

loc_355F:				; CODE XREF: sub_3506+3Fj
		mov	ax, bx

loc_3561:				; CODE XREF: sub_3506+52j
		mov	es, si
		mov	ax, fs:[di+14h]
		mov	dx, fs:[di+16h]
		mov	es:0Eh,	ax
		mov	es:10h,	dx
		push	word ptr es:0
		push	dx
		push	ax
		push	0
		push	cs
		call	near ptr sub_76A
		mov	ax, 2086h
		mov	dl, fs:[di+2]
		mov	es, si
		or	dl, dl
		jz	short loc_3596
		mov	es:1Eh,	dl
		mov	ax, 20CAh

loc_3596:				; CODE XREF: sub_3506+86j
		mov	es:4, ax
		mov	es, cx
		mov	ax, fs:[di]
		mov	es, si
		cmp	ax, 0F388h
		jz	short loc_35B0
		cmp	ax, 9595h
		jz	short loc_35BA
		mov	ax, 5
		jmp	short loc_35FF
; ---------------------------------------------------------------------------

loc_35B0:				; CODE XREF: sub_3506+9Ej
		mov	ax, es:4
		mov	es:2, ax
		jmp	short loc_35CF
; ---------------------------------------------------------------------------

loc_35BA:				; CODE XREF: sub_3506+A3j
		mov	word ptr es:2, 2038h
		mov	word ptr es:1Ah, 0
		mov	word ptr es:1Ch, 0FFFFh

loc_35CF:				; CODE XREF: sub_3506+B2j
		mov	bx, fs:[di+10h]
		mov	dx, fs:[di+12h]
		xor	ax, ax
		mov	es:6, bx
		mov	es:8, ax
		mov	es:16h,	dx
		mov	es:18h,	ax
		mov	es:0Ah,	ax
		mov	es:0Ch,	ax
		mov	es:12h,	ax
		mov	es:14h,	ax
		mov	ax, si
		jmp	short loc_3619
; ---------------------------------------------------------------------------

loc_35FF:				; CODE XREF: sub_3506+A8j
		mov	word_2171E, ax
		push	word ptr es:0
		push	cs
		call	near ptr sub_55E

loc_360B:				; CODE XREF: sub_3506+24j
		push	si
		push	cs
		call	near ptr sub_267C
		jmp	short loc_3617
; ---------------------------------------------------------------------------

loc_3612:				; CODE XREF: sub_3506+12j
		mov	byte ptr word_2171E, 3

loc_3617:				; CODE XREF: sub_3506+10Aj
		xor	ax, ax

loc_3619:				; CODE XREF: sub_3506+F7j
		pop	di
		pop	si
		leave
		retf	8
sub_3506	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_3620	proc near		; CODE XREF: sub_3506+4Fp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	bp
		mov	bp, sp
		push	si
		push	ds
		cld
		les	bx, [bp+arg_4]
		lds	si, [bp+arg_0]

loc_362C:				; CODE XREF: sub_3620+2Aj
		mov	ah, es:[bx]
		inc	bx
		lodsb
		sub	al, 61h	; 'a'
		cmp	al, 19h
		ja	short loc_3639
		sub	al, 20h	; ' '

loc_3639:				; CODE XREF: sub_3620+15j
		sub	ah, 61h	; 'a'
		cmp	ah, 19h
		ja	short loc_3644
		sub	ah, 20h	; ' '

loc_3644:				; CODE XREF: sub_3620+1Fj
		cmp	ah, al
		jnz	short loc_364E
		add	al, 61h	; 'a'
		jnz	short loc_362C
		jmp	short loc_3650
; ---------------------------------------------------------------------------

loc_364E:				; CODE XREF: sub_3620+26j
		xor	ax, ax

loc_3650:				; CODE XREF: sub_3620+2Cj
		test	ax, ax
		pop	ds
		pop	si
		pop	bp
		retn	8
sub_3620	endp


; =============== S U B	R O U T	I N E =======================================


sub_3658	proc near		; CODE XREF: sub_366A+4p
		mov	bh, 0Fh
		call	sub_222A
		mov	dx, 188h
		mov	al, 0Eh
		out	dx, al
		inc	dx
		inc	dx
		in	al, dx
		not	al
		retn
sub_3658	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_366A	proc far		; CODE XREF: sub_137A4+F7P
		pushf
		cli
		mov	bl, 80h	; ''
		call	sub_3658
		and	ax, 3Fh
		popf
		retf
sub_366A	endp

; ---------------------------------------------------------------------------
		xchg	dx, bx
		out	dx, al
		xchg	dx, bx
		in	al, dx
		not	al
		retn
; ---------------------------------------------------------------------------
		db    0

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_3680	proc far		; CODE XREF: sub_B8FC+36P sub_B8FC+48P

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

		push	bp
		mov	bp, sp
		push	si
		push	di
		push	ds
		mov	ax, [bp+arg_6]
		sar	ax, 3
		mov	dx, [bp+arg_4]
		shl	dx, 6
		add	ax, dx
		shr	dx, 2
		add	ax, dx
		mov	di, ax
		mov	bx, [bp+arg_2]
		shl	bx, 6
		mov	ax, [bp+arg_0]
		cmp	ax, [bx+345Eh]
		ja	short loc_36EE
		shl	ax, 7
		mov	si, ax
		add	si, 40h	; '@'
		mov	dx, [bx+345Ch]
		mov	ds, dx
		mov	ax, 0A800h
		mov	fs, ax
		assume fs:nothing
		mov	ax, 0B000h
		mov	gs, ax
		assume gs:nothing
		mov	ax, 0B800h
		mov	es, ax
		assume es:nothing
		mov	cx, 10h

loc_36CA:				; CODE XREF: sub_3680+5Aj
		mov	ax, [si-40h]
		mov	fs:[di], ax
		mov	ax, [si-20h]
		mov	gs:[di], ax
		movsw
		add	di, 4Eh	; 'N'
		loop	loc_36CA
		sub	di, 500h
		mov	ax, 0E000h
		mov	es, ax
		assume es:nothing
		mov	cx, 10h

loc_36E8:				; CODE XREF: sub_3680+6Cj
		movsw
		add	di, 4Eh	; 'N'
		loop	loc_36E8

loc_36EE:				; CODE XREF: sub_3680+28j
		pop	ds
		pop	di
		pop	si
		pop	bp
		retf	8
sub_3680	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_36F6	proc far		; CODE XREF: seg000:3ACCp seg000:3AFCp ...
		test	word_216E2, 10h
		jnz	short loc_371E
		xor	ax, ax
		mov	es, ax
		assume es:seg000
		test	es:byte_501, 80h
		mov	bx, 3E6h
		jnz	short loc_3710
		mov	bx, 4CDh

loc_3710:				; CODE XREF: sub_36F6+15j
		mov	dx, 3FDBh
		mov	al, bl
		out	dx, al
		mov	al, bh
		out	dx, al
		mov	al, 7
		out	37h, al
		retf
; ---------------------------------------------------------------------------

loc_371E:				; CODE XREF: sub_36F6+6j
		in	al, 61h		; PC/XT	PPI port B bits:
					; 0: Tmr 2 gate	ÍËÍ OR	03H=spkr ON
					; 1: Tmr 2 data	Í¼  AND	0fcH=spkr OFF
					; 3: 1=read high switches
					; 4: 0=enable RAM parity checking
					; 5: 0=enable I/O channel check
					; 6: 0=hold keyboard clock low
					; 7: 0=enable kbrd
		and	al, 0FCh
		out	61h, al		; PC/XT	PPI port B bits:
					; 0: Tmr 2 gate	ÍËÍ OR	03H=spkr ON
					; 1: Tmr 2 data	Í¼  AND	0fcH=spkr OFF
					; 3: 1=read high switches
					; 4: 0=enable RAM parity checking
					; 5: 0=enable I/O channel check
					; 6: 0=hold keyboard clock low
					; 7: 0=enable kbrd
		retf
sub_36F6	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_3726	proc near		; CODE XREF: sub_374E:loc_37CAp
					; sub_374E:loc_3818p ...
		les	bx, [si]
		assume es:nothing
		mov	al, es:[bx]
		sub	al, 30h	; '0'
		cmp	al, 9
		ja	short loc_374A
		sub	ah, ah
		nop

loc_3734:				; CODE XREF: sub_3726+21j
		mov	dx, cx
		shl	dx, 3
		add	dx, cx
		add	cx, dx
		add	cx, ax
		inc	bx
		mov	al, es:[bx]
		sub	al, 30h	; '0'
		cmp	al, 9
		jbe	short loc_3734
		nop

loc_374A:				; CODE XREF: sub_3726+9j
		mov	[si], bx
		retn
sub_3726	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_374E	proc far		; CODE XREF: sub_3B7C+BCp
					; sub_3B7C+10Fp
		mov	bx, sp
		push	si
		mov	si, ss:[bx+4]
		jmp	loc_3807
; ---------------------------------------------------------------------------

loc_3758:				; CODE XREF: sub_374E+C1j
		xor	cx, cx
		mov	al, es:[bx]
		mov	[si+8],	al
		inc	word ptr [si]
		cbw
		cmp	ax, 4Fh	; 'O'
		jnz	short loc_376C
		jmp	loc_3832
; ---------------------------------------------------------------------------
		nop

loc_376C:				; CODE XREF: sub_374E+18j
		sub	ax, 3Ch	; '<'
		test	al, 1
		jnz	short loc_379E
		cmp	ax, 18h
		ja	short loc_379E
		xchg	ax, bx
		jmp	cs:off_377E[bx]
; ---------------------------------------------------------------------------
off_377E	dw offset loc_3848	; DATA XREF: sub_374E+2Br
		dw offset loc_3856
		dw offset loc_379E
		dw offset loc_379E
		dw offset loc_379E
		dw offset loc_379E
		dw offset loc_379E
		dw offset loc_379E
		dw offset loc_3818
		dw offset loc_3864
		dw offset loc_379E
		dw offset loc_3798
		dw offset loc_3826
; ---------------------------------------------------------------------------

loc_3798:				; CODE XREF: sub_374E+2Bj
					; DATA XREF: sub_374E+46o
		mov	byte ptr [si+8], 48h ; 'H'
		jmp	short loc_37CA
; ---------------------------------------------------------------------------

loc_379E:				; CODE XREF: sub_374E+23j sub_374E+28j ...
		mov	al, [si+8]
		sub	al, 41h	; 'A'
		cmp	al, 6
		ja	short loc_3807
		nop
		les	bx, [si]
		mov	al, es:[bx]
		cmp	al, 2Bh	; '+'
		jz	short loc_37B5
		cmp	al, 23h	; '#'
		jnz	short loc_37BB

loc_37B5:				; CODE XREF: sub_374E+61j
		add	byte ptr [si+8], 8
		inc	word ptr [si]

loc_37BB:				; CODE XREF: sub_374E+65j
		les	bx, [si]
		cmp	byte ptr es:[bx], 2Dh ;	'-'
		jnz	short loc_37CA
		add	byte ptr [si+8], 10h
		inc	word ptr [si]
		nop

loc_37CA:				; CODE XREF: sub_374E+4Ej sub_374E+73j
		call	sub_3726
		mov	[si+0Ch], cx
		or	cx, cx
		jle	short loc_37D9
		cmp	cx, 20h	; ' '
		jle	short loc_37DF

loc_37D9:				; CODE XREF: sub_374E+84j
		mov	cx, [si+0Eh]
		mov	[si+0Ch], cx

loc_37DF:				; CODE XREF: sub_374E+89j
		mov	bx, cx
		shl	bx, 2
		mov	ax, [bx+7E4h]
		mov	[si+10h], ax
		les	bx, [si]
		cmp	byte ptr es:[bx], 2Eh ;	'.'
		jnz	short loc_3800
		mov	bx, ax
		shl	ax, 1
		adc	ax, bx
		sar	ax, 1
		mov	[si+10h], ax
		inc	word ptr [si]

loc_3800:				; CODE XREF: sub_374E+A3j
		mov	ax, 1
		pop	si
		retf	2
; ---------------------------------------------------------------------------

loc_3807:				; CODE XREF: sub_374E+7j sub_374E+57j	...
		les	bx, [si]
		cmp	byte ptr es:[bx], 0
		jz	short loc_3812
		jmp	loc_3758
; ---------------------------------------------------------------------------

loc_3812:				; CODE XREF: sub_374E+BFj
		xor	ax, ax
		pop	si
		retf	2
; ---------------------------------------------------------------------------

loc_3818:				; CODE XREF: sub_374E+2Bj
					; DATA XREF: sub_374E+40o
		call	sub_3726
		cmp	cx, 20h	; ' '
		ja	short loc_3807
		mov	[si+0Eh], cx
		jmp	short loc_3807
; ---------------------------------------------------------------------------
		nop

loc_3826:				; CODE XREF: sub_374E+2Bj
					; DATA XREF: sub_374E+48o
		call	sub_3726
		push	cx
		nop
		push	cs
		call	near ptr sub_3D86
		jmp	short loc_3807
; ---------------------------------------------------------------------------
		nop

loc_3832:				; CODE XREF: sub_374E+1Aj
		les	bx, [si]
		mov	al, es:[bx]
		sub	al, 31h	; '1'
		cmp	al, 7
		ja	short loc_3807
		sub	ah, ah
		inc	ax
		mov	[si+0Ah], ax
		inc	word ptr [si]
		jmp	short loc_3807
; ---------------------------------------------------------------------------
		nop

loc_3848:				; CODE XREF: sub_374E+2Bj
					; DATA XREF: sub_374E:off_377Eo
		dec	word ptr [si+0Ah]
		cmp	word ptr [si+0Ah], 0
		jnz	short loc_3807
		inc	word ptr [si+0Ah]
		jmp	short loc_3807
; ---------------------------------------------------------------------------

loc_3856:				; CODE XREF: sub_374E+2Bj
					; DATA XREF: sub_374E+32o
		inc	word ptr [si+0Ah]
		cmp	word ptr [si+0Ah], 9
		jnz	short loc_3807
		dec	word ptr [si+0Ah]
		jmp	short loc_3807
; ---------------------------------------------------------------------------

loc_3864:				; CODE XREF: sub_374E+2Bj
					; DATA XREF: sub_374E+42o
		les	bx, [si]
		mov	word ptr [si+14h], 0
		cmp	byte ptr es:[bx], 31h ;	'1'
		jnz	short loc_3807
		mov	word ptr [si+14h], 1
		jmp	short loc_3807
sub_374E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_3878	proc far		; CODE XREF: sub_13496+59P

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

		enter	4, 0
		push	di
		push	si
		push	[bp+arg_2]
		push	[bp+arg_0]
		nop
		push	cs
		call	near ptr sub_105C
		mov	si, ax
		cmp	si, 0FFFEh
		jnz	short loc_389E
		mov	ax, 0FFFEh
		jmp	short loc_3898
; ---------------------------------------------------------------------------

loc_3895:				; CODE XREF: sub_3878+46j
		mov	ax, 0FFF8h

loc_3898:				; CODE XREF: sub_3878+1Bj
		pop	si
		pop	di
		leave
		retf	4
; ---------------------------------------------------------------------------

loc_389E:				; CODE XREF: sub_3878+16j
		push	ax
		push	0
		push	0
		push	2
		nop
		push	cs
		call	near ptr sub_87E
		mov	di, ax
		push	si
		push	0
		push	0
		push	0
		nop
		push	cs
		call	near ptr sub_87E
		push	di
		nop
		push	cs
		call	near ptr sub_21F4
		jb	short loc_3895
		mov	[bp+var_2], ax
		push	si
		push	ax
		push	cx
		push	di
		nop
		push	cs
		call	near ptr sub_864
		mov	es, [bp+var_2]
		mov	bx, ax
		mov	byte ptr es:[bx], 0FFh
		push	si
		nop
		push	cs
		call	near ptr sub_1046
		cld
		mov	ax, word_21C04
		mov	[bp+var_4], ax
		mov	bx, ax
		shl	bx, 3
		mov	word ptr [bx+36A2h], 0
		mov	ax, [bx+36A8h]
		mov	[bx+36A4h], ax
		xor	di, di
		xor	si, si

loc_38F9:				; CODE XREF: sub_3878+122j
		mov	ds, [bp+var_2]

loc_38FC:				; CODE XREF: sub_3878+9Cj
		lodsb
		cmp	al, 3Bh	; ';'
		jnz	short loc_390A

loc_3901:				; CODE XREF: sub_3878+90j
		lodsb
		cmp	al, 0FFh
		jz	short loc_3916
		cmp	al, 0Ah
		jnz	short loc_3901

loc_390A:				; CODE XREF: sub_3878+87j
		cmp	al, 30h	; '0'
		jb	short loc_3912
		cmp	al, 39h	; '9'
		jbe	short loc_3916

loc_3912:				; CODE XREF: sub_3878+94j
		cmp	al, 0FFh
		jnz	short loc_38FC

loc_3916:				; CODE XREF: sub_3878+8Cj sub_3878+98j
		xor	cx, cx
		cmp	al, 30h	; '0'
		jb	short loc_393C

loc_391C:				; CODE XREF: sub_3878+C2j
		cmp	al, 39h	; '9'
		ja	short loc_393C
		cmp	al, 0FFh
		jz	short loc_393C
		sub	al, 30h	; '0'
		mov	dl, al
		mov	dh, 0
		mov	ax, cx
		shl	ax, 2
		add	ax, cx
		add	ax, ax
		add	ax, dx
		mov	cx, ax
		lodsb
		cmp	al, 30h	; '0'
		jnb	short loc_391C

loc_393C:				; CODE XREF: sub_3878+A2j sub_3878+A6j ...
		push	seg dseg
		pop	ds
		cmp	al, 0FFh
		jz	short loc_399D
		mov	bx, word_21C04
		shl	bx, 3
		mov	dx, bx
		les	bx, [bx+36A2h]
		mov	es:[bx], cx
		mov	bx, dx
		add	word ptr [bx+36A2h], 2
		or	cx, cx
		jz	short loc_3966
		inc	di
		cmp	di, 100h
		jnz	short loc_3996

loc_3966:				; CODE XREF: sub_3878+E5j
		mov	bx, word_21C04
		shl	bx, 3
		les	bx, [bx+36A2h]
		xor	di, di
		mov	es:[bx], di
		inc	word_21C04
		cmp	word_21C04, 10h
		jz	short loc_399D
		mov	bx, word_21C04
		shl	bx, 3
		mov	word ptr [bx+36A2h], 0
		mov	cx, [bx+36A8h]
		mov	[bx+36A4h], cx

loc_3996:				; CODE XREF: sub_3878+ECj
		cmp	al, 0FFh
		jz	short loc_399D
		jmp	loc_38F9
; ---------------------------------------------------------------------------

loc_399D:				; CODE XREF: sub_3878+CAj
					; sub_3878+107j ...
		mov	ax, word_21C04
		cmp	[bp+var_4], ax
		mov	ax, 0FFF5h
		jz	short loc_39AA
		xor	ax, ax

loc_39AA:				; CODE XREF: sub_3878+12Ej
		push	[bp+var_2]
		nop
		push	cs
		call	near ptr sub_21DE
		pop	si
		pop	di
		leave
		retf	4
sub_3878	endp


; =============== S U B	R O U T	I N E =======================================


sub_39B8	proc far		; CODE XREF: sub_3DB4+150p
		test	word_216E2, 10h
		jnz	short loc_39F2
		in	al, 2		; DMA controller, 8237A-5.
					; channel 1 current address
		mov	ah, 0
		mov	word_21BA6, ax
		cli
		push	8
		push	seg seg000
		push	offset loc_3A64
		nop
		push	cs
		call	near ptr sub_89A
		mov	word_2499E, dx
		mov	word_2499C, ax
		mov	al, 36h	; '6'
		out	77h, al
		mov	ax, word_21BA8
		out	71h, al		; CMOS Memory:
					; used by real-time clock
		mov	al, ah
		out	71h, al		; CMOS Memory:
					; used by real-time clock
		mov	al, byte ptr word_21BA6
		and	al, 0FEh
		out	2, al		; DMA controller, 8237A-5.
					; channel 1 base address
					; (also	sets current address)
		sti
		retf
; ---------------------------------------------------------------------------

loc_39F2:				; CODE XREF: sub_39B8+6j
		mov	ax, 3A64h
		mov	bx, 0
		call	loc_476
		retf
sub_39B8	endp


; =============== S U B	R O U T	I N E =======================================


sub_39FC	proc far		; CODE XREF: sub_3F58+14p
		cli
		test	word_216E2, 10h
		jnz	short loc_3A1B
		push	8
		push	word_2499E
		push	word_2499C
		nop
		push	cs
		call	near ptr sub_89A
		mov	al, byte ptr word_21BA6
		out	2, al		; DMA controller, 8237A-5.
					; channel 1 base address
					; (also	sets current address)
		sti
		retf
; ---------------------------------------------------------------------------

loc_3A1B:				; CODE XREF: sub_39FC+7j
		mov	ax, 0
		mov	bx, 0
		call	loc_476
		retf
sub_39FC	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_3A26	proc far		; CODE XREF: sub_3B7C+F5p
		mov	bx, sp
		mov	dx, ss:[bx+4]
		mov	bx, word_21BBE
		dec	bx
		shl	bx, 1
		mov	ax, [bx+880h]
		mov	bx, dx
		add	ax, [bx+4]
		mov	[bx], ax
		mov	ax, [bx+6]
		mov	[bx+2],	ax
		mov	word ptr [bx+0Ah], 4
		mov	word ptr [bx+8], 48h ; 'H'
		mov	ax, 4
		mov	[bx+0Eh], ax
		mov	[bx+0Ch], ax
		mov	word ptr [bx+10h], 8
		mov	word ptr [bx+14h], 0
		retf	2
sub_3A26	endp

; ---------------------------------------------------------------------------

loc_3A64:				; DATA XREF: sub_39B8+15o
		push	ax
		push	ds
		mov	ax, seg	dseg
		mov	ds, ax
		test	word_216E2, 10h
		jz	short loc_3A8C
		mov	ax, word_21AF4
		add	ax, 4
		cmp	ax, word_21BA8
		mov	word_21AF4, ax
		jbe	short loc_3AD2
		mov	ax, word_21BA8
		inc	ax
		sub	word_21AF4, ax
		jmp	short loc_3A96
; ---------------------------------------------------------------------------

loc_3A8C:				; CODE XREF: seg000:3A71j
		cld
		mov	ax, word_21BA8
		out	71h, al		; CMOS Memory:
					; used by real-time clock
		mov	al, ah
		out	71h, al		; CMOS Memory:
					; used by real-time clock

loc_3A96:				; CODE XREF: seg000:3A8Aj
		push	dx
		push	bx
		push	cx
		push	es
		inc	word_21BB6
		cmp	word_21BB6, 14h
		jnz	short loc_3AD6
		xor	ax, ax
		mov	word_21BB6, ax
		cmp	word_21BAC, 1
		jnz	short loc_3B00
		push	ax
		push	3
		push	ax
		nop
		push	cs
		call	near ptr sub_3B7C
		dec	ax
		jnz	short loc_3B00
		cmp	word_21BB4, 0
		jnz	short loc_3B00
		mov	word_21BAC, 0
		nop
		push	cs
		call	near ptr sub_36F6
		jmp	short loc_3B00
; ---------------------------------------------------------------------------
		nop

loc_3AD2:				; CODE XREF: seg000:3A80j seg000:3B0Aj
		pop	ds
		pop	ax
		retn
; ---------------------------------------------------------------------------
		nop

loc_3AD6:				; CODE XREF: seg000:3AA3j
		test	word_21BB6, 3
		jnz	short loc_3B00
		cmp	word_21C02, 1
		jnz	short loc_3B00
		nop
		push	cs
		call	near ptr sub_3CF4
		dec	ax
		jnz	short loc_3B00
		mov	word_21C02, 0
		cmp	word_21BAC, 0
		jnz	short loc_3B00
		nop
		push	cs
		call	near ptr sub_36F6
		nop

loc_3B00:				; CODE XREF: seg000:3AAFj seg000:3ABBj ...
		pop	es
		pop	cx
		pop	bx
		pop	dx
		test	word_216E2, 10h
		jnz	short loc_3AD2
		mov	al, 20h	; ' '
		out	0, al
		pop	ds
		pop	ax
		iret
; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_3B14	proc near		; CODE XREF: sub_3B7C:loc_3C22p
		push	si
		mov	si, bx
		cmp	word ptr [si+3Ah], 1
		jz	short loc_3B79
		mov	bx, [si+8]
		shl	bx, 1
		mov	bx, [bx+734h]
		cmp	word ptr [si+0Ah], 1
		jnz	short loc_3B30
		shl	bx, 1
		jmp	short loc_3B37
; ---------------------------------------------------------------------------

loc_3B30:				; CODE XREF: sub_3B14+16j
		mov	cx, [si+0Ah]
		dec	cx
		dec	cx
		shr	bx, cl

loc_3B37:				; CODE XREF: sub_3B14+1Aj
		test	word_216E2, 10h
		jz	short loc_3B50
		in	al, 61h		; PC/XT	PPI port B bits:
					; 0: Tmr 2 gate	ÍËÍ OR	03H=spkr ON
					; 1: Tmr 2 data	Í¼  AND	0fcH=spkr OFF
					; 3: 1=read high switches
					; 4: 0=enable RAM parity checking
					; 5: 0=enable I/O channel check
					; 6: 0=hold keyboard clock low
					; 7: 0=enable kbrd
		or	al, 3
		out	61h, al		; PC/XT	PPI port B bits:
					; 0: Tmr 2 gate	ÍËÍ OR	03H=spkr ON
					; 1: Tmr 2 data	Í¼  AND	0fcH=spkr OFF
					; 3: 1=read high switches
					; 4: 0=enable RAM parity checking
					; 5: 0=enable I/O channel check
					; 6: 0=hold keyboard clock low
					; 7: 0=enable kbrd
		mov	ax, bx
		mov	bx, 254h
		mov	cx, 42h	; 'B'
		jmp	short loc_3B68
; ---------------------------------------------------------------------------
		nop

loc_3B50:				; CODE XREF: sub_3B14+29j
		mov	al, 6
		out	37h, al
		mov	cx, 3FDBh
		xor	ax, ax
		mov	es, ax
		assume es:seg000
		test	es:byte_501, 80h
		jz	short loc_3B71
		mov	ax, bx
		mov	bx, 3E6h

loc_3B68:				; CODE XREF: sub_3B14+39j
		mul	bx
		mov	bx, 4CDh
		div	bx
		mov	bx, ax

loc_3B71:				; CODE XREF: sub_3B14+4Dj
		mov	al, bl
		mov	dx, cx
		out	dx, al
		mov	al, bh
		out	dx, al

loc_3B79:				; CODE XREF: sub_3B14+7j
		pop	si
		retn
sub_3B14	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_3B7C	proc far		; CODE XREF: seg000:3AB7p

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

		enter	4, 0
		push	di
		push	si
		mov	ax, word_21BB0
		imul	bx, ax,	16h
		cmp	word ptr [bx+3670h], 1
		jnz	short loc_3BA2
		cmp	word ptr [bx+3674h], 1
		jz	short loc_3BA2
		cmp	word ptr [bx+366Ch], 20h ; ' '
		jz	short loc_3BA2
		mov	si, 1
		jmp	short loc_3BA4
; ---------------------------------------------------------------------------

loc_3BA2:				; CODE XREF: sub_3B7C+11j sub_3B7C+18j ...
		xor	si, si

loc_3BA4:				; CODE XREF: sub_3B7C+24j
		mov	cx, [bp+arg_4]
		sub	ax, cx
		jz	short loc_3BB4
		dec	ax
		jz	short loc_3BE4
		dec	ax
		jz	short loc_3C10
		jmp	short loc_3C26
; ---------------------------------------------------------------------------
		nop

loc_3BB4:				; CODE XREF: sub_3B7C+2Dj
		imul	bx, cx,	16h
		cmp	byte ptr [bx+3668h], 48h ; 'H'
		jz	short loc_3BC2
		or	si, si
		jz	short loc_3BDE

loc_3BC2:				; CODE XREF: sub_3B7C+40j
		cmp	byte ptr [bx+367Eh], 48h ; 'H'
		jz	short loc_3BD0
		cmp	word ptr [bx+3686h], 1
		jg	short loc_3C0A

loc_3BD0:				; CODE XREF: sub_3B7C+4Bj
		cmp	byte ptr [bx+3694h], 48h ; 'H'
		jz	short loc_3BDE
		cmp	word ptr [bx+369Ch], 1
		jg	short loc_3C1E

loc_3BDE:				; CODE XREF: sub_3B7C+44j sub_3B7C+59j
		add	bx, 3660h
		jmp	short loc_3C22
; ---------------------------------------------------------------------------

loc_3BE4:				; CODE XREF: sub_3B7C+30j
		imul	bx, cx,	16h
		cmp	byte ptr [bx+367Eh], 48h ; 'H'
		jz	short loc_3BF2
		or	si, si
		jz	short loc_3C0A

loc_3BF2:				; CODE XREF: sub_3B7C+70j
		cmp	byte ptr [bx+3668h], 48h ; 'H'
		jnz	short loc_3C26
		cmp	byte ptr [bx+3694h], 48h ; 'H'
		jz	short loc_3C26
		cmp	word ptr [bx+369Ch], 1
		jle	short loc_3C26
		jmp	short loc_3C1E
; ---------------------------------------------------------------------------
		nop

loc_3C0A:				; CODE XREF: sub_3B7C+52j sub_3B7C+74j
		add	bx, 3676h
		jmp	short loc_3C22
; ---------------------------------------------------------------------------

loc_3C10:				; CODE XREF: sub_3B7C+33j
		imul	bx, cx,	16h
		cmp	byte ptr [bx+3694h], 48h ; 'H'
		jz	short loc_3C26
		or	si, si
		jnz	short loc_3C26

loc_3C1E:				; CODE XREF: sub_3B7C+60j sub_3B7C+8Bj
		add	bx, 368Ch

loc_3C22:				; CODE XREF: sub_3B7C+66j sub_3B7C+92j
		call	sub_3B14
		nop

loc_3C26:				; CODE XREF: sub_3B7C+35j sub_3B7C+7Bj ...
		imul	bx, word_21BB0,	16h
		dec	word ptr [bx+3670h]
		jnz	short loc_3C4A
		add	bx, 3660h
		push	bx
		nop
		push	cs
		call	near ptr sub_374E
		or	ax, ax
		jnz	short loc_3C4A
		mov	cl, byte ptr word_21BB0
		inc	ax
		shl	ax, cl
		or	word_21BB2, ax

loc_3C4A:				; CODE XREF: sub_3B7C+B3j sub_3B7C+C1j
		mov	ax, [bp+arg_2]
		inc	word_21BB0
		cmp	word_21BB0, ax
		jnz	short loc_3CA2
		mov	ax, [bp+arg_0]
		mov	word_21BB0, ax
		cmp	word_21BB2, 7
		jnz	short loc_3CA2
		xor	di, di
		mov	word_21BB2, di
		mov	si, 3660h
		nop

loc_3C6E:				; CODE XREF: sub_3B7C+11Aj
		push	si
		nop
		push	cs
		call	near ptr sub_3A26
		mov	cx, di
		mov	ax, 1
		shl	ax, cl
		and	ax, word_21BE0
		cmp	ax, 1
		sbb	ax, ax
		inc	ax
		mov	[si+12h], ax
		push	si
		nop
		push	cs
		call	near ptr sub_374E
		inc	di
		add	si, 16h
		cmp	si, 36A2h
		jb	short loc_3C6E
		mov	ax, 1
		pop	si
		pop	di
		leave
		retf	6
; ---------------------------------------------------------------------------
		nop

loc_3CA2:				; CODE XREF: sub_3B7C+D9j sub_3B7C+E6j
		xor	ax, ax
		pop	si
		pop	di
		leave
		retf	6
sub_3B7C	endp


; =============== S U B	R O U T	I N E =======================================


sub_3CAA	proc far		; CODE XREF: sub_138EC+28P
		mov	bx, sp
		push	si
		mov	si, ss:[bx+4]
		cmp	si, 1
		jl	short loc_3CBC
		cmp	si, word_21C04
		jle	short loc_3CC3

loc_3CBC:				; CODE XREF: sub_3CAA+Aj
		mov	ax, 0FFF3h
		pop	si
		retf	2
; ---------------------------------------------------------------------------

loc_3CC3:				; CODE XREF: sub_3CAA+10j
		cmp	word_21C0A, 1
		jnz	short loc_3CED
		nop
		push	cs
		call	near ptr sub_36F6
		mov	word_21C06, si
		mov	bx, si
		shl	bx, 3
		mov	ax, 369Ah
		add	bx, ax
		mov	ax, [bx+6]
		mov	[bx+2],	ax
		mov	word ptr [bx], 0
		mov	word_21C02, 1

loc_3CED:				; CODE XREF: sub_3CAA+1Ej
		xor	ax, ax
		pop	si
		retf	2
sub_3CAA	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_3CF4	proc far		; CODE XREF: seg000:3AE7p
		mov	ax, word_21C06
		dec	ax
		shl	ax, 3
		mov	bx, ax
		les	bx, [bx+36A2h]
		assume es:nothing
		mov	cx, es:[bx]
		mov	bx, ax
		jcxz	short loc_3D5A
		add	word ptr [bx+36A2h], 2
		test	word_216E2, 10h
		jz	short loc_3D26
		in	al, 61h		; PC/XT	PPI port B bits:
					; 0: Tmr 2 gate	ÍËÍ OR	03H=spkr ON
					; 1: Tmr 2 data	Í¼  AND	0fcH=spkr OFF
					; 3: 1=read high switches
					; 4: 0=enable RAM parity checking
					; 5: 0=enable I/O channel check
					; 6: 0=hold keyboard clock low
					; 7: 0=enable kbrd
		or	al, 3
		out	61h, al		; PC/XT	PPI port B bits:
					; 0: Tmr 2 gate	ÍËÍ OR	03H=spkr ON
					; 1: Tmr 2 data	Í¼  AND	0fcH=spkr OFF
					; 3: 1=read high switches
					; 4: 0=enable RAM parity checking
					; 5: 0=enable I/O channel check
					; 6: 0=hold keyboard clock low
					; 7: 0=enable kbrd
		mov	dx, 12h
		mov	ax, 34DCh
		mov	bx, 42h	; 'B'
		jmp	short loc_3D45
; ---------------------------------------------------------------------------

loc_3D26:				; CODE XREF: sub_3CF4+1Fj
		mov	al, 6
		out	37h, al
		mov	bx, 3FDBh
		xor	dx, dx
		mov	es, dx
		assume es:seg000
		test	es:byte_501, 80h
		mov	dx, 1Eh
		mov	ax, 7800h
		jnz	short loc_3D45
		mov	dx, 25h	; '%'
		mov	ax, 8000h

loc_3D45:				; CODE XREF: sub_3CF4+30j sub_3CF4+49j
		cmp	cx, dx
		ja	short loc_3D4E
		mov	ax, 0FFFFh
		jmp	short loc_3D50
; ---------------------------------------------------------------------------

loc_3D4E:				; CODE XREF: sub_3CF4+53j
		div	cx

loc_3D50:				; CODE XREF: sub_3CF4+58j
		mov	dx, bx
		out	dx, al
		mov	al, ah
		out	dx, al
		xor	ax, ax
		retf
; ---------------------------------------------------------------------------
		nop

loc_3D5A:				; CODE XREF: sub_3CF4+12j
		mov	ax, [bx+36A8h]
		mov	[bx+36A4h], ax
		mov	word ptr [bx+36A2h], 0
		mov	ax, 1
		retf
sub_3CF4	endp


; =============== S U B	R O U T	I N E =======================================


sub_3D6C	proc far		; CODE XREF: sub_3F58+Ap
		cmp	word_21BAC, 1
		jnz	short loc_3D82
		mov	word_21BAC, 0
		nop
		push	cs
		call	near ptr sub_36F6
		xor	ax, ax
		retf
; ---------------------------------------------------------------------------
		nop

loc_3D82:				; CODE XREF: sub_3D6C+5j
		mov	ax, 0FFE1h
		retf
sub_3D6C	endp


; =============== S U B	R O U T	I N E =======================================


sub_3D86	proc far		; CODE XREF: sub_374E+DEp
					; sub_3DB4+12Dp
		mov	bx, sp
		mov	cx, ss:[bx+4]
		cmp	cx, 1Eh
		jl	short loc_3DAE
		cmp	cx, 0F0h ; 'ð'
		jg	short loc_3DAE
		cli
		mov	word_21BAA, cx
		mov	ax, word_21C0E
		mov	dx, word_21C10
		div	cx
		mov	word_21BA8, ax
		sti
		xor	ax, ax
		retf	2
; ---------------------------------------------------------------------------

loc_3DAE:				; CODE XREF: sub_3D86+9j sub_3D86+Fj
		mov	ax, 0FFF3h
		retf	2
sub_3D86	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_3DB4	proc far		; CODE XREF: sub_13666+42P

var_2		= word ptr -2
arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		sub	sp, 2
		push	si
		push	di
		nop
		push	cs
		call	near ptr sub_1A1A
		cmp	word_21C0C, 0
		jz	short loc_3DD0
		xor	ax, ax
		pop	di
		pop	si
		leave
		retf	2
; ---------------------------------------------------------------------------

loc_3DD0:				; CODE XREF: sub_3DB4+12j
		mov	dx, [bp+arg_0]
		mov	[bp+var_2], dx
		or	dx, dx
		jg	short loc_3DDF
		mov	[bp+var_2], 1000h

loc_3DDF:				; CODE XREF: sub_3DB4+24j
		mov	ax, [bp+var_2]
		mov	word_21BB8, ax
		mov	di, 3660h

loc_3DE8:				; CODE XREF: sub_3DB4+5Dj
		mov	word_21AC2, 8
		push	[bp+var_2]
		nop
		push	cs
		call	near ptr sub_2578
		mov	[di+6],	ax
		mov	word ptr [di+4], 0
		jnb	short loc_3E0A
		mov	ax, 0FFF8h
		pop	di
		pop	si
		leave
		retf	2
; ---------------------------------------------------------------------------
		nop

loc_3E0A:				; CODE XREF: sub_3DB4+4Aj
		add	di, 16h
		cmp	di, 36A2h
		jnz	short loc_3DE8
		mov	di, 36A2h

loc_3E16:				; CODE XREF: sub_3DB4+97j
		mov	word_21AC2, 9
		push	201h
		nop
		push	cs
		call	near ptr sub_2578
		mov	[di+6],	ax
		mov	word ptr [di+4], 0
		jnb	short loc_3E44
		push	word ptr [di+6]
		mov	word ptr [di+6], 0
		nop
		push	cs
		call	near ptr sub_267C
		mov	ax, 0FFF8h
		pop	di
		pop	si
		leave
		retf	2
; ---------------------------------------------------------------------------

loc_3E44:				; CODE XREF: sub_3DB4+78j
		add	di, 8
		cmp	di, 3722h
		jnz	short loc_3E16
		mov	word_21BAC, 0
		mov	word_21BBC, 0
		mov	word_21BBE, 0
		mov	word_21BAE, 3
		mov	word_21BB0, 0
		mov	word_21BB2, 0
		mov	word_21BB4, 1
		mov	word_21BB6, 0
		mov	word_21BBA, 0
		cld
		mov	cx, 10h
		mov	di, 8A2h
		push	ds
		pop	es
		assume es:dseg
		mov	ax, 78h	; 'x'
		rep stosw
		mov	word_21C02, 0
		mov	word_21C04, 0
		mov	word_21C06, 0
		mov	word_21C08, 1
		mov	word_21C0A, 1
		test	word_216E2, 10h
		jz	short loc_3EBC
		mov	ax, 10h
		jmp	short loc_3ECE
; ---------------------------------------------------------------------------

loc_3EBC:				; CODE XREF: sub_3DB4+101j
		xor	ax, ax
		mov	es, ax
		assume es:seg000
		test	es:byte_501, 80h
		mov	ax, 7CDh
		jnz	short loc_3ECE
		mov	ax, 99Ah

loc_3ECE:				; CODE XREF: sub_3DB4+106j
					; sub_3DB4+115j
		and	ax, 0FFFEh
		mov	dx, 78h	; 'x'
		mul	dx
		mov	word_21C10, dx
		mov	word_21C0E, ax
		push	78h ; 'x'
		nop
		push	cs
		call	near ptr sub_3D86
		mov	bx, 3664h
		xor	dx, dx
		xor	ax, ax

loc_3EEB:				; CODE XREF: sub_3DB4+14Cj
		les	di, [bx]
		assume es:nothing
		mov	cx, word_21BB8
		shr	cx, 1
		rep stosw
		adc	cx, cx
		rep stosb
		add	bx, 16h
		inc	dx
		cmp	dx, 3
		jl	short loc_3EEB
		nop
		push	cs
		call	near ptr sub_39B8
		test	word_216E2, 10h
		jz	short loc_3F22
		mov	ax, 254h
		mov	cx, ax
		mov	al, 0B6h ; '¶'
		out	43h, al		; Timer	8253-5 (AT: 8254.2).
		mov	al, cl
		out	42h, al		; Timer	8253-5 (AT: 8254.2).
		mov	al, ch
		out	42h, al		; Timer	8253-5 (AT: 8254.2).
		jmp	short loc_3F49
; ---------------------------------------------------------------------------

loc_3F22:				; CODE XREF: sub_3DB4+159j
		xor	ax, ax
		mov	es, ax
		assume es:seg000
		test	es:byte_501, 80h
		mov	ax, 3E6h
		jnz	short loc_3F34
		mov	ax, 4CDh

loc_3F34:				; CODE XREF: sub_3DB4+17Bj
		mov	cx, ax
		mov	al, 3
		shl	al, 1
		or	al, 70h
		mov	dx, 3FDFh
		out	dx, al
		mov	al, cl
		mov	dx, 3FDBh
		out	dx, al
		mov	al, ch
		out	dx, al

loc_3F49:				; CODE XREF: sub_3DB4+16Cj
		mov	word_21C0C, 1
		xor	ax, ax
		pop	di
		pop	si
		leave
		retf	2
sub_3DB4	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_3F58	proc far		; CODE XREF: sub_1361E+41P
		push	si
		cmp	word_21C0C, 0
		jz	short loc_3F75
		nop
		push	cs
		call	near ptr sub_3D6C
		nop
		push	cs
		call	near ptr sub_3FB6
		nop
		push	cs
		call	near ptr sub_39FC
		mov	word_21C0C, 0

loc_3F75:				; CODE XREF: sub_3F58+6j
		mov	si, 3660h

loc_3F78:				; CODE XREF: sub_3F58+3Aj
		mov	ax, [si+6]
		cmp	ax, 0
		jz	short loc_3F8B
		push	ax
		nop
		push	cs
		call	near ptr sub_267C
		mov	word ptr [si+6], 0

loc_3F8B:				; CODE XREF: sub_3F58+26j
		add	si, 16h
		cmp	si, 36A2h
		jnz	short loc_3F78
		mov	si, 36A2h

loc_3F97:				; CODE XREF: sub_3F58+59j
		mov	ax, [si+6]
		cmp	ax, 0
		jz	short loc_3FAA
		push	ax
		nop
		push	cs
		call	near ptr sub_267C
		mov	word ptr [si+6], 0

loc_3FAA:				; CODE XREF: sub_3F58+45j
		add	si, 8
		cmp	si, 3722h
		jnz	short loc_3F97
		pop	si
		retf
sub_3F58	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_3FB6	proc far		; CODE XREF: sub_3F58+Fp
		cmp	word_21C02, 1
		jnz	short loc_3FCC
		mov	word_21C02, 0
		nop
		push	cs
		call	near ptr sub_36F6
		xor	ax, ax
		retf
; ---------------------------------------------------------------------------
		nop

loc_3FCC:				; CODE XREF: sub_3FB6+5j
		mov	ax, 0FFE1h
		retf
sub_3FB6	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_3FD0	proc far		; CODE XREF: seg001:84C1P seg001:84E7P

var_2		= byte ptr -2
arg_0		= word ptr  6
arg_2		= byte ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch
arg_8		= word ptr  0Eh
arg_A		= word ptr  10h

		enter	2, 0
		push	ds
		push	si
		push	di
		push	bp
		mov	bx, [bp+arg_6]
		add	bx, bx
		mov	cx, [bx+2EC4h]
		inc	ch
		mov	byte_24CA2, ch
		mov	cs:byte_40AE, cl
		push	word ptr [bx+2AC4h]
		imul	di, [bp+arg_8],	50h
		mov	ax, 0FFFFh
		and	ax, [bp+arg_4]
		mov	[bp+var_2], ah
		jns	short loc_4002
		neg	[bp+arg_4]

loc_4002:				; CODE XREF: sub_3FD0+2Dj
		xor	ch, ch
		xor	si, si

loc_4006:				; CODE XREF: sub_3FD0+8Aj
		mov	ax, si
		cwd
		shl	ax, 7
		div	[bp+arg_4]
		add	ax, [bp+arg_0]
		mov	bx, 3E6h
		xlat
		imul	[bp+arg_2]
		sar	ax, 7
		add	ax, [bp+arg_A]
		mov	dx, ax
		and	al, 0Fh
		xor	dl, al
		sar	dx, 3
		add	dx, di
		mov	ah, byte_24CA2
		test	ah, 1
		jnz	short loc_4035
		xor	al, 8

loc_4035:				; CODE XREF: sub_3FD0+61j
		mov	[si+3722h], dx
		mov	[si+37E2h], ax
		xor	bh, bh
		mov	bl, al
		add	bx, bx
		mov	dx, [bx+33Ch]
		mov	[si+38A2h], dx
		test	[bp+var_2], 0FFh
		jz	short loc_4054
		neg	[bp+arg_2]

loc_4054:				; CODE XREF: sub_3FD0+7Fj
		add	di, 50h	; 'P'
		add	si, 2
		loop	loc_4006
		pop	fs
		assume fs:nothing
		xor	si, si
		mov	ax, 0A800h
		mov	es, ax
		assume es:nothing
		cld
		mov	al, 0C0h ; 'À'
		out	7Ch, al
		xor	al, al
		out	7Eh, al
		out	7Eh, al
		out	7Eh, al
		out	7Eh, al
		call	near ptr byte_40AA
		mov	al, 0CEh ; 'Î'
		out	7Ch, al
		mov	al, 0FFh
		out	7Eh, al
		out	7Eh, al
		out	7Eh, al
		out	7Eh, al
		call	near ptr byte_40AA
		mov	al, 0CDh ; 'Í'
		out	7Ch, al
		call	near ptr byte_40AA
		mov	al, 0CBh ; 'Ë'
		out	7Ch, al
		call	near ptr byte_40AA
		mov	al, 0C7h ; 'Ç'
		out	7Ch, al
		call	near ptr byte_40AA
		xor	al, al
		out	7Ch, al
		pop	bp
		pop	di
		pop	si
		pop	ds
		leave
		retf	0Ch
sub_3FD0	endp

; ---------------------------------------------------------------------------
		nop
; ---------------------------------------------------------------------------
byte_40AA	db 0C6h, 6, 62h, 39h	; CODE XREF: sub_3FD0+A4p sub_3FD0+B5p ...
byte_40AE	db 12h			; DATA XREF: sub_3FD0+17w
; ---------------------------------------------------------------------------
		xor	bx, bx
		nop

loc_40B2:				; CODE XREF: seg000:40F1j
		xor	dx, dx
		mov	di, [bx+3722h]
		mov	cx, [bx+37E2h]
		mov	bp, [bx+38A2h]
		shr	ch, 1
		jb	short loc_40D2
		lodsb
		shl	ax, 8
		test	cl, 8
		jz	short loc_40D8
		ror	ax, cl
		jmp	short loc_40E1
; ---------------------------------------------------------------------------
		nop

loc_40D2:				; CODE XREF: seg000:40C2j seg000:40E5j
		mov	ax, fs:[si]
		add	si, 2

loc_40D8:				; CODE XREF: seg000:40CBj
		ror	ax, cl
		xor	dx, ax
		and	ax, bp
		xor	ax, dx
		stosw

loc_40E1:				; CODE XREF: seg000:40CFj
		xor	dx, ax
		dec	ch
		jnz	short loc_40D2
		mov	es:[di], dx
		add	bx, 2
		dec	byte_24CA2
		jnz	short loc_40B2
		retn

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40F4	proc far		; CODE XREF: sub_B616+2FP sub_D729+4FP ...

var_12		= word ptr -12h
var_10		= word ptr -10h
var_E		= byte ptr -0Eh
var_D		= word ptr -0Dh
var_B		= word ptr -0Bh
var_9		= word ptr -9
var_7		= byte ptr -7
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch
arg_8		= word ptr  0Eh
arg_A		= word ptr  10h
arg_C		= word ptr  12h

		push	bp
		mov	bp, sp
		sub	sp, 12h
		mov	ax, [bp+arg_0]
		mov	dx, [bp+arg_2]
		mov	[bp+var_12], ax
		mov	[bp+var_10], dx
		mov	[bp+var_E], 1
		mov	ax, [bp+arg_C]
		mov	[bp+var_D], ax
		mov	ax, [bp+arg_8]
		mov	dx, ax
		and	dh, 3Fh
		mov	[bp+var_B], dx
		mov	dx, [bp+arg_A]
		shl	ax, 1
		rcl	dx, 1
		shl	ax, 1
		rcl	dx, 1
		mov	[bp+var_9], dx
		mov	[bp+var_7], 0
		mov	[bp+var_6], 0
		mov	ax, [bp+arg_4]
		mov	[bp+var_4], ax
		mov	ax, [bp+arg_6]
		mov	[bp+var_2], ax
		push	ss
		lea	ax, [bp+var_12]
		push	ax
		push	cs
		call	near ptr sub_41C6
		push	ax
		sub	ax, ax
		push	ax
		push	cs
		call	near ptr sub_417C
		pop	ax
		mov	sp, bp
		pop	bp
		retf	0Eh
sub_40F4	endp


; =============== S U B	R O U T	I N E =======================================


sub_4156	proc far		; CODE XREF: sub_B488+5AP
		mov	bx, sp
		mov	cx, ss:[bx+4]
		mov	bx, ss:[bx+6]
		shl	cx, 1
		rcl	bx, 1
		shl	cx, 1
		rcl	bx, 1
		cmp	cx, 1
		sbb	bx, 0FFFFh
		mov	ah, 43h	; 'C'
		int	67h		;  - LIM EMS - GET HANDLE AND ALLOCATE MEMORY
					; BX = number of logical pages to allocate
					; Return: AH = status
		sub	ah, 1
		sbb	ax, ax
		and	ax, dx
		retf	4
sub_4156	endp


; =============== S U B	R O U T	I N E =======================================


sub_417C	proc far		; CODE XREF: sub_40F4+58p sub_41F6+58p
		mov	bx, bp
		mov	bx, ss:[bx+4]
		mov	ax, 7001h
		int	67h		;  - LIM EMS
		retf	2
sub_417C	endp


; =============== S U B	R O U T	I N E =======================================


sub_418A	proc far		; CODE XREF: sub_B488+3AP
		push	si
		push	di
		push	ds
		xor	ax, ax
		mov	es, ax
		assume es:seg000
		mov	es, word ptr es:loc_19C+2
		assume es:nothing
		mov	di, 0Ah
		mov	bx, cs
		mov	ds, bx
		assume ds:seg000
		mov	si, 41ACh
		mov	cx, 4
		repe cmpsw
		jnz	short loc_41A8
		inc	ax

loc_41A8:				; CODE XREF: sub_418A+1Bj
		pop	ds
		assume ds:dseg
		pop	di
		pop	si
		retf
sub_418A	endp

; ---------------------------------------------------------------------------
		db 45h,	2 dup(4Dh), 4 dup(58h),	30h

; =============== S U B	R O U T	I N E =======================================


sub_41B4	proc far		; CODE XREF: sub_E7FD+11P
		mov	bx, sp
		mov	dx, ss:[bx+4]
		mov	ah, 45h	; 'E'
		int	67h		;  - LIM EMS - RELEASE HANDLE AND MEMORY
					; DX = EMM handle
					; Return: AH = status
		mov	al, ah
		xor	ah, ah
		retf	2
sub_41B4	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_41C6	proc far		; CODE XREF: sub_40F4+50p sub_41F6+50p
		push	si
		mov	si, sp
		push	ds
		lds	si, ss:[si+6]
		mov	ax, 5700h
		int	67h		;  - LIM EMS 4.0 - MOVE/EXCHANGE MEMORY	REGION
					; AL = 00h move	memory region /	01h exchange memory region
					; DS:SI	-> structure describing	source and destination
					; Return: AH = status
		mov	al, ah
		xor	ah, ah
		pop	ds
		pop	si
		retf	4
sub_41C6	endp


; =============== S U B	R O U T	I N E =======================================


sub_41DC	proc far		; CODE XREF: sub_B488+6EP
		push	si
		mov	si, sp
		push	ds
		mov	dx, ss:[si+0Ah]
		lds	si, ss:[si+6]
		mov	ax, 5301h
		int	67h		;  - LIM EMS 4.0 - GET/SET HANDLE NAME
					; AL = 00h get handle name / 01h set handle name,
					; DS:SI	-> 8-byte handle name, DX = handle
					; Return: AH = status
		mov	al, ah
		xor	ah, ah
		pop	ds
		pop	si
		retf	6
sub_41DC	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_41F6	proc far		; CODE XREF: sub_B488+9AP sub_B530+49P ...

var_12		= word ptr -12h
var_10		= word ptr -10h
var_E		= byte ptr -0Eh
var_D		= word ptr -0Dh
var_B		= word ptr -0Bh
var_9		= word ptr -9
var_7		= byte ptr -7
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch
arg_8		= word ptr  0Eh
arg_A		= word ptr  10h
arg_C		= word ptr  12h

		push	bp
		mov	bp, sp
		sub	sp, 12h
		mov	ax, [bp+arg_0]
		mov	dx, [bp+arg_2]
		mov	[bp+var_12], ax
		mov	[bp+var_10], dx
		mov	[bp+var_E], 0
		mov	[bp+var_D], 0
		mov	ax, [bp+arg_4]
		mov	[bp+var_B], ax
		mov	ax, [bp+arg_6]
		mov	[bp+var_9], ax
		mov	[bp+var_7], 1
		mov	ax, [bp+arg_C]
		mov	[bp+var_6], ax
		mov	ax, [bp+arg_8]
		mov	dx, ax
		and	dh, 3Fh
		mov	[bp+var_4], dx
		mov	dx, [bp+arg_A]
		shl	ax, 1
		rcl	dx, 1
		shl	ax, 1
		rcl	dx, 1
		mov	[bp+var_2], dx
		push	ss
		lea	ax, [bp+var_12]
		push	ax
		push	cs
		call	near ptr sub_41C6
		push	ax
		sub	ax, ax
		push	ax
		push	cs
		call	near ptr sub_417C
		pop	ax
		mov	sp, bp
		pop	bp
		retf	0Eh
sub_41F6	endp


; =============== S U B	R O U T	I N E =======================================


sub_4258	proc far		; CODE XREF: sub_B488+43P
		mov	ah, 42h	; 'B'
		int	67h		;  - LIM EMS - GET NUMBER OF PAGES
					; Return: AH = 00h function successful,	BX = number of unallocated pages
					; DX = total number of pages
					; AH = error code
		xor	dx, dx
		cmp	ah, 0
		mov	ax, dx
		jnz	short locret_426F
		mov	dx, bx
		shr	dx, 1
		rcr	ax, 1
		shr	dx, 1
		rcr	ax, 1

locret_426F:				; CODE XREF: sub_4258+Bj
		retf
sub_4258	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_4270	proc far		; CODE XREF: start+80p	start+10Dp ...
		push	si
		push	di
		push	ds
		mov	ax, 24BAh
		push	ax		; buf
		nop
		push	cs
		call	near ptr ___ErrorMessage
		mov	ax, 3
		push	ax		; status
		nop
		push	cs
		call	near ptr __exit
sub_4270	endp

; ---------------------------------------------------------------------------
		add	sp, 6
		pop	di
		pop	si
		retf

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; char *__cdecl	stpcpy(char *dest, const char *src)
_stpcpy		proc far		; CODE XREF: __DOSENV+DDp
					; __DOSENV+140p ...

var_2		= word ptr -2
dest		= dword	ptr  6
s		= dword	ptr  0Ah

		push	bp
		mov	bp, sp
		sub	sp, 2
		push	si
		push	di
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]	; s
		nop
		push	cs
		call	near ptr _strlen
		pop	cx
		pop	cx
		mov	[bp+var_2], ax
		inc	ax
		push	ax		; n
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]	; src
		push	word ptr [bp+dest+2]
		push	word ptr [bp+dest] ; dest
		nop
		push	cs
		call	near ptr _memcpy
		add	sp, 0Ah
		mov	dx, word ptr [bp+dest+2]
		mov	ax, word ptr [bp+dest]
		add	ax, [bp+var_2]
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
_stpcpy		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function noreturn

; void abort(void)
_abort		proc far		; CODE XREF: terminate(void)+4p
					; ___call_terminate+6Ep ...
		push	si
		push	di
		mov	ax, 16h
		push	ax
		nop
		push	cs
		call	near ptr sub_5778
		pop	cx
		nop
		push	cs
		call	near ptr sub_4270
_abort		endp

; ---------------------------------------------------------------------------
		pop	di
		pop	si
		retf

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl atexit(void (*func)(void))
_atexit		proc far

func		= dword	ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		cmp	word_2381A, 20h	; ' '
		jnz	short loc_42ED
		mov	ax, 1
		jmp	short loc_4309
; ---------------------------------------------------------------------------

loc_42ED:				; CODE XREF: _atexit+Aj
		mov	bx, word_2381A
		mov	cl, 2
		shl	bx, cl
		mov	dx, word ptr [bp+func+2]
		mov	ax, word ptr [bp+func]
		mov	[bx-42E2h], dx
		mov	[bx-42E4h], ax
		inc	word_2381A
		xor	ax, ax

loc_4309:				; CODE XREF: _atexit+Fj
		pop	di
		pop	si
		pop	bp
		retf
_atexit		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl registerbgidriver(void (*driver)(void))
_registerbgidriver proc	near		; CODE XREF: _registerbgifont+Dp
					; seg000:4A5Cp	...

arg_2		= word ptr  6
arg_4		= word ptr  8

		push	bp
		mov	bp, sp
		push	si
		push	di
		push	[bp+arg_4]
		push	[bp+arg_2]
		nop
		push	cs
		call	near ptr sub_5093
		pop	cx
		pop	cx
		pop	di
_registerbgidriver endp	; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

sub_4320	proc far		; CODE XREF: sub_75C8+7Bp sub_75C8+9Ap ...
		pop	si
		pop	bp
		retf
sub_4320	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl registerbgifont(void (*font)(void))
_registerbgifont proc far		; CODE XREF: sub_93C7+3A5p

font		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		push	si
		push	di
		push	[bp+arg_2]
		push	[bp+font]
		nop
		push	cs		; driver
		call	_registerbgidriver
		pop	cx
		pop	cx
		pop	di
		pop	si
		pop	bp
		retf
_registerbgifont endp ;	sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __stdcall	_DOSENV(__int32, char *src, int, int)
__DOSENV	proc near		; CODE XREF: sub_A897+1E4p

dest		= dword	ptr -0Ah
var_6		= word ptr -6
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
src		= dword	ptr  8
arg_8		= word ptr  0Ch
arg_A		= word ptr  0Eh

		push	bp
		mov	bp, sp
		sub	sp, 0Ah
		push	si
		push	di
		mov	[bp+var_6], 1
		mov	dx, [bp+arg_A]
		mov	ax, [bp+arg_8]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		or	ax, dx
		jz	short loc_438B
		mov	[bp+var_6], 0
		jmp	short loc_4376
; ---------------------------------------------------------------------------

loc_435D:				; CODE XREF: __DOSENV+50j
		les	bx, [bp+var_4]
		assume es:nothing
		add	word ptr [bp+var_4], 4
		push	word ptr es:[bx+2]
		push	word ptr es:[bx] ; s
		nop
		push	cs
		call	near ptr _strlen
		pop	cx
		pop	cx
		inc	ax
		add	[bp+var_6], ax

loc_4376:				; CODE XREF: __DOSENV+22j
		les	bx, [bp+var_4]
		mov	ax, es:[bx]
		or	ax, es:[bx+2]
		jz	short loc_438B
		les	bx, es:[bx]
		cmp	byte ptr es:[bx], 0
		jnz	short loc_435D

loc_438B:				; CODE XREF: __DOSENV+1Bj __DOSENV+47j
		inc	[bp+var_6]
		mov	ax, word ptr [bp+src]
		or	ax, word ptr [bp+src+2]
		jz	short loc_43A9
		push	word ptr [bp+src+2]
		push	word ptr [bp+src] ; s
		nop
		push	cs
		call	near ptr _strlen
		pop	cx
		pop	cx
		add	ax, 3
		add	[bp+var_6], ax

loc_43A9:				; CODE XREF: __DOSENV+5Bj
		cmp	[bp+var_6], 8000h
		jb	short loc_43B3
		jmp	loc_449A
; ---------------------------------------------------------------------------

loc_43B3:				; CODE XREF: __DOSENV+75j
		mov	ax, [bp+var_6]
		add	ax, 0Fh
		push	ax
		nop
		push	cs
		call	near ptr sub_51C6
		pop	cx
		mov	word ptr [bp+dest+2], dx
		mov	word ptr [bp+dest], ax
		or	ax, dx
		jnz	short loc_43CD
		jmp	loc_449A
; ---------------------------------------------------------------------------

loc_43CD:				; CODE XREF: __DOSENV+8Fj
		les	bx, [bp+arg_0]
		mov	ax, word ptr [bp+dest]
		mov	es:[bx+2], dx
		mov	es:[bx], ax
		add	word ptr [bp+dest], 0Fh
		and	word ptr [bp+dest], 0FFF0h
		mov	dx, [bp+arg_A]
		mov	ax, [bp+arg_8]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		or	ax, dx
		jz	short loc_4443
		les	bx, [bp+var_4]
		mov	ax, es:[bx]
		or	ax, es:[bx+2]
		jz	short loc_4443
		jmp	short loc_442C
; ---------------------------------------------------------------------------

loc_4400:				; CODE XREF: __DOSENV+106j
		les	bx, [bp+var_4]
		add	word ptr [bp+var_4], 4
		push	word ptr es:[bx+2]
		push	word ptr es:[bx] ; src
		push	word ptr [bp+dest+2]
		push	word ptr [bp+dest] ; dest
		nop
		push	cs
		call	near ptr _stpcpy
		add	sp, 8
		mov	word ptr [bp+dest+2], dx
		mov	word ptr [bp+dest], ax
		les	bx, [bp+dest]
		mov	byte ptr es:[bx], 0
		inc	word ptr [bp+dest]

loc_442C:				; CODE XREF: __DOSENV+C5j
		les	bx, [bp+var_4]
		mov	ax, es:[bx]
		or	ax, es:[bx+2]
		jz	short loc_444D
		les	bx, es:[bx]
		cmp	byte ptr es:[bx], 0
		jnz	short loc_4400
		jmp	short loc_444D
; ---------------------------------------------------------------------------

loc_4443:				; CODE XREF: __DOSENV+B7j __DOSENV+C3j
		les	bx, [bp+dest]
		mov	byte ptr es:[bx], 0
		inc	word ptr [bp+dest]

loc_444D:				; CODE XREF: __DOSENV+FDj
					; __DOSENV+108j
		les	bx, [bp+dest]
		mov	byte ptr es:[bx], 0
		inc	word ptr [bp+dest]
		mov	ax, word ptr [bp+src]
		or	ax, word ptr [bp+src+2]
		jz	short loc_448F
		les	bx, [bp+dest]
		mov	word ptr es:[bx], 1
		add	word ptr [bp+dest], 2
		push	word ptr [bp+src+2]
		push	word ptr [bp+src] ; src
		push	word ptr [bp+dest+2]
		push	word ptr [bp+dest] ; dest
		nop
		push	cs
		call	near ptr _stpcpy
		add	sp, 8
		mov	word ptr [bp+dest+2], dx
		mov	word ptr [bp+dest], ax
		les	bx, [bp+dest]
		mov	byte ptr es:[bx], 0
		inc	word ptr [bp+dest]

loc_448F:				; CODE XREF: __DOSENV+124j
		mov	dx, word ptr [bp+dest+2]
		mov	ax, word ptr [bp+dest]
		sub	ax, [bp+var_6]
		jmp	short loc_449E
; ---------------------------------------------------------------------------

loc_449A:				; CODE XREF: __DOSENV+77j __DOSENV+91j
		xor	dx, dx
		xor	ax, ax

loc_449E:				; CODE XREF: __DOSENV+15Fj
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn	0Ch
__DOSENV	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; void __cdecl _dos_getdrive(unsigned int *drive)
__dos_getdrive	proc far		; CODE XREF: sub_5C9D+66p

drive		= dword	ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ah, 19h
		int	21h		; DOS -	GET DEFAULT DISK NUMBER
		mov	ah, 0
		inc	ax
		les	bx, [bp+drive]
		mov	es:[bx], ax
		pop	di
		pop	si
		pop	bp
		retf
__dos_getdrive	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; void __cdecl _dos_setdrive(unsigned int drive, unsigned int *ndrives)
__dos_setdrive	proc far

drive		= word ptr  6
ndrives		= dword	ptr  8

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	dl, byte ptr [bp+drive]
		dec	dl
		mov	ah, 0Eh
		int	21h		; DOS -	SELECT DISK
					; DL = new default drive number	(0 = A,	1 = B, etc.)
					; Return: AL = number of logical drives
		mov	ah, 0
		les	bx, [bp+ndrives]
		mov	es:[bx], ax
		pop	di
		pop	si
		pop	bp
		retf
__dos_setdrive	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl __far __ErrorMessage(char	*buf)
___ErrorMessage	proc far		; CODE XREF: seg000:016Ap sub_4270+9p

buf		= dword	ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		push	word ptr [bp+buf+2]
		push	word ptr [bp+buf] ; s
		nop
		push	cs
		call	near ptr _strlen
		pop	cx
		pop	cx
		push	ax		; len
		push	word ptr [bp+buf+2]
		push	word ptr [bp+buf] ; buf
		mov	al, byte_23854
		cbw
		push	ax		; handle
		nop
		push	cs
		call	near ptr __rtl_write
		add	sp, 8
		pop	di
		pop	si
		pop	bp
		retf
___ErrorMessage	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

sub_4500	proc far		; CODE XREF: sub_4505+29P sub_4548P ...
		push	si
		push	di
		pop	di
		pop	si
		retf
sub_4500	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function noreturn	bp-based frame

sub_4505	proc near		; CODE XREF: _exit+Cp __exit+Fp ...

arg_2		= word ptr  6
arg_4		= word ptr  8

		push	bp
		mov	bp, sp
		push	si
		push	di
		cmp	[bp+arg_4], 0
		jnz	short loc_4532
		jmp	short loc_4522
; ---------------------------------------------------------------------------

loc_4512:				; CODE XREF: sub_4505+22j
		dec	word_2381A
		mov	bx, word_2381A
		mov	cl, 2
		shl	bx, cl
		call	dword ptr [bx-42E4h]

loc_4522:				; CODE XREF: sub_4505+Bj
		cmp	word_2381A, 0
		jnz	short loc_4512
		nop
		push	cs
		call	__cleanup
; ---------------------------------------------------------------------------
		call	off_2381C

loc_4532:				; CODE XREF: sub_4505+9j
		nop
		push	cs
		call	near ptr __restorezero
		nop
		push	cs
		call	near ptr __checknull
		cmp	[bp+arg_2], 0
		jnz	short loc_4559
		cmp	[bp+arg_4], 0
		jnz	short loc_4550
sub_4505	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function noreturn

sub_4548	proc near		; CODE XREF: sub_75C8+7Bp sub_75C8+9Ap ...
		call	off_23820
		call	off_23824

loc_4550:				; CODE XREF: sub_4505+41j
		push	word ptr [bp+4]
		nop
		push	cs
		call	__terminate
; ---------------------------------------------------------------------------
		pop	cx

loc_4559:				; CODE XREF: sub_4505+3Bj
		pop	di
		pop	si
		pop	bp
		retn	6
sub_4548	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function noreturn	bp-based frame

; void __cdecl exit(int	status)
_exit		proc far		; CODE XREF: start+143p

status		= word ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		xor	ax, ax
		push	ax
		push	ax
		push	[bp+status]
		call	sub_4505
_exit		endp

; ---------------------------------------------------------------------------
		pop	di
		pop	si
		pop	bp
		retf

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function noreturn	bp-based frame

; void __cdecl _exit(int status)
__exit		proc far		; CODE XREF: seg000:0175p sub_4270+12p ...

status		= word ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, 1
		push	ax
		xor	ax, ax
		push	ax
		push	[bp+status]
		call	sub_4505
__exit		endp

; ---------------------------------------------------------------------------
		pop	di
		pop	si
		pop	bp
		retf

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function noreturn

; void _cexit(void)
__cexit		proc far		; CODE XREF: __exec+216p
		push	si
		push	di
		xor	ax, ax
		push	ax
		mov	ax, 1
		push	ax
		xor	ax, ax
		push	ax
		call	sub_4505
__cexit		endp

; ---------------------------------------------------------------------------
		pop	di
		pop	si
		retf

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function noreturn

; void _c_exit(void)
__c_exit	proc near
		push	si
		push	di
		mov	ax, 1
		push	ax
		push	ax
		xor	ax, ax
		push	ax
		call	sub_4505
__c_exit	endp

; ---------------------------------------------------------------------------
		pop	di
		pop	si
		retf

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

SCOPY@		proc far		; CODE XREF: sub_12B71+11P
					; sub_16C05+12P

arg_0		= dword	ptr  6
arg_4		= dword	ptr  0Ah

		push	bp
		mov	bp, sp
		push	si
		push	di
		push	ds
		lds	si, [bp+arg_0]
		les	di, [bp+arg_4]
		cld
		shr	cx, 1
		rep movsw
		adc	cx, cx
		rep movsb
		pop	ds
		pop	di
		pop	si
		pop	bp
		retf	8
SCOPY@		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; void (__cdecl	__interrupt far	*__cdecl getvect(int interruptno))()
_getvect	proc far		; CODE XREF: seg000:5710p

interruptno	= byte ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ah, 35h	; '5'
		mov	al, [bp+interruptno]
		int	21h		; DOS -	2+ - GET INTERRUPT VECTOR
					; AL = interrupt number
					; Return: ES:BX	= value	of interrupt vector
		xchg	ax, bx
		mov	dx, es
		pop	di
		pop	si
		pop	bp
		retf
_getvect	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; void __cdecl setvect(int interruptno,	void (__interrupt far *isr)())
_setvect	proc far		; CODE XREF: seg000:5655p seg000:5752p ...

interruptno	= byte ptr  6
isr		= dword	ptr  8

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ah, 25h	; '%'
		mov	al, [bp+interruptno]
		push	ds
		lds	dx, [bp+isr]
		int	21h		; DOS -	SET INTERRUPT VECTOR
					; AL = interrupt number
					; DS:DX	= new vector to	be used	for specified interrupt
		pop	ds
		pop	di
		pop	si
		pop	bp
		retf
_setvect	endp

; ---------------------------------------------------------------------------

N_LDIV@:
		pop	cx
		push	cs
		push	cx

LDIV@:
		xor	cx, cx
		jmp	short loc_460B

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

N_LUDIV@	proc far		; CODE XREF: sub_9214+66p
		pop	cx
		push	cs
		push	cx

F_LUDIV@:
		mov	cx, 1
		jmp	short loc_460B
; ---------------------------------------------------------------------------

N_LMOD@:
		pop	cx
		push	cs
		push	cx

F_LMOD@:
		mov	cx, 2
		jmp	short loc_460B
; ---------------------------------------------------------------------------

N_LUMOD@:
		pop	cx
		push	cs
		push	cx

LUMOD@:
		mov	cx, 3

loc_460B:				; CODE XREF: seg000:45F3j N_LUDIV@+6j	...
		push	bp
		push	si
		push	di
		mov	bp, sp
		mov	di, cx
		mov	ax, [bp+0Ah]
		mov	dx, [bp+0Ch]
		mov	bx, [bp+0Eh]
		mov	cx, [bp+10h]
		or	cx, cx
		jnz	short loc_462A
		or	dx, dx
		jz	short loc_468F
		or	bx, bx
		jz	short loc_468F

loc_462A:				; CODE XREF: N_LUDIV@+2Bj
		test	di, 1
		jnz	short loc_464C
		or	dx, dx
		jns	short loc_463E
		neg	dx
		neg	ax
		sbb	dx, 0
		or	di, 0Ch

loc_463E:				; CODE XREF: N_LUDIV@+3Dj
		or	cx, cx
		jns	short loc_464C
		neg	cx
		neg	bx
		sbb	cx, 0
		xor	di, 4

loc_464C:				; CODE XREF: N_LUDIV@+39j N_LUDIV@+4Bj
		mov	bp, cx
		mov	cx, 20h	; ' '
		push	di
		xor	di, di
		xor	si, si

loc_4656:				; CODE XREF: N_LUDIV@:loc_466Dj
		shl	ax, 1
		rcl	dx, 1
		rcl	si, 1
		rcl	di, 1
		cmp	di, bp
		jb	short loc_466D
		ja	short loc_4668
		cmp	si, bx
		jb	short loc_466D

loc_4668:				; CODE XREF: N_LUDIV@+6Dj
		sub	si, bx
		sbb	di, bp
		inc	ax

loc_466D:				; CODE XREF: N_LUDIV@+6Bj N_LUDIV@+71j
		loop	loc_4656
		pop	bx
		test	bx, 2
		jz	short loc_467C
		mov	ax, si
		mov	dx, di
		shr	bx, 1

loc_467C:				; CODE XREF: N_LUDIV@+7Fj
		test	bx, 4
		jz	short loc_4689
		neg	dx
		neg	ax
		sbb	dx, 0

loc_4689:				; CODE XREF: N_LUDIV@+8Bj N_LUDIV@+A5j
		pop	di
		pop	si
		pop	bp
		retf	8
; ---------------------------------------------------------------------------

loc_468F:				; CODE XREF: N_LUDIV@+2Fj N_LUDIV@+33j
		div	bx
		test	di, 2
		jz	short loc_4698
		xchg	ax, dx

loc_4698:				; CODE XREF: N_LUDIV@+A0j
		xor	dx, dx
		jmp	short loc_4689
N_LUDIV@	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

N_LXLSH@	proc far		; CODE XREF: __sbrk+Fp
		pop	bx
		push	cs
		push	bx

LXLSH@:
		cmp	cl, 10h
		jnb	short loc_46B4
		mov	bx, ax
		shl	ax, cl
		shl	dx, cl
		neg	cl
		add	cl, 10h
		shr	bx, cl
		or	dx, bx
		retf
; ---------------------------------------------------------------------------

loc_46B4:				; CODE XREF: N_LXLSH@+6j
		sub	cl, 10h
		xchg	ax, dx
		xor	ax, ax
		shl	dx, cl
		retf
N_LXLSH@	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

N_PADD@		proc far		; CODE XREF: __sbrk+38p
		pop	es
		push	cs
		push	es

F_PADD@:
		or	cx, cx
		jge	short loc_46D0
		not	bx
		not	cx
		add	bx, 1
		adc	cx, 0
		jmp	short loc_46FF
; ---------------------------------------------------------------------------

loc_46D0:				; CODE XREF: N_PADD@+5j N_PADD@+40j
		add	ax, bx
		jnb	short loc_46D8
		add	dx, 1000h

loc_46D8:				; CODE XREF: N_PADD@+15j
		mov	ch, cl
		mov	cl, 4
		shl	ch, cl
		add	dh, ch
		mov	ch, al
		shr	ax, cl
		add	dx, ax
		mov	al, ch
		and	ax, 0Fh
		retf
; ---------------------------------------------------------------------------

N_PSUB@:
		pop	es
		push	cs
		push	es

F_PSUB@:
		or	cx, cx
		jge	short loc_46FF
		not	bx
		not	cx
		add	bx, 1
		adc	cx, 0
		jmp	short loc_46D0
; ---------------------------------------------------------------------------

loc_46FF:				; CODE XREF: N_PADD@+11j N_PADD@+34j
		sub	ax, bx
		jnb	short loc_4707
		sub	dx, 1000h

loc_4707:				; CODE XREF: N_PADD@+44j
		mov	bh, cl
		mov	cl, 4
		shl	bh, cl
		xor	bl, bl
		sub	dx, bx
		mov	ch, al
		shr	ax, cl
		add	dx, ax
		mov	al, ch
		and	ax, 0Fh
		retf
N_PADD@		endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__IOERROR	proc near		; CODE XREF: __DOSERROR+8p _lseek+25p	...

arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	dx, [bp+arg_0]
		or	dx, dx
		jl	short loc_4740
		cmp	dx, 58h	; 'X'
		jle	short loc_4731

loc_472E:				; CODE XREF: __IOERROR+29j
		mov	dx, 57h	; 'W'

loc_4731:				; CODE XREF: __IOERROR+Fj
		mov	word_239E2, dx
		mov	bx, dx
		mov	al, [bx+26A4h]
		cbw
		mov	dx, ax
		jmp	short loc_474E
; ---------------------------------------------------------------------------

loc_4740:				; CODE XREF: __IOERROR+Aj
		neg	dx
		cmp	dx, word_23CC4
		jg	short loc_472E
		mov	word_239E2, 0FFFFh

loc_474E:				; CODE XREF: __IOERROR+21j
		mov	word_213BE, dx
		mov	ax, 0FFFFh
		pop	di
		pop	si
		pop	bp
		retn	2
__IOERROR	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__DOSERROR	proc near

arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		push	si
		push	di
		push	[bp+arg_0]
		call	__IOERROR
		mov	ax, [bp+arg_0]
		pop	di
		pop	si
		pop	bp
		retn	2
__DOSERROR	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl isatty(int handle)
_isatty		proc far		; CODE XREF: seg000:4B11p sub_4B43+7p

handle		= word ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, 4400h
		mov	bx, [bp+handle]
		int	21h		; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
					; BX = file or device handle
		xchg	ax, dx
		and	ax, 80h
		pop	di
		pop	si
		pop	bp
		retf
_isatty		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; __int32 __cdecl lseek(int handle, __int32 offset, int	fromwhere)
_lseek		proc far		; CODE XREF: _fseek+67p _ftell+1Bp ...

handle		= word ptr  6
_offset		= word ptr  8
arg_4		= word ptr  0Ah
fromwhere	= byte ptr  0Ch

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	bx, [bp+handle]
		add	bx, bx
		and	word ptr [bx+267Ah], 0FDFFh
		mov	ah, 42h	; 'B'
		mov	al, [bp+fromwhere]
		mov	bx, [bp+handle]
		mov	cx, [bp+arg_4]
		mov	dx, [bp+_offset]
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method:
					; 0-from beginnig,1-from current,2-from	end
		jb	short loc_47A8
		jmp	short loc_47AD
; ---------------------------------------------------------------------------

loc_47A8:				; CODE XREF: _lseek+20j
		push	ax
		call	__IOERROR
		cwd

loc_47AD:				; CODE XREF: _lseek+22j
		pop	di
		pop	si
		pop	bp
		retf
_lseek		endp

; ---------------------------------------------------------------------------
		dd byte_49DC
		db 4, 0, 0FAh, 0FFh, 0Ah dup(0), 0DCh, 0FFh, 2 dup(0)
		db 5, 3	dup(0),	0B1h, 47h
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		sub	sp, 24h
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 47BFh
		nop
		push	cs
		call	___InitExceptBlocks
		xor	ax, ax
		push	ax
		push	ax
		push	ax
		push	ax
		mov	ax, 5
		push	ax
		mov	ax, seg	seg000
		push	ax
		mov	ax, 48B7h
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		push	ds
		mov	ax, 26FEh
		push	ax
		push	ss
		lea	ax, [bp-6]
		push	ax
		nop
		push	cs
		call	near ptr @xmsg@$bctr$qmx4xmsg ;	xmsg::xmsg(xmsg	&)
		add	sp, 8
		mov	ax, word_23A42
		mov	[bp-2],	ax
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		add	word ptr es:[bx], 1
		adc	word ptr es:[bx+2], 0
		lea	ax, [bp-6]
		push	ss
		push	ax
		push	cs
		mov	ax, 49DCh
		push	ax
		nop
		push	cs
		call	near ptr @_ThrowException$qnvt1t1t1uiuiuinuc ; _ThrowException(void *,void *,void *,void *,uint,uint,uint,uchar	*)
		add	sp, 1Ah
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; set_new_handler(void (*)(void))
@set_new_handler$qnqv$v	proc far

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	si
		push	di
		mov	dx, seg_23A46
		mov	ax, word_23A44
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		mov	seg_23A46, dx
		mov	word_23A44, ax
		mov	dx, [bp+var_2]
		mov	ax, [bp+var_4]
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@set_new_handler$qnqv$v	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; operator new(unsigned	int)
@$bnew$qui	proc far		; CODE XREF: xalloc::xalloc(string &,uint)+13p
					; xmsg::xmsg(string &)+21p ...

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	si
		push	di
		mov	[bp+var_2], 0
		mov	[bp+var_4], 0
		cmp	[bp+arg_0], 0
		jz	short loc_4883
		mov	ax, [bp+arg_0]
		jmp	short loc_4886
; ---------------------------------------------------------------------------

loc_4883:				; CODE XREF: operator new(uint)+16j
		mov	ax, 1

loc_4886:				; CODE XREF: operator new(uint)+1Bj
		mov	[bp+arg_0], ax
		jmp	short loc_488F
; ---------------------------------------------------------------------------

loc_488B:				; CODE XREF: operator new(uint)+43j
		call	dword ptr word_23A44

loc_488F:				; CODE XREF: operator new(uint)+23j
		push	[bp+arg_0]
		nop
		push	cs
		call	near ptr sub_51C6
		pop	cx
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		or	ax, dx
		jnz	short loc_48AB
		mov	ax, word_23A44
		or	ax, seg_23A46
		jnz	short loc_488B

loc_48AB:				; CODE XREF: operator new(uint)+3Aj
		mov	dx, [bp+var_2]
		mov	ax, [bp+var_4]
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@$bnew$qui	endp

; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		push	word ptr [bp+0Ch]
		push	word ptr [bp+0Ah]
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	near ptr @xmsg@$bctr$qmx4xmsg ;	xmsg::xmsg(xmsg	&)
		add	sp, 8
		les	bx, [bp+0Ah]
		mov	ax, es:[bx+4]
		les	bx, [bp+6]
		mov	es:[bx+4], ax
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		add	word ptr es:[bx], 1
		adc	word ptr es:[bx+2], 0
		mov	dx, [bp+8]
		mov	ax, [bp+6]
		pop	di
		pop	si
		pop	bp
		retf
; ---------------------------------------------------------------------------
		dd byte_49DC
		dw 0
		dd unk_23A3E
		dd byte_49A2
		db 4, 0, 0FCh, 0FFh, 0Ah dup(0), 0DEh, 0FFh, 2 dup(0)
		db 5, 3	dup(0),	0FAh, 48h

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; string::contains(char	const *)const
@string@contains$xqnxc proc far		; DATA XREF: dseg:2A2Co

var_22		= word ptr -22h
var_16		= word ptr -16h
driver		= byte ptr -4

		push	bp
		mov	bp, sp
		sub	sp, 22h
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 4912h
		nop
		push	cs
		call	___InitExceptBlocks
		mov	[bp+var_16], 6
		xor	ax, ax
		push	ax
		push	ds
		mov	ax, 2708h
		push	ax		; s
		push	ss
		lea	ax, [bp+driver]
		push	ax		; __int32
		call	@string@$bctr$qnxc ; string::string(char *)
		add	sp, 8
		lea	ax, [bp+driver]
		push	ss
		push	ax
		push	ds
		mov	ax, 26FEh
		push	ax
		nop
		push	cs
		call	near ptr @xalloc@$bctr$qmx6stringui ; xalloc::xalloc(string &,uint)
		mov	ax, 2
		push	ax		; char
		push	ss
		lea	ax, [bp+driver]
		push	ax		; driver
		call	@string@$bdtr$qv ; string::~string(void)
		add	sp, 10h
		push	[bp+var_22]
		nop
		push	cs
		call	near ptr ___ExitExceptBlocks
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@string@contains$xqnxc endp

; ---------------------------------------------------------------------------

loc_497B:				; DATA XREF: dseg:2A4Ao
		push	si
		push	di
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		sub	word ptr es:[bx], 1
		sbb	word ptr es:[bx+2], 0
		xor	ax, ax
		push	ax
		push	ds
		mov	ax, 26FEh
		push	ax
		nop
		push	cs
		call	near ptr @xmsg@$bdtr$qv	; xmsg::~xmsg(void)
		add	sp, 6
		pop	di
		pop	si
		retf
; ---------------------------------------------------------------------------
byte_49A2	db 4, 0, 3, 0, 26h, 0, 2 dup(0FFh), 3, 0, 2Eh, 0, 32h
					; DATA XREF: seg000:4904o
		db 0Dh dup(0), 1, 0, 1,	0, 11h,	3
		dw seg seg004
		db 5, 0, 36h, 0, 73h, 74h, 72h,	69h, 6Eh, 67h, 0Eh dup(0)
byte_49DC	db 6, 0, 3, 0, 26h, 0, 2 dup(0FFh), 7, 0, 2Eh, 0, 3Ah
					; DATA XREF: seg000:47B1o seg000:48FAo
		db 0Dh dup(0), 2, 0, 2,	0, 1Eh,	4Ah
		dw seg seg000
		db 5, 0, 3Eh, 0, 78h, 61h, 2 dup(6Ch), 6Fh, 63h, 2 dup(0)
		db 6Bh,	4Ah
		dw seg seg000
		dw 0
		db 3, 0Dh dup(0)
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, [bp+6]
		or	ax, [bp+8]
		jz	short loc_4A65
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		sub	word ptr es:[bx], 1
		sbb	word ptr es:[bx+2], 0
		xor	ax, ax
		push	ax
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	near ptr @xmsg@$bdtr$qv	; xmsg::~xmsg(void)
		add	sp, 6
		test	byte ptr [bp+0Ah], 1
		jz	short loc_4A63
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	_registerbgidriver
		pop	cx
		pop	cx
		jmp	short loc_4A67
; ---------------------------------------------------------------------------

loc_4A63:				; CODE XREF: seg000:4A52j
		jmp	short loc_4A67
; ---------------------------------------------------------------------------

loc_4A65:				; CODE XREF: seg000:4A29j
		xor	ax, ax

loc_4A67:				; CODE XREF: seg000:4A61j
					; seg000:loc_4A63j
		pop	di
		pop	si
		pop	bp
		retf
; ---------------------------------------------------------------------------
		db 4, 0, 3, 0, 26h, 0, 2 dup(0FFh), 3, 0, 2Ch, 0, 30h
		db 0Dh dup(0), 1, 0, 1,	0, 2Ah,	6Bh
		dw seg seg000
		db 5, 0, 34h, 0, 78h, 6Dh, 73h,	67h, 0Eh dup(0)

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

N_LXMUL@	proc near		; CODE XREF: sub_9214+51p sub_9214+7Bp ...
		push	si
		xchg	ax, si
		xchg	ax, dx
		test	ax, ax
		jz	short loc_4AAC
		mul	bx

loc_4AAC:				; CODE XREF: N_LXMUL@+5j
		jcxz	short loc_4AB3
		xchg	ax, cx
		mul	si
		add	ax, cx

loc_4AB3:				; CODE XREF: N_LXMUL@:loc_4AACj
		xchg	ax, si
		mul	bx
		add	dx, si
		pop	si
		retn
N_LXMUL@	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

N_PCMP@		proc near		; CODE XREF: __brk+13p	__brk+26p ...
		push	cx
		mov	ch, al
		mov	cl, 4
		shr	ax, cl
		add	dx, ax
		mov	al, ch
		mov	ah, bl
		shr	bx, cl
		pop	cx
		add	cx, bx
		mov	bl, ah
		and	ax, 0Fh
		and	bx, 0Fh
		cmp	dx, cx
		jnz	short locret_4ADA
		cmp	ax, bx

locret_4ADA:				; CODE XREF: N_PCMP@+1Cj
		retn
N_PCMP@		endp

; ---------------------------------------------------------------------------

__setupio:
		push	si
		push	di
		mov	cx, 5
		jmp	short loc_4B04
; ---------------------------------------------------------------------------

loc_4AE2:				; CODE XREF: seg000:4B08j
		mov	bx, cx
		add	bx, bx
		mov	word ptr [bx+267Ah], 0
		mov	ax, 14h
		imul	cx
		mov	dx, ax
		mov	bx, ax
		mov	byte ptr [bx+24ECh], 0FFh
		add	ax, 24E8h
		mov	bx, dx
		mov	[bx+24FAh], ax
		inc	cx

loc_4B04:				; CODE XREF: seg000:4AE0j
		cmp	cx, word_239B8
		jb	short loc_4AE2
		mov	al, byte_2382C
		cbw
		push	ax
		nop
		push	cs
		call	near ptr _isatty
		pop	cx
		or	ax, ax
		jnz	short loc_4B1F
		and	word_2382A, 0FDFFh

loc_4B1F:				; CODE XREF: seg000:4B17j
		mov	ax, 200h
		push	ax
		test	byte ptr word_2382A+1, 2
		jz	short loc_4B2F
		mov	ax, 1
		jmp	short loc_4B31
; ---------------------------------------------------------------------------

loc_4B2F:				; CODE XREF: seg000:4B28j
		xor	ax, ax

loc_4B31:				; CODE XREF: seg000:4B2Dj
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		push	ds
		mov	ax, 24E8h
		push	ax
		nop
		push	cs
		call	near ptr _setvbuf
		add	sp, 0Ch

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

sub_4B43	proc near		; CODE XREF: sub_727A+77p sub_727A+A1p ...
		mov	al, byte_23840
		cbw
		push	ax		; handle
		nop
		push	cs
		call	near ptr _isatty
		pop	cx
		or	ax, ax
		jnz	short loc_4B58
		and	word_2383E, 0FDFFh

loc_4B58:				; CODE XREF: sub_4B43+Dj
		mov	ax, 200h
		push	ax		; size
		test	byte ptr word_2383E+1, 2
		jz	short loc_4B68
		mov	ax, 2
		jmp	short loc_4B6A
; ---------------------------------------------------------------------------

loc_4B68:				; CODE XREF: sub_4B43+1Ej
		xor	ax, ax

loc_4B6A:				; CODE XREF: sub_4B43+23j
		push	ax		; type
		xor	ax, ax
		push	ax
		push	ax		; buf
		push	ds
		mov	ax, 24FCh
		push	ax		; stream
		nop
		push	cs
		call	near ptr _setvbuf
		add	sp, 0Ch
		pop	di
		pop	si
		retn
sub_4B43	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl tolower(int ch)
_tolower	proc far		; CODE XREF: sub_D1BC+CP

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	dx, [bp+arg_0]
		cmp	dx, 0FFFFh
		jnz	short loc_4B91
		mov	ax, 0FFFFh
		jmp	short loc_4BAB
; ---------------------------------------------------------------------------

loc_4B91:				; CODE XREF: _tolower+Bj
		mov	al, dl
		mov	ah, 0
		mov	bx, ax
		test	(__ctype+1)[bx], 4
		jz	short loc_4BA7
		mov	al, dl
		mov	ah, 0
		add	ax, 20h	; ' '
		jmp	short loc_4BAB
; ---------------------------------------------------------------------------

loc_4BA7:				; CODE XREF: _tolower+1Dj
		mov	al, dl
		mov	ah, 0

loc_4BAB:				; CODE XREF: _tolower+10j _tolower+26j
		pop	di
		pop	si
		pop	bp
		retf
_tolower	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4BAF	proc far		; CODE XREF: sub_5C9D+4Fp

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	dx, [bp+arg_0]
		cmp	dx, 0FFFFh
		jnz	short loc_4BC1
		mov	ax, 0FFFFh
		jmp	short loc_4BDB
; ---------------------------------------------------------------------------

loc_4BC1:				; CODE XREF: sub_4BAF+Bj
		mov	al, dl
		mov	ah, 0
		mov	bx, ax
		test	byte ptr [bx+2719h], 8
		jz	short loc_4BD7
		mov	al, dl
		mov	ah, 0
		add	ax, 0FFE0h
		jmp	short loc_4BDB
; ---------------------------------------------------------------------------

loc_4BD7:				; CODE XREF: sub_4BAF+1Dj
		mov	al, dl
		mov	ah, 0

loc_4BDB:				; CODE XREF: sub_4BAF+10j sub_4BAF+26j
		pop	di
		pop	si
		pop	bp
		retf
sub_4BAF	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

; __RefDestructorCount(void)
@__RefDestructorCount$qv proc far	; CODE XREF: seg000:4810p seg000:48E0p ...
		mov	dx, ss
		mov	ax, 10h
		retf
@__RefDestructorCount$qv endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

; __RefExceptionList(void)
@__RefExceptionList$qv proc far		; CODE XREF: ___InitExceptBlocks+5Cp
					; ___ExitExceptBlocks+4p
		mov	dx, ss
		mov	ax, 14h
		retf
@__RefExceptionList$qv endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

___InitExceptBlocks proc near		; CODE XREF: seg000:47DDp
					; string::contains(char	*)+10p	...
		mov	es, ax
		mov	dx, bx
		mov	cx, bp
		mov	bx, es:[bx+4]
		add	bx, cx
		mov	ss:[bx+6], dx
		mov	ss:[bx+8], ax
		mov	ax, sp
		add	ax, 4
		mov	ss:[bx+0Ah], ax
		mov	ax, seg	dseg
		mov	ss:[bx+0Eh], ax
		mov	ss:[bx+10h], si
		mov	word ptr ss:[bx+2], offset __ExceptionHandler
		mov	word ptr ss:[bx+4], seg	seg000
		mov	word ptr ss:[bx+0Ch], 0
		mov	word ptr ss:[bx+12h], 0
		push	bx
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		pop	bx
		xchg	ax, bx
		mov	es, dx
		mov	cx, es:[bx]
		mov	dx, es:[bx+2]
		mov	bx, ax
		mov	ss:[bx+1Ah], cx
		mov	ss:[bx+1Ch], dx
		push	bx
		push	cs
		call	near ptr @__RefExceptionList$qv	; __RefExceptionList(void)
		pop	bx
		xchg	ax, bx
___InitExceptBlocks endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

sub_4C4C	proc far		; CODE XREF: sub_A897+22Fp
					; DATA XREF: dseg:off_21346o
		mov	es, dx
		mov	cx, es:[bx]
		mov	es:[bx], ax
		mov	bx, ax
		mov	ss:[bx], cx
		retf
sub_4C4C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

___ExitExceptBlocks proc far		; CODE XREF: string::contains(char *)+52p
					; seg000:4D5Ap	...

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		push	cs
		call	near ptr @__RefExceptionList$qv	; __RefExceptionList(void)
		mov	bx, [bp+arg_0]
		xchg	ax, bx
		mov	es, dx
		mov	es:[bx], ax
		pop	bp
		retf	2
___ExitExceptBlocks endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function noreturn

; terminate(void)
@terminate$qv	proc near		; DATA XREF: dseg:2824o
		push	si
		push	di
		nop
		push	cs
		call	near ptr _abort
@terminate$qv	endp

; ---------------------------------------------------------------------------
		pop	di
		pop	si
		retf

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; set_terminate(void (*)(void))
@set_terminate$qnqv$v proc far

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	si
		push	di
		les	bx, ss:16h
		mov	dx, es:[bx+0Ch]
		mov	ax, es:[bx+0Ah]
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		mov	ax, [bp+arg_0]
		or	ax, [bp+arg_2]
		jz	short loc_4CAE
		les	bx, ss:16h
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		mov	es:[bx+0Ch], dx
		mov	es:[bx+0Ah], ax

loc_4CAE:				; CODE XREF: set_terminate(void	(*)(void))+21j
		mov	dx, [bp+var_2]
		mov	ax, [bp+var_4]
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@set_terminate$qnqv$v endp

; ---------------------------------------------------------------------------
		db 4 dup(0), 48h, 4Dh
		dw seg seg000
		db 14h dup(0), 0E2h, 0FFh, 2 dup(0), 3,	0, 0BAh, 4Ch
		dw seg seg000
		db 2 dup(0), 4,	0

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function noreturn	bp-based frame

___call_terminate proc far		; CODE XREF: unexpected(void)+3p
					; sub_789F+272p ...

var_26		= dword	ptr -26h
var_22		= word ptr -22h
var_20		= word ptr -20h
var_12		= word ptr -12h

		push	bp
		mov	bp, sp
		sub	sp, 26h
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 4CD2h
		nop
		push	cs
		call	___InitExceptBlocks
		mov	[bp+var_22], ds
		nop
		push	cs
		call	near ptr _flushall
		les	bx, ss:16h
		mov	dx, es:[bx+0Ch]
		mov	ax, es:[bx+0Ah]
		mov	word ptr [bp+var_26+2],	dx
		mov	word ptr [bp+var_26], ax
		mov	[bp+var_12], 6
		les	bx, ss:16h
		cmp	word ptr es:[bx+12h], 0
		jnz	short loc_4D2C
		les	bx, ss:16h
		mov	word ptr es:[bx+12h], ds

loc_4D2C:				; CODE XREF: ___call_terminate+3Dj
		les	bx, ss:16h
		mov	ax, es:[bx+12h]
		mov	[bp+var_20], ax
		mov	ds, [bp+var_20]
		call	[bp+var_26]
		mov	ds, [bp+var_22]
		mov	[bp+var_12], 0
		jmp	short loc_4D50
; ---------------------------------------------------------------------------
		mov	ds, [bp+var_22]
		nop
		push	cs
		call	near ptr @_CatchCleanup$qv ; _CatchCleanup(void)

loc_4D50:				; CODE XREF: ___call_terminate+62j
		nop
		push	cs
		call	near ptr _abort
___call_terminate endp

; ---------------------------------------------------------------------------
		push	word ptr [bp-1Eh]
		nop
		push	cs
		call	near ptr ___ExitExceptBlocks
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function noreturn

; unexpected(void)
@unexpected$qv	proc near		; DATA XREF: dseg:2828o
		push	si
		push	di
		push	cs
		call	near ptr ___call_terminate
@unexpected$qv	endp

; ---------------------------------------------------------------------------
		pop	di
		pop	si
		retf

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; set_unexpected(void (*)(void))
@set_unexpected$qnqv$v proc far

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	si
		push	di
		les	bx, ss:16h
		mov	dx, es:[bx+10h]
		mov	ax, es:[bx+0Eh]
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		mov	ax, [bp+arg_0]
		or	ax, [bp+arg_2]
		jz	short loc_4DA2
		les	bx, ss:16h
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		mov	es:[bx+10h], dx
		mov	es:[bx+0Eh], ax

loc_4DA2:				; CODE XREF: set_unexpected(void (*)(void))+21j
		mov	dx, [bp+var_2]
		mov	ax, [bp+var_4]
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@set_unexpected$qnqv$v endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function noreturn	bp-based frame

___call_unexpected proc	far		; CODE XREF: __ExceptionHandler+127p

var_6		= dword	ptr -6
var_2		= word ptr -2

		push	bp
		mov	bp, sp
		sub	sp, 6
		push	si
		push	di
		les	bx, ss:16h
		mov	dx, es:[bx+10h]
		mov	ax, es:[bx+0Eh]
		mov	word ptr [bp+var_6+2], dx
		mov	word ptr [bp+var_6], ax
		les	bx, ss:16h
		cmp	word ptr es:[bx+14h], 0
		jnz	short loc_4DDE
		les	bx, ss:16h
		mov	word ptr es:[bx+14h], ds

loc_4DDE:				; CODE XREF: ___call_unexpected+25j
		les	bx, ss:16h
		mov	ax, es:[bx+14h]
		mov	[bp+var_2], ax
		push	ds
		mov	ds, [bp+var_2]
		call	[bp+var_6]
		pop	ds
		nop
		push	cs
		call	near ptr _abort
___call_unexpected endp

; ---------------------------------------------------------------------------
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; __GetPolymorphicDTC(void *, unsigned int)
@__GetPolymorphicDTC$qnvui proc	far

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  6
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		sub	sp, 8
		push	si
		push	di
		mov	ax, word ptr [bp+arg_0]
		or	ax, word ptr [bp+arg_0+2]
		jnz	short loc_4E11
		xor	ax, ax
		jmp	short loc_4E4B
; ---------------------------------------------------------------------------

loc_4E11:				; CODE XREF: __GetPolymorphicDTC(void *,uint)+Ej
		les	bx, [bp+arg_0]
		add	bx, [bp+arg_4]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_4+2], ds
		mov	word ptr [bp+var_4], ax
		les	bx, [bp+var_4]
		mov	dx, word ptr [bp+var_4+2]
		mov	ax, word ptr [bp+var_4]
		sub	ax, es:[bx-2]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		les	bx, [bp+var_4]
		mov	dx, es:[bx-6]
		mov	ax, es:[bx-8]
		mov	word ptr [bp+var_8+2], dx
		mov	word ptr [bp+var_8], ax
		les	bx, [bp+var_8]
		mov	ax, es:[bx+1Ah]

loc_4E4B:				; CODE XREF: __GetPolymorphicDTC(void *,uint)+12j
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@__GetPolymorphicDTC$qnvui endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; __GetPolymorphicDTCfar(void *, unsigned int)
@__GetPolymorphicDTCfar$qnvui proc far

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  6
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		sub	sp, 8
		push	si
		push	di
		mov	ax, word ptr [bp+arg_0]
		or	ax, word ptr [bp+arg_0+2]
		jnz	short loc_4E65
		xor	ax, ax
		jmp	short loc_4EA3
; ---------------------------------------------------------------------------

loc_4E65:				; CODE XREF: __GetPolymorphicDTCfar(void *,uint)+Ej
		les	bx, [bp+arg_0]
		add	bx, [bp+arg_4]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		les	bx, [bp+var_4]
		mov	dx, word ptr [bp+var_4+2]
		mov	ax, word ptr [bp+var_4]
		sub	ax, es:[bx-2]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		les	bx, [bp+var_4]
		mov	dx, es:[bx-6]
		mov	ax, es:[bx-8]
		mov	word ptr [bp+var_8+2], dx
		mov	word ptr [bp+var_8], ax
		les	bx, [bp+var_8]
		mov	ax, es:[bx+1Ah]

loc_4EA3:				; CODE XREF: __GetPolymorphicDTCfar(void *,uint)+12j
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@__GetPolymorphicDTCfar$qnvui endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

__ExceptInit	proc far		; CODE XREF: start+115p
		push	si
		push	di
		mov	word ptr ss:12h, 0
		mov	word ptr ss:10h, 0
		mov	word ptr ss:18h, ds
		mov	word ptr ss:16h, 281Ah
		mov	word ptr ss:1Ah, 0FEEDh
		mov	ax, ds
		mov	word_23B6E, ax
		mov	word_23B6C, ax
		mov	dx, ss:18h
		mov	ax, ss:16h
		add	ax, 0A8h ; '¨'
		les	bx, ss:16h
		mov	es:[bx+22h], dx
		mov	es:[bx+20h], ax
		mov	word ptr ss:14h, 0FFFFh
		pop	di
		pop	si
		retf
__ExceptInit	endp

; ---------------------------------------------------------------------------

unknown_libname_1:			; BCC v4.x/5.x DOS runtime
		pushf
		pop	bx
		mov	ax, 0FFFh
		and	ax, bx
		push	ax
		popf
		pushf
		pop	ax
		and	ax, 0F000h
		cmp	ax, 0F000h
		mov	word_23C82, 0
		jz	short locret_4F52
		or	bx, 0F000h
		push	bx
		popf
		pushf
		pop	ax
		and	ax, 0F000h
		mov	word_23C82, 2
		jz	short locret_4F52
		mov	edx, esp
		and	sp, 0FFFCh
		pushfd
		pop	eax
		mov	ecx, eax
		xor	eax, 40000h
		push	eax
		popfd
		pushfd
		pop	eax
		xor	eax, ecx
		mov	word_23C82, 3
		mov	esp, edx
		jz	short locret_4F52
		mov	word_23C82, 4

locret_4F52:				; CODE XREF: seg000:4F0Ej seg000:4F21j ...
		retn
; ---------------------------------------------------------------------------
word_4F53	dw 0			; DATA XREF: sub_4F5Fr	sub_4F5F+1Dr ...
word_4F55	dw 0			; DATA XREF: sub_4F5F+14w sub_4F5F+27w ...
word_4F57	dw 0			; DATA XREF: sub_4F5F+4Cw sub_5033+19w ...
word_4F59	dw 0			; DATA XREF: sub_4F5F+32r
					; sub_4F5F:loc_4FB2r ...
word_4F5B	dw 0			; DATA XREF: sub_524D+1r sub_532D+1Aw
word_4F5D	dw 0			; DATA XREF: sub_524D+7r sub_532D+1Fw

; =============== S U B	R O U T	I N E =======================================


sub_4F5F	proc near		; CODE XREF: sub_5093+18p
		cmp	dx, cs:word_4F53
		jz	short loc_4F9D
		mov	ds, dx
		mov	ds, word_21342
		cmp	word_21342, 0
		jz	short loc_4F7A
		mov	cs:word_4F55, ds
		jmp	short loc_4FB2
; ---------------------------------------------------------------------------

loc_4F7A:				; CODE XREF: sub_4F5F+12j
		mov	ax, ds
		cmp	ax, cs:word_4F53
		jz	short loc_4F98
		mov	ax, off_21348
		mov	cs:word_4F55, ax
		push	ds
		xor	ax, ax
		push	ax
		call	sub_5033
		mov	ds, cs:word_4F59
		jmp	short loc_4FBB
; ---------------------------------------------------------------------------

loc_4F98:				; CODE XREF: sub_4F5F+22j
		mov	dx, cs:word_4F53

loc_4F9D:				; CODE XREF: sub_4F5F+5j
		mov	cs:word_4F53, 0
		mov	cs:word_4F55, 0
		mov	cs:word_4F57, 0

loc_4FB2:				; CODE XREF: sub_4F5F+19j
		mov	ds, cs:word_4F59
		push	dx
		xor	ax, ax
		push	ax

loc_4FBB:				; CODE XREF: sub_4F5F+37j
		call	__brk
		add	sp, 4
		retn
sub_4F5F	endp


; =============== S U B	R O U T	I N E =======================================


sub_4FC2	proc near		; CODE XREF: sub_5093:loc_50B0p
		mov	ds, dx
		push	ds
		mov	es, word_21342
		mov	word_21342, 0
		mov	off_21348, es
		cmp	dx, cs:word_4F53
		jz	short loc_5008
		cmp	word ptr es:2, 0
		jnz	short loc_5008
		mov	ax, word_21340
		pop	bx
		push	es
		add	es:0, ax
		mov	cx, es
		add	dx, ax
		mov	es, dx
		cmp	word ptr es:2, 0
		jnz	short loc_5001
		mov	es:8, cx
		jmp	short loc_500B
; ---------------------------------------------------------------------------

loc_5001:				; CODE XREF: sub_4FC2+36j
		mov	es:2, cx
		jmp	short loc_500B
; ---------------------------------------------------------------------------

loc_5008:				; CODE XREF: sub_4FC2+16j sub_4FC2+1Ej
		call	sub_505C

loc_500B:				; CODE XREF: sub_4FC2+3Dj sub_4FC2+44j
		pop	es
		mov	ax, es
		add	ax, es:0
		mov	ds, ax
		cmp	word_21342, 0
		jz	short loc_501D
		retn
; ---------------------------------------------------------------------------

loc_501D:				; CODE XREF: sub_4FC2+58j
		mov	ax, word_21340
		add	es:0, ax
		mov	ax, es
		mov	bx, ds
		add	bx, word_21340
		mov	es, bx
		mov	es:2, ax
sub_4FC2	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


sub_5033	proc near		; CODE XREF: sub_4F5F+2Fp sub_51D0+66p
		mov	bx, ds
		cmp	bx, off_21346
		jz	short loc_5054
		mov	es, off_21346
		mov	ds, off_21344
		mov	off_21346, es
		mov	word ptr es:4, ds
		mov	cs:word_4F57, ds
		mov	ds, bx
		retn
; ---------------------------------------------------------------------------

loc_5054:				; CODE XREF: sub_5033+6j
		mov	cs:word_4F57, 0
		retn
sub_5033	endp


; =============== S U B	R O U T	I N E =======================================


sub_505C	proc near		; CODE XREF: sub_4FC2:loc_5008p
		mov	ax, cs:word_4F57
		or	ax, ax
		jz	short loc_5085
		mov	bx, ss
		pushf
		cli
		mov	ss, ax
		mov	es, word ptr ss:6
		mov	word ptr ss:6, ds
		mov	off_21344, ss
		mov	ss, bx
		popf
		mov	word ptr es:4, ds
		mov	off_21346, es
		retn
; ---------------------------------------------------------------------------

loc_5085:				; CODE XREF: sub_505C+6j
		mov	cs:word_4F57, ds
		mov	off_21344, ds
		mov	off_21346, ds
		retn
sub_505C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_5093	proc far		; CODE XREF: _registerbgidriver+Dp
					; sub_524D+71p	...

arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	cs:word_4F59, ds
		mov	dx, [bp+arg_2]
		or	dx, dx
		jz	short loc_50B3
		cmp	dx, cs:word_4F55
		jnz	short loc_50B0
		call	sub_4F5F
		jmp	short loc_50B3
; ---------------------------------------------------------------------------

loc_50B0:				; CODE XREF: sub_5093+16j
		call	sub_4FC2

loc_50B3:				; CODE XREF: sub_5093+Fj sub_5093+1Bj
		mov	ds, cs:word_4F59
		pop	di
		pop	si
		pop	bp
		retf
sub_5093	endp


; =============== S U B	R O U T	I N E =======================================


sub_50BC	proc near		; CODE XREF: sub_51D0:loc_5225p
		push	ax
		mov	ds, cs:word_4F59
		xor	ax, ax
		push	ax
		push	ax
		call	__sbrk
		add	sp, 4
		and	ax, 0Fh
		jz	short loc_50E5
		mov	dx, 10h
		sub	dx, ax
		xor	ax, ax
		mov	ds, cs:word_4F59
		push	ax
		push	dx
		call	__sbrk
		add	sp, 4

loc_50E5:				; CODE XREF: sub_50BC+13j
		pop	ax
		push	ax
		xor	bx, bx
		mov	bl, ah
		mov	cl, 4
		shr	bx, cl
		shl	ax, cl
		mov	ds, cs:word_4F59
		push	bx
		push	ax
		call	__sbrk
		add	sp, 4
		pop	bx
		cmp	ax, 0FFFFh
		jz	short loc_511C
		mov	cs:word_4F53, dx
		mov	cs:word_4F55, dx
		mov	ds, dx
		mov	word_21340, bx
		mov	word_21342, dx
		mov	ax, 4
		retn
; ---------------------------------------------------------------------------

loc_511C:				; CODE XREF: sub_50BC+46j
		xor	ax, ax
		cwd
		retn
sub_50BC	endp


; =============== S U B	R O U T	I N E =======================================


sub_5120	proc near		; CODE XREF: sub_51D0:loc_5220p
		push	ax
		mov	ds, cs:word_4F59
		xor	ax, ax
		push	ax
		push	ax
		call	__sbrk
		pop	bx
		pop	bx
		and	ax, 0Fh
		jz	short loc_5148
		mov	dx, 10h
		sub	dx, ax
		xor	ax, ax
		mov	ds, cs:word_4F59
		push	ax
		push	dx
		call	__sbrk
		add	sp, 4

loc_5148:				; CODE XREF: sub_5120+12j
		pop	ax
		push	ax
		xor	bx, bx
		mov	bl, ah
		mov	cl, 4
		shr	bx, cl
		shl	ax, cl
		mov	ds, cs:word_4F59
		push	bx
		push	ax
		call	__sbrk
		add	sp, 4
		pop	bx
		cmp	ax, 0FFFFh
		jz	short loc_519F
		and	ax, 0Fh
		jnz	short loc_5184

loc_516C:				; CODE XREF: sub_5120+7Dj
		mov	cx, cs:word_4F55
		mov	cs:word_4F55, dx
		mov	ds, dx
		mov	word_21340, bx
		mov	word_21342, cx
		mov	ax, 4
		retn
; ---------------------------------------------------------------------------

loc_5184:				; CODE XREF: sub_5120+4Aj
		push	bx
		push	dx
		neg	ax
		add	ax, 10h
		xor	bx, bx
		push	bx
		push	ax
		call	__sbrk
		add	sp, 4
		pop	dx
		pop	bx
		cmp	ax, 0FFFFh
		jz	short loc_519F
		inc	dx
		jmp	short loc_516C
; ---------------------------------------------------------------------------

loc_519F:				; CODE XREF: sub_5120+45j sub_5120+7Aj
		xor	ax, ax
		cwd
		retn
sub_5120	endp


; =============== S U B	R O U T	I N E =======================================


sub_51A3	proc near		; CODE XREF: sub_51D0:loc_522Ap
		mov	bx, dx
		sub	word_21340, ax
		add	dx, word_21340
		mov	ds, dx
		mov	word_21340, ax
		mov	word_21342, bx
		mov	bx, dx
		add	bx, word_21340
		mov	ds, bx
		mov	word_21342, dx
		mov	ax, 4
		retn
sub_51A3	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_51C6	proc far		; CODE XREF: __DOSENV+83p
					; operator new(uint)+2Ep ...

arg_2		= word ptr  6

		push	bp
		mov	bp, sp
		xor	dx, dx
		mov	ax, [bp+arg_2]
		jmp	short loc_51D9
sub_51C6	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_51D0	proc far		; CODE XREF: sub_524D+Ep sub_532D+64p

arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]

loc_51D9:				; CODE XREF: sub_51C6+8j
		mov	cx, ax
		or	cx, dx
		push	si
		push	di
		mov	cs:word_4F59, ds
		jz	short loc_5244
		add	ax, 13h
		adc	dx, 0
		jb	short loc_522F
		test	dx, 0FFF0h
		jnz	short loc_522F
		mov	cl, 4
		shr	ax, cl
		shl	dx, cl
		or	ah, dl
		mov	dx, cs:word_4F53
		or	dx, dx
		jz	short loc_5225
		mov	dx, cs:word_4F57
		or	dx, dx
		jz	short loc_5220
		mov	bx, dx

loc_5210:				; CODE XREF: sub_51D0+4Ej
		mov	ds, dx
		cmp	word_21340, ax
		jnb	short loc_5234
		mov	dx, off_21346
		cmp	dx, bx
		jnz	short loc_5210

loc_5220:				; CODE XREF: sub_51D0+3Cj
		call	sub_5120
		jmp	short loc_5244
; ---------------------------------------------------------------------------

loc_5225:				; CODE XREF: sub_51D0+33j
		call	sub_50BC
		jmp	short loc_5244
; ---------------------------------------------------------------------------

loc_522A:				; CODE XREF: sub_51D0:loc_5234j
		call	sub_51A3
		jmp	short loc_5244
; ---------------------------------------------------------------------------

loc_522F:				; CODE XREF: sub_51D0+1Cj sub_51D0+22j
		xor	ax, ax
		cwd
		jmp	short loc_5244
; ---------------------------------------------------------------------------

loc_5234:				; CODE XREF: sub_51D0+46j
		ja	short loc_522A
		call	sub_5033
		mov	bx, off_21348
		mov	word_21342, bx
		mov	ax, offset off_21344

loc_5244:				; CODE XREF: sub_51D0+14j sub_51D0+53j ...
		mov	ds, cs:word_4F59
		pop	di
		pop	si
		pop	bp
		retf
sub_51D0	endp


; =============== S U B	R O U T	I N E =======================================


sub_524D	proc near		; CODE XREF: sub_532D:loc_5389p
		push	bx
		mov	si, cs:word_4F5B
		push	si
		mov	si, cs:word_4F5D
		push	si
		push	cs
		call	near ptr sub_51D0
		add	sp, 4
		or	dx, dx
		jnz	short loc_5267
		pop	bx
		retn
; ---------------------------------------------------------------------------

loc_5267:				; CODE XREF: sub_524D+16j
		pop	ds
		mov	es, dx
		push	es
		push	ds
		push	bx
		mov	dx, word_21340
		cld
		dec	dx
		mov	di, 4
		mov	si, di
		mov	cx, 6
		rep movsw
		or	dx, dx
		jz	short loc_52B8
		mov	ax, es
		inc	ax
		mov	es, ax
		assume es:seg000
		mov	ax, ds
		inc	ax
		mov	ds, ax
		assume ds:nothing

loc_528B:				; CODE XREF: sub_524D+69j
		xor	di, di
		mov	si, di
		mov	cx, dx
		cmp	cx, 1000h
		jbe	short loc_529A
		mov	cx, 1000h

loc_529A:				; CODE XREF: sub_524D+48j
		shl	cx, 1
		shl	cx, 1
		shl	cx, 1
		rep movsw
		sub	dx, 1000h
		jbe	short loc_52B8
		mov	ax, es
		add	ax, 1000h
		mov	es, ax
		assume es:nothing
		mov	ax, ds
		add	ax, 1000h
		mov	ds, ax
		assume ds:nothing
		jmp	short loc_528B
; ---------------------------------------------------------------------------

loc_52B8:				; CODE XREF: sub_524D+32j sub_524D+59j
		mov	ds, cs:word_4F59
		assume ds:dseg
		push	cs
		call	near ptr sub_5093
		add	sp, 4
		pop	dx
		mov	ax, 4
		retn
sub_524D	endp


; =============== S U B	R O U T	I N E =======================================


sub_52C9	proc near		; CODE XREF: sub_532D:loc_5384p
		cmp	bx, cs:word_4F55
		jz	short loc_5315
		mov	di, bx
		add	di, ax
		mov	es, di
		assume es:nothing
		mov	si, cx
		sub	si, ax
		mov	es:0, si
		mov	es:2, bx
		push	es
		push	ax
		mov	es, bx
		mov	es:0, ax
		mov	dx, bx
		add	dx, cx
		mov	es, dx
		cmp	word ptr es:2, 0
		jz	short loc_5301
		mov	es:2, di
		jmp	short loc_5306
; ---------------------------------------------------------------------------

loc_5301:				; CODE XREF: sub_52C9+2Fj
		mov	es:8, di

loc_5306:				; CODE XREF: sub_52C9+36j
		mov	si, bx
		push	cs
		call	near ptr sub_5093
		add	sp, 4
		mov	dx, si
		mov	ax, 4
		retn
; ---------------------------------------------------------------------------

loc_5315:				; CODE XREF: sub_52C9+5j
		push	bx
		mov	es, bx
		mov	es:0, ax
		add	bx, ax
		push	bx
		xor	ax, ax
		push	ax
		call	__brk
		add	sp, 4
		pop	dx
		mov	ax, 4
		retn
sub_52C9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_532D	proc far		; CODE XREF: sub_5C9D+2DDp
					; seg004:075AP	...

arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

		push	bp
		mov	bp, sp
		xor	dx, dx
		jmp	short loc_533A
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		mov	dx, [bp+arg_6]

loc_533A:				; CODE XREF: sub_532D+5j
		mov	ax, [bp+arg_4]
		mov	bx, [bp+arg_2]
		push	si
		push	di
		mov	cs:word_4F59, ds
		mov	cs:word_4F5B, dx
		mov	cs:word_4F5D, ax
		or	bx, bx
		jz	short loc_538E
		mov	cx, ax
		or	cx, dx
		jz	short loc_5399
		add	ax, 13h
		adc	dx, 0
		jb	short loc_53A2
		test	dx, 0FFF0h
		jnz	short loc_53A2
		mov	cl, 4
		shr	ax, cl
		shl	dx, cl
		or	ah, dl
		mov	es, bx
		mov	cx, es:0
		cmp	cx, ax
		jb	short loc_5389
		ja	short loc_5384
		mov	dx, bx
		mov	ax, 4
		jmp	short loc_53A5
; ---------------------------------------------------------------------------

loc_5384:				; CODE XREF: sub_532D+4Ej
		call	sub_52C9
		jmp	short loc_53A5
; ---------------------------------------------------------------------------

loc_5389:				; CODE XREF: sub_532D+4Cj
		call	sub_524D
		jmp	short loc_53A5
; ---------------------------------------------------------------------------

loc_538E:				; CODE XREF: sub_532D+25j
		push	dx
		push	ax
		push	cs
		call	near ptr sub_51D0
		add	sp, 4
		jmp	short loc_53A5
; ---------------------------------------------------------------------------

loc_5399:				; CODE XREF: sub_532D+2Bj
		push	bx
		push	ax
		push	cs
		call	near ptr sub_5093
		add	sp, 4

loc_53A2:				; CODE XREF: sub_532D+33j sub_532D+39j
		xor	ax, ax
		cwd

loc_53A5:				; CODE XREF: sub_532D+55j sub_532D+5Aj ...
		mov	ds, cs:word_4F59
		pop	di
		pop	si
		pop	bp
		retf
sub_532D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_53AE	proc near		; CODE XREF: __brk+31p	__sbrk+74p

newsize		= word ptr -2
arg_0		= word ptr  4
arg_2		= word ptr  6

		push	bp
		mov	bp, sp
		sub	sp, 2
		push	si
		push	di
		mov	ax, [bp+arg_2]
		inc	ax
		mov	[bp+newsize], ax
		mov	ax, segx
		sub	[bp+newsize], ax
		mov	ax, [bp+newsize]
		add	ax, 3Fh	; '?'
		mov	cl, 6
		shr	ax, cl
		mov	[bp+newsize], ax
		cmp	ax, word_23C84
		jz	short loc_5412
		mov	cl, 6
		shl	[bp+newsize], cl
		mov	dx, word_213CE
		mov	ax, [bp+newsize]
		add	ax, segx
		cmp	ax, dx
		jbe	short loc_53F3
		mov	ax, dx
		sub	ax, segx
		mov	[bp+newsize], ax

loc_53F3:				; CODE XREF: sub_53AE+3Aj
		push	[bp+newsize]	; newsize
		push	segx		; segx
		nop
		push	cs
		call	near ptr _setblock
		pop	cx
		pop	cx
		mov	dx, ax
		cmp	dx, 0FFFFh
		jnz	short loc_5424
		mov	ax, [bp+newsize]
		mov	cl, 6
		shr	ax, cl
		mov	word_23C84, ax

loc_5412:				; CODE XREF: sub_53AE+26j
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		mov	word_213CA, dx
		mov	word_213C8, ax
		mov	ax, 1
		jmp	short loc_5434
; ---------------------------------------------------------------------------

loc_5424:				; CODE XREF: sub_53AE+58j
		mov	ax, segx
		add	ax, dx
		mov	word_213CE, ax
		mov	word_213CC, 0
		xor	ax, ax

loc_5434:				; CODE XREF: sub_53AE+74j
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn	4
sub_53AE	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__brk		proc near		; CODE XREF: sub_4F5F:loc_4FBBp
					; sub_52C9+59p

arg_0		= word ptr  4
arg_2		= word ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	cx, word_213C6
		mov	bx, word_213C4
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		call	N_PCMP@
		jb	short loc_5474
		mov	cx, word_213CE
		mov	bx, word_213CC
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		call	N_PCMP@
		ja	short loc_5474
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	sub_53AE
		or	ax, ax
		jnz	short loc_5479

loc_5474:				; CODE XREF: __brk+16j	__brk+29j
		mov	ax, 0FFFFh
		jmp	short loc_547B
; ---------------------------------------------------------------------------

loc_5479:				; CODE XREF: __brk+36j
		xor	ax, ax

loc_547B:				; CODE XREF: __brk+3Bj
		pop	di
		pop	si
		pop	bp
		retn
__brk		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__sbrk		proc near		; CODE XREF: sub_50BC+Ap sub_50BC+23p	...

var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  4
arg_2		= word ptr  6

		push	bp
		mov	bp, sp
		sub	sp, 8
		push	si
		push	di
		mov	ax, word_213CA
		xor	dx, dx
		mov	cl, 4
		call	near ptr N_LXLSH@
		add	ax, word_213C8
		adc	dx, 0
		add	ax, [bp+arg_0]
		adc	dx, [bp+arg_2]
		cmp	dx, 0Fh
		jl	short loc_54AA
		jg	short loc_54FA
		cmp	ax, 0FFFFh
		ja	short loc_54FA

loc_54AA:				; CODE XREF: __sbrk+22j
		mov	dx, word_213CA
		mov	ax, word_213C8
		mov	cx, [bp+arg_2]
		mov	bx, [bp+arg_0]
		call	near ptr N_PADD@
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		mov	cx, word_213C6
		mov	bx, word_213C4
		call	N_PCMP@
		jb	short loc_54FA
		mov	cx, word_213CE
		mov	bx, word_213CC
		mov	dx, [bp+var_2]
		mov	ax, [bp+var_4]
		call	N_PCMP@
		ja	short loc_54FA
		mov	dx, word_213CA
		mov	ax, word_213C8
		mov	[bp+var_6], dx
		mov	[bp+var_8], ax
		push	[bp+var_2]
		push	[bp+var_4]
		call	sub_53AE
		or	ax, ax
		jnz	short loc_5502

loc_54FA:				; CODE XREF: __sbrk+24j __sbrk+29j ...
		mov	dx, 0FFFFh
		mov	ax, 0FFFFh
		jmp	short loc_5508
; ---------------------------------------------------------------------------

loc_5502:				; CODE XREF: __sbrk+79j
		mov	dx, [bp+var_6]
		mov	ax, [bp+var_8]

loc_5508:				; CODE XREF: __sbrk+81j
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
__sbrk		endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		push	ax
		push	bx
		push	cx
		push	dx
		push	es
		push	ds
		push	si
		push	di
		push	bp
		mov	bp, seg	dseg
		mov	ds, bp
		mov	bp, sp
		sub	sp, 4
		mov	dx, word_23C92
		mov	ax, word_23C90
		mov	[bp-2],	dx
		mov	[bp-4],	ax
		or	dx, dx
		jnz	short loc_5537
		cmp	ax, 1
		jz	short loc_5574

loc_5537:				; CODE XREF: seg000:5530j
		mov	ax, [bp-4]
		or	ax, [bp-2]
		jz	short loc_554B
		cmp	word ptr [bp-2], 0FFFFh
		jnz	short loc_5555
		cmp	word ptr [bp-4], 0FFFFh
		jnz	short loc_5555

loc_554B:				; CODE XREF: seg000:553Dj
		mov	ax, 1

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; int __fastcall __far sub_554E(int status)
sub_554E	proc far		; CODE XREF: sub_A897+22Fp
					; DATA XREF: dseg:off_21344o
		push	ax		; status
		nop
		push	cs
		call	near ptr __exit
sub_554E	endp

; ---------------------------------------------------------------------------
		pop	cx

loc_5555:				; CODE XREF: seg000:5543j seg000:5549j
		mov	word_23C92, 0
		mov	word_23C90, 0
		push	ss
		lea	ax, [bp+0]
		push	ax
		mov	ax, 7Fh	; ''
		push	ax
		mov	ax, 8
		push	ax
		call	dword ptr [bp-4]
		add	sp, 8

loc_5574:				; CODE XREF: seg000:5535j
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		pop	ds
		pop	es
		pop	dx
		pop	cx
		pop	bx
		pop	ax
		iret
; ---------------------------------------------------------------------------
		push	ax
		push	bx
		push	cx
		push	dx
		push	es
		push	ds
		push	si
		push	di
		push	bp
		mov	bp, seg	dseg
		mov	ds, bp
		mov	bp, sp
		sub	sp, 4
		mov	dx, word_23C92
		mov	ax, word_23C90
		mov	[bp-2],	dx
		mov	[bp-4],	ax
		or	dx, dx
		jnz	short loc_55A9
		cmp	ax, 1
		jz	short loc_55E6

loc_55A9:				; CODE XREF: seg000:55A2j
		mov	ax, [bp-4]
		or	ax, [bp-2]
		jz	short loc_55BD
		cmp	word ptr [bp-2], 0FFFFh
		jnz	short loc_55C7
		cmp	word ptr [bp-4], 0FFFFh
		jnz	short loc_55C7

loc_55BD:				; CODE XREF: seg000:55AFj
		mov	ax, 1
		push	ax
		nop
		push	cs
		call	near ptr __exit
; ---------------------------------------------------------------------------
		pop	cx

loc_55C7:				; CODE XREF: seg000:55B5j seg000:55BBj
		mov	word_23C92, 0
		mov	word_23C90, 0
		push	ss
		lea	ax, [bp+0]
		push	ax
		mov	ax, 7Eh	; '~'
		push	ax
		mov	ax, 8
		push	ax
		call	dword ptr [bp-4]
		add	sp, 8

loc_55E6:				; CODE XREF: seg000:55A7j
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		pop	ds
		pop	es
		pop	dx
		pop	cx
		pop	bx
		pop	ax
		iret
; ---------------------------------------------------------------------------
		push	ax
		push	cx
		push	dx
		push	bx
		push	sp
		push	bp
		push	si
		push	di
		push	ds
		push	es
		mov	bp, seg	dseg
		mov	ds, bp
		mov	bp, sp
		sub	sp, 4
		pushf
		mov	dx, word_23C8A
		mov	ax, word_23C88
		mov	[bp-2],	dx
		mov	[bp-4],	ax
		or	dx, dx
		jnz	short loc_561D
		cmp	ax, 1
		jz	short loc_5662

loc_561D:				; CODE XREF: seg000:5616j
		mov	ax, [bp-4]
		or	ax, [bp-2]
		jz	short loc_5631
		cmp	word ptr [bp-2], 0FFFFh
		jnz	short loc_563B
		cmp	word ptr [bp-4], 0FFFFh
		jnz	short loc_563B

loc_5631:				; CODE XREF: seg000:5623j
		mov	ax, 1
		push	ax
		nop
		push	cs
		call	near ptr __exit
; ---------------------------------------------------------------------------
		pop	cx

loc_563B:				; CODE XREF: seg000:5629j seg000:562Fj
		mov	word_23C8A, 0
		mov	word_23C88, 0
		push	word_2D0E6
		push	word_2D0E4
		mov	ax, 23h	; '#'
		push	ax
		nop
		push	cs
		call	near ptr _setvect
		mov	ax, 2
		push	ax
		call	dword ptr [bp-4]
		add	sp, 8

loc_5662:				; CODE XREF: seg000:561Bj
		popf
		clc
		mov	sp, bp
		pop	es
		pop	ds
		pop	di
		pop	si
		pop	bp
		pop	bx
		pop	bx
		pop	dx
		pop	cx
		pop	ax
		retf

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_5671	proc far		; CODE XREF: seg000:56BAp sub_5778+Cp

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		xor	dx, dx

loc_5678:				; CODE XREF: sub_5671+1Cj
		mov	bx, dx
		mov	al, [bx+2960h]
		mov	ah, 0
		cmp	ax, [bp+arg_0]
		jnz	short loc_5689
		mov	ax, dx
		jmp	short loc_5692
; ---------------------------------------------------------------------------

loc_5689:				; CODE XREF: sub_5671+12j
		inc	dx
		cmp	dx, 6
		jl	short loc_5678
		mov	ax, 0FFFFh

loc_5692:				; CODE XREF: sub_5671+16j
		pop	di
		pop	si
		pop	bp
		retf
sub_5671	endp

; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		sub	sp, 6
		push	si
		push	di
		cmp	byte_23C87, 0
		jnz	short loc_56B6
		mov	word_2D0DE, seg	seg000
		mov	word_2D0DC, 5696h
		mov	byte_23C87, 1

loc_56B6:				; CODE XREF: seg000:56A3j
		push	word ptr [bp+6]
		push	cs
		call	near ptr sub_5671
		pop	cx
		mov	[bp-2],	ax
		cmp	ax, 0FFFFh
		jnz	short loc_56D5
		mov	word_213BE, 13h
		mov	dx, 0FFFFh
		mov	ax, 0FFFFh
		jmp	loc_5772
; ---------------------------------------------------------------------------

loc_56D5:				; CODE XREF: seg000:56C4j
		mov	bx, [bp-2]
		mov	cl, 2
		shl	bx, cl
		mov	dx, [bx+294Ah]
		mov	ax, [bx+2948h]
		mov	[bp-4],	dx
		mov	[bp-6],	ax
		mov	bx, [bp-2]
		shl	bx, cl
		mov	dx, [bp+0Ah]
		mov	ax, [bp+8]
		mov	[bx+294Ah], dx
		mov	[bx+2948h], ax
		cmp	word ptr [bp+6], 2
		jnz	short loc_573F
		cmp	byte_23C86, 0
		jnz	short loc_5720
		mov	ax, 23h	; '#'
		push	ax
		nop
		push	cs
		call	near ptr _getvect
		pop	cx
		mov	word_2D0E6, dx
		mov	word_2D0E4, ax
		mov	byte_23C86, 1

loc_5720:				; CODE XREF: seg000:5708j
		mov	ax, [bp+8]
		or	ax, [bp+0Ah]
		jnz	short loc_5732
		push	word_2D0E6
		push	word_2D0E4
		jmp	short loc_573A
; ---------------------------------------------------------------------------

loc_5732:				; CODE XREF: seg000:5726j
		mov	ax, seg	seg000
		push	ax
		mov	ax, 55F2h
		push	ax

loc_573A:				; CODE XREF: seg000:5730j
		mov	ax, 23h	; '#'
		jmp	short loc_5763
; ---------------------------------------------------------------------------

loc_573F:				; CODE XREF: seg000:5701j
		cmp	word ptr [bp+6], 8
		jnz	short loc_576C
		mov	ax, seg	seg000
		push	ax
		mov	ax, 550Eh
		push	ax
		xor	ax, ax
		push	ax
		nop
		push	cs
		call	near ptr _setvect
		add	sp, 6
		mov	ax, seg	seg000
		push	ax
		mov	ax, 5580h
		push	ax
		mov	ax, 4

loc_5763:				; CODE XREF: seg000:573Dj
		push	ax
		nop
		push	cs
		call	near ptr _setvect
		add	sp, 6

loc_576C:				; CODE XREF: seg000:5743j
		mov	dx, [bp-4]
		mov	ax, [bp-6]

loc_5772:				; CODE XREF: seg000:56D2j
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_5778	proc far		; CODE XREF: _abort+8p

var_6		= dword	ptr -6
var_2		= word ptr -2
arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		sub	sp, 6
		push	si
		push	di
		push	[bp+arg_0]
		push	cs
		call	near ptr sub_5671
		pop	cx
		mov	[bp+var_2], ax
		cmp	ax, 0FFFFh
		jnz	short loc_5795
		mov	ax, 1
		jmp	short loc_5809
; ---------------------------------------------------------------------------

loc_5795:				; CODE XREF: sub_5778+16j
		mov	bx, [bp+var_2]
		mov	cl, 2
		shl	bx, cl
		mov	dx, [bx+294Ah]
		mov	ax, [bx+2948h]
		mov	word ptr [bp+var_6+2], dx
		mov	word ptr [bp+var_6], ax
		or	dx, dx
		jnz	short loc_57B3
		cmp	ax, 1
		jz	short loc_5807

loc_57B3:				; CODE XREF: sub_5778+34j
		mov	ax, word ptr [bp+var_6]
		or	ax, word ptr [bp+var_6+2]
		jnz	short loc_57E2
		mov	ax, [bp+arg_0]
		cmp	ax, 2
		jz	short loc_57CD
		cmp	ax, 16h
		jnz	short loc_57D6
		nop
		push	cs
		call	near ptr sub_4270
; ---------------------------------------------------------------------------

loc_57CD:				; CODE XREF: sub_5778+49j
		xor	ax, ax
		int	23h		; DOS -	CONTROL	"C" EXIT ADDRESS
					; Return: return via RETF 2 with CF set
					; DOS will abort program with errorlevel 0
					; else
					; interrupted DOS call continues
		mov	ax, 4C03h
		int	21h		; DOS -	2+ - QUIT WITH EXIT CODE (EXIT)
					; AL = exit code
; ---------------------------------------------------------------------------

loc_57D6:				; CODE XREF: sub_5778+4Ej
		mov	ax, 1
		push	ax		; status
		nop
		push	cs
		call	near ptr __exit
; ---------------------------------------------------------------------------
		pop	cx
		jmp	short loc_5807
; ---------------------------------------------------------------------------

loc_57E2:				; CODE XREF: sub_5778+41j
		mov	bx, [bp+var_2]
		mov	cl, 2
		shl	bx, cl
		mov	word ptr [bx+294Ah], 0
		mov	word ptr [bx+2948h], 0
		mov	bx, [bp+var_2]
		mov	al, [bx+2966h]
		mov	ah, 0
		push	ax
		push	[bp+arg_0]
		call	[bp+var_6]
		pop	cx
		pop	cx

loc_5807:				; CODE XREF: sub_5778+39j sub_5778+68j
		xor	ax, ax

loc_5809:				; CODE XREF: sub_5778+1Bj
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_5778	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl __far _access(char *pathname, char)
__access	proc far		; CODE XREF: sub_61E5+A8p sub_A80E+72p

pathname	= dword	ptr  6
arg_4		= byte ptr  0Ah

		push	bp
		mov	bp, sp
		push	si
		push	di
		xor	ax, ax
		push	ax		; func
		push	word ptr [bp+pathname+2]
		push	word ptr [bp+pathname] ; pathname
		nop
		push	cs
		call	near ptr __chmod
		add	sp, 6
		mov	dx, ax
		cmp	dx, 0FFFFh
		jnz	short loc_582E
		jmp	short loc_5846
; ---------------------------------------------------------------------------

loc_582E:				; CODE XREF: __access+1Bj
		test	[bp+arg_4], 2
		jz	short loc_5839
		test	dl, 1
		jnz	short loc_583D

loc_5839:				; CODE XREF: __access+23j
		xor	ax, ax
		jmp	short loc_5846
; ---------------------------------------------------------------------------

loc_583D:				; CODE XREF: __access+28j
		mov	word_213BE, 5
		mov	ax, 0FFFFh

loc_5846:				; CODE XREF: __access+1Dj __access+2Cj
		pop	di
		pop	si
		pop	bp
		retf
__access	endp

; ---------------------------------------------------------------------------
		db 50h,	51h, 52h, 53h, 54h, 55h, 56h, 57h, 1Eh,	6, 8Bh
		db 0ECh, 0A1h, 6Ch, 29h, 0Bh, 6, 6Eh, 29h, 75h,	27h, 0BEh
		db 2 dup(0FFh),	1Eh, 0B8h, 0, 63h, 0F8h, 0CDh, 21h, 8Ch
		db 0D8h, 1Fh, 72h, 0Bh,	8Ch, 0DAh, 3Bh,	0C2h, 74h, 5, 83h
		db 0FEh, 0FFh, 75h, 6, 0BEh, 70h, 29h, 0B8h
		dw seg dseg
; ---------------------------------------------------------------------------
		mov	word ptr dword_23CAC, si
		mov	word ptr dword_23CAC+2,	ax
		mov	sp, bp
		pop	es
		pop	ds
		pop	di
		pop	si
		pop	bp
		pop	bx
		pop	bx
		pop	dx
		pop	cx
		pop	ax
		retn

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_5893	proc far		; CODE XREF: sub_58B8+35p
					; sub_5C9D+284p ...

arg_0		= byte ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	al, [bp+arg_0]
		xor	cx, cx
		les	bx, dword_23CAC

loc_58A1:				; CODE XREF: sub_5893+1Dj
		mov	dx, es:[bx]
		or	dx, dx
		jz	short loc_58B3
		cmp	al, dl
		jb	short loc_58B3
		inc	bx
		inc	bx
		cmp	al, dh
		ja	short loc_58A1
		inc	cx

loc_58B3:				; CODE XREF: sub_5893+13j sub_5893+17j
		xchg	ax, cx
		pop	di
		pop	si
		pop	bp
		retf
sub_5893	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_58B8	proc far		; CODE XREF: sub_5C63+23p
					; sub_5C9D+1AEp ...

var_4		= dword	ptr -4
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	si
		push	di
		xor	cx, cx
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax

loc_58CE:				; CODE XREF: sub_58B8+4Fj
		les	bx, [bp+var_4]
		cmp	byte ptr es:[bx], 0
		jnz	short loc_58DB
		xor	cx, cx
		jmp	short loc_5909
; ---------------------------------------------------------------------------

loc_58DB:				; CODE XREF: sub_58B8+1Dj
		cmp	cx, 1
		jnz	short loc_58E5
		mov	cx, 2
		jmp	short loc_58FC
; ---------------------------------------------------------------------------

loc_58E5:				; CODE XREF: sub_58B8+26j
		les	bx, [bp+var_4]
		mov	al, es:[bx]
		push	ax
		push	cs
		call	near ptr sub_5893
		pop	cx
		or	ax, ax
		jz	short loc_58FA
		mov	cx, 1
		jmp	short loc_58FC
; ---------------------------------------------------------------------------

loc_58FA:				; CODE XREF: sub_58B8+3Bj
		xor	cx, cx

loc_58FC:				; CODE XREF: sub_58B8+2Bj sub_58B8+40j
		mov	ax, word ptr [bp+var_4]
		cmp	ax, [bp+arg_4]
		jnb	short loc_5909
		inc	word ptr [bp+var_4]
		jmp	short loc_58CE
; ---------------------------------------------------------------------------

loc_5909:				; CODE XREF: sub_58B8+21j sub_58B8+4Aj
		or	cx, cx
		jnz	short loc_5912
		mov	ax, 1
		jmp	short loc_5914
; ---------------------------------------------------------------------------

loc_5912:				; CODE XREF: sub_58B8+53j
		xor	ax, ax

loc_5914:				; CODE XREF: sub_58B8+58j
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_58B8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int _chmod(const char	*pathname, int func, ...)
__chmod		proc far		; CODE XREF: __access+10p

pathname	= dword	ptr  6
func		= byte ptr  0Ah
arg_6		= word ptr  0Ch

		push	bp
		mov	bp, sp
		push	si
		push	di
		push	ds
		mov	cx, [bp+arg_6]
		mov	ah, 43h	; 'C'
		mov	al, [bp+func]
		lds	dx, [bp+pathname]
		int	21h		; DOS -
		pop	ds
		jb	short loc_5933
		xchg	ax, cx
		jmp	short loc_5937
; ---------------------------------------------------------------------------

loc_5933:				; CODE XREF: __chmod+14j
		push	ax
		call	__IOERROR

loc_5937:				; CODE XREF: __chmod+17j
		pop	di
		pop	si
		pop	bp
		retf
__chmod		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl fflush(FILE *stream)
_fflush		proc far		; CODE XREF: _flushall+2Dp _fseek+Dp ...

var_2		= word ptr -2
stream		= dword	ptr  6

		push	bp
		mov	bp, sp
		sub	sp, 2
		push	si
		push	di
		mov	ax, word ptr [bp+stream]
		or	ax, word ptr [bp+stream+2]
		jnz	short loc_5953
		nop
		push	cs
		call	near ptr _flushall
		jmp	loc_5A04
; ---------------------------------------------------------------------------

loc_5953:				; CODE XREF: _fflush+Ej
		les	bx, [bp+stream]
		mov	ax, es:[bx+12h]
		cmp	ax, word ptr [bp+stream]
		jz	short loc_5962
		jmp	loc_59FF
; ---------------------------------------------------------------------------

loc_5962:				; CODE XREF: _fflush+22j
		les	bx, [bp+stream]
		cmp	word ptr es:[bx], 0
		jl	short loc_59B9
		test	byte ptr es:[bx+2], 8
		jnz	short loc_598A
		mov	dx, es:[bx+0Eh]
		mov	ax, word ptr [bp+stream]
		add	ax, 5
		cmp	dx, word ptr [bp+stream+2]
		jz	short loc_5984
		jmp	loc_5A04
; ---------------------------------------------------------------------------

loc_5984:				; CODE XREF: _fflush+44j
		cmp	es:[bx+0Ch], ax
		jnz	short loc_5A04

loc_598A:				; CODE XREF: _fflush+35j
		les	bx, [bp+stream]
		mov	word ptr es:[bx], 0
		mov	dx, es:[bx+0Eh]
		mov	ax, word ptr [bp+stream]
		add	ax, 5
		cmp	dx, word ptr [bp+stream+2]
		jnz	short loc_5A04
		cmp	es:[bx+0Ch], ax
		jnz	short loc_5A04
		mov	dx, es:[bx+0Ah]
		mov	ax, es:[bx+8]
		mov	es:[bx+0Eh], dx
		mov	es:[bx+0Ch], ax
		jmp	short loc_5A04
; ---------------------------------------------------------------------------

loc_59B9:				; CODE XREF: _fflush+2Ej
		les	bx, [bp+stream]
		mov	ax, es:[bx+6]
		add	ax, es:[bx]
		inc	ax
		mov	[bp+var_2], ax
		sub	es:[bx], ax
		push	ax		; len
		mov	dx, es:[bx+0Ah]
		mov	ax, es:[bx+8]
		mov	es:[bx+0Eh], dx
		mov	es:[bx+0Ch], ax
		push	dx
		push	ax		; buf
		mov	al, es:[bx+4]
		cbw
		push	ax		; handle
		nop
		push	cs
		call	near ptr ___write
		add	sp, 8
		cmp	ax, [bp+var_2]
		jz	short loc_5A04
		les	bx, [bp+stream]
		test	byte ptr es:[bx+3], 2
		jnz	short loc_5A04
		or	word ptr es:[bx+2], 10h

loc_59FF:				; CODE XREF: _fflush+24j
		mov	ax, 0FFFFh
		jmp	short loc_5A06
; ---------------------------------------------------------------------------

loc_5A04:				; CODE XREF: _fflush+15j _fflush+46j ...
		xor	ax, ax

loc_5A06:				; CODE XREF: _fflush+C7j
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
_fflush		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int flushall(void)
_flushall	proc far		; CODE XREF: ___call_terminate+18p
					; _fflush+12p

var_8		= word ptr -8
var_6		= word ptr -6
stream		= dword	ptr -4

		push	bp
		mov	bp, sp
		sub	sp, 8
		push	si
		push	di
		mov	[bp+var_8], 0
		mov	ax, word_239B8
		mov	[bp+var_6], ax
		mov	word ptr [bp+stream+2],	ds
		mov	word ptr [bp+stream], 24E8h
		jmp	short loc_5A45
; ---------------------------------------------------------------------------

loc_5A29:				; CODE XREF: _flushall+41j
		les	bx, [bp+stream]
		test	byte ptr es:[bx+2], 3
		jz	short loc_5A41
		push	word ptr [bp+stream+2]
		push	bx		; stream
		nop
		push	cs
		call	near ptr _fflush
		pop	cx
		pop	cx
		inc	[bp+var_8]

loc_5A41:				; CODE XREF: _flushall+25j
		add	word ptr [bp+stream], 14h

loc_5A45:				; CODE XREF: _flushall+1Bj
		mov	ax, [bp+var_6]
		dec	[bp+var_6]
		or	ax, ax
		jnz	short loc_5A29
		mov	ax, [bp+var_8]
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
_flushall	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_5A58	proc near		; CODE XREF: _fseek+2Ep _ftell+B9p ...

var_6		= dword	ptr -6
var_2		= word ptr -2
arg_0		= dword	ptr  4

		push	bp
		mov	bp, sp
		sub	sp, 6
		push	si
		push	di
		les	bx, [bp+arg_0]
		cmp	word ptr es:[bx], 0
		jge	short loc_5A75
		mov	cx, es:[bx+6]
		add	cx, es:[bx]
		inc	cx
		mov	ax, cx
		jmp	short loc_5A82
; ---------------------------------------------------------------------------

loc_5A75:				; CODE XREF: sub_5A58+Fj
		les	bx, [bp+arg_0]
		mov	ax, es:[bx]
		cwd
		xor	ax, dx
		sub	ax, dx
		mov	cx, ax

loc_5A82:				; CODE XREF: sub_5A58+1Bj
		mov	[bp+var_2], ax
		les	bx, [bp+arg_0]
		test	byte ptr es:[bx+2], 40h
		jnz	short loc_5AD6
		les	bx, [bp+arg_0]
		mov	dx, es:[bx+0Eh]
		mov	ax, es:[bx+0Ch]
		mov	word ptr [bp+var_6+2], dx
		mov	word ptr [bp+var_6], ax
		cmp	word ptr es:[bx], 0
		jge	short loc_5ACF
		jmp	short loc_5AB7
; ---------------------------------------------------------------------------

loc_5AA8:				; CODE XREF: sub_5A58+64j
		dec	word ptr [bp+var_6]
		les	bx, [bp+var_6]
		cmp	byte ptr es:[bx], 0Ah
		jnz	short loc_5AB7
		inc	[bp+var_2]

loc_5AB7:				; CODE XREF: sub_5A58+4Ej sub_5A58+5Aj
		mov	ax, cx
		dec	cx
		or	ax, ax
		jnz	short loc_5AA8
		jmp	short loc_5AD6
; ---------------------------------------------------------------------------

loc_5AC0:				; CODE XREF: sub_5A58+7Cj
		les	bx, [bp+var_6]
		inc	word ptr [bp+var_6]
		cmp	byte ptr es:[bx], 0Ah
		jnz	short loc_5ACF
		inc	[bp+var_2]

loc_5ACF:				; CODE XREF: sub_5A58+4Cj sub_5A58+72j
		mov	ax, cx
		dec	cx
		or	ax, ax
		jnz	short loc_5AC0

loc_5AD6:				; CODE XREF: sub_5A58+35j sub_5A58+66j
		mov	ax, [bp+var_2]
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn	4
sub_5A58	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl fseek(FILE *stream, __int32 offset, int whence)
_fseek		proc far		; CODE XREF: _setvbuf+68p

stream		= dword	ptr  6
_offset		= dword	ptr  0Ah
fromwhere	= word ptr  0Eh

		push	bp
		mov	bp, sp
		push	si
		push	di
		push	word ptr [bp+stream+2]
		push	word ptr [bp+stream] ; stream
		nop
		push	cs
		call	near ptr _fflush
		pop	cx
		pop	cx
		or	ax, ax
		jz	short loc_5AFC
		mov	ax, 0FFFFh
		jmp	short loc_5B5F
; ---------------------------------------------------------------------------

loc_5AFC:				; CODE XREF: _fseek+14j
		cmp	[bp+fromwhere],	1
		jnz	short loc_5B19
		les	bx, [bp+stream]
		cmp	word ptr es:[bx], 0
		jle	short loc_5B19
		push	word ptr [bp+stream+2]
		push	bx
		call	sub_5A58
		cwd
		sub	word ptr [bp+_offset], ax
		sbb	word ptr [bp+_offset+2],	dx

loc_5B19:				; CODE XREF: _fseek+1Fj _fseek+28j
		les	bx, [bp+stream]
		and	word ptr es:[bx+2], 0FE5Fh
		mov	word ptr es:[bx], 0
		mov	dx, es:[bx+0Ah]
		mov	ax, es:[bx+8]
		mov	es:[bx+0Eh], dx
		mov	es:[bx+0Ch], ax
		push	[bp+fromwhere]	; fromwhere
		push	word ptr [bp+_offset+2]
		push	word ptr [bp+_offset] ; offset
		mov	al, es:[bx+4]
		cbw
		push	ax		; handle
		nop
		push	cs
		call	near ptr _lseek
		add	sp, 8
		cmp	dx, 0FFFFh
		jnz	short loc_5B5D
		cmp	ax, 0FFFFh
		jnz	short loc_5B5D
		mov	ax, 0FFFFh
		jmp	short loc_5B5F
; ---------------------------------------------------------------------------

loc_5B5D:				; CODE XREF: _fseek+70j _fseek+75j
		xor	ax, ax

loc_5B5F:				; CODE XREF: _fseek+19j _fseek+7Aj
		pop	di
		pop	si
		pop	bp
		retf
_fseek		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; __int32 __cdecl ftell(FILE *stream)
_ftell		proc far

var_8		= word ptr -8
var_6		= word ptr -6
_offset		= dword	ptr -4
stream		= dword	ptr  6

		push	bp
		mov	bp, sp
		sub	sp, 8
		push	si
		push	di
		mov	ax, 1
		push	ax		; fromwhere
		xor	ax, ax
		push	ax
		push	ax		; offset
		les	bx, [bp+stream]
		mov	al, es:[bx+4]
		cbw
		push	ax		; handle
		nop
		push	cs
		call	near ptr _lseek
		add	sp, 8
		mov	word ptr [bp+_offset+2],	dx
		mov	word ptr [bp+_offset], ax
		cmp	dx, 0FFFFh
		jnz	short loc_5B97
		cmp	ax, 0FFFFh
		jnz	short loc_5B97
		jmp	loc_5C38
; ---------------------------------------------------------------------------

loc_5B97:				; CODE XREF: _ftell+2Aj _ftell+2Fj
		les	bx, [bp+stream]
		cmp	word ptr es:[bx], 0
		jl	short loc_5BA3
		jmp	loc_5C28
; ---------------------------------------------------------------------------

loc_5BA3:				; CODE XREF: _ftell+3Bj
		mov	al, es:[bx+4]
		cbw
		add	ax, ax
		mov	bx, ax
		test	byte ptr [bx+267Bh], 8
		jz	short loc_5C16
		mov	ax, 2
		push	ax		; fromwhere
		xor	ax, ax
		push	ax
		push	ax		; offset
		mov	bx, word ptr [bp+stream]
		mov	al, es:[bx+4]
		cbw
		push	ax		; handle
		nop
		push	cs
		call	near ptr _lseek
		add	sp, 8
		mov	[bp+var_6], dx
		mov	[bp+var_8], ax
		cmp	dx, 0FFFFh
		jnz	short loc_5BDE
		cmp	ax, 0FFFFh
		jnz	short loc_5BDE
		jmp	short loc_5C3E
; ---------------------------------------------------------------------------

loc_5BDE:				; CODE XREF: _ftell+72j _ftell+77j
		xor	ax, ax
		push	ax		; fromwhere
		push	word ptr [bp+_offset+2]
		push	word ptr [bp+_offset] ; offset
		les	bx, [bp+stream]
		mov	al, es:[bx+4]
		cbw
		push	ax		; handle
		nop
		push	cs
		call	near ptr _lseek
		add	sp, 8
		cmp	dx, 0FFFFh
		jnz	short loc_5C0A
		cmp	ax, 0FFFFh
		jnz	short loc_5C0A
		mov	dx, 0FFFFh
		mov	ax, 0FFFFh
		jmp	short loc_5C3E
; ---------------------------------------------------------------------------

loc_5C0A:				; CODE XREF: _ftell+98j _ftell+9Dj
		mov	dx, [bp+var_6]
		mov	ax, [bp+var_8]
		mov	word ptr [bp+_offset+2],	dx
		mov	word ptr [bp+_offset], ax

loc_5C16:				; CODE XREF: _ftell+4Ej
		push	word ptr [bp+stream+2]
		push	word ptr [bp+stream]
		call	sub_5A58
		cwd
		add	word ptr [bp+_offset], ax
		adc	word ptr [bp+_offset+2],	dx
		jmp	short loc_5C38
; ---------------------------------------------------------------------------

loc_5C28:				; CODE XREF: _ftell+3Dj
		push	word ptr [bp+stream+2]
		push	word ptr [bp+stream]
		call	sub_5A58
		cwd
		sub	word ptr [bp+_offset], ax
		sbb	word ptr [bp+_offset+2],	dx

loc_5C38:				; CODE XREF: _ftell+31j _ftell+C3j
		mov	dx, word ptr [bp+_offset+2]
		mov	ax, word ptr [bp+_offset]

loc_5C3E:				; CODE XREF: _ftell+79j _ftell+A5j
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
_ftell		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_5C44	proc near		; CODE XREF: sub_5C63+Ep sub_5C9D+7Dp	...

arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, [bp+arg_0]
		cmp	ax, 5Ch	; '\'
		jz	short loc_5C56
		cmp	ax, 2Fh	; '/'
		jnz	short loc_5C5B

loc_5C56:				; CODE XREF: sub_5C44+Bj
		mov	ax, 1
		jmp	short loc_5C5D
; ---------------------------------------------------------------------------

loc_5C5B:				; CODE XREF: sub_5C44+10j
		xor	ax, ax

loc_5C5D:				; CODE XREF: sub_5C44+15j
		pop	di
		pop	si
		pop	bp
		retn	2
sub_5C44	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_5C63	proc near		; CODE XREF: sub_5C9D+CDp
					; sub_5C9D+15Bp ...

arg_0		= dword	ptr  4
arg_4		= word ptr  8
arg_6		= word ptr  0Ah

		push	bp
		mov	bp, sp
		push	si
		push	di
		les	bx, [bp+arg_0]
		mov	al, es:[bx]
		mov	ah, 0
		push	ax
		call	sub_5C44
		or	ax, ax
		jz	short loc_5C95
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		push	[bp+arg_6]
		push	[bp+arg_4]
		nop
		push	cs
		call	near ptr sub_58B8
		add	sp, 8
		or	ax, ax
		jz	short loc_5C95
		mov	ax, 1
		jmp	short loc_5C97
; ---------------------------------------------------------------------------

loc_5C95:				; CODE XREF: sub_5C63+13j sub_5C63+2Bj
		xor	ax, ax

loc_5C97:				; CODE XREF: sub_5C63+30j
		pop	di
		pop	si
		pop	bp
		retn	8
sub_5C63	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_5C9D	proc far		; CODE XREF: sub_61E5+10Dp

drive		= word ptr -12h
var_10		= word ptr -10h
var_E		= word ptr -0Eh
src		= dword	ptr -0Ch
dest		= dword	ptr -8
s		= dword	ptr -4
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch
arg_8		= word ptr  0Eh

		push	bp
		mov	bp, sp
		sub	sp, 12h
		push	si
		push	di
		mov	ax, 0A1h ; '¡'
		push	ax
		nop
		push	cs
		call	near ptr sub_51C6
		pop	cx
		mov	word ptr [bp+s+2], dx
		mov	word ptr [bp+s], ax
		or	ax, dx
		jnz	short loc_5CBC
		jmp	loc_5EFF
; ---------------------------------------------------------------------------

loc_5CBC:				; CODE XREF: sub_5C9D+1Aj
		mov	dx, [bp+arg_6]
		mov	ax, [bp+arg_4]
		mov	word ptr [bp+src+2], dx
		mov	word ptr [bp+src], ax
		les	bx, [bp+src]
		mov	al, es:[bx]
		cbw
		mov	bx, ax
		test	byte ptr [bx+2719h], 0Ch
		jz	short loc_5CFC
		mov	bx, word ptr [bp+src]
		cmp	byte ptr es:[bx+1], 3Ah	; ':'
		jnz	short loc_5CFC
		mov	al, es:[bx]
		cbw
		mov	[bp+var_10], ax
		push	ax
		nop
		push	cs
		call	near ptr sub_4BAF
		pop	cx
		add	ax, 0FFC0h
		mov	[bp+drive], ax
		add	word ptr [bp+src], 2
		jmp	short loc_5D12
; ---------------------------------------------------------------------------

loc_5CFC:				; CODE XREF: sub_5C9D+39j sub_5C9D+43j
		push	ss
		lea	ax, [bp+drive]
		push	ax		; drive
		nop
		push	cs
		call	near ptr __dos_getdrive
		pop	cx
		pop	cx
		mov	ax, [bp+drive]
		add	ax, 41h	; 'A'
		dec	ax
		mov	[bp+var_10], ax

loc_5D12:				; CODE XREF: sub_5C9D+5Dj
		les	bx, [bp+src]
		mov	al, es:[bx]
		cbw
		push	ax
		call	sub_5C44
		or	ax, ax
		jnz	short loc_5D7A
		mov	ax, 0A1h ; '¡'
		push	ax		; len
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]	; buf
		push	[bp+drive]	; drive
		nop
		push	cs
		call	near ptr __getdcwd
		add	sp, 8
		or	ax, dx
		jnz	short loc_5D4A
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]
		nop
		push	cs
		call	near ptr sub_5093
		pop	cx
		pop	cx
		jmp	loc_5EFF
; ---------------------------------------------------------------------------

loc_5D4A:				; CODE XREF: sub_5C9D+9Bj
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]	; s
		nop
		push	cs
		call	near ptr _strlen
		pop	cx
		pop	cx
		mov	dx, word ptr [bp+s+2]
		add	ax, word ptr [bp+s]
		mov	word ptr [bp+dest+2], dx
		mov	word ptr [bp+dest], ax
		push	dx
		push	word ptr [bp+s]
		dec	ax
		push	dx
		push	ax
		call	sub_5C63
		or	ax, ax
		jnz	short loc_5D9C
		les	bx, [bp+dest]
		mov	byte ptr es:[bx], 5Ch ;	'\'
		jmp	short loc_5D99
; ---------------------------------------------------------------------------

loc_5D7A:				; CODE XREF: sub_5C9D+82j
		mov	dx, word ptr [bp+s+2]
		mov	ax, word ptr [bp+s]
		mov	word ptr [bp+dest+2], dx
		mov	word ptr [bp+dest], ax
		les	bx, [bp+dest]
		mov	al, byte ptr [bp+var_10]
		mov	es:[bx], al
		inc	word ptr [bp+dest]
		les	bx, [bp+dest]
		mov	byte ptr es:[bx], 3Ah ;	':'

loc_5D99:				; CODE XREF: sub_5C9D+DBj
		inc	word ptr [bp+dest]

loc_5D9C:				; CODE XREF: sub_5C9D+D2j
		push	word ptr [bp+src+2]
		push	word ptr [bp+src] ; src
		push	word ptr [bp+dest+2]
		push	word ptr [bp+dest] ; dest
		nop
		push	cs
		call	near ptr _strcpy
		add	sp, 8
		mov	dx, word ptr [bp+s+2]
		mov	ax, word ptr [bp+s]
		mov	word ptr [bp+dest+2], dx
		mov	word ptr [bp+dest], ax
		mov	word ptr [bp+src+2], dx
		mov	word ptr [bp+src], ax

loc_5DC2:				; CODE XREF: sub_5C9D+28Cj
					; sub_5C9D+298j ...
		les	bx, [bp+src]
		inc	word ptr [bp+src]
		mov	al, es:[bx]
		cbw
		mov	[bp+var_E], ax
		or	ax, ax
		jz	short loc_5DDE
		push	ax
		call	sub_5C44
		or	ax, ax
		jnz	short loc_5DDE
		jmp	loc_5F10
; ---------------------------------------------------------------------------

loc_5DDE:				; CODE XREF: sub_5C9D+134j
					; sub_5C9D+13Cj
		les	bx, [bp+dest]
		cmp	byte ptr es:[bx-1], 2Eh	; '.'
		jnz	short loc_5E05
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]
		mov	ax, word ptr [bp+dest]
		add	ax, 0FFFEh
		push	word ptr [bp+dest+2]
		push	ax
		call	sub_5C63
		or	ax, ax
		jz	short loc_5E05
		sub	word ptr [bp+dest], 2
		jmp	short loc_5E7C
; ---------------------------------------------------------------------------

loc_5E05:				; CODE XREF: sub_5C9D+149j
					; sub_5C9D+160j
		les	bx, [bp+dest]
		cmp	byte ptr es:[bx-1], 2Eh	; '.'
		jnz	short loc_5E7C
		cmp	byte ptr es:[bx-2], 2Eh	; '.'
		jnz	short loc_5E7C
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]
		mov	ax, word ptr [bp+dest]
		add	ax, 0FFFDh
		push	word ptr [bp+dest+2]
		push	ax
		call	sub_5C63
		or	ax, ax
		jz	short loc_5E7C
		sub	word ptr [bp+dest], 3
		les	bx, [bp+dest]
		cmp	byte ptr es:[bx-1], 3Ah	; ':'
		jnz	short loc_5E65
		mov	ax, word ptr [bp+dest]
		dec	ax
		push	word ptr [bp+dest+2]
		push	ax
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]
		nop
		push	cs
		call	near ptr sub_58B8
		add	sp, 8
		or	ax, ax
		jz	short loc_5E65
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]
		nop
		push	cs
		call	near ptr sub_5093
		pop	cx
		pop	cx
		jmp	loc_5EFF
; ---------------------------------------------------------------------------

loc_5E65:				; CODE XREF: sub_5C9D+19Cj
					; sub_5C9D+1B6j ...
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]
		dec	word ptr [bp+dest]
		mov	ax, word ptr [bp+dest]
		push	word ptr [bp+dest+2]
		push	ax
		call	sub_5C63
		or	ax, ax
		jz	short loc_5E65

loc_5E7C:				; CODE XREF: sub_5C9D+166j
					; sub_5C9D+170j ...
		cmp	[bp+var_E], 0
		jz	short loc_5E85
		jmp	loc_5F05
; ---------------------------------------------------------------------------

loc_5E85:				; CODE XREF: sub_5C9D+1E3j
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]
		mov	ax, word ptr [bp+dest]
		dec	ax
		push	word ptr [bp+dest+2]
		push	ax
		call	sub_5C63
		or	ax, ax
		jz	short loc_5E9D
		dec	word ptr [bp+dest]

loc_5E9D:				; CODE XREF: sub_5C9D+1FBj
		les	bx, [bp+dest]
		cmp	byte ptr es:[bx-1], 3Ah	; ':'
		jnz	short loc_5ECB
		mov	ax, word ptr [bp+dest]
		dec	ax
		push	word ptr [bp+dest+2]
		push	ax
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]
		nop
		push	cs
		call	near ptr sub_58B8
		add	sp, 8
		or	ax, ax
		jz	short loc_5ECB
		les	bx, [bp+dest]
		mov	byte ptr es:[bx], 5Ch ;	'\'
		inc	word ptr [bp+dest]

loc_5ECB:				; CODE XREF: sub_5C9D+208j
					; sub_5C9D+222j
		les	bx, [bp+dest]
		mov	byte ptr es:[bx], 0
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]	; s
		nop
		push	cs
		call	near ptr _strlen
		pop	cx
		pop	cx
		inc	ax
		mov	dx, ax
		mov	ax, [bp+arg_0]
		or	ax, [bp+arg_2]
		jnz	short loc_5EED
		jmp	loc_5F71
; ---------------------------------------------------------------------------

loc_5EED:				; CODE XREF: sub_5C9D+24Bj
		cmp	dx, [bp+arg_8]
		jbe	short loc_5F4A
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]
		nop
		push	cs
		call	near ptr sub_5093
		pop	cx
		pop	cx

loc_5EFF:				; CODE XREF: sub_5C9D+1Cj sub_5C9D+AAj ...
		xor	dx, dx
		xor	ax, ax
		jmp	short loc_5F80
; ---------------------------------------------------------------------------

loc_5F05:				; CODE XREF: sub_5C9D+1E5j
		les	bx, [bp+dest]
		mov	al, byte ptr [bp+var_E]
		mov	es:[bx], al
		jmp	short loc_5F44
; ---------------------------------------------------------------------------

loc_5F10:				; CODE XREF: sub_5C9D+13Ej
		les	bx, [bp+dest]
		mov	al, byte ptr [bp+var_E]
		mov	es:[bx], al
		inc	word ptr [bp+dest]
		push	[bp+var_E]
		nop
		push	cs
		call	near ptr sub_5893
		pop	cx
		or	ax, ax
		jnz	short loc_5F2C
		jmp	loc_5DC2
; ---------------------------------------------------------------------------

loc_5F2C:				; CODE XREF: sub_5C9D+28Aj
		les	bx, [bp+src]
		cmp	byte ptr es:[bx], 0
		jnz	short loc_5F38
		jmp	loc_5DC2
; ---------------------------------------------------------------------------

loc_5F38:				; CODE XREF: sub_5C9D+296j
		mov	al, es:[bx]
		les	bx, [bp+dest]
		mov	es:[bx], al
		inc	word ptr [bp+src]

loc_5F44:				; CODE XREF: sub_5C9D+271j
		inc	word ptr [bp+dest]
		jmp	loc_5DC2
; ---------------------------------------------------------------------------

loc_5F4A:				; CODE XREF: sub_5C9D+253j
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]	; src
		push	[bp+arg_2]
		push	[bp+arg_0]	; dest
		nop
		push	cs
		call	near ptr _strcpy
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]
		nop
		push	cs
		call	near ptr sub_5093
		add	sp, 0Ch
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		jmp	short loc_5F80
; ---------------------------------------------------------------------------

loc_5F71:				; CODE XREF: sub_5C9D+24Dj
		push	dx
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]
		nop
		push	cs
		call	near ptr sub_532D
		add	sp, 6

loc_5F80:				; CODE XREF: sub_5C9D+266j
					; sub_5C9D+2D2j
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_5C9D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; char *__cdecl	_getdcwd(int drive, char *buf, int len)
__getdcwd	proc far		; CODE XREF: sub_5C9D+93p sub_61E5+17p

src		= byte ptr -48h
var_47		= byte ptr -47h
var_46		= byte ptr -46h
var_45		= byte ptr -45h
var_2		= word ptr -2
drive		= word ptr  6
dest		= dword	ptr  8
len		= word ptr  0Ch

		push	bp
		mov	bp, sp
		sub	sp, 48h
		push	si
		push	di
		mov	ax, [bp+drive]
		mov	[bp+var_2], ax
		or	ax, ax
		jnz	short loc_5FA2
		mov	ah, 19h
		int	21h		; DOS -	GET DEFAULT DISK NUMBER
		mov	ah, 0
		inc	ax
		mov	[bp+var_2], ax

loc_5FA2:				; CODE XREF: __getdcwd+10j
		mov	al, byte ptr [bp+var_2]
		add	al, 40h	; '@'
		mov	[bp+src], al
		mov	[bp+var_47], 3Ah ; ':'
		mov	[bp+var_46], 5Ch ; '\'
		push	ds
		mov	ax, ss
		mov	ds, ax
		lea	si, [bp+var_45]
		mov	ah, 47h	; 'G'
		mov	dl, byte ptr [bp+var_2]
		int	21h		; DOS -	2+ - GET CURRENT DIRECTORY
					; DL = drive (0=default, 1=A, etc.)
					; DS:SI	points to 64-byte buffer area
		pop	ds
		jb	short loc_5FFE
		push	ss
		lea	ax, [bp+src]
		push	ax		; s
		nop
		push	cs
		call	near ptr _strlen
		pop	cx
		pop	cx
		cmp	ax, [bp+len]
		jb	short loc_5FDD
		mov	word_213BE, 22h	; '"'
		jmp	short loc_5FFE
; ---------------------------------------------------------------------------

loc_5FDD:				; CODE XREF: __getdcwd+4Dj
		mov	ax, word ptr [bp+dest]
		or	ax, word ptr [bp+dest+2]
		jnz	short loc_6004
		push	[bp+len]
		nop
		push	cs
		call	near ptr sub_51C6
		pop	cx
		mov	word ptr [bp+dest+2], dx
		mov	word ptr [bp+dest], ax
		or	ax, dx
		jnz	short loc_6004
		mov	word_213BE, 8

loc_5FFE:				; CODE XREF: __getdcwd+3Cj
					; __getdcwd+55j
		xor	dx, dx
		xor	ax, ax
		jmp	short loc_601D
; ---------------------------------------------------------------------------

loc_6004:				; CODE XREF: __getdcwd+5Dj
					; __getdcwd+70j
		push	ss
		lea	ax, [bp+src]
		push	ax		; src
		push	word ptr [bp+dest+2]
		push	word ptr [bp+dest] ; dest
		nop
		push	cs
		call	near ptr _strcpy
		add	sp, 8
		mov	dx, word ptr [bp+dest+2]
		mov	ax, word ptr [bp+dest]

loc_601D:				; CODE XREF: __getdcwd+7Cj
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
__getdcwd	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; char *__cdecl	getenv(const char *name)
_getenv		proc far		; CODE XREF: __searchenv+10p
					; sub_A897+126p

var_4		= dword	ptr -4
_name		= dword	ptr  6

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	si
		push	di
		les	di, [bp+_name]
		mov	ax, es
		or	ax, di
		jz	short loc_6054
		mov	al, 0
		mov	ah, es:[di]
		mov	cx, 0FFFFh
		cld
		repne scasb
		not	cx
		dec	cx
		jz	short loc_6054
		les	di, dword_23CD8
		mov	word ptr [bp+var_4+2], es
		mov	bx, es
		or	bx, di
		mov	word ptr [bp+var_4], di
		jnz	short loc_6061

loc_6054:				; CODE XREF: _getenv+Fj _getenv+1Fj ...
		xor	dx, dx
		xor	ax, ax
		jmp	short loc_608D
; ---------------------------------------------------------------------------

loc_605A:				; CODE XREF: _getenv+50j _getenv+58j ...
		add	word ptr [bp+var_4], 4
		les	di, [bp+var_4]

loc_6061:				; CODE XREF: _getenv+2Fj
		les	di, es:[di]
		mov	bx, es
		or	bx, di
		jz	short loc_6054
		mov	al, es:[di]
		or	al, al
		jz	short loc_6054
		cmp	ah, al
		jnz	short loc_605A
		mov	bx, cx
		cmp	byte ptr es:[bx+di], 3Dh ; '='
		jnz	short loc_605A
		push	ds
		lds	si, [bp+_name]
		repe cmpsb
		pop	ds
		xchg	cx, bx
		jnz	short loc_605A
		inc	di
		mov	ax, di
		mov	dx, es

loc_608D:				; CODE XREF: _getenv+35j
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
_getenv		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl memcmp(const void	*s1, const void	*s2, size_t n)
_memcmp		proc far		; CODE XREF: __CurrExcContext+39p

s1		= dword	ptr  6
s2		= dword	ptr  0Ah
n		= word ptr  0Eh

		push	bp
		mov	bp, sp
		push	si
		push	di
		push	ds
		mov	ax, [bp+n]
		mov	cx, ax
		jcxz	short loc_60B4
		lds	si, [bp+s1]
		les	di, [bp+s2]
		cld
		repe cmpsb
		mov	al, [si-1]
		xor	ah, ah
		mov	cl, es:[di-1]
		xor	ch, ch

loc_60B4:				; CODE XREF: _memcmp+Bj
		pop	ds
		sub	ax, cx
		pop	di
		pop	si
		pop	bp
		retf
_memcmp		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; void *__cdecl	memcpy(void *dest, const void *src, size_t n)
_memcpy		proc far		; CODE XREF: _stpcpy+28p sub_789F+223p ...

dest		= dword	ptr  6
src		= dword	ptr  0Ah
n		= word ptr  0Eh

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	dx, ds
		les	di, [bp+dest]
		lds	si, [bp+src]
		mov	cx, [bp+n]
		shr	cx, 1
		cld
		rep movsw
		jnb	short loc_60D3
		movsb

loc_60D3:				; CODE XREF: _memcpy+15j
		mov	ds, dx
		mov	dx, word ptr [bp+dest+2]
		mov	ax, word ptr [bp+dest]
		pop	di
		pop	si
		pop	bp
		retf
_memcpy		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; void __cdecl setmem(void *dest, unsigned int length, char value)
_setmem		proc far		; CODE XREF: _memset+12p

dest		= dword	ptr  6
_length		= word ptr  0Ah
value		= byte ptr  0Ch

		push	bp
		mov	bp, sp
		push	si
		push	di
		les	di, [bp+dest]
		mov	cx, [bp+_length]
		mov	al, [bp+value]
		mov	ah, al
		cld
		test	di, 1
		jz	short loc_60FA
		jcxz	short loc_6101
		stosb
		dec	cx

loc_60FA:				; CODE XREF: _setmem+15j
		shr	cx, 1
		rep stosw
		jnb	short loc_6101
		stosb

loc_6101:				; CODE XREF: _setmem+17j _setmem+1Fj
		pop	di
		pop	si
		pop	bp
		retf
_setmem		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; void *__cdecl	memset(void *s,	int c, size_t n)
_memset		proc far		; CODE XREF: sub_854B+CFp seg004:09DEP

dest		= dword	ptr  6
value		= byte ptr  0Ah
_length		= word ptr  0Ch

		push	bp
		mov	bp, sp
		push	si
		push	di
		push	word ptr [bp+value] ; value
		push	[bp+_length]	; length
		push	word ptr [bp+dest+2]
		push	word ptr [bp+dest] ; dest
		push	cs
		call	near ptr _setmem
		add	sp, 8
		mov	dx, word ptr [bp+dest+2]
		mov	ax, word ptr [bp+dest]
		pop	di
		pop	si
		pop	bp
		retf
_memset		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; void __cdecl movmem(const void *src, void *dest, unsigned int	length)
_movmem		proc far		; CODE XREF: _memmove+15p

src		= dword	ptr  6
dest		= dword	ptr  0Ah
_length		= word ptr  0Eh

		push	bp
		mov	bp, sp
		push	si
		push	di
		push	ds
		mov	cx, word ptr [bp+dest+2]
		mov	bx, word ptr [bp+dest]
		mov	dx, word ptr [bp+src+2]
		mov	ax, word ptr [bp+src]
		call	N_PCMP@
		jnb	short loc_6144
		std
		mov	ax, 1
		jmp	short loc_6147
; ---------------------------------------------------------------------------

loc_6144:				; CODE XREF: _movmem+15j
		cld
		xor	ax, ax

loc_6147:				; CODE XREF: _movmem+1Bj
		lds	si, [bp+src]
		les	di, [bp+dest]
		mov	cx, [bp+_length]
		or	ax, ax
		jz	short loc_615A
		add	si, cx
		dec	si
		add	di, cx
		dec	di

loc_615A:				; CODE XREF: _movmem+2Bj
		test	di, 1
		jz	short loc_6164
		jcxz	short loc_6173
		movsb
		dec	cx

loc_6164:				; CODE XREF: _movmem+37j
		sub	si, ax
		sub	di, ax
		shr	cx, 1
		rep movsw
		jnb	short loc_6173
		add	si, ax
		add	di, ax
		movsb

loc_6173:				; CODE XREF: _movmem+39j _movmem+45j
		cld
		pop	ds
		pop	di
		pop	si
		pop	bp
		retf
_movmem		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; void *__cdecl	memmove(void *dest, const void *src, size_t n)
_memmove	proc far		; CODE XREF: seg004:099AP seg004:09C3P

dest		= dword	ptr  6
src		= dword	ptr  0Ah
_length		= word ptr  0Eh

		push	bp
		mov	bp, sp
		push	si
		push	di
		push	[bp+_length]	; length
		push	word ptr [bp+dest+2]
		push	word ptr [bp+dest] ; dest
		push	word ptr [bp+src+2]
		push	word ptr [bp+src] ; src
		push	cs
		call	near ptr _movmem
		add	sp, 0Ah
		mov	dx, word ptr [bp+dest+2]
		mov	ax, word ptr [bp+dest]
		pop	di
		pop	si
		pop	bp
		retf
_memmove	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; void __cdecl _searchenv(const	char *file, const char *varname, char *pathname)
__searchenv	proc far		; CODE XREF: sub_A80E+43p

var_4		= dword	ptr -4
src		= dword	ptr  6
_name		= dword	ptr  0Ah
pathname	= dword	ptr  0Eh

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	si
		push	di
		push	word ptr [bp+_name+2]
		push	word ptr [bp+_name] ; name
		nop
		push	cs
		call	near ptr _getenv
		pop	cx
		pop	cx
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		or	ax, dx
		jnz	short loc_61C5
		mov	word ptr [bp+var_4+2], ds
		mov	word ptr [bp+var_4], 297Ch

loc_61C5:				; CODE XREF: __searchenv+1Dj
		push	word ptr [bp+pathname+2]
		push	word ptr [bp+pathname] ; pathname
		push	word ptr [bp+var_4+2]
		push	word ptr [bp+var_4] ; __int32
		push	word ptr [bp+src+2]
		push	word ptr [bp+src] ; src
		nop
		push	cs
		call	near ptr sub_61E5
		add	sp, 0Ch
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
__searchenv	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl __far sub_61E5(char *src,	__int32, char *pathname)
sub_61E5	proc far		; CODE XREF: __searchenv+3Bp

var_4		= word ptr -4
var_2		= word ptr -2
src		= dword	ptr  6
arg_4		= dword	ptr  0Ah
pathname	= dword	ptr  0Eh

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	si
		push	di
		mov	ax, 50h	; 'P'
		push	ax		; len
		push	word ptr [bp+pathname+2]
		push	word ptr [bp+pathname] ; buf
		xor	ax, ax
		push	ax		; drive
		nop
		push	cs
		call	near ptr __getdcwd
		add	sp, 8
		or	ax, dx
		jnz	short loc_620A
		xor	dx, dx
		jmp	short loc_6219
; ---------------------------------------------------------------------------

loc_620A:				; CODE XREF: sub_61E5+1Fj
		push	word ptr [bp+pathname+2]
		push	word ptr [bp+pathname] ; s
		nop
		push	cs
		call	near ptr _strlen
		pop	cx
		pop	cx
		mov	dx, ax

loc_6219:				; CODE XREF: sub_61E5+23j sub_61E5+F4j ...
		les	bx, [bp+pathname]
		add	bx, dx
		mov	byte ptr es:[bx], 0
		or	dx, dx
		jz	short loc_626E
		mov	bx, dx
		add	bx, word ptr [bp+pathname]
		mov	bl, es:[bx-1]
		mov	al, bl
		cmp	al, 5Ch	; '\'
		jz	short loc_623F
		cmp	bl, 2Fh	; '/'
		jz	short loc_623F
		cmp	bl, 3Ah	; ':'
		jnz	short loc_625B

loc_623F:				; CODE XREF: sub_61E5+4Ej sub_61E5+53j
		mov	ax, word ptr [bp+pathname]
		add	ax, dx
		dec	ax
		push	word ptr [bp+pathname+2]
		push	ax
		push	word ptr [bp+pathname+2]
		push	word ptr [bp+pathname]
		nop
		push	cs
		call	near ptr sub_58B8
		add	sp, 8
		or	ax, ax
		jnz	short loc_626E

loc_625B:				; CODE XREF: sub_61E5+58j
		push	ds
		mov	ax, 297Eh
		push	ax		; src
		push	word ptr [bp+pathname+2]
		push	word ptr [bp+pathname] ; dest
		nop
		push	cs
		call	near ptr _strcat
		add	sp, 8

loc_626E:				; CODE XREF: sub_61E5+3Fj sub_61E5+74j
		push	word ptr [bp+src+2]
		push	word ptr [bp+src] ; src
		push	word ptr [bp+pathname+2]
		push	word ptr [bp+pathname] ; dest
		nop
		push	cs
		call	near ptr _strcat
		add	sp, 8
		xor	ax, ax
		push	ax		; char
		push	word ptr [bp+pathname+2]
		push	word ptr [bp+pathname] ; pathname
		nop
		push	cs
		call	near ptr __access
		add	sp, 6
		or	ax, ax
		jz	short loc_62E2
		les	bx, [bp+arg_4]
		cmp	byte ptr es:[bx], 0
		jnz	short loc_62A9
		les	bx, [bp+pathname]
		mov	byte ptr es:[bx], 0
		jmp	short loc_6321
; ---------------------------------------------------------------------------

loc_62A9:				; CODE XREF: sub_61E5+B9j
		xor	dx, dx
		jmp	short loc_62C1
; ---------------------------------------------------------------------------

loc_62AD:				; CODE XREF: sub_61E5+E9j
		les	bx, [bp+pathname]
		add	bx, dx
		push	es
		les	si, [bp+arg_4]
		mov	al, es:[si]
		pop	es
		mov	es:[bx], al
		inc	word ptr [bp+arg_4]
		inc	dx

loc_62C1:				; CODE XREF: sub_61E5+C6j
		les	bx, [bp+arg_4]
		cmp	byte ptr es:[bx], 3Bh ;	';'
		jz	short loc_62D0
		cmp	byte ptr es:[bx], 0
		jnz	short loc_62AD

loc_62D0:				; CODE XREF: sub_61E5+E3j
		les	bx, [bp+arg_4]
		cmp	byte ptr es:[bx], 0
		jnz	short loc_62DC
		jmp	loc_6219
; ---------------------------------------------------------------------------

loc_62DC:				; CODE XREF: sub_61E5+F2j
		inc	word ptr [bp+arg_4]
		jmp	loc_6219
; ---------------------------------------------------------------------------

loc_62E2:				; CODE XREF: sub_61E5+B0j
		mov	ax, 50h	; 'P'
		push	ax
		push	word ptr [bp+pathname+2]
		push	word ptr [bp+pathname]
		xor	ax, ax
		push	ax
		push	ax
		nop
		push	cs
		call	near ptr sub_5C9D
		add	sp, 0Ah
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		or	ax, dx
		jz	short loc_6321
		push	[bp+var_2]
		push	[bp+var_4]	; src
		push	word ptr [bp+pathname+2]
		push	word ptr [bp+pathname] ; dest
		nop
		push	cs
		call	near ptr _strcpy
		push	[bp+var_2]
		push	[bp+var_4]
		nop
		push	cs
		call	near ptr sub_5093
		add	sp, 0Ch

loc_6321:				; CODE XREF: sub_61E5+C2j
					; sub_61E5+11Bj
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_61E5	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl setvbuf(FILE *stream, char *buf, int type, size_t	size)
_setvbuf	proc far		; CODE XREF: seg000:4B3Dp sub_4B43+33p

stream		= dword	ptr  6
buf		= word ptr  0Ah
arg_6		= word ptr  0Ch
_type		= word ptr  0Eh
_size		= word ptr  10h

		push	bp
		mov	bp, sp
		push	si
		push	di
		les	bx, [bp+stream]
		mov	ax, es:[bx+12h]
		cmp	ax, word ptr [bp+stream]
		jz	short loc_633B
		jmp	loc_6412
; ---------------------------------------------------------------------------

loc_633B:				; CODE XREF: _setvbuf+Fj
		cmp	[bp+_type], 2
		jle	short loc_6344
		jmp	loc_6412
; ---------------------------------------------------------------------------

loc_6344:				; CODE XREF: _setvbuf+18j
		cmp	[bp+_size], 7FFFh
		jbe	short loc_634E
		jmp	loc_6412
; ---------------------------------------------------------------------------

loc_634E:				; CODE XREF: _setvbuf+22j
		cmp	word_23CC2, 0
		jnz	short loc_6364
		cmp	word ptr [bp+stream], 24FCh
		jnz	short loc_6364
		mov	word_23CC2, 1
		jmp	short loc_6378
; ---------------------------------------------------------------------------

loc_6364:				; CODE XREF: _setvbuf+2Cj _setvbuf+33j
		cmp	word_23CC0, 0
		jnz	short loc_6378
		cmp	word ptr [bp+stream], 24E8h
		jnz	short loc_6378
		mov	word_23CC0, 1

loc_6378:				; CODE XREF: _setvbuf+3Bj _setvbuf+42j ...
		les	bx, [bp+stream]
		cmp	word ptr es:[bx], 0
		jz	short loc_6395
		mov	ax, 1
		push	ax		; whence
		xor	ax, ax
		push	ax
		push	ax		; offset
		push	word ptr [bp+stream+2]
		push	bx		; stream
		nop
		push	cs
		call	near ptr _fseek
		add	sp, 0Ah

loc_6395:				; CODE XREF: _setvbuf+58j
		les	bx, [bp+stream]
		test	byte ptr es:[bx+2], 4
		jz	short loc_63AE
		push	word ptr es:[bx+0Ah]
		push	word ptr es:[bx+8]
		nop
		push	cs
		call	near ptr sub_5093
		pop	cx
		pop	cx

loc_63AE:				; CODE XREF: _setvbuf+76j
		les	bx, [bp+stream]
		and	word ptr es:[bx+2], 0FFF3h
		mov	word ptr es:[bx+6], 0
		mov	dx, word ptr [bp+stream+2]
		mov	ax, word ptr [bp+stream]
		add	ax, 5
		mov	es:[bx+0Ah], dx
		mov	es:[bx+8], ax
		mov	es:[bx+0Eh], dx
		mov	es:[bx+0Ch], ax
		cmp	[bp+_type], 2
		jz	short loc_6442
		cmp	[bp+_size], 0
		jbe	short loc_6442
		mov	word ptr off_2381C+2, seg seg000
		mov	word ptr off_2381C, 6750h
		mov	ax, [bp+buf]
		or	ax, [bp+arg_6]
		jnz	short loc_6417
		push	[bp+_size]
		nop
		push	cs
		call	near ptr sub_51C6
		pop	cx
		mov	[bp+arg_6], dx
		mov	[bp+buf], ax
		or	ax, dx
		jz	short loc_6412
		les	bx, [bp+stream]
		or	word ptr es:[bx+2], 4
		jmp	short loc_6417
; ---------------------------------------------------------------------------

loc_6412:				; CODE XREF: _setvbuf+11j _setvbuf+1Aj ...
		mov	ax, 0FFFFh
		jmp	short loc_6444
; ---------------------------------------------------------------------------

loc_6417:				; CODE XREF: _setvbuf+CCj _setvbuf+E9j
		les	bx, [bp+stream]
		mov	dx, [bp+arg_6]
		mov	ax, [bp+buf]
		mov	es:[bx+0Eh], dx
		mov	es:[bx+0Ch], ax
		mov	es:[bx+0Ah], dx
		mov	es:[bx+8], ax
		mov	ax, [bp+_size]
		mov	es:[bx+6], ax
		cmp	[bp+_type], 1
		jnz	short loc_6442
		or	word ptr es:[bx+2], 8

loc_6442:				; CODE XREF: _setvbuf+B2j _setvbuf+B8j ...
		xor	ax, ax

loc_6444:				; CODE XREF: _setvbuf+EEj
		pop	di
		pop	si
		pop	bp
		retf
_setvbuf	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; char *__cdecl	strcat(char *dest, const char *src)
_strcat		proc far		; CODE XREF: sub_61E5+83p sub_61E5+97p ...

dest		= dword	ptr  6
src		= dword	ptr  0Ah

		push	bp
		mov	bp, sp
		push	si
		push	di
		cld
		push	ds
		les	di, [bp+dest]
		mov	dx, di
		xor	al, al
		mov	cx, 0FFFFh
		repne scasb
		push	es
		lea	si, [di-1]
		les	di, [bp+src]
		mov	cx, 0FFFFh
		repne scasb
		not	cx
		sub	di, cx
		push	es
		pop	ds
		pop	es
		xchg	si, di
		test	si, 1
		jz	short loc_6478
		movsb
		dec	cx

loc_6478:				; CODE XREF: _strcat+2Cj
		shr	cx, 1
		rep movsw
		jnb	short loc_647F
		movsb

loc_647F:				; CODE XREF: _strcat+34j
		xchg	ax, dx
		mov	dx, es
		pop	ds
		pop	di
		pop	si
		pop	bp
		retf
_strcat		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl strcmp(const char	*s1, const char	*s2)
_strcmp		proc far		; CODE XREF: typeinfo::before(typeinfo &)+61p

s1		= dword	ptr  6
s2		= dword	ptr  0Ah

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	dx, ds
		cld
		xor	ax, ax
		mov	bx, ax
		les	di, [bp+s2]
		mov	si, di
		xor	al, al
		mov	cx, 0FFFFh
		repne scasb
		not	cx
		mov	di, si
		lds	si, [bp+s1]
		repe cmpsb
		mov	al, [si-1]
		mov	bl, es:[di-1]
		sub	ax, bx
		mov	ds, dx
		pop	di
		pop	si
		pop	bp
		retf
_strcmp		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; char *__cdecl	strcpy(char *dest, const char *src)
_strcpy		proc far		; CODE XREF: sub_5C9D+10Dp
					; sub_5C9D+2BBp ...

dest		= dword	ptr  6
src		= dword	ptr  0Ah

		push	bp
		mov	bp, sp
		push	si
		push	di
		cld
		les	di, [bp+src]
		mov	si, di
		xor	al, al
		mov	cx, 0FFFFh
		repne scasb
		not	cx
		push	ds
		mov	ax, es
		mov	ds, ax
		les	di, [bp+dest]
		rep movsb
		pop	ds
		mov	dx, word ptr [bp+dest+2]
		mov	ax, word ptr [bp+dest]
		pop	di
		pop	si
		pop	bp
		retf
_strcpy		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl stricmp(const char *s1, const char *s2)
_stricmp	proc far		; CODE XREF: sub_A897+9Cp

s1		= dword	ptr  6
s2		= dword	ptr  0Ah

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	dx, ds
		cld
		lds	si, [bp+s1]
		les	di, [bp+s2]
		xor	ax, ax
		mov	bx, ax
		mov	cx, 617Ah

loc_64F5:				; CODE XREF: _stricmp+1Ej _stricmp+37j
		lodsb
		mov	bl, es:[di]
		or	al, al
		jz	short loc_6519
		scasb
		jz	short loc_64F5
		cmp	al, ch
		jb	short loc_650A
		cmp	al, cl
		ja	short loc_650A
		sub	al, 20h	; ' '

loc_650A:				; CODE XREF: _stricmp+22j _stricmp+26j
		cmp	bl, ch
		jb	short loc_6515
		cmp	bl, cl
		ja	short loc_6515
		sub	bl, 20h	; ' '

loc_6515:				; CODE XREF: _stricmp+2Cj _stricmp+30j
		cmp	al, bl
		jz	short loc_64F5

loc_6519:				; CODE XREF: _stricmp+1Bj
		sub	ax, bx
		mov	ds, dx
		pop	di
		pop	si
		pop	bp
		retf
_stricmp	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; size_t __cdecl strlen(const char *s)
_strlen		proc far		; CODE XREF: _stpcpy+10p __DOSENV+34p	...

s		= dword	ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		les	di, [bp+s]
		xor	ax, ax
		cmp	ax, word ptr [bp+s+2]
		jnz	short loc_6534
		cmp	ax, di
		jz	short loc_653E

loc_6534:				; CODE XREF: _strlen+Dj
		cld
		mov	cx, 0FFFFh
		repne scasb
		xchg	ax, cx
		not	ax
		dec	ax

loc_653E:				; CODE XREF: _strlen+11j
		pop	di
		pop	si
		pop	bp
		retf
_strlen		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl __far sub_6542(char *s, char)
sub_6542	proc far		; CODE XREF: sub_A897+5Ap

var_4		= dword	ptr -4
s		= dword	ptr  6
arg_4		= byte ptr  0Ah

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	si
		push	di
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]	; s
		nop
		push	cs
		call	near ptr _strlen
		pop	cx
		pop	cx
		inc	ax
		mov	cx, ax
		mov	dx, word ptr [bp+s+2]
		mov	ax, word ptr [bp+s]
		add	ax, cx
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		jmp	short loc_6581
; ---------------------------------------------------------------------------

loc_656A:				; CODE XREF: sub_6542+41j
		dec	word ptr [bp+var_4]
		les	bx, [bp+var_4]
		mov	al, es:[bx]
		cmp	al, [bp+arg_4]
		jnz	short loc_6580
		mov	dx, word ptr [bp+var_4+2]
		mov	ax, word ptr [bp+var_4]
		jmp	short loc_6589
; ---------------------------------------------------------------------------

loc_6580:				; CODE XREF: sub_6542+34j
		dec	cx

loc_6581:				; CODE XREF: sub_6542+26j
		or	cx, cx
		jnz	short loc_656A
		xor	dx, dx
		xor	ax, ax

loc_6589:				; CODE XREF: sub_6542+3Cj
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_6542	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl __far __write(int	handle,	void *buf, unsigned int	len)
___write	proc far		; CODE XREF: _fflush+AAp

var_90		= byte ptr -90h
var_E		= dword	ptr -0Eh
var_9		= byte ptr -9
var_8		= word ptr -8
var_6		= dword	ptr -6
var_2		= word ptr -2
handle		= word ptr  6
buf		= dword	ptr  8
len		= word ptr  0Ch

		push	bp
		mov	bp, sp
		sub	sp, 90h
		push	si
		push	di
		mov	ax, [bp+handle]
		cmp	ax, word_239B8
		jb	short loc_65AB
		mov	ax, 6
		push	ax
		call	__IOERROR
		jmp	loc_66EF
; ---------------------------------------------------------------------------

loc_65AB:				; CODE XREF: ___write+10j
		mov	ax, [bp+len]
		inc	ax
		cmp	ax, 2
		jnb	short loc_65B9
		xor	ax, ax
		jmp	loc_66EF
; ---------------------------------------------------------------------------

loc_65B9:				; CODE XREF: ___write+23j
		mov	bx, [bp+handle]
		add	bx, bx
		test	byte ptr [bx+267Bh], 8
		jz	short loc_65D8
		mov	ax, 2
		push	ax		; fromwhere
		xor	ax, ax
		push	ax
		push	ax		; offset
		push	[bp+handle]	; handle
		nop
		push	cs
		call	near ptr _lseek
		add	sp, 8

loc_65D8:				; CODE XREF: ___write+34j
		mov	bx, [bp+handle]
		add	bx, bx
		test	byte ptr [bx+267Bh], 40h
		jnz	short loc_65FB
		push	[bp+len]	; len
		push	word ptr [bp+buf+2]
		push	word ptr [bp+buf] ; buf
		push	[bp+handle]	; handle
		nop
		push	cs
		call	near ptr __rtl_write
		add	sp, 8
		jmp	loc_66EF
; ---------------------------------------------------------------------------

loc_65FB:				; CODE XREF: ___write+53j
		mov	bx, [bp+handle]
		add	bx, bx
		and	word ptr [bx+267Ah], 0FDFFh
		mov	dx, word ptr [bp+buf+2]
		mov	ax, word ptr [bp+buf]
		mov	word ptr [bp+var_E+2], dx
		mov	word ptr [bp+var_E], ax
		mov	ax, [bp+len]
		mov	[bp+var_8], ax
		jmp	short loc_6695
; ---------------------------------------------------------------------------

loc_661A:				; CODE XREF: ___write+116j
		dec	[bp+var_8]
		les	bx, [bp+var_E]
		inc	word ptr [bp+var_E]
		mov	al, es:[bx]
		mov	[bp+var_9], al
		cmp	al, 0Ah
		jnz	short loc_6637
		les	bx, [bp+var_6]
		mov	byte ptr es:[bx], 0Dh
		inc	word ptr [bp+var_6]

loc_6637:				; CODE XREF: ___write+9Cj
		les	bx, [bp+var_6]
		mov	al, [bp+var_9]
		mov	es:[bx], al
		inc	word ptr [bp+var_6]
		lea	ax, [bp+var_90]
		mov	dx, word ptr [bp+var_6]
		xor	bx, bx
		sub	dx, ax
		sbb	bx, 0
		or	bx, bx
		jl	short loc_669F
		jnz	short loc_665D
		cmp	dx, 80h	; ''
		jb	short loc_669F

loc_665D:				; CODE XREF: ___write+C6j
		lea	ax, [bp+var_90]
		mov	dx, word ptr [bp+var_6]
		xor	bx, bx
		sub	dx, ax
		sbb	bx, 0
		mov	[bp+var_2], dx
		push	dx		; len
		push	ss
		push	ax		; buf
		push	[bp+handle]	; handle
		nop
		push	cs
		call	near ptr __rtl_write
		add	sp, 8
		mov	dx, ax
		cmp	ax, [bp+var_2]
		jz	short loc_6695
		cmp	dx, 0FFFFh
		jnz	short loc_668D
		mov	ax, 0FFFFh
		jmp	short loc_66EA
; ---------------------------------------------------------------------------

loc_668D:				; CODE XREF: ___write+F7j
		mov	ax, [bp+len]
		sub	ax, [bp+var_8]
		jmp	short loc_66E5
; ---------------------------------------------------------------------------

loc_6695:				; CODE XREF: ___write+89j ___write+F2j
		lea	ax, [bp+var_90]
		mov	word ptr [bp+var_6+2], ss
		mov	word ptr [bp+var_6], ax

loc_669F:				; CODE XREF: ___write+C4j ___write+CCj
		cmp	[bp+var_8], 0
		jz	short loc_66A8
		jmp	loc_661A
; ---------------------------------------------------------------------------

loc_66A8:				; CODE XREF: ___write+114j
		lea	ax, [bp+var_90]
		mov	dx, word ptr [bp+var_6]
		xor	bx, bx
		sub	dx, ax
		sbb	bx, 0
		mov	[bp+var_2], dx
		mov	ax, dx
		or	ax, ax
		jbe	short loc_66EC
		push	dx		; len
		push	ss
		lea	ax, [bp+var_90]
		push	ax		; buf
		push	[bp+handle]	; handle
		nop
		push	cs
		call	near ptr __rtl_write
		add	sp, 8
		mov	dx, ax
		cmp	ax, [bp+var_2]
		jz	short loc_66EC
		cmp	dx, 0FFFFh
		jnz	short loc_66E2
		mov	ax, 0FFFFh
		jmp	short loc_66EA
; ---------------------------------------------------------------------------

loc_66E2:				; CODE XREF: ___write+14Cj
		mov	ax, [bp+len]

loc_66E5:				; CODE XREF: ___write+104j
		add	ax, dx
		sub	ax, [bp+var_2]

loc_66EA:				; CODE XREF: ___write+FCj
					; ___write+151j
		jmp	short loc_66EF
; ---------------------------------------------------------------------------

loc_66EC:				; CODE XREF: ___write+12Ej
					; ___write+147j
		mov	ax, [bp+len]

loc_66EF:				; CODE XREF: ___write+19j ___write+27j ...
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
___write	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl _rtl_write(int handle, const void	*buf, unsigned int len)
__rtl_write	proc far		; CODE XREF: ___ErrorMessage+20p
					; ___write+63p	...

handle		= word ptr  6
buf		= dword	ptr  8
len		= word ptr  0Ch

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	bx, [bp+handle]
		add	bx, bx
		test	byte ptr [bx+267Ah], 1
		jz	short loc_670C
		mov	ax, 5
		push	ax
		jmp	short loc_672D
; ---------------------------------------------------------------------------

loc_670C:				; CODE XREF: __rtl_write+Fj
		push	ds
		mov	ah, 40h	; '@'
		mov	bx, [bp+handle]
		mov	cx, [bp+len]
		lds	dx, [bp+buf]
		int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
					; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer
		pop	ds
		jb	short loc_672C
		push	ax
		mov	bx, [bp+handle]
		add	bx, bx
		or	word ptr [bx+267Ah], 1000h
		pop	ax
		jmp	short loc_6730
; ---------------------------------------------------------------------------

loc_672C:				; CODE XREF: __rtl_write+26j
		push	ax

loc_672D:				; CODE XREF: __rtl_write+15j
		call	__IOERROR

loc_6730:				; CODE XREF: __rtl_write+35j
		pop	di
		pop	si
		pop	bp
		retf
__rtl_write	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl _write(int handle, const void *buf, unsigned int len)
__write		proc far

handle		= word ptr  6
buf		= dword	ptr  8
len		= word ptr  0Ch

		push	bp
		mov	bp, sp
		push	si
		push	di
		push	[bp+len]	; len
		push	word ptr [bp+buf+2]
		push	word ptr [bp+buf] ; buf
		push	[bp+handle]	; handle
		push	cs
		call	near ptr __rtl_write
		add	sp, 8
		pop	di
		pop	si
		pop	bp
		retf
__write		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__xfflush	proc far

var_6		= word ptr -6
stream		= dword	ptr -4

		push	bp
		mov	bp, sp
		sub	sp, 6
		push	si
		push	di
		mov	[bp+var_6], 4
		mov	word ptr [bp+stream+2],	ds
		mov	word ptr [bp+stream], 24E8h
		jmp	short loc_6783
; ---------------------------------------------------------------------------

loc_6767:				; CODE XREF: __xfflush+37j
		les	bx, [bp+stream]
		test	byte ptr es:[bx+2], 3
		jz	short loc_677C
		push	word ptr [bp+stream+2]
		push	bx		; stream
		nop
		push	cs
		call	near ptr _fflush
		pop	cx
		pop	cx

loc_677C:				; CODE XREF: __xfflush+1Fj
		dec	[bp+var_6]
		add	word ptr [bp+stream], 14h

loc_6783:				; CODE XREF: __xfflush+15j
		cmp	[bp+var_6], 0
		jnz	short loc_6767
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
__xfflush	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; xalloc::xalloc(string	const &, unsigned int)
@xalloc@$bctr$qmx6stringui proc	far	; CODE XREF: string::contains(char *)+39p

arg_0		= dword	ptr  6
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch
arg_8		= word ptr  0Eh

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, word ptr [bp+arg_0]
		or	ax, word ptr [bp+arg_0+2]
		jnz	short loc_67B0
		mov	ax, 6
		push	ax
		nop
		push	cs
		call	near ptr @$bnew$qui ; operator new(uint)
		pop	cx
		mov	word ptr [bp+arg_0+2], dx
		mov	word ptr [bp+arg_0], ax
		or	ax, dx
		jz	short loc_67CE

loc_67B0:				; CODE XREF: xalloc::xalloc(string &,uint)+Bj
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		nop
		push	cs
		call	near ptr @xmsg@$bctr$qmx6string	; xmsg::xmsg(string &)
		add	sp, 8
		les	bx, [bp+arg_0]
		mov	ax, [bp+arg_8]
		mov	es:[bx+4], ax

loc_67CE:				; CODE XREF: xalloc::xalloc(string &,uint)+1Fj
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		add	word ptr es:[bx], 1
		adc	word ptr es:[bx+2], 0
		mov	dx, word ptr [bp+arg_0+2]
		mov	ax, word ptr [bp+arg_0]
		pop	di
		pop	si
		pop	bp
		retf
@xalloc@$bctr$qmx6stringui endp

; ---------------------------------------------------------------------------
		dd byte_68C9
		db 4 dup(0), 0C9h, 68h
		dw seg seg000
		db 4, 0, 0FAh, 0FFh, 6 dup(0), 0EAh, 67h
		dw seg seg000
		db 0DCh, 0FFh, 2 dup(0), 5, 3 dup(0), 0F2h, 67h

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; xalloc::raise(void)
@xalloc@raise$qv proc far		; CODE XREF: TStringRef::TStringRef(char *,uint,char *,uint,uint)+77P
					; sub_20ECA+4DP ...

var_28		= dword	ptr -28h
src		= byte ptr -6
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		sub	sp, 28h
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 6800h
		nop
		push	cs
		call	___InitExceptBlocks
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		push	ax		; int
		push	ax		; int
		mov	ax, 5
		push	ax		; int
		mov	ax, seg	seg000
		push	ax		; int
		mov	ax, 6886h
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		mov	word ptr [bp+var_28+2],	dx
		mov	word ptr [bp+var_28], ax
		push	dx
		push	ax
		push	ss
		lea	ax, [bp+src]
		push	ax
		nop
		push	cs
		call	near ptr @xmsg@$bctr$qmx4xmsg ;	xmsg::xmsg(xmsg	&)
		add	sp, 8
		les	bx, [bp+var_28]
		mov	ax, es:[bx+4]
		mov	[bp+var_2], ax
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		add	word ptr es:[bx], 1
		adc	word ptr es:[bx+2], 0
		lea	ax, [bp+src]
		push	ss
		push	ax		; src
		push	cs		; int
		mov	ax, 68C9h
		push	ax		; int
		nop
		push	cs
		call	near ptr @_ThrowException$qnvt1t1t1uiuiuinuc ; _ThrowException(void *,void *,void *,void *,uint,uint,uint,uchar	*)
		add	sp, 1Ah
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@xalloc@raise$qv endp

; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		push	word ptr [bp+0Ch]
		push	word ptr [bp+0Ah]
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	near ptr @xmsg@$bctr$qmx4xmsg ;	xmsg::xmsg(xmsg	&)
		add	sp, 8
		les	bx, [bp+0Ah]
		mov	ax, es:[bx+4]
		les	bx, [bp+6]
		mov	es:[bx+4], ax
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		add	word ptr es:[bx], 1
		adc	word ptr es:[bx+2], 0
		mov	dx, [bp+8]
		mov	ax, [bp+6]
		pop	di
		pop	si
		pop	bp
		retf
; ---------------------------------------------------------------------------
byte_68C9	db 6, 0, 3, 0, 26h, 0, 2 dup(0FFh), 7, 0, 2Eh, 0, 3Ah
					; DATA XREF: seg000:67EAo
		db 0Dh dup(0), 2, 0, 2,	0, 0Bh,	69h
		dw seg seg000
		db 5, 0, 3Eh, 0, 78h, 61h, 2 dup(6Ch), 6Fh, 63h, 2 dup(0)
		db 58h,	69h
		dw seg seg000
		db 2 dup(0), 3,	0Dh dup(0)
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, [bp+6]
		or	ax, [bp+8]
		jz	short loc_6952
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		sub	word ptr es:[bx], 1
		sbb	word ptr es:[bx+2], 0
		xor	ax, ax
		push	ax
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	near ptr @xmsg@$bdtr$qv	; xmsg::~xmsg(void)
		add	sp, 6
		test	byte ptr [bp+0Ah], 1
		jz	short loc_6950
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	_registerbgidriver
		pop	cx
		pop	cx
		jmp	short loc_6954
; ---------------------------------------------------------------------------

loc_6950:				; CODE XREF: seg000:693Fj
		jmp	short loc_6954
; ---------------------------------------------------------------------------

loc_6952:				; CODE XREF: seg000:6916j
		xor	ax, ax

loc_6954:				; CODE XREF: seg000:694Ej
					; seg000:loc_6950j
		pop	di
		pop	si
		pop	bp
		retf
; ---------------------------------------------------------------------------
		db 4, 0, 3, 0, 26h, 0, 2 dup(0FFh), 3, 0, 2Ch, 0, 30h
		db 0Dh dup(0), 1, 0, 1,	0, 2Ah,	6Bh
		dw seg seg000
		db 5, 0, 34h, 0, 78h, 6Dh, 73h,	67h, 0Eh dup(0), 0FEh
		db 6Ch
		dw seg seg000
		db 87h,	20h, 0FCh, 0FFh, 0Ah dup(0), 0DEh, 0FFh, 2 dup(0)
		db 5, 3	dup(0),	2 dup(0FFh), 6,	0, 5, 3	dup(0),	90h, 69h

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; xmsg::xmsg(string const &)
@xmsg@$bctr$qmx6string proc far		; CODE XREF: xalloc::xalloc(string &,uint)+2Fp
					; string::assert_element(uint)+6AP ...

var_22		= word ptr -22h
var_16		= word ptr -16h
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  6
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

		push	bp
		mov	bp, sp
		sub	sp, 22h
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 699Eh
		nop
		push	cs
		call	___InitExceptBlocks
		mov	ax, word ptr [bp+arg_0]
		or	ax, word ptr [bp+arg_0+2]
		jnz	short loc_69E3
		mov	ax, 4
		push	ax
		nop
		push	cs
		call	near ptr @$bnew$qui ; operator new(uint)
		pop	cx
		mov	word ptr [bp+arg_0+2], dx
		mov	word ptr [bp+arg_0], ax
		or	ax, dx
		jz	short loc_6A35

loc_69E3:				; CODE XREF: xmsg::xmsg(string &)+19j
		mov	ax, 4
		push	ax
		nop
		push	cs
		call	near ptr @$bnew$qui ; operator new(uint)
		pop	cx
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		or	ax, dx
		jz	short loc_6A25
		mov	[bp+var_16], 0Eh
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	dx
		push	[bp+var_4]
		call	@string@$bctr$qmx6string ; string::string(string &)
		add	sp, 8
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		sub	word ptr es:[bx], 1
		sbb	word ptr es:[bx+2], 0
		mov	[bp+var_16], 6

loc_6A25:				; CODE XREF: xmsg::xmsg(string &)+41j
		mov	dx, [bp+var_2]
		mov	ax, [bp+var_4]
		les	bx, [bp+arg_0]
		mov	es:[bx+2], dx
		mov	es:[bx], ax

loc_6A35:				; CODE XREF: xmsg::xmsg(string &)+2Dj
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		add	word ptr es:[bx], 1
		adc	word ptr es:[bx+2], 0
		push	[bp+var_22]
		nop
		push	cs
		call	near ptr ___ExitExceptBlocks
		mov	dx, word ptr [bp+arg_0+2]
		mov	ax, word ptr [bp+arg_0]
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@xmsg@$bctr$qmx6string endp

; ---------------------------------------------------------------------------
		dd byte_6CFE
		db 87h,	20h, 0FCh, 0FFh, 0Ah dup(0), 0DEh, 0FFh, 2 dup(0)
		db 5, 3	dup(0),	2 dup(0FFh), 6,	0, 5, 3	dup(0),	5Bh, 6Ah

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; xmsg::xmsg(xmsg const	&)
@xmsg@$bctr$qmx4xmsg proc far		; CODE XREF: seg000:4802p seg000:48CAp ...

var_22		= word ptr -22h
var_16		= word ptr -16h
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  6
arg_4		= dword	ptr  0Ah

		push	bp
		mov	bp, sp
		sub	sp, 22h
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 6A69h
		nop
		push	cs
		call	___InitExceptBlocks
		mov	ax, word ptr [bp+arg_0]
		or	ax, word ptr [bp+arg_0+2]
		jnz	short loc_6AAE
		mov	ax, 4
		push	ax
		nop
		push	cs
		call	near ptr @$bnew$qui ; operator new(uint)
		pop	cx
		mov	word ptr [bp+arg_0+2], dx
		mov	word ptr [bp+arg_0], ax
		or	ax, dx
		jz	short loc_6B04

loc_6AAE:				; CODE XREF: xmsg::xmsg(xmsg &)+19j
		mov	ax, 4
		push	ax
		nop
		push	cs
		call	near ptr @$bnew$qui ; operator new(uint)
		pop	cx
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		or	ax, dx
		jz	short loc_6AF4
		mov	[bp+var_16], 0Eh
		les	bx, [bp+arg_4]
		push	word ptr es:[bx+2]
		push	word ptr es:[bx]
		push	dx
		push	[bp+var_4]
		call	@string@$bctr$qmx6string ; string::string(string &)
		add	sp, 8
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		sub	word ptr es:[bx], 1
		sbb	word ptr es:[bx+2], 0
		mov	[bp+var_16], 6

loc_6AF4:				; CODE XREF: xmsg::xmsg(xmsg &)+41j
		mov	dx, [bp+var_2]
		mov	ax, [bp+var_4]
		les	bx, [bp+arg_0]
		mov	es:[bx+2], dx
		mov	es:[bx], ax

loc_6B04:				; CODE XREF: xmsg::xmsg(xmsg &)+2Dj
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		add	word ptr es:[bx], 1
		adc	word ptr es:[bx+2], 0
		push	[bp+var_22]
		nop
		push	cs
		call	near ptr ___ExitExceptBlocks
		mov	dx, word ptr [bp+arg_0+2]
		mov	ax, word ptr [bp+arg_0]
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@xmsg@$bctr$qmx4xmsg endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; xmsg::~xmsg(void)
@xmsg@$bdtr$qv	proc far		; CODE XREF: seg000:4999p seg000:4A48p ...

arg_0		= dword	ptr  6
arg_4		= byte ptr  0Ah

		push	bp
		mov	bp, sp
		push	si
		push	di
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		sub	word ptr es:[bx], 1
		sbb	word ptr es:[bx+2], 0
		mov	ax, word ptr [bp+arg_0]
		or	ax, word ptr [bp+arg_0+2]
		jz	short loc_6B84
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		add	word ptr es:[bx], 1
		adc	word ptr es:[bx+2], 0
		mov	ax, 3
		push	ax		; char
		les	bx, [bp+arg_0]
		push	word ptr es:[bx+2]
		push	word ptr es:[bx] ; driver
		call	@string@$bdtr$qv ; string::~string(void)
		add	sp, 6
		test	[bp+arg_4], 1
		jz	short loc_6B84
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		nop
		push	cs		; driver
		call	_registerbgidriver
		pop	cx
		pop	cx

loc_6B84:				; CODE XREF: xmsg::~xmsg(void)+1Dj
					; xmsg::~xmsg(void)+4Bj
		pop	di
		pop	si
		pop	bp
		retf
@xmsg@$bdtr$qv	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
off_6B88	dd byte_6CC6		; DATA XREF: seg000:6B90o
		dd 0
		dd off_6B88
		db 0E2h, 0FFh

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; xmsg::raise(void)
@xmsg@raise$qv	proc far

src		= byte ptr -22h
arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		sub	sp, 22h
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 6B90h
		nop
		push	cs
		call	___InitExceptBlocks
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		push	ax		; int
		push	ax		; int
		mov	ax, 5
		push	ax		; int
		mov	ax, seg	seg000
		push	ax		; int
		mov	ax, 6A7Fh
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		push	[bp+arg_2]
		push	[bp+arg_0]
		push	ss
		lea	ax, [bp+src]
		push	ax
		push	cs
		call	near ptr @xmsg@$bctr$qmx4xmsg ;	xmsg::xmsg(xmsg	&)
		add	sp, 8
		lea	ax, [bp+src]
		push	ss
		push	ax		; src
		push	cs		; int
		mov	ax, 6CC6h
		push	ax		; int
		nop
		push	cs
		call	near ptr @_ThrowException$qnvt1t1t1uiuiuinuc ; _ThrowException(void *,void *,void *,void *,uint,uint,uint,uchar	*)
		add	sp, 1Ah
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@xmsg@raise$qv	endp

; ---------------------------------------------------------------------------
		dd byte_6CFE
		db 87h,	20h, 0FCh, 0FFh, 0Ah dup(0), 0DEh, 0FFh, 2 dup(0)
		db 5, 3	dup(0),	2 dup(0FFh), 6,	0, 5, 3	dup(0),	0E9h, 6Bh

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; xmsg::operator=(xmsg const &)
@xmsg@$basg$qmx4xmsg proc far

var_22		= word ptr -22h
var_16		= word ptr -16h
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  6
arg_4		= dword	ptr  0Ah

		push	bp
		mov	bp, sp
		sub	sp, 22h
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 6BF7h
		nop
		push	cs
		call	___InitExceptBlocks
		mov	dx, word ptr [bp+arg_0+2]
		mov	ax, word ptr [bp+arg_0]
		cmp	dx, word ptr [bp+arg_4+2]
		jnz	short loc_6C30
		cmp	ax, word ptr [bp+arg_4]
		jz	short loc_6CAE

loc_6C30:				; CODE XREF: xmsg::operator=(xmsg &)+1Cj
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		add	word ptr es:[bx], 1
		adc	word ptr es:[bx+2], 0
		mov	ax, 3
		push	ax		; char
		les	bx, [bp+arg_0]
		push	word ptr es:[bx+2]
		push	word ptr es:[bx] ; driver
		call	@string@$bdtr$qv ; string::~string(void)
		add	sp, 6
		mov	ax, 4
		push	ax
		nop
		push	cs
		call	near ptr @$bnew$qui ; operator new(uint)
		pop	cx
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		or	ax, dx
		jz	short loc_6C9E
		mov	[bp+var_16], 0Eh
		les	bx, [bp+arg_4]
		push	word ptr es:[bx+2]
		push	word ptr es:[bx]
		push	dx
		push	[bp+var_4]
		call	@string@$bctr$qmx6string ; string::string(string &)
		add	sp, 8
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		sub	word ptr es:[bx], 1
		sbb	word ptr es:[bx+2], 0
		mov	[bp+var_16], 6

loc_6C9E:				; CODE XREF: xmsg::operator=(xmsg &)+5Dj
		mov	dx, [bp+var_2]
		mov	ax, [bp+var_4]
		les	bx, [bp+arg_0]
		mov	es:[bx+2], dx
		mov	es:[bx], ax

loc_6CAE:				; CODE XREF: xmsg::operator=(xmsg &)+21j
		mov	dx, word ptr [bp+arg_0+2]
		mov	ax, word ptr [bp+arg_0]
		push	dx
		push	ax
		push	[bp+var_22]
		nop
		push	cs
		call	near ptr ___ExitExceptBlocks
		pop	ax
		pop	dx
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@xmsg@$basg$qmx4xmsg endp

; ---------------------------------------------------------------------------
byte_6CC6	db 4, 0, 3, 0, 26h, 0, 2 dup(0FFh), 3, 0, 2Ch, 0, 30h
					; DATA XREF: seg000:off_6B88o
		db 0Dh dup(0), 1, 0, 1,	0, 2Ah,	6Bh
		dw seg seg000
		db 5, 0, 34h, 0, 78h, 6Dh, 73h,	67h, 0Eh dup(0)
byte_6CFE	db 4, 0, 10h, 20h, 0Ah,	0, 11h,	6Dh ; DATA XREF: seg000:6A5Bo
					; seg000:6BE9o
		dw seg seg000
aString		db 'string *',0
		db 4, 0, 3, 0, 26h, 0, 2 dup(0FFh), 3, 0, 2Eh, 0, 32h
		db 0Dh dup(0), 1, 0, 1,	0, 11h,	3
		dw seg seg004
		db 5, 0, 36h, 0, 73h, 74h, 72h,	69h, 6Eh, 67h, 0Eh dup(0)

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

___JumpToCatch__ proc far		; CODE XREF: __ExceptionHandler+261p
		push	si
		push	di
		mov	sp, bx
		mov	bp, cx
		push	dx
		push	ax
		retf
___JumpToCatch__ endp

; ---------------------------------------------------------------------------
		pop	di
		pop	si
		retf

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_6D57	proc far		; CODE XREF: typeinfo::name(void)+11p

arg_0		= dword	ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, word ptr [bp+arg_0]
		or	ax, word ptr [bp+arg_0+2]
		jnz	short loc_6D6B
		mov	dx, ds
		mov	ax, 2986h
		jmp	short loc_6D78
; ---------------------------------------------------------------------------

loc_6D6B:				; CODE XREF: sub_6D57+Bj
		les	bx, [bp+arg_0]
		mov	dx, word ptr [bp+arg_0+2]
		mov	ax, word ptr [bp+arg_0]
		add	ax, es:[bx+4]

loc_6D78:				; CODE XREF: sub_6D57+12j
		pop	di
		pop	si
		pop	bp
		retf
sub_6D57	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_6D7C	proc far		; CODE XREF: sub_6E19+69p
					; sub_6E19+106p ...

var_A		= word ptr -0Ah
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  6
arg_4		= dword	ptr  0Ah

		push	bp
		mov	bp, sp
		sub	sp, 0Ah
		push	si
		push	di
		mov	dx, word ptr [bp+arg_0+2]
		mov	ax, word ptr [bp+arg_0]
		cmp	dx, word ptr [bp+arg_4+2]
		jnz	short loc_6D94
		cmp	ax, word ptr [bp+arg_4]
		jz	short loc_6E10

loc_6D94:				; CODE XREF: sub_6D7C+11j
		les	bx, [bp+arg_0]
		mov	ax, es:[bx+2]
		les	bx, [bp+arg_4]
		cmp	ax, es:[bx+2]
		jnz	short loc_6E08
		les	bx, [bp+arg_0]
		mov	ax, es:[bx]
		les	bx, [bp+arg_4]
		cmp	ax, es:[bx]
		jnz	short loc_6E08
		les	bx, [bp+arg_0]
		mov	ax, es:[bx+2]
		les	bx, [bp+arg_4]
		or	ax, es:[bx+2]
		test	al, 80h
		jnz	short loc_6E08
		les	bx, [bp+arg_0]
		mov	dx, word ptr [bp+arg_0+2]
		mov	ax, word ptr [bp+arg_0]
		add	ax, es:[bx+4]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		les	bx, [bp+arg_4]
		mov	dx, word ptr [bp+arg_4+2]
		mov	ax, word ptr [bp+arg_4]
		add	ax, es:[bx+4]
		mov	word ptr [bp+var_8+2], dx
		mov	word ptr [bp+var_8], ax

loc_6DEA:				; CODE XREF: sub_6D7C+92j
		les	bx, [bp+var_4]
		mov	al, es:[bx]
		cbw
		mov	dx, ax
		inc	word ptr [bp+var_4]
		les	bx, [bp+var_8]
		mov	al, es:[bx]
		cbw
		mov	[bp+var_A], ax
		inc	word ptr [bp+var_8]
		cmp	dx, [bp+var_A]
		jz	short loc_6E0C

loc_6E08:				; CODE XREF: sub_6D7C+26j sub_6D7C+34j ...
		xor	ax, ax
		jmp	short loc_6E13
; ---------------------------------------------------------------------------

loc_6E0C:				; CODE XREF: sub_6D7C+8Aj
		or	dx, dx
		jnz	short loc_6DEA

loc_6E10:				; CODE XREF: sub_6D7C+16j
		mov	ax, 1

loc_6E13:				; CODE XREF: sub_6D7C+8Ej
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_6D7C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_6E19	proc near		; CODE XREF: sub_6E19+9Bp
					; sub_6E19+135p ...

var_A		= dword	ptr -0Ah
var_6		= word ptr -6
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= word ptr  8
arg_6		= word ptr  0Ah
arg_8		= word ptr  0Ch
arg_A		= word ptr  0Eh
arg_C		= word ptr  10h

		push	bp
		mov	bp, sp
		sub	sp, 0Ah
		push	si
		push	di
		les	bx, [bp+arg_0]
		mov	dx, word ptr [bp+arg_0+2]
		mov	ax, word ptr [bp+arg_0]
		add	ax, es:[bx+0Ch]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax

loc_6E34:				; CODE XREF: sub_6E19+ACj
		les	bx, [bp+var_4]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_A+2], dx
		mov	word ptr [bp+var_A], ax
		mov	ax, word ptr [bp+var_A]
		or	ax, word ptr [bp+var_A+2]
		jz	short loc_6EC8
		les	bx, [bp+var_4]
		test	byte ptr es:[bx+6], 8
		jnz	short loc_6EC1
		cmp	[bp+arg_C], 0
		jz	short loc_6E70
		les	bx, [bp+var_4]
		mov	ax, es:[bx+6]
		and	ax, 3
		cmp	ax, 3
		jnz	short loc_6E70
		mov	ax, 1
		jmp	short loc_6E72
; ---------------------------------------------------------------------------

loc_6E70:				; CODE XREF: sub_6E19+41j sub_6E19+50j
		xor	ax, ax

loc_6E72:				; CODE XREF: sub_6E19+55j
		mov	[bp+var_6], ax
		push	word ptr [bp+var_A+2]
		push	word ptr [bp+var_A]
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	cs
		call	near ptr sub_6D7C
		add	sp, 8
		or	ax, ax
		jz	short loc_6E95
		cmp	[bp+var_6], 0
		jz	short loc_6E95
		jmp	loc_6F58
; ---------------------------------------------------------------------------

loc_6E95:				; CODE XREF: sub_6E19+71j sub_6E19+77j
		les	bx, [bp+var_A]
		test	byte ptr es:[bx+8], 4
		jz	short loc_6EC1
		push	[bp+var_6]
		push	[bp+arg_A]
		push	[bp+arg_8]
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	word ptr [bp+var_A+2]
		push	word ptr [bp+var_A]
		call	sub_6E19
		add	sp, 0Eh
		or	ax, ax
		jz	short loc_6EC1
		jmp	loc_6F58
; ---------------------------------------------------------------------------

loc_6EC1:				; CODE XREF: sub_6E19+3Bj sub_6E19+84j ...
		add	word ptr [bp+var_4], 8
		jmp	loc_6E34
; ---------------------------------------------------------------------------

loc_6EC8:				; CODE XREF: sub_6E19+31j
		les	bx, [bp+arg_0]
		mov	dx, word ptr [bp+arg_0+2]
		mov	ax, word ptr [bp+arg_0]
		add	ax, es:[bx+0Ah]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax

loc_6EDB:				; CODE XREF: sub_6E19+148j
		les	bx, [bp+var_4]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_A+2], dx
		mov	word ptr [bp+var_A], ax
		mov	ax, word ptr [bp+var_A]
		or	ax, word ptr [bp+var_A+2]
		jz	short loc_6F64
		cmp	[bp+arg_C], 0
		jz	short loc_6F0D
		les	bx, [bp+var_4]
		mov	ax, es:[bx+6]
		and	ax, 3
		cmp	ax, 3
		jnz	short loc_6F0D
		mov	ax, 1
		jmp	short loc_6F0F
; ---------------------------------------------------------------------------

loc_6F0D:				; CODE XREF: sub_6E19+DEj sub_6E19+EDj
		xor	ax, ax

loc_6F0F:				; CODE XREF: sub_6E19+F2j
		mov	[bp+var_6], ax
		push	word ptr [bp+var_A+2]
		push	word ptr [bp+var_A]
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	cs
		call	near ptr sub_6D7C
		add	sp, 8
		or	ax, ax
		jz	short loc_6F2F
		cmp	[bp+var_6], 0
		jnz	short loc_6F58

loc_6F2F:				; CODE XREF: sub_6E19+10Ej
		les	bx, [bp+var_A]
		test	byte ptr es:[bx+8], 4
		jz	short loc_6F5D
		push	[bp+var_6]
		push	[bp+arg_A]
		push	[bp+arg_8]
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	word ptr [bp+var_A+2]
		push	word ptr [bp+var_A]
		call	sub_6E19
		add	sp, 0Eh
		or	ax, ax
		jz	short loc_6F5D

loc_6F58:				; CODE XREF: sub_6E19+79j sub_6E19+A5j ...
		mov	ax, 1
		jmp	short loc_6F66
; ---------------------------------------------------------------------------

loc_6F5D:				; CODE XREF: sub_6E19+11Ej
					; sub_6E19+13Dj
		add	word ptr [bp+var_4], 8
		jmp	loc_6EDB
; ---------------------------------------------------------------------------

loc_6F64:				; CODE XREF: sub_6E19+D8j
		xor	ax, ax

loc_6F66:				; CODE XREF: sub_6E19+142j
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_6E19	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_6F6C	proc near		; CODE XREF: sub_7175+1Dp sub_7175+5Fp ...

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= word ptr  0Ch
arg_A		= word ptr  0Eh
arg_C		= word ptr  10h

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	si
		push	di
		mov	cx, [bp+arg_8]

loc_6F77:				; CODE XREF: sub_6F6C+119j
		mov	dx, word ptr [bp+arg_0+2]
		mov	ax, word ptr [bp+arg_0]
		cmp	dx, word ptr [bp+arg_4+2]
		jnz	short loc_6F8A
		cmp	ax, word ptr [bp+arg_4]
		jnz	short loc_6F8A
		jmp	loc_709F
; ---------------------------------------------------------------------------

loc_6F8A:				; CODE XREF: sub_6F6C+14j sub_6F6C+19j
		les	bx, [bp+arg_0]
		mov	ax, es:[bx+2]
		mov	[bp+var_2], ax
		les	bx, [bp+arg_4]
		mov	ax, es:[bx+2]
		mov	[bp+var_4], ax
		mov	ax, [bp+var_2]
		and	ax, [bp+var_4]
		test	al, 10h
		jz	short loc_701A
		and	[bp+var_2], 3300h
		and	[bp+var_4], 3300h
		mov	ax, [bp+var_2]
		cmp	ax, [bp+var_4]
		jnz	short loc_6FBD
		jmp	loc_7060
; ---------------------------------------------------------------------------

loc_6FBD:				; CODE XREF: sub_6F6C+4Cj
		or	cx, cx
		jz	short loc_6FC4
		jmp	loc_70D8
; ---------------------------------------------------------------------------

loc_6FC4:				; CODE XREF: sub_6F6C+53j
		mov	ax, [bp+var_2]
		and	ax, 300h
		mov	dx, [bp+var_4]
		and	dx, 300h
		cmp	ax, dx
		jz	short loc_6FFA
		mov	ax, [bp+var_4]
		and	ax, 300h
		not	ax
		and	ax, [bp+var_2]
		test	ah, 3
		jz	short loc_6FE8
		jmp	loc_70D8
; ---------------------------------------------------------------------------

loc_6FE8:				; CODE XREF: sub_6F6C+77j
		or	[bp+var_2], 300h
		or	[bp+var_4], 300h
		mov	ax, [bp+var_2]
		cmp	ax, [bp+var_4]
		jz	short loc_7060

loc_6FFA:				; CODE XREF: sub_6F6C+67j
		mov	ax, [bp+var_2]
		or	ax, 3000h
		mov	dx, [bp+var_4]
		or	dx, 3000h
		cmp	ax, dx
		jz	short loc_700E
		jmp	loc_70D8
; ---------------------------------------------------------------------------

loc_700E:				; CODE XREF: sub_6F6C+9Dj
		test	byte ptr [bp+var_2+1], 10h
		jnz	short loc_7017
		jmp	loc_70D8
; ---------------------------------------------------------------------------

loc_7017:				; CODE XREF: sub_6F6C+A6j
		jmp	loc_709F
; ---------------------------------------------------------------------------

loc_701A:				; CODE XREF: sub_6F6C+3Aj
		mov	ax, [bp+var_2]
		and	ax, [bp+var_4]
		test	ah, 4
		jz	short loc_7088
		les	bx, [bp+arg_0]
		mov	dx, es:[bx+0Ch]
		mov	ax, es:[bx+0Ah]
		les	bx, [bp+arg_4]
		cmp	dx, es:[bx+0Ch]
		jnz	short loc_703F
		cmp	ax, es:[bx+0Ah]
		jz	short loc_7060

loc_703F:				; CODE XREF: sub_6F6C+CBj
		or	cx, cx
		jz	short loc_7046
		jmp	loc_70D8
; ---------------------------------------------------------------------------

loc_7046:				; CODE XREF: sub_6F6C+D5j
		les	bx, [bp+arg_0]
		mov	dx, es:[bx+0Ch]
		mov	ax, es:[bx+0Ah]
		les	bx, [bp+arg_4]
		or	ax, es:[bx+0Ah]
		or	dx, es:[bx+0Ch]
		or	ax, dx
		jnz	short loc_70D8

loc_7060:				; CODE XREF: sub_6F6C+4Ej sub_6F6C+8Cj ...
		mov	cx, 1
		les	bx, [bp+arg_0]
		mov	dx, es:[bx+8]
		mov	ax, es:[bx+6]
		mov	word ptr [bp+arg_0+2], dx
		mov	word ptr [bp+arg_0], ax
		les	bx, [bp+arg_4]
		mov	dx, es:[bx+8]
		mov	ax, es:[bx+6]
		mov	word ptr [bp+arg_4+2], dx
		mov	word ptr [bp+arg_4], ax
		jmp	loc_6F77
; ---------------------------------------------------------------------------

loc_7088:				; CODE XREF: sub_6F6C+B7j
		push	word ptr [bp+arg_4+2]
		push	word ptr [bp+arg_4]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		push	cs
		call	near ptr sub_6D7C
		add	sp, 8
		or	ax, ax
		jz	short loc_70A4

loc_709F:				; CODE XREF: sub_6F6C+1Bj
					; sub_6F6C:loc_7017j
		mov	ax, 1
		jmp	short loc_70DA
; ---------------------------------------------------------------------------

loc_70A4:				; CODE XREF: sub_6F6C+131j
		test	byte ptr [bp+var_2], 2
		jz	short loc_70D8
		test	byte ptr [bp+var_4], 1
		jz	short loc_70D8
		les	bx, [bp+arg_0]
		test	byte ptr es:[bx+8], 4
		jz	short loc_70D8
		mov	ax, 1
		push	ax
		push	[bp+arg_C]
		push	[bp+arg_A]
		push	word ptr [bp+arg_4+2]
		push	word ptr [bp+arg_4]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		call	sub_6E19
		add	sp, 0Eh
		jmp	short loc_70DA
; ---------------------------------------------------------------------------

loc_70D8:				; CODE XREF: sub_6F6C+55j sub_6F6C+79j ...
		xor	ax, ax

loc_70DA:				; CODE XREF: sub_6F6C+136j
					; sub_6F6C+16Aj
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_6F6C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_70E0	proc far		; CODE XREF: sub_789F+10Dp

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	si
		push	di
		push	[bp+arg_0]
		nop
		push	cs
		call	near ptr sub_51C6
		pop	cx
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		mov	ax, [bp+var_4]
		or	ax, [bp+var_2]
		jnz	short loc_7130
		cmp	[bp+arg_0], 80h	; ''
		ja	short loc_7112
		les	bx, ss:16h
		test	byte ptr es:[bx+4], 1
		jz	short loc_7117

loc_7112:				; CODE XREF: sub_70E0+24j
		nop
		push	cs
		call	near ptr _abort
; ---------------------------------------------------------------------------

loc_7117:				; CODE XREF: sub_70E0+30j
		les	bx, ss:16h
		or	word ptr es:[bx+4], 1
		les	bx, ss:16h
		mov	dx, es:[bx+22h]
		mov	ax, es:[bx+20h]
		jmp	short loc_7136
; ---------------------------------------------------------------------------

loc_7130:				; CODE XREF: sub_70E0+1Dj
		mov	dx, [bp+var_2]
		mov	ax, [bp+var_4]

loc_7136:				; CODE XREF: sub_70E0+4Ej
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_70E0	endp

; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		les	bx, ss:16h
		mov	dx, es:[bx+22h]
		mov	ax, es:[bx+20h]
		cmp	dx, [bp+8]
		jnz	short loc_7164
		cmp	ax, [bp+6]
		jnz	short loc_7164
		les	bx, ss:16h
		and	word ptr es:[bx+4], 0FFFEh
		jmp	short loc_7171
; ---------------------------------------------------------------------------

loc_7164:				; CODE XREF: seg000:7151j seg000:7156j
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	near ptr sub_5093
		pop	cx
		pop	cx

loc_7171:				; CODE XREF: seg000:7162j
		pop	di
		pop	si
		pop	bp
		retf

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_7175	proc near		; CODE XREF: sub_8A06+58p
					; __ExceptionHandler+F7p

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  4
arg_4		= word ptr  8
arg_6		= word ptr  0Ah
arg_8		= dword	ptr  0Ch
arg_C		= byte ptr  10h

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	si
		push	di
		push	[bp+arg_6]
		push	[bp+arg_4]
		xor	ax, ax
		push	ax
		push	word ptr [bp+arg_8+2]
		push	word ptr [bp+arg_8]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		call	sub_6F6C
		add	sp, 0Eh
		or	ax, ax
		jz	short loc_719F
		jmp	loc_723B
; ---------------------------------------------------------------------------

loc_719F:				; CODE XREF: sub_7175+25j
		les	bx, [bp+arg_0]
		mov	ax, es:[bx+2]
		mov	[bp+var_2], ax
		les	bx, [bp+arg_8]
		mov	ax, es:[bx+2]
		mov	[bp+var_4], ax
		test	byte ptr [bp+var_4], 20h
		jz	short loc_722F
		push	[bp+arg_6]
		push	[bp+arg_4]
		mov	ax, 1
		push	ax
		les	bx, [bp+arg_8]
		push	word ptr es:[bx+8]
		push	word ptr es:[bx+6]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		call	sub_6F6C
		add	sp, 0Eh
		or	ax, ax
		jnz	short loc_723B
		les	bx, [bp+arg_8]
		mov	dx, es:[bx+8]
		mov	ax, es:[bx+6]
		mov	word ptr [bp+arg_8+2], dx
		mov	word ptr [bp+arg_8], ax
		les	bx, [bp+arg_8]
		mov	ax, es:[bx+2]
		mov	[bp+var_4], ax
		test	byte ptr [bp+var_4], 10h
		jz	short loc_7272
		push	[bp+arg_6]
		push	[bp+arg_4]
		xor	ax, ax
		push	ax
		push	word ptr [bp+arg_8+2]
		push	word ptr [bp+arg_8]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		call	sub_6F6C
		add	sp, 0Eh
		or	ax, ax
		jnz	short loc_723B
		mov	ax, [bp+var_2]
		and	ax, 3000h
		mov	dx, [bp+var_4]
		and	dx, 3000h
		cmp	ax, dx
		jnz	short loc_7272

loc_722F:				; CODE XREF: sub_7175+42j
		test	byte ptr [bp+var_4], 10h
		jz	short loc_7272
		test	[bp+arg_C], 1
		jz	short loc_7240

loc_723B:				; CODE XREF: sub_7175+27j sub_7175+67j ...
		mov	ax, 1
		jmp	short loc_7274
; ---------------------------------------------------------------------------

loc_7240:				; CODE XREF: sub_7175+C4j
		test	byte ptr [bp+var_2], 10h
		jz	short loc_7272
		test	byte ptr [bp+var_2+1], 20h
		jz	short loc_7252
		test	byte ptr [bp+var_4+1], 20h
		jz	short loc_7272

loc_7252:				; CODE XREF: sub_7175+D5j
		test	byte ptr [bp+var_4], 40h
		jz	short loc_7272
		mov	ax, [bp+var_2]
		and	ax, 300h
		mov	dx, [bp+var_4]
		and	dx, 300h
		cmp	ax, dx
		jnz	short loc_726E
		mov	ax, 1
		jmp	short loc_7270
; ---------------------------------------------------------------------------

loc_726E:				; CODE XREF: sub_7175+F2j
		xor	ax, ax

loc_7270:				; CODE XREF: sub_7175+F7j
		jmp	short loc_7274
; ---------------------------------------------------------------------------

loc_7272:				; CODE XREF: sub_7175+88j sub_7175+B8j ...
		xor	ax, ax

loc_7274:				; CODE XREF: sub_7175+C9j
					; sub_7175:loc_7270j
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_7175	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_727A	proc near		; CODE XREF: sub_789F+263p
					; sub_854B+1FDp

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  4
arg_4		= word ptr  8
arg_6		= word ptr  0Ah
arg_8		= dword	ptr  0Ch
arg_C		= word ptr  10h

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	si
		push	di
		les	bx, ss:16h
		mov	ax, es:[bx+6]
		mov	[bp+var_2], ax
		push	ds
		mov	ds, [bp+var_2]
		mov	ax, [bp+arg_C]
		and	ax, 1
		mov	[bp+var_4], ax
		test	byte ptr [bp+arg_C], 4
		jz	short loc_72A5
		or	[bp+var_4], 2

loc_72A5:				; CODE XREF: sub_727A+25j
		test	byte ptr [bp+arg_C], 2
		jz	short loc_72B9
		or	[bp+var_4], 4
		test	byte ptr [bp+arg_C+1], 1
		jnz	short loc_72B9
		or	[bp+var_4], 20h

loc_72B9:				; CODE XREF: sub_727A+2Fj sub_727A+39j
		test	byte ptr [bp+arg_C], 20h
		jz	short loc_72C3
		or	[bp+var_4], 8

loc_72C3:				; CODE XREF: sub_727A+43j
		test	byte ptr [bp+arg_C], 80h
		jz	short loc_72CD
		or	[bp+var_4], 10h

loc_72CD:				; CODE XREF: sub_727A+4Dj
		test	byte ptr [bp+arg_C+1], 10h
		jnz	short loc_72D6
		jmp	loc_745B
; ---------------------------------------------------------------------------

loc_72D6:				; CODE XREF: sub_727A+57j
		mov	bx, [bp+var_4]
		cmp	bx, 17h
		jbe	short loc_72E1
		jmp	loc_7561
; ---------------------------------------------------------------------------

loc_72E1:				; CODE XREF: sub_727A+62j
		add	bx, bx
		jmp	cs:off_7598[bx]

loc_72E8:				; CODE XREF: sub_727A+1EEj
					; DATA XREF: seg000:off_7598o
		push	[bp+arg_4]
		xor	ax, ax
		push	ax
		push	word ptr [bp+arg_0]
		; Hack
		db 0ffh
		db 056h
		db 00ch
		add	sp, 6
		jmp	loc_7561
; ---------------------------------------------------------------------------

loc_72FA:				; CODE XREF: sub_727A+69j
					; sub_727A+1EEj
					; DATA XREF: ...
		push	[bp+arg_4]
		xor	ax, ax
		push	ax
		push	word ptr [bp+arg_0]
		call	[bp+arg_8]
		add	sp, 6
		jmp	loc_7561
; ---------------------------------------------------------------------------

loc_730C:				; CODE XREF: sub_727A+69j
					; sub_727A+1EEj
					; DATA XREF: ...
		push	[bp+arg_6]
		push	[bp+arg_4]
		xor	ax, ax
		push	ax
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		; Hack
		db 0ffh
		db 056h
		db 00ch
		jmp	short loc_7332
; ---------------------------------------------------------------------------

loc_7320:				; CODE XREF: sub_727A+69j
					; sub_727A+1EEj
					; DATA XREF: ...
		push	[bp+arg_6]
		push	[bp+arg_4]
		xor	ax, ax
		push	ax
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		call	[bp+arg_8]

loc_7332:				; CODE XREF: sub_727A+A4j
		add	sp, 0Ah
		jmp	loc_7561
; ---------------------------------------------------------------------------

loc_7338:				; CODE XREF: sub_727A+69j
					; sub_727A+1EEj
					; DATA XREF: ...
		xor	ax, ax
		push	ax
		push	[bp+arg_4]
		push	word ptr [bp+arg_0]
		; Hack
		db 0ffh
		db 056h
		db 00ch
		jmp	loc_7561
; ---------------------------------------------------------------------------

loc_7347:				; CODE XREF: sub_727A+69j
					; sub_727A+1EEj
					; DATA XREF: ...
		xor	ax, ax
		push	ax
		push	[bp+arg_4]
		push	word ptr [bp+arg_0]
		call	[bp+arg_8]
		jmp	loc_7561
; ---------------------------------------------------------------------------

loc_7356:				; CODE XREF: sub_727A+69j
					; sub_727A+1EEj
					; DATA XREF: ...
		xor	ax, ax
		push	ax
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		; Hack
		db 0ffh
		db 056h
		db 00ch
		jmp	short loc_737C
; ---------------------------------------------------------------------------

loc_736A:				; CODE XREF: sub_727A+69j
					; sub_727A+1EEj
					; DATA XREF: ...
		xor	ax, ax
		push	ax
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		call	[bp+arg_8]

loc_737C:				; CODE XREF: sub_727A+EEj
		jmp	loc_7561
; ---------------------------------------------------------------------------

loc_737F:				; CODE XREF: sub_727A+69j
					; sub_727A+1EEj
					; DATA XREF: ...
		mov	dx, word ptr [bp+arg_0]
		mov	bx, [bp+arg_4]
		xor	ax, ax
		push	bx
		pop	bx
		; Hack
		db 0ffh
		db 056h
		db 00ch
		jmp	loc_7561
; ---------------------------------------------------------------------------

loc_738F:				; CODE XREF: sub_727A+69j
					; sub_727A+1EEj
					; DATA XREF: ...
		mov	dx, word ptr [bp+arg_0]
		mov	bx, [bp+arg_4]
		xor	ax, ax

loc_7397:				; CODE XREF: sub_727A+254j
		push	bx
		pop	bx
		call	[bp+arg_8]
		jmp	loc_7561
; ---------------------------------------------------------------------------

loc_739F:				; CODE XREF: sub_727A+69j
					; sub_727A+1EEj
					; DATA XREF: ...
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		xor	ax, ax

loc_73AD:				; CODE XREF: sub_727A+263j
		; Hack
		db 0ffh
		db 056h
		db 00ch
		jmp	short loc_73C3
; ---------------------------------------------------------------------------

loc_73B2:				; CODE XREF: sub_727A+69j
					; sub_727A+1EEj
					; DATA XREF: ...
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		xor	ax, ax

loc_73C0:				; CODE XREF: sub_727A+272j
		call	[bp+arg_8]

loc_73C3:				; CODE XREF: sub_727A+136j
		jmp	loc_7561
; ---------------------------------------------------------------------------

loc_73C6:				; CODE XREF: sub_727A+69j
					; sub_727A+1EEj
					; DATA XREF: ...
		mov	si, word ptr [bp+arg_0]
		push	[bp+arg_4]
		xor	ax, ax
		push	ax
		; Hack
		db 0ffh
		db 056h
		db 00ch
		jmp	short loc_73E0
; ---------------------------------------------------------------------------

loc_73D4:				; CODE XREF: sub_727A+69j
					; sub_727A+1EEj
					; DATA XREF: ...
		mov	si, word ptr [bp+arg_0]
		push	[bp+arg_4]
		xor	ax, ax
		push	ax

loc_73DD:				; CODE XREF: sub_727A+205j
		call	[bp+arg_8]

loc_73E0:				; CODE XREF: sub_727A+158j
					; sub_727A+1FCj
		pop	cx
		pop	cx
		jmp	loc_7561
; ---------------------------------------------------------------------------

loc_73E5:				; CODE XREF: sub_727A+69j
					; sub_727A+1EEj
					; DATA XREF: ...
		push	ds
		lds	si, [bp+arg_0]
		push	[bp+arg_6]
		push	[bp+arg_4]
		xor	ax, ax
		push	ax
		; Hack
		db 0ffh
		db 056h
		db 00ch
		add	sp, 6
		pop	ds
		jmp	loc_7561
; ---------------------------------------------------------------------------

loc_73FC:				; CODE XREF: sub_727A+69j
					; sub_727A+1EEj
					; DATA XREF: ...
		push	ds
		lds	si, [bp+arg_0]
		push	[bp+arg_6]
		push	[bp+arg_4]
		xor	ax, ax
		push	ax
		call	[bp+arg_8]
		add	sp, 6
		pop	ds
		jmp	loc_7561
; ---------------------------------------------------------------------------

loc_7413:				; CODE XREF: sub_727A+69j
					; sub_727A+1EEj
					; DATA XREF: ...
		mov	si, word ptr [bp+arg_0]
		xor	ax, ax
		push	ax
		push	[bp+arg_4]

loc_741C:				; CODE XREF: sub_727A+234j
		; Hack
		db 0ffh
		db 056h
		db 00ch
		jmp	short loc_742D
; ---------------------------------------------------------------------------

loc_7421:				; CODE XREF: sub_727A+69j
					; sub_727A+1EEj
					; DATA XREF: ...
		mov	si, word ptr [bp+arg_0]
		xor	ax, ax
		push	ax
		push	[bp+arg_4]

loc_742A:				; CODE XREF: sub_727A+23Dj
		call	[bp+arg_8]

loc_742D:				; CODE XREF: sub_727A+1A5j
		jmp	loc_7561
; ---------------------------------------------------------------------------

loc_7430:				; CODE XREF: sub_727A+69j
					; sub_727A+1EEj
					; DATA XREF: ...
		push	ds
		lds	si, [bp+arg_0]
		xor	ax, ax
		push	ax
		push	[bp+arg_6]
		push	[bp+arg_4]
		; Hack
		db 0ffh
		db 056h
		db 00ch
		pop	ds
		jmp	loc_7561
; ---------------------------------------------------------------------------

loc_7444:				; CODE XREF: sub_727A+69j
					; sub_727A+1EEj
					; DATA XREF: ...
		push	ds
		lds	si, [bp+arg_0]
		xor	ax, ax
		push	ax
		push	[bp+arg_6]
		push	[bp+arg_4]
		call	[bp+arg_8]
		pop	ds
		jmp	loc_7561
; ---------------------------------------------------------------------------

loc_7458:				; CODE XREF: sub_727A+69j
					; sub_727A+1EEj
					; DATA XREF: ...
		jmp	loc_7561
; ---------------------------------------------------------------------------

loc_745B:				; CODE XREF: sub_727A+59j
		mov	bx, [bp+var_4]
		cmp	bx, 17h
		jbe	short loc_7466
		jmp	loc_7561
; ---------------------------------------------------------------------------

loc_7466:				; CODE XREF: sub_727A+1E7j
		add	bx, bx
		jmp	cs:off_7568[bx]

loc_746D:				; DATA XREF: seg000:off_7568o
		push	[bp+arg_4]
		push	word ptr [bp+arg_0]
		; Hack
		db 0ffh
		db 056h
		db 00ch
		jmp	loc_73E0
; ---------------------------------------------------------------------------

loc_7479:				; CODE XREF: sub_727A+1EEj
					; DATA XREF: seg000:756Ao
		push	[bp+arg_4]
		push	word ptr [bp+arg_0]
		jmp	loc_73DD
; ---------------------------------------------------------------------------

loc_7482:				; CODE XREF: sub_727A+1EEj
					; DATA XREF: seg000:756Co
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		; Hack
		db 0ffh
		db 056h
		db 00ch
		jmp	short loc_74A2
; ---------------------------------------------------------------------------

loc_7493:				; CODE XREF: sub_727A+1EEj
					; DATA XREF: seg000:756Eo
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		call	[bp+arg_8]

loc_74A2:				; CODE XREF: sub_727A+217j
		add	sp, 8
		jmp	loc_7561
; ---------------------------------------------------------------------------

loc_74A8:				; CODE XREF: sub_727A+1EEj
					; DATA XREF: seg000:7570o
		push	[bp+arg_4]
		push	word ptr [bp+arg_0]
		jmp	loc_741C
; ---------------------------------------------------------------------------

loc_74B1:				; CODE XREF: sub_727A+1EEj
					; DATA XREF: seg000:7572o
		push	[bp+arg_4]
		push	word ptr [bp+arg_0]
		jmp	loc_742A
; ---------------------------------------------------------------------------

loc_74BA:				; CODE XREF: sub_727A+1EEj
					; DATA XREF: seg000:7578o
		mov	ax, word ptr [bp+arg_0]
		mov	bx, [bp+arg_4]
		push	bx
		pop	bx
		; Hack
		db 0ffh
		db 056h
		db 00ch
		jmp	loc_7561
; ---------------------------------------------------------------------------

loc_74C8:				; CODE XREF: sub_727A+1EEj
					; DATA XREF: seg000:757Ao
		mov	ax, word ptr [bp+arg_0]
		mov	bx, [bp+arg_4]
		jmp	loc_7397
; ---------------------------------------------------------------------------

loc_74D1:				; CODE XREF: sub_727A+1EEj
					; DATA XREF: seg000:7574o ...
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		jmp	loc_73AD
; ---------------------------------------------------------------------------

loc_74E0:				; CODE XREF: sub_727A+1EEj
					; DATA XREF: seg000:7576o ...
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		jmp	loc_73C0
; ---------------------------------------------------------------------------

loc_74EF:				; CODE XREF: sub_727A+1EEj
					; DATA XREF: seg000:7588o
		mov	si, word ptr [bp+arg_0]
		push	[bp+arg_4]
		; Hack
		db 0ffh
		db 056h
		db 00ch
		pop	cx
		jmp	short loc_7561
; ---------------------------------------------------------------------------

loc_74FB:				; CODE XREF: sub_727A+1EEj
					; DATA XREF: seg000:758Ao
		mov	si, word ptr [bp+arg_0]
		push	[bp+arg_4]
		call	[bp+arg_8]
		pop	cx
		jmp	short loc_7561
; ---------------------------------------------------------------------------

loc_7507:				; CODE XREF: sub_727A+1EEj
					; DATA XREF: seg000:758Co
		push	ds
		lds	si, [bp+arg_0]
		push	[bp+arg_6]
		push	[bp+arg_4]
		; Hack
		db 0ffh
		db 056h
		db 00ch
		pop	cx
		pop	cx
		pop	ds
		jmp	short loc_7561
; ---------------------------------------------------------------------------

loc_7519:				; CODE XREF: sub_727A+1EEj
					; DATA XREF: seg000:758Eo
		push	ds
		lds	si, [bp+arg_0]
		push	[bp+arg_6]
		push	[bp+arg_4]
		call	[bp+arg_8]
		pop	cx
		pop	cx
		pop	ds
		jmp	short loc_7561
; ---------------------------------------------------------------------------

loc_752B:				; CODE XREF: sub_727A+1EEj
					; DATA XREF: seg000:7590o
		mov	si, word ptr [bp+arg_0]
		push	[bp+arg_4]
		; Hack
		db 0ffh
		db 056h
		db 00ch
		jmp	short loc_7561
; ---------------------------------------------------------------------------

loc_7536:				; CODE XREF: sub_727A+1EEj
					; DATA XREF: seg000:7592o
		mov	si, word ptr [bp+arg_0]
		push	[bp+arg_4]
		call	[bp+arg_8]
		jmp	short loc_7561
; ---------------------------------------------------------------------------

loc_7541:				; CODE XREF: sub_727A+1EEj
					; DATA XREF: seg000:7594o
		push	ds
		lds	si, [bp+arg_0]
		push	[bp+arg_6]
		push	[bp+arg_4]
		; Hack
		db 0ffh
		db 056h
		db 00ch
		pop	ds
		jmp	short loc_7561
; ---------------------------------------------------------------------------

loc_7551:				; CODE XREF: sub_727A+1EEj
					; DATA XREF: seg000:7596o
		push	ds
		lds	si, [bp+arg_0]
		push	[bp+arg_6]
		push	[bp+arg_4]
		call	[bp+arg_8]
		pop	ds
		jmp	short $+2

loc_7561:				; CODE XREF: sub_727A+64j sub_727A+7Dj ...
		pop	ds
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_727A	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
off_7568	dw offset loc_746D	; DATA XREF: sub_727A+1EEr
		dw offset loc_7479
		dw offset loc_7482
		dw offset loc_7493
		dw offset loc_74A8
		dw offset loc_74B1
		dw offset loc_74D1
		dw offset loc_74E0
		dw offset loc_74BA
		dw offset loc_74C8
		dw offset loc_74D1
		dw offset loc_74E0
		dw offset loc_7561
		dw offset loc_7561
		dw offset loc_7561
		dw offset loc_7561
		dw offset loc_74EF
		dw offset loc_74FB
		dw offset loc_7507
		dw offset loc_7519
		dw offset loc_752B
		dw offset loc_7536
		dw offset loc_7541
		dw offset loc_7551
off_7598	dw offset loc_72E8	; DATA XREF: sub_727A+69r
		dw offset loc_72FA
		dw offset loc_730C
		dw offset loc_7320
		dw offset loc_7338
		dw offset loc_7347
		dw offset loc_7356
		dw offset loc_736A
		dw offset loc_737F
		dw offset loc_738F
		dw offset loc_739F
		dw offset loc_73B2
		dw offset loc_7458
		dw offset loc_7458
		dw offset loc_7458
		dw offset loc_7458
		dw offset loc_73C6
		dw offset loc_73D4
		dw offset loc_73E5
		dw offset loc_73FC
		dw offset loc_7413
		dw offset loc_7421
		dw offset loc_7430
		dw offset loc_7444

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_75C8	proc near		; CODE XREF: sub_789F+2BCp
					; sub_8257+2Bp	...

var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= word ptr  0Ch
arg_A		= word ptr  0Eh

		push	bp
		mov	bp, sp
		sub	sp, 6
		push	si
		push	di
		cmp	[bp+arg_A], 0
		jz	short loc_75DB
		mov	ax, 2
		jmp	short loc_75DD
; ---------------------------------------------------------------------------

loc_75DB:				; CODE XREF: sub_75C8+Cj
		xor	ax, ax

loc_75DD:				; CODE XREF: sub_75C8+11j
		mov	[bp+var_2], ax
		les	bx, ss:16h
		mov	ax, es:[bx+6]
		mov	[bp+var_4], ax
		push	ds
		mov	ds, [bp+var_4]
		mov	ax, [bp+arg_8]
		and	ax, 1
		mov	[bp+var_6], ax
		test	byte ptr [bp+arg_8], 4
		jz	short loc_7603
		or	[bp+var_6], 2

loc_7603:				; CODE XREF: sub_75C8+35j
		test	byte ptr [bp+arg_8], 2
		jz	short loc_7617
		or	[bp+var_6], 4
		test	byte ptr [bp+arg_8+1], 1
		jnz	short loc_7617
		or	[bp+var_6], 20h

loc_7617:				; CODE XREF: sub_75C8+3Fj sub_75C8+49j
		test	byte ptr [bp+arg_8], 20h
		jz	short loc_7621
		or	[bp+var_6], 8

loc_7621:				; CODE XREF: sub_75C8+53j
		test	byte ptr [bp+arg_8], 80h
		jz	short loc_762B
		or	[bp+var_6], 10h

loc_762B:				; CODE XREF: sub_75C8+5Dj
		mov	bx, [bp+var_6]
		cmp	bx, 17h
		jbe	short loc_7636
		jmp	loc_7749
; ---------------------------------------------------------------------------

loc_7636:				; CODE XREF: sub_75C8+69j
		add	bx, bx
		jmp	cs:off_7750[bx]

loc_763D:				; DATA XREF: seg000:off_7750o
		push	[bp+var_2]
		push	word ptr [bp+arg_0]
		; Hack
		db 0ffh
		db 056h
		db 008h
		pop	cx
		pop	cx
		jmp	loc_7749
; ---------------------------------------------------------------------------

loc_764B:				; CODE XREF: sub_75C8+70j
					; DATA XREF: seg000:7752o
		push	[bp+var_2]
		push	word ptr [bp+arg_0]
		call	[bp+arg_4]
		pop	cx
		pop	cx
		jmp	loc_7749
; ---------------------------------------------------------------------------

loc_7659:				; CODE XREF: sub_75C8+70j
					; DATA XREF: seg000:7754o
		push	[bp+var_2]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		; Hack
		db 0ffh
		db 056h
		db 008h
		add	sp, 6
		jmp	loc_7749
; ---------------------------------------------------------------------------

loc_766B:				; CODE XREF: sub_75C8+70j
					; DATA XREF: seg000:7756o
		push	[bp+var_2]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		call	[bp+arg_4]
		add	sp, 6
		jmp	loc_7749
; ---------------------------------------------------------------------------

loc_767D:				; CODE XREF: sub_75C8+70j
					; DATA XREF: seg000:7758o
		push	[bp+var_2]
		push	word ptr [bp+arg_0]
		; Hack
		db 0ffh
		db 056h
		db 008h
		jmp	short loc_76E3
; ---------------------------------------------------------------------------

loc_7688:				; CODE XREF: sub_75C8+70j
					; DATA XREF: seg000:775Ao
		push	[bp+var_2]
		push	word ptr [bp+arg_0]
		jmp	short loc_76E0
; ---------------------------------------------------------------------------

loc_7690:				; CODE XREF: sub_75C8+70j
					; DATA XREF: seg000:775Co
		push	[bp+var_2]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		; Hack
		db 0ffh
		db 056h
		db 008h
		jmp	short loc_76AA
; ---------------------------------------------------------------------------

loc_769E:				; CODE XREF: sub_75C8+70j
					; DATA XREF: seg000:775Eo
		push	[bp+var_2]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		call	[bp+arg_4]

loc_76AA:				; CODE XREF: sub_75C8+D4j
		jmp	loc_7749
; ---------------------------------------------------------------------------

loc_76AD:				; CODE XREF: sub_75C8+70j
					; DATA XREF: seg000:7760o
		mov	bx, word ptr [bp+arg_0]
		mov	ax, [bp+var_2]
		push	bx
		pop	bx
		; Hack
		db 0ffh
		db 056h
		db 008h
		jmp	loc_7749
; ---------------------------------------------------------------------------

loc_76BB:				; CODE XREF: sub_75C8+70j
					; DATA XREF: seg000:7762o
		mov	bx, word ptr [bp+arg_0]
		mov	ax, [bp+var_2]
		push	bx
		pop	bx
		call	[bp+arg_4]
		jmp	loc_7749
; ---------------------------------------------------------------------------

loc_76C9:				; CODE XREF: sub_75C8+70j
					; DATA XREF: seg000:7764o
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		mov	ax, [bp+var_2]
		; Hack
		db 0ffh
		db 056h
		db 008h
		jmp	short loc_76E3
; ---------------------------------------------------------------------------

loc_76D7:				; CODE XREF: sub_75C8+70j
					; DATA XREF: seg000:7766o
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		mov	ax, [bp+var_2]

loc_76E0:				; CODE XREF: sub_75C8+C6j
		call	[bp+arg_4]

loc_76E3:				; CODE XREF: sub_75C8+BEj
					; sub_75C8+10Dj
		jmp	short loc_7749
; ---------------------------------------------------------------------------

loc_76E5:				; CODE XREF: sub_75C8+70j
					; DATA XREF: seg000:7770o
		mov	si, word ptr [bp+arg_0]
		push	[bp+var_2]
		; Hack
		db 0ffh
		db 056h
		db 008h
		pop	cx
		jmp	short loc_7749
; ---------------------------------------------------------------------------

loc_76F1:				; CODE XREF: sub_75C8+70j
					; DATA XREF: seg000:7772o
		mov	si, word ptr [bp+arg_0]
		push	[bp+var_2]
		call	[bp+arg_4]
		pop	cx
		jmp	short loc_7749
; ---------------------------------------------------------------------------

loc_76FD:				; CODE XREF: sub_75C8+70j
					; DATA XREF: seg000:7774o
		push	ds
		lds	si, [bp+arg_0]
		push	[bp+var_2]
		; Hack
		db 0ffh
		db 056h
		db 008h
		pop	cx
		pop	ds
		jmp	short loc_7749
; ---------------------------------------------------------------------------

loc_770B:				; CODE XREF: sub_75C8+70j
					; DATA XREF: seg000:7776o
		push	ds
		lds	si, [bp+arg_0]
		push	[bp+var_2]
		call	[bp+arg_4]
		pop	cx
		pop	ds
		jmp	short loc_7749
; ---------------------------------------------------------------------------

loc_7719:				; CODE XREF: sub_75C8+70j
					; DATA XREF: seg000:7778o
		mov	si, word ptr [bp+arg_0]
		push	[bp+var_2]
		; Hack
		db 0ffh
		db 056h
		db 008h
		jmp	short loc_7749
; ---------------------------------------------------------------------------

loc_7724:				; CODE XREF: sub_75C8+70j
					; DATA XREF: seg000:777Ao
		mov	si, word ptr [bp+arg_0]
		push	[bp+var_2]
		call	[bp+arg_4]
		jmp	short loc_7749
; ---------------------------------------------------------------------------

loc_772F:				; CODE XREF: sub_75C8+70j
					; DATA XREF: seg000:777Co
		push	ds
		lds	si, [bp+arg_0]
		push	[bp+var_2]
		; Hack
		db 0ffh
		db 056h
		db 008h
		pop	ds
		jmp	short loc_7749
; ---------------------------------------------------------------------------

loc_773C:				; CODE XREF: sub_75C8+70j
					; DATA XREF: seg000:777Eo
		push	ds
		lds	si, [bp+arg_0]
		push	[bp+var_2]
		call	[bp+arg_4]
		pop	ds
		jmp	short $+2

loc_7749:				; CODE XREF: sub_75C8+6Bj sub_75C8+70j ...
		pop	ds
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_75C8	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
off_7750	dw offset loc_763D	; DATA XREF: sub_75C8+70r
		dw offset loc_764B
		dw offset loc_7659
		dw offset loc_766B
		dw offset loc_767D
		dw offset loc_7688
		dw offset loc_7690
		dw offset loc_769E
		dw offset loc_76AD
		dw offset loc_76BB
		dw offset loc_76C9
		dw offset loc_76D7
		dw offset loc_7749
		dw offset loc_7749
		dw offset loc_7749
		dw offset loc_7749
		dw offset loc_76E5
		dw offset loc_76F1
		dw offset loc_76FD
		dw offset loc_770B
		dw offset loc_7719
		dw offset loc_7724
		dw offset loc_772F
		dw offset loc_773C

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_7780	proc near		; CODE XREF: sub_93C7+3CFp

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  4
arg_2		= word ptr  6
arg_4		= dword	ptr  8
arg_8		= word ptr  0Ch

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	si
		push	di
		les	bx, ss:16h
		mov	ax, es:[bx+6]
		mov	[bp+var_2], ax
		push	ds
		mov	ds, [bp+var_2]
		mov	ax, [bp+arg_8]
		and	ax, 1
		mov	[bp+var_4], ax
		test	byte ptr [bp+arg_8], 4
		jz	short loc_77AB
		or	[bp+var_4], 2

loc_77AB:				; CODE XREF: sub_7780+25j
		test	byte ptr [bp+arg_8], 2
		jz	short loc_77B5
		or	[bp+var_4], 4

loc_77B5:				; CODE XREF: sub_7780+2Fj
		test	byte ptr [bp+arg_8], 20h
		jz	short loc_77BF
		or	[bp+var_4], 8

loc_77BF:				; CODE XREF: sub_7780+39j
		mov	bx, [bp+var_4]
		cmp	bx, 0Bh
		ja	short loc_7832
		add	bx, bx
		jmp	cs:off_7839[bx]

loc_77CE:				; DATA XREF: seg000:off_7839o
		push	[bp+arg_0]
		; Hack
		db 0ffh
		db 056h
		db 008h
		pop	cx
		jmp	short loc_7832
; ---------------------------------------------------------------------------

loc_77D7:				; CODE XREF: sub_7780+49j
					; DATA XREF: seg000:783Bo
		push	[bp+arg_0]
		call	[bp+arg_4]
		pop	cx
		jmp	short loc_7832
; ---------------------------------------------------------------------------

loc_77E0:				; CODE XREF: sub_7780+49j
					; DATA XREF: seg000:783Do
		push	[bp+arg_2]
		push	[bp+arg_0]
		; Hack
		db 0ffh
		db 056h
		db 008h
		jmp	short loc_77F4
; ---------------------------------------------------------------------------

loc_77EB:				; CODE XREF: sub_7780+49j
					; DATA XREF: seg000:783Fo
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	[bp+arg_4]

loc_77F4:				; CODE XREF: sub_7780+69j
		pop	cx
		pop	cx
		jmp	short loc_7832
; ---------------------------------------------------------------------------

loc_77F8:				; CODE XREF: sub_7780+49j
					; DATA XREF: seg000:7841o
		push	[bp+arg_0]
		; Hack
		db 0ffh
		db 056h
		db 008h
		jmp	short loc_7806
; ---------------------------------------------------------------------------

loc_7800:				; CODE XREF: sub_7780+49j
					; DATA XREF: seg000:7843o
		push	[bp+arg_0]
		call	[bp+arg_4]

loc_7806:				; CODE XREF: sub_7780+7Ej
		jmp	short loc_7832
; ---------------------------------------------------------------------------

loc_7808:				; CODE XREF: sub_7780+49j
					; DATA XREF: seg000:7849o
		mov	bx, [bp+arg_0]
		push	bx
		pop	bx
		; Hack
		db 0ffh
		db 056h
		db 008h
		jmp	short loc_7832
; ---------------------------------------------------------------------------

loc_7812:				; CODE XREF: sub_7780+49j
					; DATA XREF: seg000:784Bo
		mov	bx, [bp+arg_0]
		push	bx
		pop	bx
		call	[bp+arg_4]
		jmp	short loc_7832
; ---------------------------------------------------------------------------

loc_781C:				; CODE XREF: sub_7780+49j
					; DATA XREF: seg000:7845o ...
		push	[bp+arg_2]
		push	[bp+arg_0]
		; Hack
		db 0ffh
		db 056h
		db 008h
		jmp	short loc_7830
; ---------------------------------------------------------------------------

loc_7827:				; CODE XREF: sub_7780+49j
					; DATA XREF: seg000:7847o ...
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	[bp+arg_4]

loc_7830:				; CODE XREF: sub_7780+A5j
		jmp	short $+2

loc_7832:				; CODE XREF: sub_7780+45j sub_7780+55j ...
		pop	ds
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_7780	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
off_7839	dw offset loc_77CE	; DATA XREF: sub_7780+49r
		dw offset loc_77D7
		dw offset loc_77E0
		dw offset loc_77EB
		dw offset loc_77F8
		dw offset loc_7800
		dw offset loc_781C
		dw offset loc_7827
		dw offset loc_7808
		dw offset loc_7812
		dw offset loc_781C
		dw offset loc_7827
		db 4 dup(0), 0Fh, 7Bh
		dw seg seg000
		db 14h dup(0), 68h, 7Bh
		dw seg seg000
		db 14h dup(0), 0E2h, 0FFh, 2 dup(0), 3,	0, 51h,	78h
		dw seg seg000
		db 2 dup(0), 4,	3 dup(0), 3, 0,	69h, 78h
		dw seg seg000
		db 2 dup(0), 4,	0

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl __far sub_789F(int, int, void *src, int, int, int, int, int, int,	int, int, int, int, int, int)
sub_789F	proc far		; CODE XREF: _ThrowException(void *,void *,void	*,void *,uint,uint,uint,uchar *)+4Dp
					; _ReThrowException(uint,uchar *)+9Ep

var_48		= word ptr -48h
var_46		= word ptr -46h
var_44		= word ptr -44h
var_42		= word ptr -42h
var_40		= word ptr -40h
var_3E		= word ptr -3Eh
var_3C		= word ptr -3Ch
var_3A		= word ptr -3Ah
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= word ptr -2Ch
var_2A		= word ptr -2Ah
n		= word ptr -28h
var_26		= dword	ptr -26h
var_22		= dword	ptr -22h
var_1E		= word ptr -1Eh
var_12		= word ptr -12h
arg_0		= word ptr  6
arg_2		= word ptr  8
src		= dword	ptr  0Ah
arg_8		= word ptr  0Eh
arg_A		= word ptr  10h
arg_C		= word ptr  12h
arg_E		= word ptr  14h
arg_10		= word ptr  16h
arg_12		= word ptr  18h
arg_14		= word ptr  1Ah
arg_16		= word ptr  1Ch
arg_18		= word ptr  1Eh
arg_1A		= word ptr  20h
arg_1C		= word ptr  22h
arg_1E		= word ptr  24h

		push	bp
		mov	bp, sp
		sub	sp, 48h
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 7881h
		nop
		push	cs
		call	___InitExceptBlocks
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		mov	word ptr [bp+var_22+2],	dx
		mov	word ptr [bp+var_22], ax
		les	bx, ss:16h
		mov	word ptr es:[bx+6], ds
		mov	dx, ss:18h
		mov	ax, ss:16h
		add	ax, 28h	; '('
		les	bx, ss:16h
		mov	es:[bx+1Eh], dx
		mov	es:[bx+1Ch], ax
		les	bx, [bp+var_22]
		mov	dx, word ptr [bp+var_22+2]
		mov	ax, word ptr [bp+var_22]
		add	ax, es:[bx+4]
		mov	word ptr [bp+var_34+2],	dx
		mov	word ptr [bp+var_34], ax
		les	bx, ss:16h
		mov	dx, es:[bx+1Eh]
		mov	ax, es:[bx+1Ch]
		mov	word ptr [bp+var_38+2],	dx
		mov	word ptr [bp+var_38], ax
		jmp	short loc_792B
; ---------------------------------------------------------------------------

loc_7908:				; CODE XREF: sub_789F+93j
		les	bx, ss:16h
		mov	ax, es:[bx+1Ch]
		add	ax, 7Fh	; ''
		cmp	ax, word ptr [bp+var_38]
		jbe	short loc_7928
		les	bx, [bp+var_34]
		mov	al, es:[bx]
		les	bx, [bp+var_38]
		mov	es:[bx], al
		inc	word ptr [bp+var_38]

loc_7928:				; CODE XREF: sub_789F+78j
		inc	word ptr [bp+var_34]

loc_792B:				; CODE XREF: sub_789F+67j
		les	bx, [bp+var_34]
		cmp	byte ptr es:[bx], 0
		jnz	short loc_7908
		les	bx, [bp+var_38]
		mov	byte ptr es:[bx], 0
		les	bx, ss:16h
		mov	ax, [bp+arg_14]
		mov	es:[bx+1Ah], ax
		les	bx, ss:16h
		mov	dx, [bp+arg_18]
		mov	ax, [bp+arg_16]
		mov	es:[bx+18h], dx
		mov	es:[bx+16h], ax
		mov	dx, word ptr [bp+var_22+2]
		mov	ax, word ptr [bp+var_22]
		mov	word ptr [bp+var_26+2],	dx
		mov	word ptr [bp+var_26], ax
		les	bx, [bp+var_22]
		mov	ax, es:[bx]
		mov	[bp+n],	ax
		les	bx, [bp+var_22]
		mov	ax, es:[bx+2]
		mov	[bp+var_2A], ax
		test	byte ptr [bp+var_2A], 2
		jz	short loc_7988
		les	bx, [bp+var_22]
		mov	ax, es:[bx+8]
		jmp	short loc_798A
; ---------------------------------------------------------------------------

loc_7988:				; CODE XREF: sub_789F+DEj
		xor	ax, ax

loc_798A:				; CODE XREF: sub_789F+E7j
		mov	[bp+var_2C], ax
		test	byte ptr [bp+var_2A], 30h
		jz	short loc_79A4
		les	bx, [bp+var_26]
		mov	dx, es:[bx+8]
		mov	ax, es:[bx+6]
		mov	word ptr [bp+var_26+2],	dx
		mov	word ptr [bp+var_26], ax

loc_79A4:				; CODE XREF: sub_789F+F2j
		mov	ax, [bp+n]
		add	ax, 3Ah	; ':'
		push	ax
		push	cs
		call	near ptr sub_70E0
		pop	cx
		mov	word ptr [bp+var_30+2],	dx
		mov	word ptr [bp+var_30], ax
		les	bx, ss:16h
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		les	bx, [bp+var_30]
		mov	es:[bx+2], dx
		mov	es:[bx], ax
		les	bx, ss:16h
		mov	dx, word ptr [bp+var_30+2]
		mov	ax, word ptr [bp+var_30]
		mov	es:[bx+2], dx
		mov	es:[bx], ax
		les	bx, [bp+var_30]
		mov	dx, word ptr [bp+var_22+2]
		mov	ax, word ptr [bp+var_22]
		mov	es:[bx+6], dx
		mov	es:[bx+4], ax
		les	bx, [bp+var_30]
		mov	ax, [bp+arg_12]
		mov	es:[bx+0Ch], ax
		les	bx, [bp+var_30]
		mov	ax, [bp+n]
		mov	es:[bx+0Eh], ax
		les	bx, [bp+var_30]
		mov	ax, [bp+var_2A]
		mov	es:[bx+14h], ax
		les	bx, [bp+var_30]
		mov	ax, [bp+var_2C]
		mov	es:[bx+16h], ax
		les	bx, [bp+var_30]
		mov	dx, word ptr [bp+var_26+2]
		mov	ax, word ptr [bp+var_26]
		mov	es:[bx+12h], dx
		mov	es:[bx+10h], ax
		les	bx, [bp+var_30]
		mov	dx, [bp+arg_A]
		mov	ax, [bp+arg_8]
		mov	es:[bx+0Ah], dx
		mov	es:[bx+8], ax
		les	bx, [bp+var_30]
		mov	word ptr es:[bx+24h], 0
		les	bx, [bp+var_30]
		mov	word ptr es:[bx+28h], 0
		mov	word ptr es:[bx+26h], 0
		les	bx, [bp+var_30]
		mov	word ptr es:[bx+18h], ds
		les	bx, [bp+var_30]
		mov	word ptr es:[bx+1Ch], seg seg000
		mov	word ptr es:[bx+1Ah], 713Ch
		les	bx, [bp+var_30]
		mov	ax, [bp+arg_14]
		mov	es:[bx+2Ch], ax
		les	bx, [bp+var_30]
		mov	dx, [bp+arg_18]
		mov	ax, [bp+arg_16]
		mov	es:[bx+30h], dx
		mov	es:[bx+2Eh], ax
		les	bx, [bp+var_30]
		mov	dx, [bp+arg_E]
		mov	ax, [bp+arg_C]
		mov	es:[bx+20h], dx
		mov	es:[bx+1Eh], ax
		les	bx, [bp+var_30]
		mov	ax, [bp+arg_10]
		mov	es:[bx+22h], ax
		les	bx, [bp+var_30]
		mov	byte ptr es:[bx+39h], 0
		les	bx, [bp+var_30]
		mov	byte ptr es:[bx+38h], 1
		push	[bp+n]		; n
		push	word ptr [bp+src+2]
		push	word ptr [bp+src] ; src
		mov	ax, word ptr [bp+var_30]
		add	ax, 3Ah	; ':'
		push	word ptr [bp+var_30+2]
		push	ax		; dest
		nop
		push	cs
		call	near ptr _memcpy
		add	sp, 0Ah
		test	byte ptr [bp+var_2C], 1
		jz	short loc_7B2E
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	[bp+var_3A], dx
		mov	[bp+var_3C], ax
		mov	[bp+var_12], 6
		push	[bp+arg_10]
		push	[bp+arg_E]
		push	[bp+arg_C]
		push	word ptr [bp+src+2]
		push	word ptr [bp+src]
		mov	ax, word ptr [bp+var_30]
		add	ax, 3Ah	; ':'
		push	word ptr [bp+var_30+2]
		push	ax
		call	sub_727A
		add	sp, 0Eh
		mov	[bp+var_12], 0
		jmp	short loc_7B19
; ---------------------------------------------------------------------------
		nop
		push	cs
		call	near ptr ___call_terminate
; ---------------------------------------------------------------------------
		nop
		push	cs
		call	near ptr @_CatchCleanup$qv ; _CatchCleanup(void)

loc_7B19:				; CODE XREF: sub_789F+26Ej
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, [bp+var_3A]
		mov	cx, [bp+var_3C]
		mov	es, dx
		xchg	ax, bx
		mov	es:[bx+2], ax
		mov	es:[bx], cx

loc_7B2E:				; CODE XREF: sub_789F+22Dj
		cmp	[bp+arg_1E], 0
		jnz	short loc_7B72
		test	byte ptr [bp+var_2C], 2
		jz	short loc_7B72
		mov	[bp+var_12], 12h
		mov	ax, 1
		push	ax
		les	bx, [bp+var_22]
		push	word ptr es:[bx+22h]
		les	bx, [bp+var_22]
		push	word ptr es:[bx+20h]
		push	word ptr es:[bx+1Eh]
		push	word ptr [bp+src+2]
		push	word ptr [bp+src]
		call	sub_75C8
		add	sp, 0Ch
		mov	[bp+var_12], 0
		jmp	short loc_7B72
; ---------------------------------------------------------------------------
		nop
		push	cs
		call	near ptr ___call_terminate
; ---------------------------------------------------------------------------
		nop
		push	cs
		call	near ptr @_CatchCleanup$qv ; _CatchCleanup(void)

loc_7B72:				; CODE XREF: sub_789F+293j
					; sub_789F+299j ...
		les	bx, ss:16h
		mov	dx, es:[bx+1Eh]
		mov	ax, es:[bx+1Ch]
		mov	[bp+var_46], dx
		mov	[bp+var_48], ax
		mov	dx, [bp+arg_1C]
		mov	ax, [bp+arg_1A]
		mov	[bp+var_42], dx
		mov	[bp+var_44], ax
		mov	dx, word ptr [bp+var_30+2]
		mov	ax, word ptr [bp+var_30]
		mov	[bp+var_3E], dx
		mov	[bp+var_40], ax
		push	ss
		lea	ax, [bp+var_48]
		push	ax
		xor	ax, ax
		mov	dx, 3
		push	ax
		push	dx
		xor	ax, ax
		mov	dx, 1
		push	ax
		push	dx
		mov	ax, 0EEFh
		mov	dx, 0FACEh
		push	ax
		push	dx
		nop
		push	cs
		call	near ptr _RaiseException
		add	sp, 10h
		push	[bp+var_1E]
		nop
		push	cs
		call	near ptr ___ExitExceptBlocks
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_789F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl __far _ThrowException(int, int, void *src, int, int, int,	int, int, int, int, int, int)
@_ThrowException$qnvt1t1t1uiuiuinuc proc far ; CODE XREF: seg000:482Cp
					; xalloc::raise(void)+6Cp ...

var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
src		= dword	ptr  0Ah
arg_8		= word ptr  0Eh
arg_A		= word ptr  10h
arg_C		= word ptr  12h
arg_E		= word ptr  14h
arg_10		= word ptr  16h
arg_12		= word ptr  18h
arg_14		= word ptr  1Ah
arg_16		= word ptr  1Ch
arg_18		= word ptr  1Eh

		push	bp
		mov	bp, sp
		sub	sp, 6
		push	si
		push	di
		mov	[bp+var_6], bp
		mov	bx, [bp+var_6]
		mov	dx, ss:[bx+4]
		mov	ax, ss:[bx+2]
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		xor	ax, ax
		push	ax		; int
		push	[bp+var_2]	; int
		push	[bp+var_4]	; int
		push	[bp+arg_18]	; int
		push	[bp+arg_16]	; int
		push	[bp+arg_14]	; int
		push	[bp+arg_12]	; int
		push	[bp+arg_10]	; int
		push	[bp+arg_E]	; int
		push	[bp+arg_C]	; int
		push	[bp+arg_A]	; int
		push	[bp+arg_8]	; int
		push	word ptr [bp+src+2]
		push	word ptr [bp+src] ; src
		push	[bp+arg_2]	; int
		push	[bp+arg_0]	; int
		push	cs
		call	near ptr sub_789F
		add	sp, 20h
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@_ThrowException$qnvt1t1t1uiuiuinuc endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; _ReThrowException(unsigned int, unsigned char	*)
@_ReThrowException$quinuc proc far

var_A		= word ptr -0Ah
var_8		= dword	ptr -8
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		sub	sp, 0Ah
		push	si
		push	di
		mov	[bp+var_A], bp
		mov	bx, [bp+var_A]
		mov	dx, ss:[bx+4]
		mov	ax, ss:[bx+2]
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		les	bx, ss:16h
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_8+2], dx
		mov	word ptr [bp+var_8], ax
		mov	ax, word ptr [bp+var_8]
		or	ax, word ptr [bp+var_8+2]
		jnz	short loc_7C62
		nop
		push	cs
		call	near ptr ___call_terminate
; ---------------------------------------------------------------------------

loc_7C62:				; CODE XREF: _ReThrowException(uint,uchar *)+34j
		mov	ax, 1
		push	ax		; int
		push	[bp+var_2]	; int
		push	[bp+var_4]	; int
		push	[bp+arg_4]	; int
		push	[bp+arg_2]	; int
		push	[bp+arg_0]	; int
		les	bx, [bp+var_8]
		push	word ptr es:[bx+0Ch] ; int
		les	bx, [bp+var_8]
		push	word ptr es:[bx+22h] ; int
		les	bx, [bp+var_8]
		push	word ptr es:[bx+20h] ; int
		push	word ptr es:[bx+1Eh] ; int
		les	bx, [bp+var_8]
		push	word ptr es:[bx+0Ah] ; int
		push	word ptr es:[bx+8] ; int
		les	bx, [bp+var_8]
		cmp	byte ptr es:[bx+38h], 0
		jz	short loc_7CAE
		mov	dx, word ptr [bp+var_8+2]
		mov	ax, word ptr [bp+var_8]
		add	ax, 3Ah	; ':'
		jmp	short loc_7CB7
; ---------------------------------------------------------------------------

loc_7CAE:				; CODE XREF: _ReThrowException(uint,uchar *)+7Aj
		les	bx, [bp+var_8]
		mov	ax, es:[bx+36h]
		mov	dx, ss

loc_7CB7:				; CODE XREF: _ReThrowException(uint,uchar *)+85j
		push	dx
		push	ax		; src
		les	bx, [bp+var_8]
		push	word ptr es:[bx+6] ; int
		push	word ptr es:[bx+4] ; int
		push	cs
		call	near ptr sub_789F
		add	sp, 20h
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@_ReThrowException$quinuc endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

sub_7CD1	proc far		; CODE XREF: sub_7CD6+22p
		push	si
		push	di
		pop	di
		pop	si
		retf
sub_7CD1	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_7CD6	proc far		; CODE XREF: __Global_unwind+3Bp
					; _RaiseException+2A6p	...

var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

		push	bp
		mov	bp, sp
		sub	sp, 6
		push	si
		push	di
		mov	[bp+var_4], 0
		mov	bx, [bp+arg_0]
		test	byte ptr ss:[bx+4], 6
		jz	short loc_7CF0
		inc	[bp+var_4]

loc_7CF0:				; CODE XREF: sub_7CD6+15j
		mov	ax, ss:14h
		mov	[bp+var_2], ax
		push	cs
		call	near ptr sub_7CD1
		jmp	short loc_7D3E
; ---------------------------------------------------------------------------

loc_7CFD:				; CODE XREF: sub_7CD6+74j
		mov	ax, [bp+var_2]
		mov	[bp+var_6], ax
		xor	ax, ax
		push	ax
		push	ax
		push	[bp+arg_4]
		push	[bp+arg_2]
		push	[bp+var_2]
		push	ss
		push	[bp+arg_0]
		mov	bx, [bp+var_6]
		call	dword ptr ss:[bx+2]
		add	sp, 0Eh
		mov	dx, ax
		or	dx, dx
		jnz	short loc_7D28
		mov	ax, dx
		jmp	short loc_7D5C
; ---------------------------------------------------------------------------

loc_7D28:				; CODE XREF: sub_7CD6+4Cj
		cmp	[bp+var_4], 0
		jz	short loc_7D35
		mov	ax, [bp+var_2]
		mov	ss:14h,	ax

loc_7D35:				; CODE XREF: sub_7CD6+56j
		mov	bx, [bp+var_2]
		mov	ax, ss:[bx]
		mov	[bp+var_2], ax

loc_7D3E:				; CODE XREF: sub_7CD6+25j
		cmp	[bp+var_2], 0FFFFh
		jz	short loc_7D4C
		mov	ax, [bp+var_2]
		cmp	ax, [bp+arg_6]
		jnz	short loc_7CFD

loc_7D4C:				; CODE XREF: sub_7CD6+6Cj
		cmp	[bp+var_4], 0
		jz	short loc_7D59
		mov	ax, [bp+var_2]
		mov	ss:14h,	ax

loc_7D59:				; CODE XREF: sub_7CD6+7Aj
		mov	ax, 1

loc_7D5C:				; CODE XREF: sub_7CD6+50j
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_7CD6	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__Global_unwind	proc far		; CODE XREF: __ExceptionHandler+210p

var_4C		= word ptr -4Ch
var_4A		= word ptr -4Ah
var_48		= word ptr -48h
var_46		= word ptr -46h
var_3E		= word ptr -3Eh
arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		sub	sp, 4Ch
		push	si
		push	di
		mov	dx, [bp+arg_2]
		or	dx, dx
		jnz	short loc_7D8D
		mov	[bp+var_4A], 0
		mov	[bp+var_4C], 26h ; '&'
		mov	[bp+var_46], 0
		mov	[bp+var_48], 2
		mov	[bp+var_3E], 0
		lea	dx, [bp+var_4C]

loc_7D8D:				; CODE XREF: __Global_unwind+Dj
		mov	bx, dx
		or	word ptr ss:[bx+4], 2
		push	[bp+arg_0]
		xor	ax, ax
		push	ax
		push	ax
		push	dx
		push	cs
		call	near ptr sub_7CD6
		add	sp, 8
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
__Global_unwind	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

sub_7DA9	proc far		; CODE XREF: _RaiseException+16p
		push	si
		push	di
		pop	di
		pop	si
		retf
sub_7DA9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

_RaiseException	proc far		; CODE XREF: sub_789F+31Bp

dest		= word ptr -186h
var_184		= word ptr -184h
var_182		= word ptr -182h
var_180		= word ptr -180h
var_17E		= word ptr -17Eh
var_17C		= word ptr -17Ch
var_176		= word ptr -176h
var_174		= word ptr -174h
var_172		= word ptr -172h
var_170		= word ptr -170h
var_16E		= word ptr -16Eh
var_16C		= word ptr -16Ch
var_16A		= word ptr -16Ah
var_168		= word ptr -168h
var_166		= word ptr -166h
var_164		= word ptr -164h
var_162		= word ptr -162h
var_160		= word ptr -160h
var_15E		= word ptr -15Eh
var_15A		= word ptr -15Ah
var_158		= word ptr -158h
var_156		= word ptr -156h
var_154		= word ptr -154h
var_152		= byte ptr -152h
var_C6		= word ptr -0C6h
var_C4		= word ptr -0C4h
var_C2		= word ptr -0C2h
var_C0		= word ptr -0C0h
var_BE		= word ptr -0BEh
var_BC		= word ptr -0BCh
var_BA		= word ptr -0BAh
var_B8		= word ptr -0B8h
var_B6		= word ptr -0B6h
var_B4		= word ptr -0B4h
var_B2		= word ptr -0B2h
var_B0		= word ptr -0B0h
var_AE		= word ptr -0AEh
var_AC		= word ptr -0ACh
var_AA		= word ptr -0AAh
var_A8		= word ptr -0A8h
var_A6		= word ptr -0A6h
var_A4		= word ptr -0A4h
var_A2		= word ptr -0A2h
var_A0		= word ptr -0A0h
var_9E		= word ptr -9Eh
var_9C		= word ptr -9Ch
var_9A		= word ptr -9Ah
var_98		= word ptr -98h
var_96		= word ptr -96h
var_94		= word ptr -94h
var_92		= word ptr -92h
var_90		= word ptr -90h
var_8E		= word ptr -8Eh
var_8C		= word ptr -8Ch
var_8A		= word ptr -8Ah
var_88		= word ptr -88h
var_86		= byte ptr -86h
var_56		= word ptr -56h
var_54		= word ptr -54h
var_52		= word ptr -52h
var_50		= word ptr -50h
var_4E		= word ptr -4Eh
var_4C		= word ptr -4Ch
var_4A		= word ptr -4Ah
var_48		= word ptr -48h
var_46		= byte ptr -46h
src		= dword	ptr -0Ah
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  18h
arg_2		= word ptr  1Ah
arg_4		= word ptr  1Ch
arg_6		= word ptr  1Eh
arg_8		= word ptr  20h
arg_A		= word ptr  22h
arg_C		= dword	ptr  24h

; FUNCTION CHUNK AT 8220 SIZE 0000000D BYTES

		push	ax
		push	cx
		push	dx
		push	bx
		push	sp
		push	bp
		push	si
		push	di
		push	ds
		push	es
		mov	bp, sp
		sub	sp, 186h
		lea	ax, [bp+var_86]
		push	ax
		push	cs
		call	near ptr sub_7DA9
		pop	cx
		pushf
		pop	ax
		mov	word ptr [bp+src+2], ax
		cmp	byte ptr word_23C82, 3
		jnb	short loc_7DD7
		jmp	loc_7E8D
; ---------------------------------------------------------------------------

loc_7DD7:				; CODE XREF: _RaiseException+24j
		pushad
		mov	word ptr [bp+src], sp
		mov	ax, 20h	; ' '
		push	ax		; n
		push	ss
		push	word ptr [bp+src] ; src
		push	ss
		lea	ax, [bp+dest]
		push	ax		; dest
		nop
		push	cs
		call	near ptr _memcpy
		add	sp, 0Ah
		popad
		mov	dx, [bp+var_184]
		mov	ax, [bp+dest]
		mov	[bp+var_B4], dx
		mov	[bp+var_B6], ax
		mov	dx, [bp+var_180]
		mov	ax, [bp+var_182]
		mov	[bp+var_B0], dx
		mov	[bp+var_B2], ax
		mov	dx, [bp+var_174]
		mov	ax, [bp+var_176]
		mov	[bp+var_AC], dx
		mov	[bp+var_AE], ax
		mov	dx, [bp+var_170]
		mov	ax, [bp+var_172]
		mov	[bp+var_A8], dx
		mov	[bp+var_AA], ax
		mov	dx, [bp+var_16C]
		mov	ax, [bp+var_16E]
		mov	[bp+var_A4], dx
		mov	[bp+var_A6], ax
		mov	dx, [bp+var_168]
		mov	ax, [bp+var_16A]
		mov	[bp+var_A0], dx
		mov	[bp+var_A2], ax
		mov	dx, [bp+var_17C]
		mov	ax, [bp+var_17E]
		mov	[bp+var_9C], dx
		mov	[bp+var_9E], ax
		pushfd
		pop	eax
		shr	eax, 10h
		mov	[bp+var_90], ax
		mov	ax, word ptr [bp+src+2]
		mov	[bp+var_92], ax
		mov	[bp+var_C0], 0
		mov	[bp+var_C2], fs
		mov	[bp+var_C4], 0
		mov	[bp+var_C6], gs
		jmp	short loc_7ED6
; ---------------------------------------------------------------------------

loc_7E8D:				; CODE XREF: _RaiseException+26j
		xor	ax, ax
		xor	dx, dx
		mov	[bp+var_9C], ax
		mov	[bp+var_9E], dx
		mov	[bp+var_A0], ax
		mov	[bp+var_A2], dx
		mov	[bp+var_A4], ax
		mov	[bp+var_A6], dx
		mov	[bp+var_A8], ax
		mov	[bp+var_AA], dx
		mov	[bp+var_AC], ax
		mov	[bp+var_AE], dx
		mov	[bp+var_B0], ax
		mov	[bp+var_B2], dx
		mov	[bp+var_B4], ax
		mov	[bp+var_B6], dx
		mov	ax, word ptr [bp+src+2]
		mov	[bp+var_90], 0
		mov	[bp+var_92], ax

loc_7ED6:				; CODE XREF: _RaiseException+DDj
		mov	dx, [bp+var_9C]
		mov	ax, [bp+var_9E]
		add	ax, 18h
		adc	dx, 0
		mov	[bp+var_8C], dx
		mov	[bp+var_8E], ax
		cmp	[bp+arg_2], 0EEFh
		jnz	short loc_7F07
		cmp	[bp+arg_0], 0FACEh
		jnz	short loc_7F07
		les	bx, [bp+arg_C]
		mov	dx, es:[bx+6]
		mov	ax, es:[bx+4]
		jmp	short loc_7F15
; ---------------------------------------------------------------------------

loc_7F07:				; CODE XREF: _RaiseException+143j
					; _RaiseException+14Aj
		mov	word ptr [bp+src], bp
		mov	bx, word ptr [bp+src]
		mov	dx, ss:[bx+16h]
		mov	ax, ss:[bx+14h]

loc_7F15:				; CODE XREF: _RaiseException+157j
		mov	[bp+var_4], dx
		mov	[bp+var_6], ax
		mov	ax, [bp+var_6]
		mov	[bp+var_98], 0
		mov	[bp+var_9A], ax
		mov	ax, [bp+var_4]
		mov	[bp+var_94], 0
		mov	[bp+var_96], ax
		mov	ax, 14h
		push	ax		; n
		push	ss
		push	bp		; src
		push	ss
		lea	ax, [bp+var_166]
		push	ax		; dest
		nop
		push	cs
		call	near ptr _memcpy
		add	sp, 0Ah
		mov	ax, [bp+var_164]
		mov	[bp+var_B8], 0
		mov	[bp+var_BA], ax
		mov	ax, [bp+var_166]
		mov	[bp+var_BC], 0
		mov	[bp+var_BE], ax
		mov	[bp+var_88], 0
		mov	[bp+var_8A], ss
		mov	ax, [bp+var_154]
		mov	[bp+var_A2], ax
		mov	ax, [bp+var_15A]
		mov	[bp+var_AE], ax
		mov	ax, [bp+var_156]
		mov	[bp+var_A6], ax
		mov	ax, [bp+var_158]
		mov	[bp+var_AA], ax
		mov	ax, [bp+var_160]
		mov	[bp+var_B2], ax
		mov	ax, [bp+var_162]
		mov	[bp+var_B6], ax
		mov	ax, [bp+var_15E]
		mov	[bp+var_9E], ax
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		and	dx, 0EFFFh
		mov	[bp+var_54], dx
		mov	[bp+var_56], ax
		mov	dx, [bp+arg_6]
		mov	ax, [bp+arg_4]
		mov	[bp+var_50], dx
		mov	[bp+var_52], ax
		mov	dx, [bp+var_4]
		mov	ax, [bp+var_6]
		mov	[bp+var_4A], dx
		mov	[bp+var_4C], ax
		mov	[bp+var_4E], 0
		mov	ax, word ptr [bp+arg_C]
		or	ax, word ptr [bp+arg_C+2]
		jnz	short loc_7FE6
		mov	[bp+arg_A], 0
		mov	[bp+arg_8], 0

loc_7FE6:				; CODE XREF: _RaiseException+22Cj
		cmp	[bp+arg_A], 0
		jb	short loc_7FFE
		ja	short loc_7FF4
		cmp	[bp+arg_8], 0Fh
		jbe	short loc_7FFE

loc_7FF4:				; CODE XREF: _RaiseException+23Ej
		mov	[bp+arg_A], 0
		mov	[bp+arg_8], 0Fh

loc_7FFE:				; CODE XREF: _RaiseException+23Cj
					; _RaiseException+244j
		mov	ax, [bp+arg_8]
		mov	[bp+var_48], ax
		mov	[bp+var_2], 0
		jmp	short loc_8034
; ---------------------------------------------------------------------------

loc_800B:				; CODE XREF: _RaiseException+28Ej
					; _RaiseException+295j
		mov	bx, [bp+var_2]
		mov	cl, 2
		shl	bx, cl
		lea	ax, [bp+var_46]
		add	bx, ax
		mov	ax, [bp+var_2]
		mov	cl, 2
		shl	ax, cl
		les	si, [bp+arg_C]
		add	si, ax
		mov	dx, es:[si+2]
		mov	ax, es:[si]
		mov	ss:[bx+2], dx
		mov	ss:[bx], ax
		inc	[bp+var_2]

loc_8034:				; CODE XREF: _RaiseException+25Bj
		mov	ax, [bp+var_2]
		xor	dx, dx
		cmp	dx, [bp+arg_A]
		jb	short loc_800B
		jnz	short loc_8045
		cmp	ax, [bp+arg_8]
		jb	short loc_800B

loc_8045:				; CODE XREF: _RaiseException+290j
					; _RaiseException+2E0j
		mov	ax, 0FFFFh
		push	ax
		push	ss
		lea	ax, [bp+var_152]
		push	ax
		lea	ax, [bp+var_56]
		push	ax
		push	cs
		call	near ptr sub_7CD6
		add	sp, 8
		or	ax, ax
		jnz	short loc_8090
		test	byte ptr [bp+arg_4], 1
		jz	short loc_80B0
		mov	[bp+var_54], 0C000h
		mov	[bp+var_56], 25h ; '%'
		mov	dx, [bp+arg_6]
		mov	ax, [bp+arg_4]
		mov	[bp+var_50], dx
		mov	[bp+var_52], ax
		mov	[bp+var_4A], 0
		mov	[bp+var_4C], 0
		mov	[bp+var_4E], 0
		mov	[bp+var_48], 0
		jmp	short loc_8045
; ---------------------------------------------------------------------------

loc_8090:				; CODE XREF: _RaiseException+2AEj
		or	[bp+var_52], 2
		mov	ax, 0FFFFh
		push	ax
		push	ss
		lea	ax, [bp+var_152]
		push	ax
		lea	ax, [bp+var_56]
		push	ax
		push	cs
		call	near ptr sub_7CD6
		add	sp, 8
		or	ax, ax
		jz	short loc_80B0
		jmp	loc_821B
; ---------------------------------------------------------------------------

loc_80B0:				; CODE XREF: _RaiseException+2B4j
					; _RaiseException+2FDj
		cmp	byte ptr word_23C82, 3
		jnb	short loc_80BA
		jmp	loc_819A
; ---------------------------------------------------------------------------

loc_80BA:				; CODE XREF: _RaiseException+307j
		mov	cx, [bp+var_8E]
		sub	cx, 30h	; '0'
		mov	es, [bp+var_8A]
		mov	bx, cx
		mov	ax, [bp+var_C6]
		mov	es:[bx], ax
		mov	ax, [bp+var_C2]
		mov	es:[bx+2], ax
		mov	ax, [bp+var_BE]
		mov	es:[bx+4], ax
		mov	ax, [bp+var_BA]
		mov	es:[bx+6], ax
		mov	dx, [bp+var_B4]
		mov	ax, [bp+var_B6]
		mov	es:[bx+0Ah], dx
		mov	es:[bx+8], ax
		mov	dx, [bp+var_B0]
		mov	ax, [bp+var_B2]
		mov	es:[bx+0Eh], dx
		mov	es:[bx+0Ch], ax
		mov	dx, [bp+var_9C]
		mov	ax, [bp+var_9E]
		mov	es:[bx+12h], dx
		mov	es:[bx+10h], ax
		mov	dx, [bp+var_8C]
		mov	ax, [bp+var_8E]
		mov	es:[bx+16h], dx
		mov	es:[bx+14h], ax
		mov	dx, [bp+var_AC]
		mov	ax, [bp+var_AE]
		mov	es:[bx+1Ah], dx
		mov	es:[bx+18h], ax
		mov	dx, [bp+var_A8]
		mov	ax, [bp+var_AA]
		mov	es:[bx+1Eh], dx
		mov	es:[bx+1Ch], ax
		mov	dx, [bp+var_A4]
		mov	ax, [bp+var_A6]
		mov	es:[bx+22h], dx
		mov	es:[bx+20h], ax
		mov	dx, [bp+var_A0]
		mov	ax, [bp+var_A2]
		mov	es:[bx+26h], dx
		mov	es:[bx+24h], ax
		mov	dx, [bp+var_90]
		mov	ax, [bp+var_92]
		mov	es:[bx+2Ah], dx
		mov	es:[bx+28h], ax
		mov	ax, [bp+var_9A]
		mov	es:[bx+2Ch], ax
		mov	ax, [bp+var_96]
		mov	es:[bx+2Eh], ax
		mov	ss, [bp+var_8A]
		mov	sp, bx
		pop	gs
		assume gs:nothing
		pop	fs
		pop	es
		pop	ds
		popad
		popfd
		retf
; ---------------------------------------------------------------------------
		jmp	loc_8220
; ---------------------------------------------------------------------------

loc_819A:				; CODE XREF: _RaiseException+309j
		mov	cx, [bp+var_8E]
		sub	cx, 1Ah
		mov	es, [bp+var_8A]
		mov	bx, cx
		mov	ax, [bp+var_BE]
		mov	es:[bx], ax
		mov	ax, [bp+var_BA]
		mov	es:[bx+2], ax
		mov	ax, [bp+var_B6]
		mov	es:[bx+4], ax
		mov	ax, [bp+var_B2]
		mov	es:[bx+6], ax
		mov	ax, [bp+var_9E]
		mov	es:[bx+8], ax
		mov	ax, [bp+var_8E]
		mov	es:[bx+0Ah], ax
		mov	ax, [bp+var_AE]
		mov	es:[bx+0Ch], ax
		mov	ax, [bp+var_AA]
		mov	es:[bx+0Eh], ax
		mov	ax, [bp+var_A6]
		mov	es:[bx+10h], ax
		mov	ax, [bp+var_A2]
		mov	es:[bx+12h], ax
		mov	ax, [bp+var_92]
		mov	es:[bx+14h], ax
		mov	ax, [bp+var_9A]
		mov	es:[bx+16h], ax
		mov	ax, [bp+var_96]
		mov	es:[bx+18h], ax
		mov	ss, [bp+var_8A]
		mov	sp, bx
		pop	es
		pop	ds
		popa
		popf
		retf
; ---------------------------------------------------------------------------
		jmp	short loc_8220
; ---------------------------------------------------------------------------

loc_821B:				; CODE XREF: _RaiseException+2FFj
		nop
		push	cs
		call	near ptr ___call_terminate
_RaiseException	endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR _RaiseException

loc_8220:				; CODE XREF: _RaiseException+3E9j
					; _RaiseException+46Bj
		mov	sp, bp
		pop	es
		pop	ds
		pop	di
		pop	si
		pop	bp
		pop	bx
		pop	bx
		pop	dx
		pop	cx
		pop	ax
		retf
; END OF FUNCTION CHUNK	FOR _RaiseException
; ---------------------------------------------------------------------------
		db 4 dup(0), 8Fh, 82h
		dw seg seg000
		db 14h dup(0), 0E2h, 0FFh, 2 dup(0), 3,	0, 2Dh,	82h
		dw seg seg000
		db 2 dup(0), 4,	0

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_8257	proc near		; CODE XREF: sub_82A7+58p sub_82A7+C4p ...

var_1E		= word ptr -1Eh
var_12		= word ptr -12h
arg_0		= word ptr  4
arg_2		= word ptr  6
arg_4		= word ptr  8
arg_6		= word ptr  0Ah
arg_8		= word ptr  0Ch

		push	bp
		mov	bp, sp
		sub	sp, 1Eh
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 8245h
		nop
		push	cs
		call	___InitExceptBlocks
		mov	[bp+var_12], 6
		mov	ax, 1
		push	ax
		push	[bp+arg_8]
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	sub_75C8
		add	sp, 0Ch
		mov	[bp+var_12], 0
		jmp	short loc_8299
; ---------------------------------------------------------------------------
		nop
		push	cs
		call	near ptr ___call_terminate
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------
		push	cs
		call	near ptr @_CatchCleanup$qv ; _CatchCleanup(void)

loc_8299:				; CODE XREF: sub_8257+36j
		push	[bp+var_1E]
		nop
		push	cs
		call	near ptr ___ExitExceptBlocks
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_8257	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_82A7	proc near		; CODE XREF: _CatchCleanup(void)+5Ap
					; sub_87F1+138p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		push	bp
		mov	bp, sp
		sub	sp, 8
		push	si
		push	di
		les	bx, [bp+arg_0]
		cmp	byte ptr es:[bx+38h], 0
		jz	short loc_8322
		les	bx, [bp+arg_0]
		test	byte ptr es:[bx+16h], 2
		jz	short loc_831A
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_8+2], dx
		mov	word ptr [bp+var_8], ax
		les	bx, [bp+arg_0]
		les	bx, es:[bx+4]
		mov	word ptr [bp+var_4+2], es
		mov	word ptr [bp+var_4], bx
		push	word ptr es:[bx+22h]
		les	bx, [bp+var_4]
		push	word ptr es:[bx+20h]
		push	word ptr es:[bx+1Eh]
		mov	ax, word ptr [bp+arg_0]
		add	ax, 3Ah	; ':'
		push	word ptr [bp+arg_0+2]
		push	ax
		call	sub_8257
		add	sp, 0Ah
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, word ptr [bp+var_8+2]
		mov	cx, word ptr [bp+var_8]
		mov	es, dx
		xchg	ax, bx
		mov	es:[bx+2], ax
		mov	es:[bx], cx

loc_831A:				; CODE XREF: sub_82A7+1Aj
		les	bx, [bp+arg_0]
		mov	byte ptr es:[bx+38h], 0

loc_8322:				; CODE XREF: sub_82A7+10j
		les	bx, [bp+arg_0]
		cmp	byte ptr es:[bx+39h], 0
		jz	short loc_8379
		les	bx, [bp+arg_0]
		mov	dx, es:[bx+34h]
		mov	ax, es:[bx+32h]
		mov	word ptr [bp+var_8+2], dx
		mov	word ptr [bp+var_8], ax
		les	bx, [bp+var_8]
		test	byte ptr es:[bx+2], 2
		jz	short loc_8371
		les	bx, [bp+var_8]
		test	byte ptr es:[bx+8], 2
		jz	short loc_8371
		les	bx, [bp+var_8]
		push	word ptr es:[bx+22h]
		les	bx, [bp+var_8]
		push	word ptr es:[bx+20h]
		push	word ptr es:[bx+1Eh]
		push	ss
		les	bx, [bp+arg_0]
		push	word ptr es:[bx+36h]
		call	sub_8257
		add	sp, 0Ah

loc_8371:				; CODE XREF: sub_82A7+9Ej sub_82A7+A8j
		les	bx, [bp+arg_0]
		mov	byte ptr es:[bx+39h], 0

loc_8379:				; CODE XREF: sub_82A7+83j
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_82A7	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; _CatchCleanup(void)
@_CatchCleanup$qv proc far		; CODE XREF: ___call_terminate+69p
					; sub_789F+277p ...

var_6		= word ptr -6
var_4		= dword	ptr -4
arg_0		= dword	ptr  6
arg_6		= word ptr  0Ch

		push	bp
		mov	bp, sp
		sub	sp, 6
		push	si
		push	di
		les	bx, ss:16h
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		les	bx, [bp+var_4]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		les	bx, ss:16h
		mov	es:[bx+2], dx
		mov	es:[bx], ax
		les	bx, [bp+var_4]
		mov	ax, es:[bx+24h]
		mov	[bp+var_6], ax
		mov	bx, [bp+var_6]
		les	ax, ss:[bx+arg_0]
		mov	bx, [bp+var_6]
		add	ax, ss:[bx+arg_6]
		mov	bx, ax
		mov	ax, es:[bx]
		mov	bx, [bp+var_6]
		mov	ss:[bx+arg_6], ax
		push	word ptr [bp+var_4+2]
		push	word ptr [bp+var_4]
		call	sub_82A7
		pop	cx
		pop	cx
		push	ds
		les	bx, [bp+var_4]
		mov	ds, word ptr es:[bx+18h]
		push	word ptr [bp+var_4+2]
		push	word ptr [bp+var_4]
		les	bx, [bp+var_4]
		call	dword ptr es:[bx+1Ah]
		pop	cx
		pop	cx
		pop	ds
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@_CatchCleanup$qv endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_83FC	proc near		; CODE XREF: sub_83FC+A0p sub_84C8+36p ...

var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= word ptr  8
arg_6		= word ptr  0Ah
arg_8		= word ptr  0Ch
arg_A		= word ptr  0Eh

		push	bp
		mov	bp, sp
		sub	sp, 0Ch
		push	si
		push	di

loc_8404:				; CODE XREF: sub_83FC+C3j
		les	bx, [bp+arg_0]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		mov	ax, word ptr [bp+var_4]
		or	ax, word ptr [bp+var_4+2]
		jnz	short loc_8421
		xor	ax, ax
		jmp	loc_84C2
; ---------------------------------------------------------------------------

loc_8421:				; CODE XREF: sub_83FC+1Ej
		mov	bx, [bp+arg_A]
		mov	dx, ss:[bx+2]
		mov	ax, ss:[bx]
		les	bx, [bp+arg_0]
		add	ax, es:[bx+4]
		mov	word ptr [bp+var_8+2], dx
		mov	word ptr [bp+var_8], ax
		cmp	[bp+arg_4], 0
		jz	short loc_844D
		les	bx, [bp+var_8]
		mov	ax, es:[bx]
		mov	dx, word ptr [bp+var_8+2]
		mov	word ptr [bp+var_8+2], dx
		mov	word ptr [bp+var_8], ax

loc_844D:				; CODE XREF: sub_83FC+40j
		push	[bp+arg_8]
		push	[bp+arg_6]
		push	word ptr [bp+var_4+2]
		push	word ptr [bp+var_4]
		push	cs
		call	near ptr sub_6D7C
		add	sp, 8
		or	ax, ax
		jnz	short loc_84A6
		les	bx, [bp+var_4]
		test	byte ptr es:[bx+2], 2
		jz	short loc_84BB
		les	bx, [bp+var_4]
		mov	dx, word ptr [bp+var_4+2]
		mov	ax, word ptr [bp+var_4]
		add	ax, es:[bx+0Ah]
		mov	[bp+var_A], dx
		mov	[bp+var_C], ax
		mov	ax, [bp+var_C]
		or	ax, [bp+var_A]
		jz	short loc_84BB
		lea	ax, [bp+var_8]
		push	ax
		push	[bp+arg_8]
		push	[bp+arg_6]
		xor	ax, ax
		push	ax
		push	[bp+var_A]
		push	[bp+var_C]
		call	sub_83FC
		add	sp, 0Ch
		or	ax, ax
		jz	short loc_84BB

loc_84A6:				; CODE XREF: sub_83FC+66j
		mov	bx, [bp+arg_A]
		mov	dx, word ptr [bp+var_8+2]
		mov	ax, word ptr [bp+var_8]
		mov	ss:[bx+2], dx
		mov	ss:[bx], ax
		mov	ax, 1
		jmp	short loc_84C2
; ---------------------------------------------------------------------------

loc_84BB:				; CODE XREF: sub_83FC+70j sub_83FC+8Bj ...
		add	word ptr [bp+arg_0], 8
		jmp	loc_8404
; ---------------------------------------------------------------------------

loc_84C2:				; CODE XREF: sub_83FC+22j sub_83FC+BDj
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_83FC	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_84C8	proc far		; CODE XREF: sub_854B+159p
					; sub_854B+1C2p

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= dword	ptr  0Ah
arg_8		= word ptr  0Eh
arg_A		= word ptr  10h

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	si
		push	di
		mov	ax, [bp+arg_0]
		or	ax, [bp+arg_2]
		jz	short loc_8539
		les	bx, [bp+arg_4]
		mov	dx, word ptr [bp+arg_4+2]
		mov	ax, word ptr [bp+arg_4]
		add	ax, es:[bx+0Ah]
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		lea	ax, [bp+arg_0]
		push	ax
		push	[bp+arg_A]
		push	[bp+arg_8]
		xor	ax, ax
		push	ax
		push	[bp+var_2]
		push	[bp+var_4]
		call	sub_83FC
		add	sp, 0Ch
		or	ax, ax
		jnz	short loc_8539
		les	bx, [bp+arg_4]
		mov	dx, word ptr [bp+arg_4+2]
		mov	ax, word ptr [bp+arg_4]
		add	ax, es:[bx+0Ch]
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		lea	ax, [bp+arg_0]
		push	ax
		push	[bp+arg_A]
		push	[bp+arg_8]
		mov	ax, 1
		push	ax
		push	[bp+var_2]
		push	[bp+var_4]
		call	sub_83FC
		add	sp, 0Ch
		or	ax, ax
		jz	short loc_8541

loc_8539:				; CODE XREF: sub_84C8+Ej sub_84C8+3Ej
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		jmp	short loc_8545
; ---------------------------------------------------------------------------

loc_8541:				; CODE XREF: sub_84C8+6Fj
		xor	dx, dx
		xor	ax, ax

loc_8545:				; CODE XREF: sub_84C8+77j
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_84C8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_854B	proc near		; CODE XREF: __ExceptionHandler+248p

var_18		= word ptr -18h
var_16		= word ptr -16h
var_14		= word ptr -14h
var_12		= word ptr -12h
var_10		= word ptr -10h
src		= dword	ptr -0Eh
n		= word ptr -0Ah
var_8		= dword	ptr -8
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  4
arg_6		= dword	ptr  0Ah
arg_A		= dword	ptr  0Eh
arg_E		= word ptr  12h

		push	bp
		mov	bp, sp
		sub	sp, 18h
		push	si
		push	di
		les	bx, [bp+arg_0]
		mov	dx, es:[bx+6]
		mov	ax, es:[bx+4]
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		les	bx, [bp+arg_6]
		mov	es:[bx+34h], dx
		mov	es:[bx+32h], ax
		mov	ax, [bp+var_4]
		or	ax, [bp+var_2]
		jnz	short loc_857A
		jmp	loc_87EB
; ---------------------------------------------------------------------------

loc_857A:				; CODE XREF: sub_854B+2Aj
		les	bx, [bp+arg_0]
		test	byte ptr es:[bx+8], 80h
		jz	short loc_8587
		jmp	loc_87EB
; ---------------------------------------------------------------------------

loc_8587:				; CODE XREF: sub_854B+37j
		les	bx, [bp+arg_0]
		mov	ax, es:[bx+8]
		and	ax, 1
		neg	ax
		sbb	ax, ax
		inc	ax
		mov	[bp+var_14], ax
		mov	dx, word ptr [bp+arg_6+2]
		mov	ax, word ptr [bp+arg_6]
		add	ax, 3Ah	; ':'
		mov	word ptr [bp+src+2], dx
		mov	word ptr [bp+src], ax
		les	bx, [bp+arg_6]
		mov	byte ptr es:[bx+39h], 1
		les	bx, [bp+arg_A]
		mov	ax, es:[bx]
		add	ax, [bp+arg_E]
		les	bx, [bp+arg_6]
		mov	es:[bx+36h], ax
		mov	dx, [bp+var_2]
		mov	ax, [bp+var_4]
		mov	word ptr [bp+var_8+2], dx
		mov	word ptr [bp+var_8], ax
		les	bx, [bp+var_8]
		mov	ax, es:[bx]
		mov	[bp+n],	ax
		les	bx, [bp+var_8]
		mov	cx, es:[bx+2]
		mov	dx, cx
		test	cl, 30h
		jz	short loc_85FB
		les	bx, [bp+var_8]
		mov	dx, es:[bx+8]
		mov	ax, es:[bx+6]
		mov	word ptr [bp+var_8+2], dx
		mov	word ptr [bp+var_8], ax
		les	bx, [bp+var_8]
		mov	dx, es:[bx+2]

loc_85FB:				; CODE XREF: sub_854B+96j
		test	cl, 10h
		jz	short loc_8623
		les	bx, [bp+arg_6]
		test	byte ptr es:[bx+0Ch], 1
		jz	short loc_8623
		push	[bp+n]		; n
		xor	ax, ax
		push	ax		; c
		push	ss
		les	bx, [bp+arg_6]
		push	word ptr es:[bx+36h] ; s
		nop
		push	cs
		call	near ptr _memset
		add	sp, 8
		jmp	loc_874E
; ---------------------------------------------------------------------------

loc_8623:				; CODE XREF: sub_854B+B3j sub_854B+BDj
		test	dl, 1
		jnz	short loc_862B
		jmp	loc_86CF
; ---------------------------------------------------------------------------

loc_862B:				; CODE XREF: sub_854B+DBj
		test	cl, 30h
		jnz	short loc_8633
		jmp	loc_86CF
; ---------------------------------------------------------------------------

loc_8633:				; CODE XREF: sub_854B+E3j
		test	cl, 20h
		jz	short loc_863A
		jmp	short loc_865D
; ---------------------------------------------------------------------------

loc_863A:				; CODE XREF: sub_854B+EBj
		les	bx, [bp+src]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+src+2], dx
		mov	word ptr [bp+src], ax
		les	bx, [bp+arg_6]
		test	byte ptr es:[bx+15h], 10h
		jz	short loc_8664
		mov	ax, word ptr [bp+src]
		mov	word ptr [bp+src+2], ds
		mov	word ptr [bp+src], ax

loc_865D:				; CODE XREF: sub_854B+EDj
		mov	[bp+var_14], 1
		jmp	short $+2

loc_8664:				; CODE XREF: sub_854B+107j
		push	word ptr [bp+var_8+2]
		push	word ptr [bp+var_8]
		les	bx, [bp+arg_6]
		push	word ptr es:[bx+12h]
		push	word ptr es:[bx+10h]
		push	cs
		call	near ptr sub_6D7C
		add	sp, 8
		or	ax, ax
		jnz	short loc_86C5
		mov	dx, word ptr [bp+src+2]
		mov	ax, word ptr [bp+src]
		mov	[bp+var_16], dx
		mov	[bp+var_18], ax
		push	word ptr [bp+var_8+2]
		push	word ptr [bp+var_8]
		les	bx, [bp+arg_6]
		push	word ptr es:[bx+12h]
		push	word ptr es:[bx+10h]
		push	word ptr [bp+src+2]
		push	word ptr [bp+src]
		push	cs
		call	near ptr sub_84C8
		add	sp, 0Ch
		mov	word ptr [bp+src+2], dx
		mov	word ptr [bp+src], ax
		mov	dx, word ptr [bp+src+2]
		mov	ax, word ptr [bp+src]
		cmp	dx, [bp+var_16]
		jnz	short loc_86C0
		cmp	ax, [bp+var_18]
		jz	short loc_86C5

loc_86C0:				; CODE XREF: sub_854B+16Ej
		mov	[bp+var_14], 1

loc_86C5:				; CODE XREF: sub_854B+133j
					; sub_854B+173j
		push	[bp+n]
		push	ss
		lea	ax, [bp+src]
		jmp	loc_8799
; ---------------------------------------------------------------------------

loc_86CF:				; CODE XREF: sub_854B+DDj sub_854B+E5j
		les	bx, [bp+arg_6]
		test	byte ptr es:[bx+14h], 1
		jz	short loc_8755
		push	word ptr [bp+var_8+2]
		push	word ptr [bp+var_8]
		les	bx, [bp+arg_6]
		push	word ptr es:[bx+12h]
		push	word ptr es:[bx+10h]
		push	cs
		call	near ptr sub_6D7C
		add	sp, 8
		or	ax, ax
		jnz	short loc_871E
		push	word ptr [bp+var_8+2]
		push	word ptr [bp+var_8]
		les	bx, [bp+arg_6]
		push	word ptr es:[bx+12h]
		push	word ptr es:[bx+10h]
		push	word ptr [bp+src+2]
		push	word ptr [bp+src]
		push	cs
		call	near ptr sub_84C8
		add	sp, 0Ch
		mov	word ptr [bp+src+2], dx
		mov	word ptr [bp+src], ax
		mov	[bp+var_14], 1

loc_871E:				; CODE XREF: sub_854B+1A8j
		les	bx, [bp+var_8]
		test	byte ptr es:[bx+8], 1
		jz	short loc_879C
		les	bx, [bp+arg_0]
		push	word ptr es:[bx+0Eh]
		les	bx, [bp+arg_0]
		push	word ptr es:[bx+0Ch]
		push	word ptr es:[bx+0Ah]
		push	word ptr [bp+src+2]
		push	word ptr [bp+src]
		push	ss
		les	bx, [bp+arg_6]
		push	word ptr es:[bx+36h]
		call	sub_727A
		add	sp, 0Eh

loc_874E:				; CODE XREF: sub_854B+D5j
					; sub_854B+227j
		mov	[bp+var_14], 1
		jmp	short loc_87B5
; ---------------------------------------------------------------------------

loc_8755:				; CODE XREF: sub_854B+18Cj
		test	cl, 20h
		jz	short loc_8774
		push	[bp+n]		; n
		push	ss
		lea	ax, [bp+src]
		push	ax		; src
		push	ss
		les	bx, [bp+arg_6]
		push	word ptr es:[bx+36h] ; dest
		nop
		push	cs
		call	near ptr _memcpy
		add	sp, 0Ah
		jmp	short loc_874E
; ---------------------------------------------------------------------------

loc_8774:				; CODE XREF: sub_854B+20Dj
		test	cl, 10h
		jz	short loc_879C
		les	bx, [bp+arg_6]
		mov	ax, es:[bx+0Eh]
		cmp	ax, [bp+n]
		jz	short loc_879C
		les	bx, [bp+src]
		mov	ax, es:[bx]
		mov	[bp+var_10], ds
		mov	[bp+var_12], ax
		mov	ax, 4
		push	ax
		push	ss
		lea	ax, [bp+var_12]

loc_8799:				; CODE XREF: sub_854B+181j
		push	ax
		jmp	short loc_87A5
; ---------------------------------------------------------------------------

loc_879C:				; CODE XREF: sub_854B+1DBj
					; sub_854B+22Cj ...
		push	[bp+n]		; n
		push	word ptr [bp+src+2]
		push	word ptr [bp+src] ; src

loc_87A5:				; CODE XREF: sub_854B+24Fj
		push	ss
		les	bx, [bp+arg_6]
		push	word ptr es:[bx+36h] ; dest
		nop
		push	cs
		call	near ptr _memcpy
		add	sp, 0Ah

loc_87B5:				; CODE XREF: sub_854B+208j
		cmp	[bp+var_14], 0
		jnz	short loc_87EB
		les	bx, [bp+var_8]
		test	byte ptr es:[bx+8], 2
		jz	short loc_87E3
		les	bx, [bp+var_8]
		push	word ptr es:[bx+22h]
		les	bx, [bp+var_8]
		push	word ptr es:[bx+20h]
		push	word ptr es:[bx+1Eh]
		push	word ptr [bp+src+2]
		push	word ptr [bp+src]
		call	sub_8257
		add	sp, 0Ah

loc_87E3:				; CODE XREF: sub_854B+278j
		les	bx, [bp+arg_6]
		mov	byte ptr es:[bx+38h], 0

loc_87EB:				; CODE XREF: sub_854B+2Cj sub_854B+39j ...
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_854B	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_87F1	proc near		; CODE XREF: __Local_unwind+15p
					; __Return_unwind+15p ...

var_20		= word ptr -20h
var_1E		= word ptr -1Eh
var_1C		= word ptr -1Ch
var_1A		= dword	ptr -1Ah
var_16		= dword	ptr -16h
var_12		= word ptr -12h
var_10		= word ptr -10h
var_E		= word ptr -0Eh
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= dword	ptr -4
arg_0		= word ptr  4
arg_2		= word ptr  6
arg_4		= word ptr  8
arg_8		= word ptr  0Ch
arg_A		= word ptr  0Eh
arg_C		= word ptr  10h
arg_E		= word ptr  12h

		push	bp
		mov	bp, sp
		sub	sp, 20h
		push	si
		push	di
		mov	[bp+var_E], 0
		les	bx, ss:16h
		mov	si, [bp+arg_0]
		mov	ax, ss:[si+arg_A]
		mov	es:[bx+6], ax
		mov	[bp+var_C], ax
		les	bx, ss:16h
		mov	si, [bp+arg_0]
		mov	ax, ss:[si+arg_C]
		mov	es:[bx+8], ax
		mov	bx, [bp+arg_0]
		mov	dx, ss:[bx+arg_4]
		mov	ax, ss:[bx+arg_2]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		les	bx, [bp+var_4]
		mov	ax, [bp+arg_0]
		sub	ax, es:[bx+4]
		mov	[bp+var_A], ax
		mov	bx, [bp+arg_0]
		mov	ax, ss:[bx+arg_8]
		jmp	loc_8996
; ---------------------------------------------------------------------------

loc_8849:				; CODE XREF: sub_87F1+1B6j
		mov	ax, [bp+var_6]
		mov	[bp+var_12], ax
		les	bx, [bp+var_4]
		add	bx, [bp+var_12]
		mov	ax, es:[bx]
		mov	[bp+var_8], ax
		add	[bp+var_12], 2
		les	bx, [bp+var_4]
		add	bx, [bp+var_12]
		mov	ax, es:[bx]
		mov	[bp+var_10], ax
		add	[bp+var_12], 2
		mov	bx, [bp+arg_0]
		mov	ax, [bp+var_8]
		mov	ss:[bx+arg_8], ax
		mov	bx, [bp+var_10]
		cmp	bx, 5
		jbe	short loc_8884
		jmp	loc_8993
; ---------------------------------------------------------------------------

loc_8884:				; CODE XREF: sub_87F1+8Ej
		add	bx, bx
		jmp	cs:off_89B0[bx]

loc_888B:				; DATA XREF: seg000:off_89B0o
		les	bx, [bp+var_4]
		add	bx, [bp+var_12]
		mov	dx, es:[bx+6]
		mov	ax, es:[bx+4]
		mov	word ptr dword_2D0E8+2,	dx
		mov	word ptr dword_2D0E8, ax
		mov	bx, [bp+arg_0]
		mov	ss:[bx+arg_E], 1
		push	ds
		pop	es
		assume es:dseg
		push	ds
		mov	ds, [bp+var_C]
		push	bp
		mov	bp, [bp+var_A]
		call	es:dword_2D0E8
		pop	bp
		pop	ds
		mov	bx, [bp+arg_0]
		mov	ss:[bx+arg_E], 0
		jmp	loc_8993
; ---------------------------------------------------------------------------

loc_88C6:				; CODE XREF: sub_87F1+95j
					; DATA XREF: seg000:89B8o
		add	[bp+var_12], 4
		mov	dx, ss:18h
		mov	ax, ss:16h
		jmp	short loc_88F5
; ---------------------------------------------------------------------------

loc_88D5:				; CODE XREF: sub_87F1+11Cj
		les	bx, [bp+var_16]
		assume es:nothing
		mov	ax, es:[bx+24h]
		cmp	ax, [bp+arg_0]
		jnz	short loc_88EF
		les	bx, [bp+var_16]
		mov	ax, es:[bx+2Ah]
		cmp	ax, [bp+var_6]
		jnz	short loc_88EF
		jmp	short loc_890F
; ---------------------------------------------------------------------------

loc_88EF:				; CODE XREF: sub_87F1+EEj sub_87F1+FAj
		mov	dx, word ptr [bp+var_16+2]
		mov	ax, word ptr [bp+var_16]

loc_88F5:				; CODE XREF: sub_87F1+E2j
		mov	word ptr [bp+var_1A+2],	dx
		mov	word ptr [bp+var_1A], ax
		les	bx, [bp+var_1A]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_16+2],	dx
		mov	word ptr [bp+var_16], ax
		or	ax, dx
		jnz	short loc_88D5

loc_890F:				; CODE XREF: sub_87F1+FCj
		les	bx, [bp+var_16]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		les	bx, [bp+var_1A]
		mov	es:[bx+2], dx
		mov	es:[bx], ax
		push	word ptr [bp+var_16+2]
		push	word ptr [bp+var_16]
		call	sub_82A7
		pop	cx
		pop	cx
		push	ds
		les	bx, [bp+var_16]
		mov	ds, word ptr es:[bx+18h]
		push	word ptr [bp+var_16+2]
		push	word ptr [bp+var_16]
		les	bx, [bp+var_16]
		call	dword ptr es:[bx+1Ah]
		pop	cx
		pop	cx
		pop	ds
		jmp	short loc_8993
; ---------------------------------------------------------------------------

loc_8948:				; CODE XREF: sub_87F1+95j
					; DATA XREF: seg000:89BAo
		les	bx, [bp+var_4]
		add	bx, [bp+var_12]
		mov	ax, es:[bx]
		mov	[bp+var_1C], ax
		add	[bp+var_12], 2
		les	bx, [bp+var_4]
		add	bx, [bp+var_12]
		mov	ax, es:[bx]
		mov	[bp+var_1E], ds
		mov	[bp+var_20], ax
		mov	ax, word ptr [bp+var_4+2]
		mov	dx, [bp+var_20]
		mov	[bp+var_1E], ax
		mov	[bp+var_20], dx
		push	[bp+var_A]
		push	[bp+arg_0]
		mov	ax, [bp+var_1C]
		add	ax, [bp+var_E]
		cwd
		push	dx
		push	ax
		push	[bp+var_1E]
		push	[bp+var_20]
		call	sub_93C7
		add	sp, 0Ch
		mov	[bp+var_E], ax
		jmp	short $+2

loc_8993:				; CODE XREF: sub_87F1+90j sub_87F1+95j ...
		mov	ax, [bp+var_8]

loc_8996:				; CODE XREF: sub_87F1+55j
		mov	[bp+var_6], ax
		cmp	[bp+var_6], 0
		jz	short loc_89AA
		mov	ax, [bp+var_6]
		cmp	ax, [bp+arg_2]
		jz	short loc_89AA
		jmp	loc_8849
; ---------------------------------------------------------------------------

loc_89AA:				; CODE XREF: sub_87F1+1ACj
					; sub_87F1+1B4j
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_87F1	endp

; ---------------------------------------------------------------------------
off_89B0	dw offset loc_888B	; DATA XREF: sub_87F1+95r
		dw offset loc_8993
		dw offset loc_8993
		dw offset loc_8993
		dw offset loc_88C6
		dw offset loc_8948

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__Local_unwind	proc far

var_2		= word ptr -2
arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		sub	sp, 2
		push	si
		push	di
		mov	ax, ss:14h
		mov	[bp+var_2], ax
		push	[bp+arg_0]
		push	[bp+var_2]
		call	sub_87F1
		pop	cx
		pop	cx
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
__Local_unwind	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__Return_unwind	proc far

var_2		= word ptr -2

		push	bp
		mov	bp, sp
		sub	sp, 2
		push	si
		push	di
		mov	ax, ss:14h
		mov	[bp+var_2], ax
		xor	ax, ax
		push	ax
		push	[bp+var_2]
		call	sub_87F1
		pop	cx
		pop	cx
		mov	bx, [bp+var_2]
		mov	ax, ss:[bx]
		mov	ss:14h,	ax
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
__Return_unwind	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_8A06	proc near		; CODE XREF: __ExceptionHandler+1B1p

var_8		= word ptr -8
var_6		= word ptr -6
var_4		= dword	ptr -4
arg_0		= word ptr  4
arg_2		= word ptr  6
arg_4		= dword	ptr  8

		push	bp
		mov	bp, sp
		sub	sp, 8
		push	si
		push	di
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		add	ax, 4
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		jmp	short loc_8A74
; ---------------------------------------------------------------------------

loc_8A1F:				; CODE XREF: sub_8A06+78j
		les	bx, [bp+var_4]
		mov	dx, es:[bx+6]
		mov	ax, es:[bx+4]
		mov	[bp+var_6], dx
		mov	[bp+var_8], ax
		mov	ax, [bp+var_8]
		or	ax, [bp+var_6]
		jz	short loc_8A68
		xor	ax, ax
		push	ax
		les	bx, [bp+arg_4]
		push	word ptr es:[bx+0Ch]
		push	[bp+var_6]
		push	[bp+var_8]
		les	bx, [bp+arg_4]
		push	word ptr es:[bx+0Ah]
		push	word ptr es:[bx+8]
		les	bx, [bp+arg_4]
		push	word ptr es:[bx+6]
		push	word ptr es:[bx+4]
		call	sub_7175
		add	sp, 10h
		or	ax, ax
		jz	short loc_8A70

loc_8A68:				; CODE XREF: sub_8A06+30j
		mov	dx, word ptr [bp+var_4+2]
		mov	ax, word ptr [bp+var_4]
		jmp	short loc_8A84
; ---------------------------------------------------------------------------

loc_8A70:				; CODE XREF: sub_8A06+60j
		add	word ptr [bp+var_4], 10h

loc_8A74:				; CODE XREF: sub_8A06+17j
		les	bx, [bp+var_4]
		mov	ax, es:[bx]
		or	ax, es:[bx+2]
		jnz	short loc_8A1F
		xor	dx, dx
		xor	ax, ax

loc_8A84:				; CODE XREF: sub_8A06+68j
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_8A06	endp

; ---------------------------------------------------------------------------
		db 2 dup(2Ah), 42h, 2 dup(43h),	78h, 68h, 31h

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__ExceptionHandler proc	far		; DATA XREF: ___InitExceptBlocks+28o

var_38		= word ptr -38h
var_36		= word ptr -36h
var_34		= word ptr -34h
var_32		= word ptr -32h
var_30		= word ptr -30h
var_2E		= word ptr -2Eh
var_2C		= word ptr -2Ch
var_2A		= word ptr -2Ah
var_28		= word ptr -28h
var_26		= word ptr -26h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= word ptr -1Ch
var_1A		= word ptr -1Ah
var_18		= word ptr -18h
var_16		= word ptr -16h
var_14		= word ptr -14h
var_12		= word ptr -12h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch
arg_8		= word ptr  0Eh
arg_A		= word ptr  10h
arg_E		= word ptr  14h
arg_10		= word ptr  16h
arg_12		= word ptr  18h
arg_14		= word ptr  1Ah

		push	bp
		mov	bp, sp
		sub	sp, 38h
		push	si
		push	di
		mov	ax, [bp+arg_0]
		mov	[bp+var_2], ax
		mov	ax, [bp+arg_4]
		mov	[bp+var_4], ax
		mov	dx, [bp+arg_8]
		mov	ax, [bp+arg_6]
		mov	[bp+var_6], dx
		mov	[bp+var_8], ax
		mov	bx, [bp+var_2]
		mov	dx, ss:[bx+arg_14]
		mov	ax, ss:[bx+arg_12]
		mov	word ptr [bp+var_C+2], dx
		mov	word ptr [bp+var_C], ax
		mov	bx, [bp+var_4]
		mov	dx, ss:[bx+arg_2]
		mov	ax, ss:[bx+arg_0]
		mov	word ptr [bp+var_10+2],	dx
		mov	word ptr [bp+var_10], ax
		les	bx, [bp+var_10]
		mov	ax, [bp+var_4]
		sub	ax, es:[bx+4]
		mov	[bp+var_16], ax
		mov	bx, [bp+var_4]
		mov	ax, ss:[bx+arg_4]
		mov	[bp+var_18], ax
		les	bx, ss:16h
		mov	si, [bp+var_4]
		mov	ax, ss:[si+arg_8]
		mov	es:[bx+6], ax
		mov	[bp+var_1A], ax
		les	bx, ss:16h
		mov	si, [bp+var_4]
		mov	ax, ss:[si+arg_A]
		mov	es:[bx+8], ax
		mov	[bp+var_1C], ax
		mov	bx, [bp+var_2]
		test	byte ptr ss:[bx+4], 6
		jnz	short loc_8B1E
		jmp	loc_8BC6
; ---------------------------------------------------------------------------

loc_8B1E:				; CODE XREF: __ExceptionHandler+87j
		xor	ax, ax
		push	ax
		push	[bp+var_4]
		call	sub_87F1
		pop	cx
		pop	cx
		mov	bx, [bp+var_2]
		cmp	word ptr ss:[bx+2], 0EEFh
		jz	short loc_8B37
		jmp	loc_8DF9
; ---------------------------------------------------------------------------

loc_8B37:				; CODE XREF: __ExceptionHandler+A0j
		cmp	word ptr ss:[bx], 0FACEh
		jz	short loc_8B41
		jmp	loc_8DF9
; ---------------------------------------------------------------------------

loc_8B41:				; CODE XREF: __ExceptionHandler+AAj
		les	bx, [bp+var_10]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_20+2],	dx
		mov	word ptr [bp+var_20], ax
		mov	ax, word ptr [bp+var_20]
		or	ax, word ptr [bp+var_20+2]
		jnz	short loc_8B5C
		jmp	loc_8DF9
; ---------------------------------------------------------------------------

loc_8B5C:				; CODE XREF: __ExceptionHandler+C5j
		jmp	short loc_8B9A
; ---------------------------------------------------------------------------

loc_8B5E:				; CODE XREF: __ExceptionHandler+112j
		mov	ax, 1
		push	ax
		les	bx, [bp+var_C]
		push	word ptr es:[bx+0Ch]
		les	bx, [bp+var_20]
		push	word ptr es:[bx+2]
		push	word ptr es:[bx]
		les	bx, [bp+var_C]
		push	word ptr es:[bx+0Ah]
		push	word ptr es:[bx+8]
		les	bx, [bp+var_C]
		push	word ptr es:[bx+6]
		push	word ptr es:[bx+4]
		call	sub_7175
		add	sp, 10h
		or	ax, ax
		jz	short loc_8B96
		jmp	loc_8DF9
; ---------------------------------------------------------------------------

loc_8B96:				; CODE XREF: __ExceptionHandler+FFj
		add	word ptr [bp+var_20], 4

loc_8B9A:				; CODE XREF: __ExceptionHandler:loc_8B5Cj
		les	bx, [bp+var_20]
		mov	ax, es:[bx]
		or	ax, es:[bx+2]
		jnz	short loc_8B5E
		mov	ax, ss:14h
		mov	word ptr [bp+var_24+2],	ax
		mov	bx, [bp+var_4]
		mov	ax, ss:[bx]
		mov	ss:14h,	ax
		nop
		push	cs
		call	near ptr ___call_unexpected
; ---------------------------------------------------------------------------
		mov	ax, word ptr [bp+var_24+2]
		mov	ss:14h,	ax
		jmp	loc_8DF9
; ---------------------------------------------------------------------------

loc_8BC6:				; CODE XREF: __ExceptionHandler+89j
		mov	bx, [bp+var_4]
		mov	ax, ss:[bx+arg_6]
		jmp	loc_8DED
; ---------------------------------------------------------------------------

loc_8BD0:				; CODE XREF: __ExceptionHandler+364j
		mov	ax, [bp+var_12]
		mov	word ptr [bp+var_20], ax
		les	bx, [bp+var_10]
		add	bx, word ptr [bp+var_20]
		mov	ax, es:[bx]
		mov	[bp+var_14], ax
		add	word ptr [bp+var_20], 2
		les	bx, [bp+var_10]
		add	bx, word ptr [bp+var_20]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_20+2],	ax
		add	word ptr [bp+var_20], 2
		mov	bx, word ptr [bp+var_20+2]
		cmp	bx, 5
		jbe	short loc_8C01
		jmp	loc_8DEA
; ---------------------------------------------------------------------------

loc_8C01:				; CODE XREF: __ExceptionHandler+16Aj
		add	bx, bx
		jmp	cs:off_8E02[bx]

loc_8C08:				; DATA XREF: seg000:8E08o
		mov	bx, [bp+var_2]
		cmp	word ptr ss:[bx+2], 0EEFh
		jz	short loc_8C16
		jmp	loc_8DEA
; ---------------------------------------------------------------------------

loc_8C16:				; CODE XREF: __ExceptionHandler+17Fj
		cmp	word ptr ss:[bx], 0FACEh
		jz	short loc_8C20
		jmp	loc_8DEA
; ---------------------------------------------------------------------------

loc_8C20:				; CODE XREF: __ExceptionHandler+189j
		les	bx, [bp+var_10]
		add	bx, word ptr [bp+var_20]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	[bp+var_26], dx
		mov	[bp+var_28], ax
		add	word ptr [bp+var_20], 4
		push	word ptr [bp+var_C+2]
		push	word ptr [bp+var_C]
		push	[bp+var_26]
		push	[bp+var_28]
		call	sub_8A06
		add	sp, 8
		mov	word ptr [bp+var_24+2],	dx
		mov	word ptr [bp+var_24], ax
		mov	ax, word ptr [bp+var_24]
		or	ax, word ptr [bp+var_24+2]
		jnz	short loc_8C5A
		jmp	loc_8DEA
; ---------------------------------------------------------------------------

loc_8C5A:				; CODE XREF: __ExceptionHandler+1C3j
		les	bx, [bp+var_C]
		mov	ax, [bp+var_4]
		mov	es:[bx+24h], ax
		les	bx, [bp+var_C]
		mov	dx, word ptr [bp+var_24+2]
		mov	ax, word ptr [bp+var_24]
		mov	es:[bx+28h], dx
		mov	es:[bx+26h], ax
		les	bx, [bp+var_C]
		mov	ax, word ptr [bp+var_20]
		mov	es:[bx+2Ah], ax
		mov	ax, [bp+var_12]
		mov	[bp+var_30], ax
		mov	ax, word ptr [bp+var_20]
		mov	[bp+var_2E], ax
		les	bx, [bp+var_24]

loc_8C8E:				; CODE XREF: __ExceptionHandler+355j
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	[bp+var_2A], dx
		mov	[bp+var_2C], ax
		push	[bp+var_2]
		push	[bp+var_4]
		push	cs
		call	near ptr __Global_unwind
		pop	cx
		pop	cx
		push	[bp+var_30]
		push	[bp+var_4]
		call	sub_87F1
		pop	cx
		pop	cx
		mov	bx, [bp+var_4]
		mov	ax, [bp+var_2E]
		mov	ss:[bx+arg_6], ax
		cmp	word ptr [bp+var_20+2],	3
		jnz	short loc_8CE0
		push	[bp+var_16]
		push	[bp+var_26]
		push	[bp+var_28]
		push	word ptr [bp+var_C+2]
		push	word ptr [bp+var_C]
		push	[bp+var_4]
		push	word ptr [bp+var_24+2]
		push	word ptr [bp+var_24]
		call	sub_854B
		add	sp, 10h

loc_8CE0:				; CODE XREF: __ExceptionHandler+22Ej
		mov	dx, [bp+var_2A]
		mov	ax, [bp+var_2C]
		mov	si, [bp+var_1C]
		mov	ds, [bp+var_1A]
		mov	bx, [bp+var_18]
		mov	cx, [bp+var_16]
		push	cs
		call	near ptr ___JumpToCatch__
		jmp	loc_8DEA
; ---------------------------------------------------------------------------

loc_8CF9:				; CODE XREF: __ExceptionHandler+171j
					; DATA XREF: seg000:8E04o
		mov	bx, [bp+var_2]
		cmp	word ptr ss:[bx+2], 0EEFh
		jnz	short loc_8D0E
		cmp	word ptr ss:[bx], 0FACEh
		jnz	short loc_8D0E
		jmp	loc_8DEA
; ---------------------------------------------------------------------------

loc_8D0E:				; CODE XREF: __ExceptionHandler+270j
					; __ExceptionHandler+277j
		mov	ax, [bp+var_2]
		mov	[bp+var_36], ax
		mov	dx, [bp+var_6]
		mov	ax, [bp+var_8]
		mov	[bp+var_32], dx
		mov	[bp+var_34], ax
		mov	bx, [bp+var_2]
		mov	dx, ss:[bx+2]
		mov	ax, ss:[bx]
		mov	bx, [bp+var_4]
		mov	ss:[bx+arg_10],	dx
		mov	ss:[bx+arg_E], ax
		lea	ax, [bp+var_36]
		mov	bx, [bp+var_4]
		mov	ss:[bx+arg_12],	ax
		les	bx, [bp+var_10]
		add	bx, word ptr [bp+var_20]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr dword_2D0EC+2,	dx
		mov	word ptr dword_2D0EC, ax
		mov	ax, ds
		mov	es, ax
		assume es:dseg
		push	si
		mov	si, [bp+var_1C]
		push	ds
		mov	ds, [bp+var_1A]
		push	bp
		mov	bp, [bp+var_16]
		call	es:dword_2D0EC
		pop	bp
		pop	ds
		pop	si
		mov	[bp+var_38], ax
		jmp	short loc_8DA5
; ---------------------------------------------------------------------------

loc_8D70:				; CODE XREF: __ExceptionHandler+171j
					; DATA XREF: seg000:8E06o
		mov	bx, [bp+var_2]
		cmp	word ptr ss:[bx+2], 0EEFh
		jnz	short loc_8D84
		cmp	word ptr ss:[bx], 0FACEh
		jnz	short loc_8D84
		jmp	short loc_8DEA
; ---------------------------------------------------------------------------

loc_8D84:				; CODE XREF: __ExceptionHandler+2E7j
					; __ExceptionHandler+2EEj
		mov	bx, [bp+var_2]
		mov	dx, ss:[bx+2]
		mov	ax, ss:[bx]
		mov	bx, [bp+var_4]
		mov	ss:[bx+arg_10],	dx
		mov	ss:[bx+arg_E], ax
		les	bx, [bp+var_10]
		assume es:nothing
		add	bx, word ptr [bp+var_20]
		mov	ax, es:[bx]
		mov	[bp+var_38], ax

loc_8DA5:				; CODE XREF: __ExceptionHandler+2DCj
		cmp	[bp+var_38], 0
		jge	short loc_8DC3
		mov	bx, [bp+var_2]
		test	byte ptr ss:[bx+4], 1
		jz	short loc_8DBF
		mov	bx, [bp+var_4]
		mov	ax, [bp+var_14]
		mov	ss:[bx+arg_6], ax

loc_8DBF:				; CODE XREF: __ExceptionHandler+321j
		xor	ax, ax
		jmp	short loc_8DFC
; ---------------------------------------------------------------------------

loc_8DC3:				; CODE XREF: __ExceptionHandler+317j
		cmp	[bp+var_38], 0
		jnz	short loc_8DCB
		jmp	short loc_8DEA
; ---------------------------------------------------------------------------

loc_8DCB:				; CODE XREF: __ExceptionHandler+335j
		mov	bx, [bp+var_4]
		mov	ss:[bx+arg_12],	0
		add	word ptr [bp+var_20], 4
		mov	ax, [bp+var_14]
		mov	[bp+var_2E], ax
		mov	[bp+var_30], ax
		les	bx, [bp+var_10]
		add	bx, word ptr [bp+var_20]
		jmp	loc_8C8E
; ---------------------------------------------------------------------------

loc_8DEA:				; CODE XREF: __ExceptionHandler+16Cj
					; __ExceptionHandler+171j ...
		mov	ax, [bp+var_14]

loc_8DED:				; CODE XREF: __ExceptionHandler+13Bj
		mov	[bp+var_12], ax
		cmp	[bp+var_12], 0
		jz	short loc_8DF9
		jmp	loc_8BD0
; ---------------------------------------------------------------------------

loc_8DF9:				; CODE XREF: __ExceptionHandler+A2j
					; __ExceptionHandler+ACj ...
		mov	ax, 1

loc_8DFC:				; CODE XREF: __ExceptionHandler+32Fj
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
__ExceptionHandler endp

; ---------------------------------------------------------------------------
off_8E02	dw offset loc_8DEA	; DATA XREF: __ExceptionHandler+171r
		dw offset loc_8CF9
		dw offset loc_8D70
		dw offset loc_8C08
		dw offset loc_8DEA
		dw offset loc_8DEA
		db 4 dup(0), 0A1h, 8Eh
		dw seg seg000
		db 14h dup(0), 0B1h, 8Eh
		dw seg seg000
		db 14h dup(0), 0E2h, 0FFh, 2 dup(0), 3,	0, 26h,	8Eh
		dw seg seg000
		db 2 dup(0), 4,	0, 6, 0, 3, 0, 0Eh, 8Eh
		dw seg seg000
		db 6, 0, 4, 0

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_8E5C	proc far		; CODE XREF: sub_8F49+50p

var_1E		= word ptr -1Eh
var_12		= word ptr -12h
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= dword	ptr  0Ah
arg_8		= word ptr  0Eh

		push	bp
		mov	bp, sp
		sub	sp, 1Eh
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 8E3Eh
		nop
		push	cs
		call	___InitExceptBlocks
		mov	[bp+var_12], 6
		mov	[bp+var_12], 12h
		push	[bp+arg_8]
		les	bx, [bp+arg_4]
		push	word ptr es:[bx+22h]
		les	bx, [bp+arg_4]
		push	word ptr es:[bx+20h]
		push	word ptr es:[bx+1Eh]
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	sub_75C8
		add	sp, 0Ch
		mov	[bp+var_12], 6
		jmp	short loc_8EAA
; ---------------------------------------------------------------------------
		nop
		push	cs
		call	near ptr ___call_terminate
; ---------------------------------------------------------------------------
		push	cs
		call	near ptr @_CatchCleanup$qv ; _CatchCleanup(void)

loc_8EAA:				; CODE XREF: sub_8E5C+43j
		mov	[bp+var_12], 0
		jmp	short loc_8EBA
; ---------------------------------------------------------------------------
		nop
		push	cs
		call	near ptr ___call_terminate
; ---------------------------------------------------------------------------
		push	cs
		call	near ptr @_CatchCleanup$qv ; _CatchCleanup(void)

loc_8EBA:				; CODE XREF: sub_8E5C+53j
		push	[bp+var_1E]
		nop
		push	cs
		call	near ptr ___ExitExceptBlocks
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_8E5C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_8EC8	proc far		; CODE XREF: sub_8F49+DCp
					; sub_8F49+162p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= dword	ptr  0Ah
arg_8		= word ptr  0Eh
arg_C		= word ptr  12h
arg_E		= word ptr  14h
arg_10		= word ptr  16h

		push	bp
		mov	bp, sp
		sub	sp, 8
		push	si
		push	di
		mov	cx, [bp+arg_C]
		jmp	short loc_8F37
; ---------------------------------------------------------------------------

loc_8ED5:				; CODE XREF: sub_8EC8+79j
		les	bx, [bp+arg_4]
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		add	ax, es:[bx+4]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		cmp	[bp+arg_E], 0
		jz	short loc_8EFD
		les	bx, [bp+var_4]
		mov	ax, es:[bx]
		mov	dx, word ptr [bp+var_4+2]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax

loc_8EFD:				; CODE XREF: sub_8EC8+24j
		les	bx, [bp+arg_4]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_8+2], dx
		mov	word ptr [bp+var_8], ax
		les	bx, [bp+var_8]
		test	byte ptr es:[bx+8], 2
		jz	short loc_8F37
		push	[bp+arg_10]
		xor	ax, ax
		push	ax
		xor	ax, ax
		push	ax
		push	cx
		push	word ptr [bp+var_8+2]
		push	word ptr [bp+var_8]
		push	word ptr [bp+var_4+2]
		push	word ptr [bp+var_4]
		nop
		push	cs
		call	near ptr sub_8F49
		add	sp, 10h
		xor	cx, cx

loc_8F37:				; CODE XREF: sub_8EC8+Bj sub_8EC8+4Dj
		sub	word ptr [bp+arg_4], 8
		mov	ax, word ptr [bp+arg_4]
		cmp	ax, [bp+arg_8]
		jnb	short loc_8ED5
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_8EC8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_8F49	proc far		; CODE XREF: sub_8EC8+67p
					; sub_8F49+25Ep ...

var_2A		= word ptr -2Ah
var_28		= word ptr -28h
var_26		= word ptr -26h
var_24		= word ptr -24h
var_22		= dword	ptr -22h
var_1E		= word ptr -1Eh
var_1C		= word ptr -1Ch
var_1A		= word ptr -1Ah
var_18		= dword	ptr -18h
var_14		= word ptr -14h
var_12		= word ptr -12h
var_10		= dword	ptr -10h
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= dword	ptr -8
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= dword	ptr  0Ah
arg_8		= word ptr  0Eh
arg_A		= word ptr  10h
arg_C		= word ptr  12h
arg_E		= word ptr  14h

		push	bp
		mov	bp, sp
		sub	sp, 2Ah
		push	si
		push	di
		cmp	[bp+arg_C], 0
		jz	short loc_8F60
		les	bx, [bp+arg_4]
		mov	ax, es:[bx+1Ah]
		jmp	short loc_8F67
; ---------------------------------------------------------------------------

loc_8F60:				; CODE XREF: sub_8F49+Cj
		les	bx, [bp+arg_4]
		mov	ax, es:[bx+1Ch]

loc_8F67:				; CODE XREF: sub_8F49+15j
		mov	[bp+var_1A], 0
		mov	[bp+var_1C], ax
		mov	ax, [bp+arg_8]
		or	ax, [bp+arg_A]
		jz	short loc_8F89
		mov	dx, [bp+arg_A]
		mov	ax, [bp+arg_8]
		cmp	dx, [bp+var_1A]
		jb	short loc_8FA2
		jnz	short loc_8F89
		cmp	ax, [bp+var_1C]
		jb	short loc_8FA2

loc_8F89:				; CODE XREF: sub_8F49+2Cj sub_8F49+39j
		push	[bp+arg_C]
		push	word ptr [bp+arg_4+2]
		push	word ptr [bp+arg_4]
		push	[bp+arg_2]
		push	[bp+arg_0]
		push	cs
		call	near ptr sub_8E5C
		add	sp, 0Ah
		jmp	loc_920E
; ---------------------------------------------------------------------------

loc_8FA2:				; CODE XREF: sub_8F49+37j sub_8F49+3Ej
		mov	dx, [bp+arg_A]
		mov	ax, [bp+arg_8]
		mov	[bp+var_1A], dx
		mov	[bp+var_1C], ax
		les	bx, [bp+arg_4]
		mov	dx, word ptr [bp+arg_4+2]
		mov	ax, word ptr [bp+arg_4]
		add	ax, es:[bx+0Ch]
		mov	word ptr [bp+var_10+2],	dx
		mov	word ptr [bp+var_10], ax
		mov	[bp+var_A], dx
		mov	[bp+var_C], ax
		cmp	[bp+arg_C], 0
		jz	short loc_903B

loc_8FCD:				; CODE XREF: sub_8F49+F0j
		les	bx, [bp+var_10]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	[bp+var_1E], dx
		mov	word ptr [bp+var_22+2],	ax
		mov	ax, word ptr [bp+var_22+2]
		or	ax, [bp+var_1E]
		jz	short loc_903B
		les	bx, [bp+var_22+2]
		test	byte ptr es:[bx+8], 2
		jz	short loc_9035
		les	bx, [bp+var_22+2]
		mov	bx, es:[bx+1Ch]
		xor	ax, ax
		cmp	ax, [bp+var_1A]
		jb	short loc_902E
		jnz	short loc_9004
		cmp	bx, [bp+var_1C]
		jb	short loc_902E

loc_9004:				; CODE XREF: sub_8F49+B4j
		push	[bp+arg_E]
		mov	ax, 1
		push	ax
		push	[bp+var_1C]
		push	[bp+var_A]
		push	[bp+var_C]
		mov	ax, word ptr [bp+var_10]
		add	ax, 8
		push	word ptr [bp+var_10+2]
		push	ax

loc_901E:				; CODE XREF: sub_8F49+2BBj
		push	[bp+arg_2]
		push	[bp+arg_0]
		push	cs
		call	near ptr sub_8EC8
		add	sp, 12h
		jmp	loc_920E
; ---------------------------------------------------------------------------

loc_902E:				; CODE XREF: sub_8F49+B2j sub_8F49+B9j
		sub	[bp+var_1C], bx
		sbb	[bp+var_1A], 0

loc_9035:				; CODE XREF: sub_8F49+A4j
		add	word ptr [bp+var_10], 8
		jmp	short loc_8FCD
; ---------------------------------------------------------------------------

loc_903B:				; CODE XREF: sub_8F49+82j sub_8F49+9Aj
		les	bx, [bp+arg_4]
		mov	dx, word ptr [bp+arg_4+2]
		mov	ax, word ptr [bp+arg_4]
		add	ax, es:[bx+0Ah]
		mov	word ptr [bp+var_8+2], dx
		mov	word ptr [bp+var_8], ax
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax

loc_9054:				; CODE XREF: sub_8F49+17Fj
		les	bx, [bp+var_8]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	[bp+var_1E], dx
		mov	word ptr [bp+var_22+2],	ax
		mov	ax, word ptr [bp+var_22+2]
		or	ax, [bp+var_1E]
		jz	short loc_90CA
		les	bx, [bp+var_22+2]
		test	byte ptr es:[bx+8], 2
		jz	short loc_90C4
		les	bx, [bp+var_22+2]
		mov	bx, es:[bx+1Ch]
		xor	ax, ax
		cmp	ax, [bp+var_1A]
		jb	short loc_90BD
		jnz	short loc_908B
		cmp	bx, [bp+var_1C]
		jb	short loc_90BD

loc_908B:				; CODE XREF: sub_8F49+13Bj
		push	[bp+arg_E]
		xor	ax, ax
		push	ax
		push	[bp+var_1C]
		push	[bp+var_2]
		push	[bp+var_4]
		mov	ax, word ptr [bp+var_8]
		add	ax, 8
		push	word ptr [bp+var_8+2]
		push	ax
		push	[bp+arg_2]
		push	[bp+arg_0]
		push	cs
		call	near ptr sub_8EC8
		add	sp, 12h
		cmp	[bp+arg_C], 0
		jnz	short loc_90BA
		jmp	loc_920E
; ---------------------------------------------------------------------------

loc_90BA:				; CODE XREF: sub_8F49+16Cj
		jmp	loc_91EE
; ---------------------------------------------------------------------------

loc_90BD:				; CODE XREF: sub_8F49+139j
					; sub_8F49+140j
		sub	[bp+var_1C], bx
		sbb	[bp+var_1A], 0

loc_90C4:				; CODE XREF: sub_8F49+12Bj
		add	word ptr [bp+var_8], 8
		jmp	short loc_9054
; ---------------------------------------------------------------------------

loc_90CA:				; CODE XREF: sub_8F49+121j
		les	bx, [bp+arg_4]
		mov	dx, word ptr [bp+arg_4+2]
		mov	ax, word ptr [bp+arg_4]
		add	ax, es:[bx+24h]
		mov	word ptr [bp+var_18+2],	dx
		mov	word ptr [bp+var_18], ax
		mov	[bp+var_12], dx
		mov	[bp+var_14], ax

loc_90E3:				; CODE XREF: sub_8F49+2C2j
		les	bx, [bp+var_18]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_22+2],	dx
		mov	word ptr [bp+var_22], ax
		mov	[bp+var_1E], 1
		les	bx, [bp+var_22]
		test	byte ptr es:[bx+3], 4
		jz	short loc_911D
		les	bx, [bp+var_22]
		mov	ax, es:[bx+0Ah]
		mov	[bp+var_1E], ax
		les	bx, [bp+var_22]
		mov	dx, es:[bx+8]
		mov	ax, es:[bx+6]
		mov	word ptr [bp+var_22+2],	dx
		mov	word ptr [bp+var_22], ax

loc_911D:				; CODE XREF: sub_8F49+1B7j
		les	bx, [bp+var_22]
		mov	ax, es:[bx+1Ah]
		imul	[bp+var_1E]
		mov	bx, ax
		xor	ax, ax
		cmp	ax, [bp+var_1A]
		ja	short loc_9141
		jb	short loc_9137
		cmp	bx, [bp+var_1C]
		jnb	short loc_9141

loc_9137:				; CODE XREF: sub_8F49+1E7j
		sub	[bp+var_1C], bx
		sbb	[bp+var_1A], 0
		jmp	loc_9207
; ---------------------------------------------------------------------------

loc_9141:				; CODE XREF: sub_8F49+1E5j
					; sub_8F49+1ECj ...
		les	bx, [bp+var_18]
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		add	ax, es:[bx+4]
		mov	[bp+var_24], dx
		mov	[bp+var_26], ax
		les	bx, [bp+var_18]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	[bp+var_28], dx
		mov	[bp+var_2A], ax
		cmp	[bp+var_1E], 1
		jbe	short loc_918D
		push	[bp+arg_E]
		push	[bp+var_1A]
		push	[bp+var_1C]
		les	bx, [bp+var_18]
		push	word ptr es:[bx+2]
		push	word ptr es:[bx]
		push	[bp+var_24]
		push	[bp+var_26]
		nop
		push	cs
		call	near ptr sub_9214
		add	sp, 0Eh
		jmp	short loc_91AD
; ---------------------------------------------------------------------------

loc_918D:				; CODE XREF: sub_8F49+21Fj
		push	[bp+arg_E]
		mov	ax, 1
		push	ax
		push	[bp+var_1A]
		push	[bp+var_1C]
		push	[bp+var_28]
		push	[bp+var_2A]
		push	[bp+var_24]
		push	[bp+var_26]
		push	cs
		call	near ptr sub_8F49
		add	sp, 10h

loc_91AD:				; CODE XREF: sub_8F49+242j
		mov	[bp+var_1A], 0
		mov	[bp+var_1C], 0
		sub	word ptr [bp+var_18], 6
		mov	ax, word ptr [bp+var_18]
		cmp	ax, [bp+var_14]
		jb	short loc_91C6
		jmp	loc_9141
; ---------------------------------------------------------------------------

loc_91C6:				; CODE XREF: sub_8F49+278j
		push	[bp+arg_E]
		xor	ax, ax
		push	ax
		xor	ax, ax
		push	ax
		push	[bp+var_2]
		push	[bp+var_4]
		push	word ptr [bp+var_8+2]
		push	word ptr [bp+var_8]
		push	[bp+arg_2]
		push	[bp+arg_0]
		push	cs
		call	near ptr sub_8EC8
		add	sp, 12h
		cmp	[bp+arg_C], 0
		jz	short loc_920E

loc_91EE:				; CODE XREF: sub_8F49:loc_90BAj
		push	[bp+arg_E]
		mov	ax, 1
		push	ax
		xor	ax, ax
		push	ax
		push	[bp+var_A]
		push	[bp+var_C]
		push	word ptr [bp+var_10+2]
		push	word ptr [bp+var_10]
		jmp	loc_901E
; ---------------------------------------------------------------------------

loc_9207:				; CODE XREF: sub_8F49+1F5j
		add	word ptr [bp+var_18], 6
		jmp	loc_90E3
; ---------------------------------------------------------------------------

loc_920E:				; CODE XREF: sub_8F49+56j sub_8F49+E2j ...
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_8F49	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_9214	proc far		; CODE XREF: sub_8F49+23Cp
					; sub_93C7+316p

var_E		= word ptr -0Eh
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= dword	ptr -4
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch
arg_8		= word ptr  0Eh
arg_A		= word ptr  10h
arg_C		= word ptr  12h

		push	bp
		mov	bp, sp
		sub	sp, 0Eh
		push	si
		push	di
		mov	dx, [bp+arg_6]
		mov	ax, [bp+arg_4]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		les	bx, [bp+var_4]
		mov	ax, es:[bx+0Ah]
		mov	[bp+var_6], ax
		les	bx, [bp+var_4]
		mov	dx, es:[bx+8]
		mov	ax, es:[bx+6]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		les	bx, [bp+var_4]
		mov	ax, es:[bx+1Ah]
		mov	[bp+var_8], 0
		mov	[bp+var_A], ax
		mov	ax, [bp+arg_8]
		or	ax, [bp+arg_A]
		jnz	short loc_926E
		mov	bx, [bp+var_6]
		xor	cx, cx
		mov	dx, [bp+var_8]
		mov	ax, [bp+var_A]
		call	N_LXMUL@
		mov	[bp+arg_A], dx
		mov	[bp+arg_8], ax

loc_926E:				; CODE XREF: sub_9214+44j
		push	[bp+var_8]
		push	[bp+var_A]
		push	[bp+arg_A]
		push	[bp+arg_8]
		call	near ptr N_LUDIV@
		mov	[bp+var_C], dx
		mov	[bp+var_E], ax
		mov	cx, [bp+var_C]
		mov	bx, [bp+var_E]
		mov	dx, [bp+var_8]
		mov	ax, [bp+var_A]
		call	N_LXMUL@
		sub	[bp+arg_8], ax
		sbb	[bp+arg_A], dx
		les	bx, [bp+var_4]
		mov	bx, es:[bx]
		xor	cx, cx
		mov	dx, [bp+var_C]
		mov	ax, [bp+var_E]
		call	N_LXMUL@
		mov	dx, [bp+arg_2]
		add	ax, [bp+arg_0]
		mov	[bp+arg_2], dx
		mov	[bp+arg_0], ax
		mov	ax, [bp+arg_8]
		or	ax, [bp+arg_A]
		jz	short loc_92FE
		push	[bp+arg_C]
		mov	ax, 1
		push	ax
		push	[bp+arg_A]
		push	[bp+arg_8]
		jmp	short loc_92EB
; ---------------------------------------------------------------------------

loc_92CC:				; CODE XREF: sub_9214+FAj
		les	bx, [bp+var_4]
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		sub	ax, es:[bx]
		mov	[bp+arg_2], dx
		mov	[bp+arg_0], ax
		push	[bp+arg_C]
		mov	ax, 1
		push	ax
		push	[bp+var_8]
		push	[bp+var_A]

loc_92EB:				; CODE XREF: sub_9214+B6j
		push	word ptr [bp+var_4+2]
		push	word ptr [bp+var_4]
		push	[bp+arg_2]
		push	[bp+arg_0]
		push	cs
		call	near ptr sub_8F49
		add	sp, 10h

loc_92FE:				; CODE XREF: sub_9214+A7j
		mov	ax, [bp+var_C]
		mov	dx, [bp+var_E]
		sub	[bp+var_E], 1
		sbb	[bp+var_C], 0
		or	dx, ax
		jnz	short loc_92CC
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_9214	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_9316	proc far		; CODE XREF: sub_93C7+1B1p
					; sub_93C7+2E4p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		sub	sp, 8
		push	si
		push	di
		mov	cx, [bp+arg_4]
		mov	bx, cx
		mov	dx, ss:[bx+2]
		mov	ax, ss:[bx]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		les	bx, [bp+var_4]
		mov	ax, es:[bx+8]
		and	ax, 50h
		cmp	ax, 50h	; 'P'
		jnz	short loc_93BB
		les	bx, [bp+var_4]
		cmp	word ptr es:[bx+6], 0FFFFh
		jz	short loc_93BB
		les	bx, [bp+var_4]
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		add	ax, es:[bx+6]
		mov	word ptr [bp+var_8+2], dx
		mov	word ptr [bp+var_8], ax
		les	bx, [bp+var_4]
		test	byte ptr es:[bx+9], 10h
		jz	short loc_9375
		les	bx, [bp+var_8]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_8+2], dx
		jmp	short loc_937E
; ---------------------------------------------------------------------------

loc_9375:				; CODE XREF: sub_9316+4Ej
		les	bx, [bp+var_8]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_8+2], ds

loc_937E:				; CODE XREF: sub_9316+5Dj
		mov	word ptr [bp+var_8], ax
		les	bx, [bp+var_8]
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		sub	ax, es:[bx-4]
		mov	[bp+arg_2], dx
		mov	[bp+arg_0], ax
		les	bx, [bp+var_8]
		mov	dx, word ptr [bp+var_8+2]
		mov	ax, word ptr [bp+var_8]
		sub	ax, es:[bx-2]
		mov	word ptr [bp+var_8+2], dx
		mov	word ptr [bp+var_8], ax
		les	bx, [bp+var_8]
		mov	dx, es:[bx-6]
		mov	ax, es:[bx-8]
		mov	bx, cx
		mov	ss:[bx+2], dx
		mov	ss:[bx], ax

loc_93BB:				; CODE XREF: sub_9316+27j sub_9316+31j
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_9316	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_93C7	proc near		; CODE XREF: sub_87F1+197p

font		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= word ptr -18h
var_16		= dword	ptr -16h
var_12		= dword	ptr -12h
var_E		= word ptr -0Eh
var_C		= dword	ptr -0Ch
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  4
arg_4		= word ptr  8
arg_6		= word ptr  0Ah
arg_8		= word ptr  0Ch
arg_A		= word ptr  0Eh
arg_16		= word ptr  1Ah
arg_18		= word ptr  1Ch

		push	bp
		mov	bp, sp
		sub	sp, 20h
		push	si
		push	di
		mov	[bp+var_E], 0
		cmp	word ptr [bp+arg_0], 0FFFFh
		jnz	short loc_93DD
		jmp	loc_97CA
; ---------------------------------------------------------------------------

loc_93DD:				; CODE XREF: sub_93C7+11j
		mov	bx, [bp+arg_8]
		mov	dx, ss:[bx+arg_18]
		mov	ax, ss:[bx+arg_16]
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		sub	ax, [bp+var_4]
		sbb	dx, [bp+var_2]
		mov	[bp+var_6], dx
		mov	[bp+var_8], ax
		mov	dx, [bp+arg_6]
		mov	ax, [bp+arg_4]
		sub	[bp+var_8], ax
		sbb	[bp+var_6], dx
		les	bx, [bp+arg_0]
		test	byte ptr es:[bx+4], 20h
		jz	short loc_9436
		les	bx, [bp+arg_0]
		les	bx, es:[bx]
		les	bx, es:[bx+6]
		mov	ax, es:[bx+1Ah]
		mov	[bp+var_6], 0
		mov	[bp+var_8], ax

loc_9436:				; CODE XREF: sub_93C7+57j
		les	bx, [bp+arg_0]
		test	byte ptr es:[bx+5], 1
		jz	short loc_944D
		les	bx, [bp+arg_0]
		les	bx, es:[bx]
		mov	ax, es:[bx+1Ch]
		jmp	loc_97CC
; ---------------------------------------------------------------------------

loc_944D:				; CODE XREF: sub_93C7+77j
		cmp	[bp+var_6], 0
		jg	short loc_947F
		jnz	short loc_945B
		cmp	[bp+var_8], 0
		ja	short loc_947F

loc_945B:				; CODE XREF: sub_93C7+8Cj
		les	bx, [bp+arg_0]
		mov	ax, es:[bx+4]
		and	ax, 3
		cmp	ax, 3
		jz	short loc_946D
		jmp	loc_97CA
; ---------------------------------------------------------------------------

loc_946D:				; CODE XREF: sub_93C7+A1j
		mov	dx, word ptr [bp+arg_0+2]
		mov	ax, word ptr [bp+arg_0]
		mov	word ptr [bp+var_C+2], dx
		mov	word ptr [bp+var_C], ax
		inc	[bp+var_E]
		jmp	loc_95E4
; ---------------------------------------------------------------------------

loc_947F:				; CODE XREF: sub_93C7+8Aj sub_93C7+92j
		mov	dx, word ptr [bp+arg_0+2]
		mov	ax, word ptr [bp+arg_0]
		mov	word ptr [bp+var_C+2], dx
		mov	word ptr [bp+var_C], ax

loc_948B:				; CODE XREF: sub_93C7+21Aj
		les	bx, [bp+var_C]
		mov	ax, es:[bx]
		or	ax, es:[bx+2]
		jnz	short loc_949E
		sub	word ptr [bp+var_C], 0Ah
		jmp	loc_95E4
; ---------------------------------------------------------------------------

loc_949E:				; CODE XREF: sub_93C7+CEj
		les	bx, [bp+var_C]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_16+2],	dx
		mov	word ptr [bp+var_16], ax
		mov	word ptr [bp+var_12+2],	dx
		mov	word ptr [bp+var_12], ax
		mov	[bp+var_18], 1
		les	bx, [bp+var_12]
		test	byte ptr es:[bx+2], 10h
		jnz	short loc_94C6
		jmp	loc_9590
; ---------------------------------------------------------------------------

loc_94C6:				; CODE XREF: sub_93C7+FAj
		les	bx, [bp+var_12]
		mov	dx, es:[bx+8]
		mov	ax, es:[bx+6]
		mov	word ptr [bp+var_16+2],	dx
		mov	word ptr [bp+var_16], ax
		mov	word ptr [bp+var_12+2],	dx
		mov	word ptr [bp+var_12], ax
		les	bx, [bp+var_12]
		test	byte ptr es:[bx+2], 2
		jnz	short loc_94EA
		jmp	loc_9590
; ---------------------------------------------------------------------------

loc_94EA:				; CODE XREF: sub_93C7+11Ej
		les	bx, [bp+var_12]
		test	byte ptr es:[bx+8], 20h
		jnz	short loc_94F7
		jmp	loc_9590
; ---------------------------------------------------------------------------

loc_94F7:				; CODE XREF: sub_93C7+12Bj
		les	bx, [bp+var_C]
		test	byte ptr es:[bx+4], 8
		jnz	short loc_9504
		jmp	loc_9590
; ---------------------------------------------------------------------------

loc_9504:				; CODE XREF: sub_93C7+138j
		les	bx, [bp+var_C]
		test	byte ptr es:[bx+4], 4
		jz	short loc_951D
		les	bx, [bp+var_C]
		mov	ax, es:[bx+6]
		add	ax, [bp+arg_A]
		mov	word ptr [bp+var_1C+2],	ss
		jmp	short loc_952B
; ---------------------------------------------------------------------------

loc_951D:				; CODE XREF: sub_93C7+145j
		les	bx, [bp+var_C]
		mov	dx, es:[bx+8]
		mov	ax, es:[bx+6]
		mov	word ptr [bp+var_1C+2],	dx

loc_952B:				; CODE XREF: sub_93C7+154j
		mov	word ptr [bp+var_1C], ax
		mov	dx, word ptr [bp+var_1C+2]
		mov	ax, word ptr [bp+var_1C]
		mov	word ptr [bp+font+2], dx
		mov	word ptr [bp+font], ax
		les	bx, [bp+var_C]
		test	byte ptr es:[bx+4], 80h
		jz	short loc_9553
		les	bx, [bp+font]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_1C+2],	dx
		jmp	short loc_955C
; ---------------------------------------------------------------------------

loc_9553:				; CODE XREF: sub_93C7+17Bj
		les	bx, [bp+font]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_1C+2],	ds

loc_955C:				; CODE XREF: sub_93C7+18Aj
		mov	word ptr [bp+var_1C], ax
		les	bx, [bp+var_C]
		test	byte ptr es:[bx+4], 40h
		jz	short loc_956D
		add	word ptr [bp+var_1C], 4

loc_956D:				; CODE XREF: sub_93C7+1A0j
		lea	ax, [bp+var_12]
		push	ax
		push	word ptr [bp+var_1C+2]
		push	word ptr [bp+var_1C]
		push	cs
		call	near ptr sub_9316
		add	sp, 6
		mov	word ptr [bp+var_1C+2],	dx
		mov	word ptr [bp+var_1C], ax
		mov	dx, word ptr [bp+var_12+2]
		mov	ax, word ptr [bp+var_12]
		mov	word ptr [bp+var_16+2],	dx
		mov	word ptr [bp+var_16], ax

loc_9590:				; CODE XREF: sub_93C7+FCj
					; sub_93C7+120j ...
		les	bx, [bp+var_12]
		test	byte ptr es:[bx+3], 4
		jz	short loc_95B5
		les	bx, [bp+var_16]
		mov	ax, es:[bx+0Ah]
		mov	[bp+var_18], ax
		les	bx, [bp+var_16]
		mov	dx, es:[bx+8]
		mov	ax, es:[bx+6]
		mov	word ptr [bp+var_16+2],	dx
		mov	word ptr [bp+var_16], ax

loc_95B5:				; CODE XREF: sub_93C7+1D1j
		les	bx, [bp+var_16]
		mov	ax, es:[bx+1Ah]
		imul	[bp+var_18]
		mov	[bp+var_18], ax
		mov	ax, [bp+var_18]
		xor	dx, dx
		cmp	dx, [bp+var_6]
		jb	short loc_95D3
		jnz	short loc_95E4
		cmp	ax, [bp+var_8]
		jnb	short loc_95E4

loc_95D3:				; CODE XREF: sub_93C7+203j
		mov	ax, [bp+var_18]
		sub	[bp+var_8], ax
		sbb	[bp+var_6], 0
		add	word ptr [bp+var_C], 0Ah
		jmp	loc_948B
; ---------------------------------------------------------------------------

loc_95E4:				; CODE XREF: sub_93C7+B5j sub_93C7+D4j ...
		les	bx, [bp+var_C]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_12+2],	dx
		mov	word ptr [bp+var_12], ax
		les	bx, [bp+var_C]
		mov	ax, es:[bx+4]
		mov	word ptr [bp+var_16+2],	ax
		test	byte ptr [bp+var_16+2],	4
		jz	short loc_9613
		les	bx, [bp+var_C]
		mov	ax, es:[bx+6]
		add	ax, [bp+arg_A]
		mov	word ptr [bp+var_16], ss
		jmp	short loc_9621
; ---------------------------------------------------------------------------

loc_9613:				; CODE XREF: sub_93C7+23Bj
		les	bx, [bp+var_C]
		mov	dx, es:[bx+8]
		mov	ax, es:[bx+6]
		mov	word ptr [bp+var_16], dx

loc_9621:				; CODE XREF: sub_93C7+24Aj
		mov	[bp+var_18], ax
		test	byte ptr [bp+var_16+2],	11h
		jnz	short loc_962D
		jmp	loc_96B7
; ---------------------------------------------------------------------------

loc_962D:				; CODE XREF: sub_93C7+261j
		les	bx, [bp+var_12]
		mov	dx, es:[bx+8]
		mov	ax, es:[bx+6]
		mov	word ptr [bp+var_12+2],	dx
		mov	word ptr [bp+var_12], ax
		mov	dx, word ptr [bp+var_16]
		mov	ax, [bp+var_18]
		mov	word ptr [bp+var_1C+2],	dx
		mov	word ptr [bp+var_1C], ax
		test	byte ptr [bp+var_16+2],	80h
		jz	short loc_965F
		les	bx, [bp+var_1C]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_16], dx
		jmp	short loc_9668
; ---------------------------------------------------------------------------

loc_965F:				; CODE XREF: sub_93C7+287j
		les	bx, [bp+var_1C]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_16], ds

loc_9668:				; CODE XREF: sub_93C7+296j
		mov	[bp+var_18], ax
		mov	dx, word ptr [bp+var_16]
		mov	ax, [bp+var_18]
		mov	word ptr [bp+font+2], dx
		mov	word ptr [bp+font], ax
		mov	ax, word ptr [bp+var_16+2]
		and	ax, 48h
		cmp	ax, 40h	; '@'
		jnz	short loc_9686
		add	[bp+var_18], 4

loc_9686:				; CODE XREF: sub_93C7+2B9j
		les	bx, [bp+var_12]
		test	byte ptr es:[bx+2], 2
		jz	short loc_96B7
		les	bx, [bp+var_12]
		test	byte ptr es:[bx+8], 20h
		jz	short loc_96B7
		test	byte ptr [bp+var_16+2],	8
		jz	short loc_96B7
		lea	ax, [bp+var_12]
		push	ax
		push	word ptr [bp+var_16]
		push	[bp+var_18]
		push	cs
		call	near ptr sub_9316
		add	sp, 6
		mov	word ptr [bp+var_16], dx
		mov	[bp+var_18], ax

loc_96B7:				; CODE XREF: sub_93C7+263j
					; sub_93C7+2C7j ...
		cmp	[bp+var_E], 0
		jnz	short loc_9705
		les	bx, [bp+var_12]
		test	byte ptr es:[bx+3], 4
		jz	short loc_96E5
		push	[bp+arg_A]
		push	[bp+var_6]
		push	[bp+var_8]
		push	word ptr [bp+var_12+2]
		push	word ptr [bp+var_12]
		push	word ptr [bp+var_16]
		push	[bp+var_18]
		push	cs
		call	near ptr sub_9214
		add	sp, 0Eh
		jmp	short loc_9705
; ---------------------------------------------------------------------------

loc_96E5:				; CODE XREF: sub_93C7+2FEj
		push	[bp+arg_A]
		mov	ax, 1
		push	ax
		push	[bp+var_6]
		push	[bp+var_8]
		push	word ptr [bp+var_12+2]
		push	word ptr [bp+var_12]
		push	word ptr [bp+var_16]
		push	[bp+var_18]
		push	cs
		call	near ptr sub_8F49
		add	sp, 10h

loc_9705:				; CODE XREF: sub_93C7+2F4j
					; sub_93C7+31Cj
		mov	ax, word ptr [bp+var_16+2]
		and	ax, 3
		cmp	ax, 3
		jz	short loc_9713
		jmp	loc_97B1
; ---------------------------------------------------------------------------

loc_9713:				; CODE XREF: sub_93C7+347j
		mov	ax, word ptr [bp+var_16+2]
		and	ax, 48h
		cmp	ax, 48h	; 'H'
		jnz	short loc_9722
		sub	word ptr [bp+font], 4

loc_9722:				; CODE XREF: sub_93C7+355j
		les	bx, [bp+var_12]
		test	byte ptr es:[bx+3], 4
		jz	short loc_9771
		les	bx, [bp+var_12]
		mov	dx, es:[bx+8]
		mov	ax, es:[bx+6]
		mov	word ptr [bp+var_12+2],	dx
		mov	word ptr [bp+var_12], ax
		les	bx, [bp+var_12]
		mov	ax, es:[bx+16h]
		or	ax, es:[bx+18h]
		jz	short loc_975E
		les	bx, [bp+var_12]
		push	word ptr es:[bx+14h]
		les	bx, [bp+var_12]
		push	word ptr es:[bx+18h]
		push	word ptr es:[bx+16h]
		jmp	short loc_9790
; ---------------------------------------------------------------------------

loc_975E:				; CODE XREF: sub_93C7+381j
		test	byte ptr [bp+var_16+2],	80h
		jz	short loc_97B1
		push	word ptr [bp+font+2]
		push	word ptr [bp+font] ; font
		nop
		push	cs
		call	near ptr _registerbgifont
		jmp	short loc_97AF
; ---------------------------------------------------------------------------

loc_9771:				; CODE XREF: sub_93C7+363j
		les	bx, [bp+var_12]
		mov	ax, es:[bx+0Eh]
		or	ax, es:[bx+10h]
		jz	short loc_979E
		les	bx, [bp+var_12]
		push	word ptr es:[bx+12h]
		les	bx, [bp+var_12]
		push	word ptr es:[bx+10h]
		push	word ptr es:[bx+0Eh]

loc_9790:				; CODE XREF: sub_93C7+395j
		push	word ptr [bp+font+2]
		push	word ptr [bp+font]
		call	sub_7780
		add	sp, 0Ah
		jmp	short loc_97B1
; ---------------------------------------------------------------------------

loc_979E:				; CODE XREF: sub_93C7+3B5j
		test	byte ptr [bp+var_16+2],	80h
		jz	short loc_97B1
		push	word ptr [bp+font+2]
		push	word ptr [bp+font]
		nop
		push	cs		; driver
		call	_registerbgidriver

loc_97AF:				; CODE XREF: sub_93C7+3A8j
		pop	cx
		pop	cx

loc_97B1:				; CODE XREF: sub_93C7+349j
					; sub_93C7+39Bj ...
		mov	[bp+var_6], 0
		mov	[bp+var_8], 0
		mov	ax, word ptr [bp+var_C]
		sub	word ptr [bp+var_C], 0Ah
		cmp	ax, word ptr [bp+arg_0]
		jbe	short loc_97CA
		jmp	loc_95E4
; ---------------------------------------------------------------------------

loc_97CA:				; CODE XREF: sub_93C7+13j sub_93C7+A3j ...
		xor	ax, ax

loc_97CC:				; CODE XREF: sub_93C7+83j
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_93C7	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__CurrExcContext proc far

s1		= dword	ptr -6
var_2		= word ptr -2
arg_0		= word ptr  6
arg_6		= word ptr  0Ch

		push	bp
		mov	bp, sp
		sub	sp, 6
		push	si
		push	di
		mov	ax, [bp+arg_0]
		mov	[bp+var_2], ax
		cmp	[bp+var_2], 0FFFFh
		jz	short loc_9815
		mov	bx, [bp+var_2]
		mov	dx, ss:[bx+4]
		mov	ax, ss:[bx+2]
		add	ax, 0FFF8h
		mov	word ptr [bp+s1+2], dx
		mov	word ptr [bp+s1], ax
		mov	ax, 8
		push	ax		; n
		push	ds
		mov	ax, 298Fh
		push	ax		; s2
		push	word ptr [bp+s1+2]
		push	word ptr [bp+s1] ; s1
		nop
		push	cs
		call	near ptr _memcmp
		add	sp, 0Ah
		or	ax, ax
		jz	short loc_981A

loc_9815:				; CODE XREF: __CurrExcContext+12j
		mov	ax, 0FFFFh
		jmp	short loc_9821
; ---------------------------------------------------------------------------

loc_981A:				; CODE XREF: __CurrExcContext+41j
		mov	bx, [bp+var_2]
		mov	ax, ss:[bx+arg_6]

loc_9821:				; CODE XREF: __CurrExcContext+46j
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
__CurrExcContext endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

; __ThrowFileName(void)
@__ThrowFileName$qv proc far
		push	si
		push	di
		les	bx, ss:16h
		mov	dx, es:[bx+18h]
		mov	ax, es:[bx+16h]
		pop	di
		pop	si
		retf
@__ThrowFileName$qv endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

; __ThrowLineNumber(void)
@__ThrowLineNumber$qv proc far
		push	si
		push	di
		les	bx, ss:16h
		mov	ax, es:[bx+1Ah]
		pop	di
		pop	si
		retf
@__ThrowLineNumber$qv endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

; __ThrowExceptionName(void)
@__ThrowExceptionName$qv proc far
		push	si
		push	di
		les	bx, ss:16h
		mov	dx, es:[bx+1Eh]
		mov	ax, es:[bx+1Ch]
		pop	di
		pop	si
		retf
@__ThrowExceptionName$qv endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __fastcall __far typeinfo__typeinfo(int, int, int, __int32)
@typeinfo@0$bctr$qmx8typeinfo proc far

src		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  6

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	si
		push	di
		mov	ax, word ptr [bp+arg_0]
		or	ax, word ptr [bp+arg_0+2]
		jnz	short loc_987D
		mov	ax, 8
		push	ax
		nop
		push	cs
		call	near ptr @$bnew$qui ; operator new(uint)
		pop	cx
		mov	word ptr [bp+arg_0+2], dx
		mov	word ptr [bp+arg_0], ax
		or	ax, dx
		jz	short loc_98BB

loc_987D:				; CODE XREF: typeinfo::typeinfo(typeinfo &)+Ej
		les	bx, [bp+arg_0]
		mov	word ptr es:[bx+2], seg	seg000
		mov	word ptr es:[bx], 9E59h
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		mov	[bp+var_2], 0
		mov	[bp+src], 0
		lea	ax, [bp+src]
		push	ss
		push	ax		; src
		push	cs		; int
		mov	ax, 9E3Bh
		push	ax		; int
		push	cs
		call	near ptr @_ThrowException$qnvt1t1t1uiuiuinuc ; _ThrowException(void *,void *,void *,void *,uint,uint,uint,uchar	*)
		add	sp, 1Ah

loc_98BB:				; CODE XREF: typeinfo::typeinfo(typeinfo &)+22j
		mov	dx, word ptr [bp+arg_0+2]
		mov	ax, word ptr [bp+arg_0]
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@typeinfo@0$bctr$qmx8typeinfo endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; typeinfo::operator=(typeinfo const &)
@typeinfo@0$basg$qmx8typeinfo proc far

arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		pop	di
		pop	si
		pop	bp
		retf
@typeinfo@0$basg$qmx8typeinfo endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __fastcall __far typeinfo___typeinfo(int,	int, int, __int32, int)
@typeinfo@0$bdtr$qv proc far

arg_0		= word ptr  6
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	dx, [bp+arg_4]
		mov	ax, [bp+arg_0]
		or	ax, [bp+arg_0+2]
		jz	short loc_9906
		les	bx, dword ptr [bp+arg_0]
		mov	word ptr es:[bx+2], seg	seg000
		mov	word ptr es:[bx], 9E59h
		test	dl, 1
		jz	short loc_9906
		push	[bp+arg_0+2]
		push	[bp+arg_0]
		nop
		push	cs		; driver
		call	_registerbgidriver
		pop	cx
		pop	cx

loc_9906:				; CODE XREF: typeinfo::~typeinfo(void)+Ej
					; typeinfo::~typeinfo(void)+21j
		pop	di
		pop	si
		pop	bp
		retf
@typeinfo@0$bdtr$qv endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; typeinfo::operator==(typeinfo	const &)const
@typeinfo@0$beql$xqmx8typeinfo proc far	; CODE XREF: typeinfo::operator!=(typeinfo &)+12p

arg_0		= dword	ptr  6
arg_4		= dword	ptr  0Ah

		push	bp
		mov	bp, sp
		push	si
		push	di
		les	bx, [bp+arg_4]
		push	word ptr es:[bx+6]
		push	word ptr es:[bx+4]
		les	bx, [bp+arg_0]
		push	word ptr es:[bx+6]
		push	word ptr es:[bx+4]
		push	cs
		call	near ptr sub_6D7C
		add	sp, 8
		pop	di
		pop	si
		pop	bp
		retf
@typeinfo@0$beql$xqmx8typeinfo endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; typeinfo::operator!=(typeinfo	const &)const
@typeinfo@0$bneq$xqmx8typeinfo proc far

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

		push	bp
		mov	bp, sp
		push	si
		push	di
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	[bp+arg_2]
		push	[bp+arg_0]
		push	cs
		call	near ptr @typeinfo@0$beql$xqmx8typeinfo	; typeinfo::operator==(typeinfo	&)
		add	sp, 8
		neg	ax
		sbb	ax, ax
		inc	ax
		pop	di
		pop	si
		pop	bp
		retf
@typeinfo@0$bneq$xqmx8typeinfo endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; typeinfo::before(typeinfo const &)const
@typeinfo@0before$xqmx8typeinfo	proc far

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  6
arg_4		= dword	ptr  0Ah

		push	bp
		mov	bp, sp
		sub	sp, 8
		push	si
		push	di
		les	bx, [bp+arg_0]
		mov	ax, es:[bx+4]
		or	ax, es:[bx+6]
		jnz	short loc_996A
		xor	ax, ax
		jmp	short loc_99C3
; ---------------------------------------------------------------------------

loc_996A:				; CODE XREF: typeinfo::before(typeinfo &)+13j
		les	bx, [bp+arg_4]
		mov	ax, es:[bx+4]
		or	ax, es:[bx+6]
		jnz	short loc_997C
		mov	ax, 1
		jmp	short loc_99C3
; ---------------------------------------------------------------------------

loc_997C:				; CODE XREF: typeinfo::before(typeinfo &)+24j
		les	bx, [bp+arg_4]
		mov	dx, es:[bx+6]
		mov	word ptr [bp+var_4+2], dx
		mov	ax, es:[bx+4]
		mov	word ptr [bp+var_4], ax
		les	bx, [bp+var_4]
		add	ax, es:[bx+4]
		push	dx
		push	ax		; s2
		les	bx, [bp+arg_0]
		mov	dx, es:[bx+6]
		mov	word ptr [bp+var_8+2], dx
		mov	ax, es:[bx+4]
		mov	word ptr [bp+var_8], ax
		les	bx, [bp+var_8]
		add	ax, es:[bx+4]
		push	dx
		push	ax		; s1
		nop
		push	cs
		call	near ptr _strcmp
		add	sp, 8
		or	ax, ax
		jge	short loc_99C1
		mov	ax, 1
		jmp	short loc_99C3
; ---------------------------------------------------------------------------

loc_99C1:				; CODE XREF: typeinfo::before(typeinfo &)+69j
		xor	ax, ax

loc_99C3:				; CODE XREF: typeinfo::before(typeinfo &)+17j
					; typeinfo::before(typeinfo &)+29j ...
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@typeinfo@0before$xqmx8typeinfo	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; typeinfo::name(void)const
@typeinfo@0name$xqv proc far

arg_0		= dword	ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		les	bx, [bp+arg_0]
		push	word ptr es:[bx+6]
		push	word ptr es:[bx+4]
		push	cs
		call	near ptr sub_6D57
		pop	cx
		pop	cx
		pop	di
		pop	si
		pop	bp
		retf
@typeinfo@0name$xqv endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __fastcall __far __GetTypeInfo(int, int, int, int, int, __int32, int, int, int, int)
@__GetTypeInfo$qnvt1t1t1 proc far

var_8		= dword	ptr -8
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_C		= word ptr  12h
arg_E		= word ptr  14h

		push	bp
		mov	bp, sp
		sub	sp, 8
		push	si
		push	di
		mov	dx, [bp+arg_E]
		mov	ax, [bp+arg_C]
		mov	word ptr [bp+var_8+2], dx
		mov	word ptr [bp+var_8], ax
		mov	ax, [bp+arg_0]
		or	ax, [bp+arg_2]
		jnz	short loc_9A25
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		push	ds
		mov	ax, 0BDB0h
		push	ax		; src
		push	cs		; int
		mov	ax, 9E25h
		push	ax		; int
		push	cs
		call	near ptr @_ThrowException$qnvt1t1t1uiuiuinuc ; _ThrowException(void *,void *,void *,void *,uint,uint,uint,uchar	*)
		add	sp, 1Ah

loc_9A25:				; CODE XREF: __GetTypeInfo(void	*,void *,void *,void *)+1Aj
		les	bx, dword ptr [bp+arg_4]
		mov	dx, [bp+arg_4+2]
		mov	ax, [bp+arg_4]
		sub	ax, es:[bx-2]
		mov	[bp+arg_4+2], dx
		mov	[bp+arg_4], ax
		les	bx, dword ptr [bp+arg_4]
		mov	dx, es:[bx-6]
		mov	ax, es:[bx-8]
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		les	bx, [bp+var_8]
		mov	dx, [bp+var_2]
		mov	ax, [bp+var_4]
		mov	es:[bx+6], dx
		mov	es:[bx+4], ax
		mov	dx, word ptr [bp+var_8+2]
		mov	ax, word ptr [bp+var_8]
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@__GetTypeInfo$qnvt1t1t1 endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_9A66	proc near		; CODE XREF: sub_9A66+143p
					; sub_9A66+1C4p ...

var_20		= word ptr -20h
var_1E		= word ptr -1Eh
var_1C		= dword	ptr -1Ch
var_18		= word ptr -18h
var_16		= word ptr -16h
var_14		= dword	ptr -14h
var_10		= word ptr -10h
var_E		= word ptr -0Eh
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= dword	ptr -4
arg_0		= word ptr  4
arg_2		= word ptr  6
arg_4		= dword	ptr  8
arg_8		= word ptr  0Ch
arg_A		= word ptr  0Eh
arg_C		= word ptr  10h
arg_E		= word ptr  12h
arg_10		= word ptr  14h
arg_12		= word ptr  16h
arg_14		= word ptr  18h
arg_16		= word ptr  1Ah
arg_18		= word ptr  1Ch
arg_1A		= word ptr  1Eh
arg_1C		= word ptr  20h
arg_1E		= word ptr  22h

		push	bp
		mov	bp, sp
		sub	sp, 20h
		push	si
		push	di
		mov	[bp+var_8], 0
		mov	[bp+var_A], 0
		mov	[bp+var_C], 0
		mov	[bp+var_E], 0
		mov	ax, [bp+arg_14]
		or	ax, [bp+arg_16]
		jz	short loc_9AA1
		push	word ptr [bp+arg_4+2]
		push	word ptr [bp+arg_4]
		push	[bp+arg_16]
		push	[bp+arg_14]
		push	cs
		call	near ptr sub_6D7C
		add	sp, 8
		or	ax, ax
		jnz	short loc_9AAB

loc_9AA1:				; CODE XREF: sub_9A66+22j
		les	bx, [bp+arg_4]
		test	byte ptr es:[bx+8], 4
		jnz	short loc_9AB2

loc_9AAB:				; CODE XREF: sub_9A66+39j
		xor	dx, dx
		xor	ax, ax
		jmp	loc_9CA6
; ---------------------------------------------------------------------------

loc_9AB2:				; CODE XREF: sub_9A66+43j
		mov	[bp+var_6], 0
		les	bx, [bp+arg_4]
		mov	dx, word ptr [bp+arg_4+2]
		mov	ax, word ptr [bp+arg_4]
		add	ax, es:[bx+0Ch]

loc_9AC4:				; CODE XREF: sub_9A66+21Ej
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax

loc_9ACA:				; CODE XREF: sub_9A66+205j
		les	bx, [bp+var_4]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_1C+2],	dx
		mov	word ptr [bp+var_1C], ax
		mov	ax, word ptr [bp+var_1C]
		or	ax, word ptr [bp+var_1C+2]
		jnz	short loc_9AE5
		jmp	loc_9C6E
; ---------------------------------------------------------------------------

loc_9AE5:				; CODE XREF: sub_9A66+7Aj
		les	bx, [bp+var_4]
		test	byte ptr es:[bx+6], 8
		jz	short loc_9AF2
		jmp	loc_9C67
; ---------------------------------------------------------------------------

loc_9AF2:				; CODE XREF: sub_9A66+87j
		cmp	[bp+arg_1A], 0
		jz	short loc_9B0C
		les	bx, [bp+var_4]
		mov	ax, es:[bx+6]
		and	ax, 3
		cmp	ax, 3
		jnz	short loc_9B0C
		mov	ax, 1
		jmp	short loc_9B0E
; ---------------------------------------------------------------------------

loc_9B0C:				; CODE XREF: sub_9A66+90j sub_9A66+9Fj
		xor	ax, ax

loc_9B0E:				; CODE XREF: sub_9A66+A4j
		mov	[bp+var_10], ax
		les	bx, [bp+var_4]
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		add	ax, es:[bx+4]
		mov	word ptr [bp+var_14+2],	dx
		mov	word ptr [bp+var_14], ax
		mov	dx, [bp+arg_1E]
		mov	ax, [bp+arg_1C]
		mov	[bp+var_16], dx
		mov	[bp+var_18], ax
		les	bx, [bp+var_4]
		test	byte ptr es:[bx+6], 4
		jz	short loc_9B55
		les	bx, [bp+var_14]
		mov	ax, es:[bx]
		mov	dx, word ptr [bp+var_14+2]
		mov	word ptr [bp+var_14+2],	dx
		mov	word ptr [bp+var_14], ax
		mov	dx, word ptr [bp+var_1C+2]
		mov	ax, word ptr [bp+var_1C]
		mov	[bp+var_16], dx
		mov	[bp+var_18], ax

loc_9B55:				; CODE XREF: sub_9A66+D2j
		push	word ptr [bp+var_1C+2]
		push	word ptr [bp+var_1C]
		push	[bp+arg_E]
		push	[bp+arg_C]
		push	cs
		call	near ptr sub_6D7C
		add	sp, 8
		or	ax, ax
		jnz	short loc_9BD7
		les	bx, [bp+var_1C]
		test	byte ptr es:[bx+8], 4
		jnz	short loc_9B79
		jmp	loc_9C67
; ---------------------------------------------------------------------------

loc_9B79:				; CODE XREF: sub_9A66+10Ej
		push	[bp+var_16]
		push	[bp+var_18]
		push	[bp+var_10]
		push	[bp+arg_18]
		push	[bp+arg_16]
		push	[bp+arg_14]
		push	[bp+arg_12]
		push	[bp+arg_10]
		push	[bp+arg_E]
		push	[bp+arg_C]
		push	[bp+arg_A]
		push	[bp+arg_8]
		push	word ptr [bp+var_1C+2]
		push	word ptr [bp+var_1C]
		push	word ptr [bp+var_14+2]
		push	word ptr [bp+var_14]
		call	sub_9A66
		add	sp, 20h
		mov	[bp+var_1E], dx
		mov	[bp+var_20], ax
		mov	ax, [bp+var_20]
		or	ax, [bp+var_1E]
		jnz	short loc_9BC0
		jmp	loc_9C67
; ---------------------------------------------------------------------------

loc_9BC0:				; CODE XREF: sub_9A66+155j
		mov	dx, [bp+var_1E]
		mov	ax, [bp+var_20]
		mov	word ptr [bp+var_14+2],	dx
		mov	word ptr [bp+var_14], ax
		mov	bx, [bp+arg_18]
		mov	ax, ss:[bx]
		mov	[bp+var_10], ax
		jmp	short loc_9C34
; ---------------------------------------------------------------------------

loc_9BD7:				; CODE XREF: sub_9A66+104j
		mov	ax, [bp+arg_8]
		or	ax, [bp+arg_A]
		jz	short loc_9BF8
		mov	dx, [bp+arg_A]
		mov	ax, [bp+arg_8]
		cmp	dx, word ptr [bp+var_14+2]
		jnz	short loc_9C67
		cmp	ax, word ptr [bp+var_14]
		jnz	short loc_9C67
		mov	dx, word ptr [bp+var_14+2]
		mov	ax, word ptr [bp+var_14]
		jmp	loc_9CA6
; ---------------------------------------------------------------------------

loc_9BF8:				; CODE XREF: sub_9A66+177j
		mov	ax, [bp+arg_10]
		or	ax, [bp+arg_12]
		jz	short loc_9C34
		xor	ax, ax
		push	ax
		push	ax
		xor	ax, ax
		push	ax
		push	[bp+arg_18]
		xor	ax, ax
		push	ax
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		push	[bp+arg_16]
		push	[bp+arg_14]
		push	[bp+arg_12]
		push	[bp+arg_10]
		push	word ptr [bp+var_1C+2]
		push	word ptr [bp+var_1C]
		push	word ptr [bp+var_14+2]
		push	word ptr [bp+var_14]
		call	sub_9A66
		add	sp, 20h
		or	ax, dx
		jz	short loc_9C67

loc_9C34:				; CODE XREF: sub_9A66+16Fj
					; sub_9A66+198j
		cmp	[bp+var_E], 0
		jz	short loc_9C52
		mov	dx, word ptr [bp+var_14+2]
		mov	ax, word ptr [bp+var_14]
		cmp	dx, [bp+var_A]
		jnz	short loc_9C52
		cmp	ax, [bp+var_C]
		jnz	short loc_9C52
		mov	ax, [bp+var_10]
		or	[bp+var_8], ax
		jmp	short loc_9C67
; ---------------------------------------------------------------------------

loc_9C52:				; CODE XREF: sub_9A66+1D2j
					; sub_9A66+1DDj ...
		inc	[bp+var_E]
		mov	dx, word ptr [bp+var_14+2]
		mov	ax, word ptr [bp+var_14]
		mov	[bp+var_A], dx
		mov	[bp+var_C], ax
		mov	ax, [bp+var_10]
		mov	[bp+var_8], ax

loc_9C67:				; CODE XREF: sub_9A66+89j
					; sub_9A66+110j ...
		add	word ptr [bp+var_4], 8
		jmp	loc_9ACA
; ---------------------------------------------------------------------------

loc_9C6E:				; CODE XREF: sub_9A66+7Cj
		cmp	[bp+var_6], 0
		jnz	short loc_9C87
		inc	[bp+var_6]
		les	bx, [bp+arg_4]
		mov	dx, word ptr [bp+arg_4+2]
		mov	ax, word ptr [bp+arg_4]
		add	ax, es:[bx+0Ah]
		jmp	loc_9AC4
; ---------------------------------------------------------------------------

loc_9C87:				; CODE XREF: sub_9A66+20Cj
		mov	bx, [bp+arg_18]
		mov	ax, [bp+var_8]
		mov	ss:[bx], ax
		cmp	[bp+var_E], 1
		jz	short loc_9CA0
		mov	[bp+var_A], 0
		mov	[bp+var_C], 0

loc_9CA0:				; CODE XREF: sub_9A66+22Ej
		mov	dx, [bp+var_A]
		mov	ax, [bp+var_C]

loc_9CA6:				; CODE XREF: sub_9A66+49j
					; sub_9A66+18Fj
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_9A66	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __fastcall __far __DynamicCast(int, int, int, int, int, __int32, int, int, int, int, int)
@__DynamicCast$qnvt1t1t1i proc far

var_16		= word ptr -16h
var_14		= word ptr -14h
var_12		= word ptr -12h
var_10		= word ptr -10h
var_E		= word ptr -0Eh
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_8		= word ptr  0Eh
arg_A		= word ptr  10h
arg_C		= word ptr  12h
arg_E		= word ptr  14h
arg_10		= word ptr  16h

		push	bp
		mov	bp, sp
		sub	sp, 16h
		push	si
		push	di
		mov	dx, [bp+arg_A]
		mov	ax, [bp+arg_8]
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		mov	dx, [bp+arg_E]
		mov	ax, [bp+arg_C]
		mov	[bp+var_6], dx
		mov	[bp+var_8], ax
		mov	ax, [bp+arg_0]
		or	ax, [bp+arg_2]
		jnz	short loc_9CD7
		jmp	loc_9DDB
; ---------------------------------------------------------------------------

loc_9CD7:				; CODE XREF: __DynamicCast(void	*,void *,void *,void *,int)+26j
		les	bx, dword ptr [bp+arg_4]
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		sub	ax, es:[bx-4]
		mov	[bp+var_E], dx
		mov	[bp+var_10], ax
		les	bx, dword ptr [bp+arg_4]
		mov	dx, [bp+arg_4+2]
		mov	ax, [bp+arg_4]
		sub	ax, es:[bx-2]
		mov	[bp+arg_4+2], dx
		mov	[bp+arg_4], ax
		les	bx, dword ptr [bp+arg_4]
		mov	dx, es:[bx-6]
		mov	ax, es:[bx-8]
		mov	[bp+var_A], dx
		mov	[bp+var_C], ax
		mov	ax, [bp+arg_C]
		or	ax, [bp+arg_E]
		jz	short loc_9D2D
		push	[bp+var_A]
		push	[bp+var_C]
		push	[bp+var_6]
		push	[bp+var_8]
		push	cs
		call	near ptr sub_6D7C
		add	sp, 8
		or	ax, ax
		jz	short loc_9D36

loc_9D2D:				; CODE XREF: __DynamicCast(void	*,void *,void *,void *,int)+68j
		mov	dx, [bp+var_E]
		mov	ax, [bp+var_10]
		jmp	loc_9E0B
; ---------------------------------------------------------------------------

loc_9D36:				; CODE XREF: __DynamicCast(void	*,void *,void *,void *,int)+7Fj
		push	[bp+var_A]
		push	[bp+var_C]
		push	[bp+var_2]
		push	[bp+var_4]
		push	cs
		call	near ptr sub_6D7C
		add	sp, 8
		or	ax, ax
		jnz	short loc_9D8F
		xor	ax, ax
		push	ax
		push	ax
		mov	ax, 1
		push	ax
		lea	ax, [bp+var_16]
		push	ax
		push	[bp+var_2]
		push	[bp+var_4]
		push	[bp+arg_2]
		push	[bp+arg_0]
		push	[bp+var_6]
		push	[bp+var_8]
		xor	ax, ax
		push	ax
		push	ax
		push	[bp+var_A]
		push	[bp+var_C]
		push	[bp+var_E]
		push	[bp+var_10]
		call	sub_9A66
		add	sp, 20h
		mov	[bp+var_12], dx
		mov	[bp+var_14], ax
		mov	ax, [bp+var_14]
		or	ax, [bp+var_12]
		jnz	short loc_9DD3

loc_9D8F:				; CODE XREF: __DynamicCast(void	*,void *,void *,void *,int)+9Fj
		xor	ax, ax
		push	ax
		push	ax
		mov	ax, 1
		push	ax
		lea	ax, [bp+var_16]
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		push	[bp+var_6]
		push	[bp+var_8]
		xor	ax, ax
		push	ax
		push	ax
		push	[bp+var_A]
		push	[bp+var_C]
		push	[bp+var_E]
		push	[bp+var_10]
		call	sub_9A66
		add	sp, 20h
		mov	[bp+var_12], dx
		mov	[bp+var_14], ax
		mov	ax, [bp+var_14]
		or	ax, [bp+var_12]
		jz	short loc_9DDB
		cmp	[bp+var_16], 0
		jz	short loc_9DDB

loc_9DD3:				; CODE XREF: __DynamicCast(void	*,void *,void *,void *,int)+E1j
		mov	dx, [bp+var_12]
		mov	ax, [bp+var_14]
		jmp	short loc_9E0B
; ---------------------------------------------------------------------------

loc_9DDB:				; CODE XREF: __DynamicCast(void	*,void *,void *,void *,int)+28j
					; __DynamicCast(void *,void *,void *,void *,int)+11Fj ...
		cmp	[bp+arg_10], 0
		jz	short loc_9E07
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		push	ds
		mov	ax, 0BDB1h
		push	ax		; src
		push	cs		; int
		mov	ax, 9E11h
		push	ax		; int
		push	cs
		call	near ptr @_ThrowException$qnvt1t1t1uiuiuinuc ; _ThrowException(void *,void *,void *,void *,uint,uint,uint,uchar	*)
		add	sp, 1Ah

loc_9E07:				; CODE XREF: __DynamicCast(void	*,void *,void *,void *,int)+133j
		xor	dx, dx
		xor	ax, ax

loc_9E0B:				; CODE XREF: __DynamicCast(void	*,void *,void *,void *,int)+87j
					; __DynamicCast(void *,void *,void *,void *,int)+12Dj
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@__DynamicCast$qnvt1t1t1i endp

; ---------------------------------------------------------------------------
		db 1, 0, 1, 0, 0Ah, 0, 2 dup(0FFh), 2 dup(0), 42h, 61h
		db 64h,	5Fh, 63h, 61h, 73h, 74h, 2 dup(0), 1, 0, 1, 0
		db 0Ah,	0, 2 dup(0FFh),	2 dup(0), 42h, 61h, 64h, 5Fh, 74h
		db 79h,	70h, 65h, 69h, 64h, 2 dup(0), 4, 0, 10h, 20h, 0Ah
		db 0, 5Dh, 9Eh
		dw seg seg000
aTypeinfo	db 'typeinfo *',0
		db 0, 5Dh, 9Eh
		dw seg seg000
		db 4 dup(0), 0D6h, 98h
		dw seg seg000
		db 8			; Method
		db 0
		db 3			; Destructor/SafeFunction
		db 0
		db 26h,	3 dup(0), 73h, 10h, 30h, 0, 34h, 0Dh dup(0), 1
		db 0, 1, 0, 0D6h, 98h
		dw seg seg000
		db 5, 0, 38h, 0, 74h, 79h, 70h,	65h, 69h, 6Eh, 66h, 6Fh
		db 0Eh dup(0)

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __stdcall	_DOSCMD(int, int, char *s, int,	int)
__DOSCMD	proc near		; CODE XREF: sub_A897:loc_AA02p

dest		= dword	ptr -0Eh
var_A		= dword	ptr -0Ah
var_6		= dword	ptr -6
var_2		= word ptr -2
arg_0		= word ptr  4
arg_2		= word ptr  6
s		= dword	ptr  8
arg_8		= word ptr  0Ch
arg_A		= word ptr  0Eh

		push	bp
		mov	bp, sp
		sub	sp, 0Eh
		push	si
		push	di
		mov	[bp+var_2], 3
		mov	ax, word ptr [bp+s]
		or	ax, word ptr [bp+s+2]
		jz	short loc_9EC2
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]	; s
		nop
		push	cs
		call	near ptr _strlen
		pop	cx
		pop	cx
		add	ax, [bp+var_2]
		inc	ax
		mov	[bp+var_2], ax

loc_9EC2:				; CODE XREF: __DOSCMD+13j
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		mov	word ptr [bp+var_6+2], dx
		mov	word ptr [bp+var_6], ax
		jmp	short loc_9EEC
; ---------------------------------------------------------------------------

loc_9ED0:				; CODE XREF: __DOSCMD+5Dj
		les	bx, [bp+var_6]
		push	word ptr es:[bx+2]
		push	word ptr es:[bx] ; s
		nop
		push	cs
		call	near ptr _strlen
		pop	cx
		pop	cx
		add	ax, [bp+var_2]
		inc	ax
		mov	[bp+var_2], ax
		add	word ptr [bp+var_6], 4

loc_9EEC:				; CODE XREF: __DOSCMD+35j
		les	bx, [bp+var_6]
		mov	ax, es:[bx]
		or	ax, es:[bx+2]
		jnz	short loc_9ED0
		push	[bp+var_2]
		nop
		push	cs
		call	near ptr sub_51C6
		pop	cx
		mov	word ptr [bp+var_A+2], dx
		mov	word ptr [bp+var_A], ax
		or	ax, dx
		jnz	short loc_9F12
		xor	dx, dx
		xor	ax, ax
		jmp	loc_9FC8
; ---------------------------------------------------------------------------

loc_9F12:				; CODE XREF: __DOSCMD+70j
		mov	dx, word ptr [bp+var_A+2]
		mov	ax, word ptr [bp+var_A]
		inc	ax
		mov	word ptr [bp+dest+2], dx
		mov	word ptr [bp+dest], ax
		les	bx, [bp+dest]
		mov	byte ptr es:[bx], 20h ;	' '
		inc	word ptr [bp+dest]
		mov	ax, word ptr [bp+s]
		or	ax, word ptr [bp+s+2]
		jz	short loc_9F55
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]	; src
		push	word ptr [bp+dest+2]
		push	word ptr [bp+dest] ; dest
		nop
		push	cs
		call	near ptr _stpcpy
		add	sp, 8
		mov	word ptr [bp+dest+2], dx
		mov	word ptr [bp+dest], ax
		les	bx, [bp+dest]
		mov	byte ptr es:[bx], 20h ;	' '
		inc	word ptr [bp+dest]

loc_9F55:				; CODE XREF: __DOSCMD+96j
		mov	ax, [bp+arg_8]
		or	ax, [bp+arg_A]
		jz	short loc_9FA3
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		mov	word ptr [bp+var_6+2], dx
		mov	word ptr [bp+var_6], ax
		jmp	short loc_9F97
; ---------------------------------------------------------------------------

loc_9F6B:				; CODE XREF: __DOSCMD+108j
		les	bx, [bp+var_6]
		push	word ptr es:[bx+2]
		push	word ptr es:[bx] ; src
		push	word ptr [bp+dest+2]
		push	word ptr [bp+dest] ; dest
		nop
		push	cs
		call	near ptr _stpcpy
		add	sp, 8
		mov	word ptr [bp+dest+2], dx
		mov	word ptr [bp+dest], ax
		les	bx, [bp+dest]
		mov	byte ptr es:[bx], 20h ;	' '
		inc	word ptr [bp+dest]
		add	word ptr [bp+var_6], 4

loc_9F97:				; CODE XREF: __DOSCMD+D0j
		les	bx, [bp+var_6]
		mov	ax, es:[bx]
		or	ax, es:[bx+2]
		jnz	short loc_9F6B

loc_9FA3:				; CODE XREF: __DOSCMD+C2j
		les	bx, [bp+dest]
		mov	byte ptr es:[bx-1], 0Dh
		mov	byte ptr es:[bx], 0
		mov	ax, word ptr [bp+dest]
		xor	dx, dx
		sub	ax, word ptr [bp+var_A]
		sbb	dx, 0
		add	al, 0FEh ; 'þ'
		les	bx, [bp+var_A]
		mov	es:[bx], al
		mov	dx, word ptr [bp+var_A+2]
		mov	ax, word ptr [bp+var_A]

loc_9FC8:				; CODE XREF: __DOSCMD+76j
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn	0Ch
__DOSCMD	endp

; ---------------------------------------------------------------------------
		db 8Fh dup(0)
word_A05F	dw 0			; DATA XREF: __exec+28w
		db 50h dup(0)
byte_A0B1	db 0			; DATA XREF: __exec+50w
byte_A0B2	db 0			; DATA XREF: __exec+6Dw
		db 1Ch dup(0), 33h, 0FFh, 8Ch, 0C8h, 8Eh, 0D8h,	8Eh, 0C0h
		db 0FAh, 8Eh, 0D0h, 8Dh, 0A5h, 8Fh, 0, 0FBh, 51h, 52h
		db 0B8h, 3, 4Bh, 8Dh, 9Dh, 0FBh, 0, 8Dh, 95h, 91h, 0, 0CDh
		db 21h,	5Ah, 59h, 72h, 2Dh, 33h, 0FFh, 0FAh, 8Eh, 95h
		db 0F1h, 0, 8Bh, 0A5h, 0F3h, 0,	0FBh, 8Bh, 0ECh, 33h, 0C0h
		db 50h,	8Bh, 85h, 8Fh, 0, 8Eh, 0D8h, 8Eh, 0C0h,	26h, 89h
		db 16h,	2, 0, 26h, 89h,	0Eh, 2Ch, 0, 2Eh, 8Bh, 85h, 0E1h
		db 0, 2Eh, 0FFh, 2Eh, 0F7h, 0, 0B4h, 40h, 0BBh,	2, 0, 0B9h
		db 0Fh,	0, 33h,	0D2h, 0CDh, 21h, 0B8h, 2, 4Ch, 0CDh, 21h
		db 0FFh, 0
word_A132	dw 0			; DATA XREF: __exec+1D0w
word_A134	dw 0			; DATA XREF: __exec+Ew
					; __exec:loc_A330r
byte_A136	db 1			; DATA XREF: __exec+D5w __exec+1E7r

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__exec		proc near

var_C		= word ptr -0Ch
var_A		= dword	ptr -0Ah
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= word ptr  0Ch
arg_A		= word ptr  0Eh

		push	bp
		mov	bp, sp
		sub	sp, 0Ch
		cld
		push	si
		push	ds
		push	di
		push	es
		mov	ax, word_213B6
		mov	cs:word_A134, ax
		mov	ax, 3D00h
		push	ds
		lds	dx, [bp+arg_0]
		int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
					; DS:DX	-> ASCIZ filename
					; AL = access mode
					; 0 - read
		pop	ds
		mov	[bp+var_2], ax
		jnb	short loc_A15B
		jmp	loc_A369
; ---------------------------------------------------------------------------

loc_A15B:				; CODE XREF: __exec+1Fj
		mov	es, segx
		mov	cs:word_A05F, es
		mov	ax, es:2Ch
		mov	[bp+var_C], ax
		mov	di, 80h	; ''
		push	ds
		lds	si, [bp+arg_4]
		lodsb
		mov	dx, si
		stosb
		xor	cx, cx
		mov	cl, al
		inc	cx
		rep movsb
		mov	ax, 2901h
		mov	si, dx
		mov	di, 5Ch	; '\'
		int	21h		; DOS -	PARSE FILENAME
					; DS:SI	-> string to parse
					; ES:DI	-> buffer to fill with unopened	FCB
					; AL = bit mask	to control parsing
		mov	cs:byte_A0B1, al

loc_A18B:				; CODE XREF: __exec+63j
		mov	al, [si]
		cmp	al, 20h	; ' '
		jz	short loc_A19C
		cmp	al, 9
		jz	short loc_A19C
		cmp	al, 0Dh
		jz	short loc_A19C
		inc	si
		jmp	short loc_A18B
; ---------------------------------------------------------------------------

loc_A19C:				; CODE XREF: __exec+58j __exec+5Cj ...
		mov	ax, 2901h
		mov	di, 6Ch	; 'l'
		int	21h		; DOS -	PARSE FILENAME
					; DS:SI	-> string to parse
					; ES:DI	-> buffer to fill with unopened	FCB
					; AL = bit mask	to control parsing
		mov	cs:byte_A0B2, al
		pop	ds
		mov	ah, 4Ah	; 'J'
		mov	bx, 0FFFFh
		int	21h		; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
					; ES = segment address of block	to change
					; BX = new size	in paragraphs
		cmp	byte ptr word_213BC, 3
		jnb	short loc_A1BB
		sub	bx, 280h

loc_A1BB:				; CODE XREF: __exec+7Ej
		mov	[bp+var_4], bx
		mov	ax, [bp+arg_8]
		mov	dx, [bp+arg_A]
		mov	bx, ax
		or	bx, dx
		jnz	short loc_A1D0
		xor	ax, ax
		mov	di, ax
		jmp	short loc_A1ED
; ---------------------------------------------------------------------------

loc_A1D0:				; CODE XREF: __exec+91j
		mov	es, dx
		mov	di, ax
		push	di
		mov	cx, 0FFFFh
		xor	ax, ax

loc_A1DA:				; CODE XREF: __exec+A8j
		repne scasb
		cmp	es:[di], al
		jnz	short loc_A1DA
		dec	cx
		add	di, 3
		repne scasb
		dec	cx
		mov	ax, cx
		neg	ax
		pop	di

loc_A1ED:				; CODE XREF: __exec+97j
		mov	word ptr [bp+var_A], di
		mov	word ptr [bp+var_A+2], es
		add	ax, 0Fh
		mov	cx, 4
		shr	ax, cl
		mov	[bp+var_6], ax
		mov	si, word_213B6
		dec	si
		mov	es, si
		cmp	ax, es:3
		jbe	short loc_A215
		dec	cs:byte_A136
		inc	ax
		sub	[bp+var_4], ax

loc_A215:				; CODE XREF: __exec+D3j
		lds	si, [bp+arg_0]
		push	cs
		pop	es
		assume es:seg000
		mov	di, 0A061h

loc_A21D:				; CODE XREF: __exec+EAj
		lodsb
		stosb
		or	al, al
		jnz	short loc_A21D
		mov	bx, [bp+var_2]
		push	ds
		pop	es
		assume es:dseg
		push	cs
		pop	ds
		assume ds:seg000
		mov	di, 9FD0h
		mov	ah, 3Fh	; '?'
		mov	cx, 18h
		lea	dx, [di+0E3h]
		int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
					; BX = file handle, CX = number	of bytes to read
					; DS:DX	-> buffer
		jb	short loc_A25F
		cmp	word ptr [di+0E3h], 5A4Dh
		jz	short loc_A26B
		mov	ax, es:[si-5]
		or	ah, 20h
		cmp	ax, 632Eh
		jnz	short loc_A25C
		mov	ax, es:[si-3]
		or	ax, 2020h
		cmp	ax, 6D6Fh
		jnz	short loc_A25C
		jmp	short loc_A2A7
; ---------------------------------------------------------------------------

loc_A25C:				; CODE XREF: __exec+115j __exec+121j
		mov	ax, 0Bh

loc_A25F:				; CODE XREF: __exec+101j __exec+1ADj ...
		push	ax
		mov	ah, 3Eh	; '>'
		mov	bx, [bp+var_2]
		int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
					; BX = file handle
		pop	ax
		jmp	loc_A369
; ---------------------------------------------------------------------------

loc_A26B:				; CODE XREF: __exec+109j
		mov	ax, [di+0E7h]
		xor	dx, dx
		mov	dl, ah
		mov	ah, al
		xor	al, al
		shl	ax, 1
		rcl	dx, 1
		add	ax, [di+0E5h]
		adc	dx, 0
		mov	cx, 4

loc_A285:				; CODE XREF: __exec+152j
		shr	dx, 1
		rcr	ax, 1
		loop	loc_A285
		inc	ax
		sub	ax, [di+0EBh]
		add	ax, [di+0EDh]
		xchg	ax, bx
		mov	ax, [di+8Fh]
		add	ax, 10h
		add	[di+0F9h], ax
		add	[di+0F1h], ax
		xchg	ax, bx
		jmp	short loc_A2D1
; ---------------------------------------------------------------------------

loc_A2A7:				; CODE XREF: __exec+123j
		mov	ax, 4202h
		xor	cx, cx
		xor	dx, dx
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method: offset from end of file
		mov	cx, 4

loc_A2B3:				; CODE XREF: __exec+180j
		shr	dx, 1
		rcr	ax, 1
		loop	loc_A2B3
		inc	ax
		xchg	ax, bx
		mov	ax, [di+8Fh]
		mov	[di+0F9h], ax
		mov	word ptr [di+0F7h], 100h
		mov	[di+0F1h], ax
		add	ax, 10h
		xchg	ax, bx

loc_A2D1:				; CODE XREF: __exec+16Ej
		mov	[di+0FBh], bx
		mov	[di+0FDh], bx
		add	ax, 16h
		cmp	ax, [bp+var_4]
		mov	ax, 8
		jbe	short loc_A2E7
		jmp	loc_A25F
; ---------------------------------------------------------------------------

loc_A2E7:				; CODE XREF: __exec+1ABj
		mov	ah, 3Eh	; '>'
		mov	bx, [bp+var_2]
		int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
					; BX = file handle
		mov	es, word ptr [di+8Fh]
		assume es:nothing
		mov	ah, 4Ah	; 'J'
		mov	bx, [bp+var_4]
		int	21h		; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
					; ES = segment address of block	to change
					; BX = new size	in paragraphs
		jnb	short loc_A2FE
		jmp	loc_A25F
; ---------------------------------------------------------------------------

loc_A2FE:				; CODE XREF: __exec+1C2j
		add	bx, [di+8Fh]
		mov	dx, bx
		sub	bx, 17h
		mov	cs:word_A132, bx
		mov	es, bx
		mov	cx, 0B0h ; '°'
		mov	si, 9FD0h
		xor	di, di
		rep movsw
		mov	es, [bp+var_C]
		mov	cx, [bp+var_6]
		cmp	cs:byte_A136, 0
		jnz	short loc_A330
		mov	ah, 48h	; 'H'
		mov	bx, cx
		int	21h		; DOS -	2+ - ALLOCATE MEMORY
					; BX = number of 16-byte paragraphs desired
		jb	short loc_A369
		jmp	short loc_A334
; ---------------------------------------------------------------------------

loc_A330:				; CODE XREF: __exec+1EDj
		mov	ax, cs:word_A134

loc_A334:				; CODE XREF: __exec+1F7j
		mov	es, ax
		xor	di, di
		lds	si, [bp+var_A]
		assume ds:dseg
		add	cx, cx
		add	cx, cx
		add	cx, cx
		rep movsw
		push	es
		push	dx
		push	ds
		mov	ds, cs:DGROUP@
		nop
		push	cs
		call	near ptr __cexit
; ---------------------------------------------------------------------------
		db 1Fh,	5Ah, 2Eh, 80h, 3Eh, 36h, 0A1h, 0, 75h, 9, 2Eh
		db 8Eh,	6, 34h,	0A1h, 0B4h, 49h, 0CDh, 21h, 59h, 2Eh, 0FFh
		db 2Eh,	30h, 0A1h
; ---------------------------------------------------------------------------

loc_A369:				; CODE XREF: __exec+21j __exec+131j ...
		pop	es
		pop	di
		pop	ds
		pop	si
		push	ax
		call	__IOERROR
		mov	sp, bp
		pop	bp
		retn
__exec		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int execl(char *path,	char *arg0, ...)
_execl		proc far		; CODE XREF: sub_E7FD+9AP

s		= dword	ptr  6
_arg0		= word ptr  0Ah

		push	bp
		mov	bp, sp
		push	si
		push	di
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		push	ax		; int
		push	ss		; int
		lea	ax, [bp+_arg0]
		push	ax		; int
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]	; s
		mov	ax, 0A137h
		push	ax		; int
		call	sub_A897
		add	sp, 10h
		pop	di
		pop	si
		pop	bp
		retf
_execl		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl setblock(unsigned	int segx, unsigned int newsize)
_setblock	proc far		; CODE XREF: sub_53AE+4Ep

_segx		= word ptr  6
newsize		= word ptr  8

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ah, 4Ah	; 'J'
		mov	bx, [bp+newsize]
		mov	es, [bp+_segx]
		int	21h		; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
					; ES = segment address of block	to change
					; BX = new size	in paragraphs
		jb	short loc_A3AE
		mov	ax, 0FFFFh
		jmp	short loc_A3B4
; ---------------------------------------------------------------------------

loc_A3AE:				; CODE XREF: _setblock+Fj
		push	bx
		push	ax
		call	__IOERROR
		pop	ax

loc_A3B4:				; CODE XREF: _setblock+14j
		pop	di
		pop	si
		pop	bp
		retf
_setblock	endp

; ---------------------------------------------------------------------------
		push	si
		push	di
		mov	es, word_213B6
		xor	di, di
		push	es
		push	word_213B8
		nop
		push	cs
		call	near ptr sub_51C6
		pop	bx
		mov	bx, ax
		pop	es
		mov	word ptr dword_23CD8, ax
		mov	word ptr dword_23CD8+2,	dx
		push	ds
		mov	ds, dx
		or	ax, dx
		jnz	short loc_A3E1
		nop
		nop
		jmp	near ptr sub_4270
; ---------------------------------------------------------------------------

loc_A3E1:				; CODE XREF: seg000:A3DAj
		xor	ax, ax
		mov	cx, 0FFFFh
		cmp	byte ptr es:[di], 0
		jz	short loc_A3FB

loc_A3EC:				; CODE XREF: seg000:A3F9j
		mov	[bx], di
		mov	word ptr [bx+2], es
		add	bx, 4
		repne scasb
		cmp	es:[di], al
		jnz	short loc_A3EC

loc_A3FB:				; CODE XREF: seg000:A3EAj
		mov	[bx], ax
		mov	[bx+2],	ax
		pop	ds
		pop	di
		pop	si
		mov	ax, word ptr dword_23CD8+2
		mov	word_213B2, ax
		mov	ax, word ptr dword_23CD8
		mov	envp, ax
		retn
; ---------------------------------------------------------------------------

unknown_libname_2:			; BCC v4.x/5.x DOS runtime
		push	si
		push	di
		pop	di
		pop	si
		retf
; ---------------------------------------------------------------------------
		dd byte_2075B
		db 4 dup(0), 15h, 0A4h
		dw seg seg000
		db 0E2h, 0FFh
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, [bp+6]
		or	ax, [bp+8]
		jz	short loc_A46A
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		sub	word ptr es:[bx], 1
		sbb	word ptr es:[bx+2], 0
		xor	ax, ax
		push	ax
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	near ptr @xmsg@$bdtr$qv	; xmsg::~xmsg(void)
		add	sp, 6
		test	byte ptr [bp+0Ah], 1
		jz	short loc_A468
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	_registerbgidriver
		pop	cx
		pop	cx
		jmp	short loc_A46C
; ---------------------------------------------------------------------------

loc_A468:				; CODE XREF: seg000:A457j
		jmp	short loc_A46C
; ---------------------------------------------------------------------------

loc_A46A:				; CODE XREF: seg000:A42Ej
		xor	ax, ax

loc_A46C:				; CODE XREF: seg000:A466j
					; seg000:loc_A468j
		pop	di
		pop	si
		pop	bp
		retf
; ---------------------------------------------------------------------------

unknown_libname_3:			; BCC v4.x/5.x DOS runtime
		push	si
		push	di
		pop	di
		pop	si
		retf
; ---------------------------------------------------------------------------
		dd byte_20903
		dd byte_208B5
		db 4 dup(0), 0BEh, 1
		dw seg seg004
		db 87h,	20h, 0FCh, 0FFh, 6 dup(0), 75h,	0A4h
		dw seg seg000
		db 0DEh, 0FFh, 2 dup(0), 5, 3 dup(0), 2	dup(0FFh), 6, 0
		db 5, 3	dup(0),	81h, 0A4h
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, [bp+6]
		or	ax, [bp+8]
		jz	short loc_A4EC
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		sub	word ptr es:[bx], 1
		sbb	word ptr es:[bx+2], 0
		xor	ax, ax
		push	ax
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	near ptr @xmsg@$bdtr$qv	; xmsg::~xmsg(void)
		add	sp, 6
		test	byte ptr [bp+0Ah], 1
		jz	short loc_A4EA
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	_registerbgidriver
		pop	cx
		pop	cx
		jmp	short loc_A4EE
; ---------------------------------------------------------------------------

loc_A4EA:				; CODE XREF: seg000:A4D9j
		jmp	short loc_A4EE
; ---------------------------------------------------------------------------

loc_A4EC:				; CODE XREF: seg000:A4B0j
		xor	ax, ax

loc_A4EE:				; CODE XREF: seg000:A4E8j
					; seg000:loc_A4EAj
		pop	di
		pop	si
		pop	bp
		retf
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, [bp+6]
		or	ax, [bp+8]
		jz	short loc_A539
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		sub	word ptr es:[bx], 1
		sbb	word ptr es:[bx+2], 0
		xor	ax, ax
		push	ax
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	near ptr @xmsg@$bdtr$qv	; xmsg::~xmsg(void)
		add	sp, 6
		test	byte ptr [bp+0Ah], 1
		jz	short loc_A537
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	_registerbgidriver
		pop	cx
		pop	cx
		jmp	short loc_A53B
; ---------------------------------------------------------------------------

loc_A537:				; CODE XREF: seg000:A526j
		jmp	short loc_A53B
; ---------------------------------------------------------------------------

loc_A539:				; CODE XREF: seg000:A4FDj
		xor	ax, ax

loc_A53B:				; CODE XREF: seg000:A535j
					; seg000:loc_A537j
		pop	di
		pop	si
		pop	bp
		retf
; ---------------------------------------------------------------------------

unknown_libname_4:			; BCC v4.x/5.x DOS runtime
		push	si
		push	di
		pop	di
		pop	si
		retf
; ---------------------------------------------------------------------------
unk_A544	db    0			; DATA XREF: seg000:A548o
		db    0
		db    0
		db    0
		dd unk_A544
		db 0E2h, 0FFh, 6, 0Ch
		dw seg seg004
		db 4 dup(0), 0CCh, 0Bh
		dw seg seg004
		db 4, 0, 0FCh, 0FFh, 2 dup(0), 6, 0Ch
		dw seg seg004
		db 4, 0, 0F8h, 0FFh, 6 dup(0), 94h, 0Bh
		dw seg seg004
		db 0, 2	dup(1),	7 dup(0), 4Eh, 0A5h
		dw seg seg000
		db 0DAh, 0FFh, 2 dup(0), 5, 3 dup(0), 56h, 0A5h, 6, 0
		db 5, 0, 1, 0, 6Eh, 0A5h, 6, 0Ch
		dw seg seg004
		db 4 dup(0), 0CCh, 0Bh
		dw seg seg004
		db 4, 0, 0FCh, 0FFh, 2 dup(0), 6, 0Ch
		dw seg seg004
		db 4, 0, 0F8h, 0FFh, 6 dup(0), 94h, 0Bh
		dw seg seg004
		db 0, 2	dup(1),	7 dup(0), 92h, 0A5h
		dw seg seg000
		db 0DAh, 0FFh, 2 dup(0), 5, 3 dup(0), 9Ah, 0A5h, 6, 0
		db 5, 0, 1, 0, 0B2h, 0A5h, 6, 0Ch
		dw seg seg004
		db 4 dup(0), 0CCh, 0Bh
		dw seg seg004
		db 4, 0, 0FCh, 0FFh, 2 dup(0), 6, 0Ch
		dw seg seg004
		db 4, 0, 0F8h, 0FFh, 6 dup(0), 94h, 0Bh
		dw seg seg004
		db 0, 2	dup(1),	7 dup(0), 0D6h,	0A5h
		dw seg seg000
		db 0DAh, 0FFh, 2 dup(0), 5, 3 dup(0), 0DEh, 0A5h, 6, 0
		db 5, 0, 1, 0, 0F6h, 0A5h, 4 dup(0), 1Ah, 0A6h
		dw seg seg000
byte_A622	db 0E2h, 0FFh, 52h, 0Bh	; DATA XREF: seg000:A630o
		dw seg seg004
		dd byte_212E6
		dd 0
		dd byte_A622+2
		db 0E2h, 0FFh, 4 dup(0), 36h, 0A6h
		dw seg seg000
		db 0E2h, 0FFh, 52h, 0Bh
		dw seg seg004
		dd byte_211E4
		db 4 dup(0), 40h, 0A6h
		dw seg seg000
		db 0E2h, 0FFh, 4 dup(0), 52h, 0A6h
		dw seg seg000
byte_A65A	db 0E2h, 0FFh, 52h, 0Bh	; DATA XREF: seg000:A668o
		dw seg seg004
		dd byte_211E4
		dd 0
		dd byte_A65A+2
		db 0E2h, 0FFh
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		push	word ptr [bp+0Ch]
		push	word ptr [bp+0Ah]
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	near ptr @xmsg@$bctr$qmx4xmsg ;	xmsg::xmsg(xmsg	&)
		add	sp, 8
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		add	word ptr es:[bx], 1
		adc	word ptr es:[bx+2], 0
		mov	dx, [bp+8]
		mov	ax, [bp+6]
		pop	di
		pop	si
		pop	bp
		retf
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, [bp+6]
		or	ax, [bp+8]
		jz	short loc_A6EA
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		sub	word ptr es:[bx], 1
		sbb	word ptr es:[bx+2], 0
		xor	ax, ax
		push	ax
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	near ptr @xmsg@$bdtr$qv	; xmsg::~xmsg(void)
		add	sp, 6
		test	byte ptr [bp+0Ah], 1
		jz	short loc_A6E8
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	_registerbgidriver
		pop	cx
		pop	cx
		jmp	short loc_A6EC
; ---------------------------------------------------------------------------

loc_A6E8:				; CODE XREF: seg000:A6D7j
		jmp	short loc_A6EC
; ---------------------------------------------------------------------------

loc_A6EA:				; CODE XREF: seg000:A6AEj
		xor	ax, ax

loc_A6EC:				; CODE XREF: seg000:A6E6j
					; seg000:loc_A6E8j
		pop	di
		pop	si
		pop	bp
		retf
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, [bp+6]
		or	ax, [bp+8]
		jz	short loc_A737
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		sub	word ptr es:[bx], 1
		sbb	word ptr es:[bx+2], 0
		xor	ax, ax
		push	ax
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	near ptr @xmsg@$bdtr$qv	; xmsg::~xmsg(void)
		add	sp, 6
		test	byte ptr [bp+0Ah], 1
		jz	short loc_A735
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	_registerbgidriver
		pop	cx
		pop	cx
		jmp	short loc_A739
; ---------------------------------------------------------------------------

loc_A735:				; CODE XREF: seg000:A724j
		jmp	short loc_A739
; ---------------------------------------------------------------------------

loc_A737:				; CODE XREF: seg000:A6FBj
		xor	ax, ax

loc_A739:				; CODE XREF: seg000:A733j
					; seg000:loc_A735j
		pop	di
		pop	si
		pop	bp
		retf
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, [bp+6]
		or	ax, [bp+8]
		jz	short loc_A784
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		sub	word ptr es:[bx], 1
		sbb	word ptr es:[bx+2], 0
		xor	ax, ax
		push	ax
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	near ptr @xmsg@$bdtr$qv	; xmsg::~xmsg(void)
		add	sp, 6
		test	byte ptr [bp+0Ah], 1
		jz	short loc_A782
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	_registerbgidriver
		pop	cx
		pop	cx
		jmp	short loc_A786
; ---------------------------------------------------------------------------

loc_A782:				; CODE XREF: seg000:A771j
		jmp	short loc_A786
; ---------------------------------------------------------------------------

loc_A784:				; CODE XREF: seg000:A748j
		xor	ax, ax

loc_A786:				; CODE XREF: seg000:A780j
					; seg000:loc_A782j
		pop	di
		pop	si
		pop	bp
		retf

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_A78A	proc far		; CODE XREF: sub_A897+3Ap

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

		push	bp
		mov	bp, sp
		sub	sp, 8
		push	si
		push	di
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		jmp	short loc_A7FB
; ---------------------------------------------------------------------------

loc_A7A0:				; CODE XREF: sub_A78A+78j
		les	bx, [bp+var_4]
		mov	al, es:[bx]
		push	ax
		nop
		push	cs
		call	near ptr sub_5893
		pop	cx
		or	ax, ax
		jz	short loc_A7BF
		inc	word ptr [bp+var_4]
		les	bx, [bp+var_4]
		cmp	byte ptr es:[bx], 0
		jnz	short loc_A7F8
		jmp	short loc_A804
; ---------------------------------------------------------------------------

loc_A7BF:				; CODE XREF: sub_A78A+25j
		mov	dx, [bp+arg_6]
		mov	ax, [bp+arg_4]
		mov	word ptr [bp+var_8+2], dx
		mov	word ptr [bp+var_8], ax
		jmp	short loc_A7DE
; ---------------------------------------------------------------------------

loc_A7CD:				; CODE XREF: sub_A78A+5Bj
		les	bx, [bp+var_4]
		mov	al, es:[bx]
		les	bx, [bp+var_8]
		cmp	al, es:[bx]
		jz	short loc_A7E7
		inc	word ptr [bp+var_8]

loc_A7DE:				; CODE XREF: sub_A78A+41j
		les	bx, [bp+var_8]
		cmp	byte ptr es:[bx], 0
		jnz	short loc_A7CD

loc_A7E7:				; CODE XREF: sub_A78A+4Fj
		les	bx, [bp+var_8]
		cmp	byte ptr es:[bx], 0
		jz	short loc_A7F8
		mov	dx, word ptr [bp+var_4+2]
		mov	ax, word ptr [bp+var_4]
		jmp	short loc_A808
; ---------------------------------------------------------------------------

loc_A7F8:				; CODE XREF: sub_A78A+31j sub_A78A+64j
		inc	word ptr [bp+var_4]

loc_A7FB:				; CODE XREF: sub_A78A+14j
		les	bx, [bp+var_4]
		cmp	byte ptr es:[bx], 0
		jnz	short loc_A7A0

loc_A804:				; CODE XREF: sub_A78A+33j
		xor	dx, dx
		xor	ax, ax

loc_A808:				; CODE XREF: sub_A78A+6Cj
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_A78A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl __far sub_A80E(int, int, char *pathname, char *src, int)
sub_A80E	proc far		; CODE XREF: sub_A897+7Fp sub_A897+BDp ...

dest		= byte ptr -50h
arg_0		= word ptr  6
arg_2		= word ptr  8
pathname	= dword	ptr  0Ah
src		= dword	ptr  0Eh
arg_C		= word ptr  12h

		push	bp
		mov	bp, sp
		sub	sp, 50h
		push	si
		push	di
		push	[bp+arg_2]
		push	[bp+arg_0]	; src
		push	ss
		lea	ax, [bp+dest]
		push	ax		; dest
		nop
		push	cs
		call	near ptr _strcpy
		push	word ptr [bp+src+2]
		push	word ptr [bp+src] ; src
		push	ss
		lea	ax, [bp+dest]
		push	ax		; dest
		nop
		push	cs
		call	near ptr _strcat
		add	sp, 10h
		cmp	[bp+arg_C], 0
		jz	short loc_A862
		push	word ptr [bp+pathname+2]
		push	word ptr [bp+pathname] ; pathname
		push	ds
		mov	ax, 2A02h
		push	ax		; varname
		push	ss
		lea	ax, [bp+dest]
		push	ax		; file
		nop
		push	cs
		call	near ptr __searchenv
		add	sp, 0Ch
		les	bx, [bp+pathname]
		cmp	byte ptr es:[bx], 0
		jz	short loc_A88F
		jmp	short loc_A88A
; ---------------------------------------------------------------------------

loc_A862:				; CODE XREF: sub_A80E+2Fj
		push	ss
		lea	ax, [bp+dest]
		push	ax		; src
		push	word ptr [bp+pathname+2]
		push	word ptr [bp+pathname] ; dest
		nop
		push	cs
		call	near ptr _strcpy
		add	sp, 8
		mov	ax, 4
		push	ax		; char
		push	ss
		lea	ax, [bp+dest]
		push	ax		; pathname
		nop
		push	cs
		call	near ptr __access
		add	sp, 6
		or	ax, ax
		jnz	short loc_A88F

loc_A88A:				; CODE XREF: sub_A80E+52j
		mov	ax, 1
		jmp	short loc_A891
; ---------------------------------------------------------------------------

loc_A88F:				; CODE XREF: sub_A80E+50j sub_A80E+7Aj
		xor	ax, ax

loc_A891:				; CODE XREF: sub_A80E+7Fj
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_A80E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_A897(int, char *s, int, int, int, int, int)
sub_A897	proc near		; CODE XREF: _execl+19p

pathname	= word ptr -9Ch
var_1A		= word ptr -1Ah
var_18		= word ptr -18h
var_16		= word ptr -16h
var_14		= dword	ptr -14h
s1		= dword	ptr -10h
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
src		= dword	ptr -4
s		= dword	ptr  6
arg_6		= word ptr  0Ah
arg_8		= word ptr  0Ch
arg_A		= word ptr  0Eh
arg_C		= word ptr  10h
arg_E		= word ptr  12h

		push	bp
		mov	bp, sp
		sub	sp, 9Ch
		push	si
		push	di
		les	bx, [bp+s]
		mov	al, es:[bx]
		cbw
		mov	dx, ax
		cmp	ax, 61h	; 'a'
		jb	short loc_A8B1
		sub	dx, 20h	; ' '

loc_A8B1:				; CODE XREF: sub_A897+15j
		cmp	dx, 41h	; 'A'
		jb	short loc_A8C5
		cmp	dx, 5Ah	; 'Z'
		ja	short loc_A8C5
		les	bx, [bp+s]
		cmp	byte ptr es:[bx+1], 3Ah	; ':'
		jz	short loc_A8DB

loc_A8C5:				; CODE XREF: sub_A897+1Dj sub_A897+22j
		push	ds
		mov	ax, 2A07h
		push	ax
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]
		push	cs
		call	near ptr sub_A78A
		add	sp, 8
		or	ax, dx
		jz	short loc_A8E0

loc_A8DB:				; CODE XREF: sub_A897+2Cj
		mov	[bp+arg_E], 0

loc_A8E0:				; CODE XREF: sub_A897+42j
		mov	[bp+var_1A], 0
		mov	ax, 2Eh	; '.'
		push	ax		; char
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]	; s
		nop
		push	cs
		call	near ptr sub_6542
		add	sp, 6
		mov	word ptr [bp+s1+2], dx
		mov	word ptr [bp+s1], ax
		or	ax, dx
		jz	short loc_A93F
		push	[bp+arg_E]	; int
		push	ds
		mov	ax, 2A0Ah
		push	ax		; src
		push	ss
		lea	ax, [bp+pathname]
		push	ax		; pathname
		push	word ptr [bp+s+2] ; int
		push	word ptr [bp+s]	; int
		push	cs
		call	near ptr sub_A80E
		add	sp, 0Eh
		mov	[bp+var_18], ax
		or	ax, ax
		jnz	short loc_A926
		jmp	loc_A9AA
; ---------------------------------------------------------------------------

loc_A926:				; CODE XREF: sub_A897+8Aj
		push	ds
		mov	ax, 2A0Bh
		push	ax		; s2
		push	word ptr [bp+s1+2]
		push	word ptr [bp+s1] ; s1
		nop
		push	cs
		call	near ptr _stricmp
		add	sp, 8
		or	ax, ax
		jnz	short loc_A9AA
		jmp	short loc_A9A5
; ---------------------------------------------------------------------------

loc_A93F:				; CODE XREF: sub_A897+68j
		push	[bp+arg_E]	; int
		push	ds
		mov	ax, 2A10h
		push	ax		; src
		push	ss
		lea	ax, [bp+pathname]
		push	ax		; pathname
		push	word ptr [bp+s+2] ; int
		push	word ptr [bp+s]	; int
		push	cs
		call	near ptr sub_A80E
		add	sp, 0Eh
		mov	[bp+var_18], ax
		or	ax, ax
		jnz	short loc_A9AA
		push	[bp+arg_E]	; int
		push	ds
		mov	ax, 2A15h
		push	ax		; src
		push	ss
		lea	ax, [bp+pathname]
		push	ax		; pathname
		push	word ptr [bp+s+2] ; int
		push	word ptr [bp+s]	; int
		push	cs
		call	near ptr sub_A80E
		add	sp, 0Eh
		mov	[bp+var_18], ax
		or	ax, ax
		jnz	short loc_A9AA
		push	[bp+arg_E]	; int
		push	ds
		mov	ax, 2A1Ah
		push	ax		; src
		push	ss
		lea	ax, [bp+pathname]
		push	ax		; pathname
		push	word ptr [bp+s+2] ; int
		push	word ptr [bp+s]	; int
		push	cs
		call	near ptr sub_A80E
		add	sp, 0Eh
		mov	[bp+var_18], ax
		or	ax, ax
		jz	short loc_A9AA

loc_A9A5:				; CODE XREF: sub_A897+A6j
		mov	[bp+var_1A], 1

loc_A9AA:				; CODE XREF: sub_A897+8Cj sub_A897+A4j ...
		cmp	[bp+var_18], 0
		jz	short loc_A9CC
		cmp	[bp+var_1A], 0
		jz	short loc_A9D5
		push	ds
		mov	ax, 2A1Fh
		push	ax		; name
		nop
		push	cs
		call	near ptr _getenv
		pop	cx
		pop	cx
		mov	word ptr [bp+src+2], dx
		mov	word ptr [bp+src], ax
		or	ax, dx
		jnz	short loc_A9D5

loc_A9CC:				; CODE XREF: sub_A897+117j
		mov	word_213BE, 2
		jmp	loc_AA9B
; ---------------------------------------------------------------------------

loc_A9D5:				; CODE XREF: sub_A897+11Dj
					; sub_A897+133j
		cmp	[bp+var_1A], 0
		jz	short loc_A9EE
		push	word ptr [bp+src+2]
		push	word ptr [bp+src]
		push	ds
		mov	ax, 2A27h
		push	ax
		push	[bp+arg_8]
		push	[bp+arg_6]
		jmp	short loc_AA02
; ---------------------------------------------------------------------------

loc_A9EE:				; CODE XREF: sub_A897+142j
		push	ss		; int
		lea	ax, [bp+pathname]
		push	ax		; int
		xor	ax, ax
		push	ax
		push	ax		; s
		mov	ax, [bp+arg_6]
		add	ax, 4
		push	[bp+arg_8]	; int
		push	ax		; int

loc_AA02:				; CODE XREF: sub_A897+155j
		call	__DOSCMD
		mov	[bp+var_6], dx
		mov	[bp+var_8], ax
		mov	ax, [bp+var_8]
		or	ax, [bp+var_6]
		jnz	short loc_AA1C
		mov	word_213BE, 8
		jmp	loc_AA9B
; ---------------------------------------------------------------------------

loc_AA1C:				; CODE XREF: sub_A897+17Aj
		mov	ax, [bp+var_8]
		inc	ax
		push	[bp+var_6]
		push	ax		; s
		nop
		push	cs
		call	near ptr _strlen
		pop	cx
		pop	cx
		cmp	ax, 80h	; ''
		jb	short loc_AA45
		mov	word_213BE, 14h
		push	[bp+var_6]
		push	[bp+var_8]
		nop
		push	cs
		call	near ptr sub_5093
		pop	cx
		pop	cx
		jmp	short loc_AA9B
; ---------------------------------------------------------------------------

loc_AA45:				; CODE XREF: sub_A897+197j
		mov	ax, [bp+arg_A]
		or	ax, [bp+arg_C]
		jnz	short loc_AA5A
		mov	dx, word ptr dword_23CD8+2
		mov	ax, word ptr dword_23CD8
		mov	[bp+arg_C], dx
		mov	[bp+arg_A], ax

loc_AA5A:				; CODE XREF: sub_A897+1B4j
		push	[bp+arg_C]	; int
		push	[bp+arg_A]	; int
		cmp	[bp+var_1A], 0
		jz	short loc_AA6E
		mov	dx, word ptr [bp+src+2]
		mov	ax, word ptr [bp+src]
		jmp	short loc_AA74
; ---------------------------------------------------------------------------

loc_AA6E:				; CODE XREF: sub_A897+1CDj
		mov	dx, ss
		lea	ax, [bp+pathname]

loc_AA74:				; CODE XREF: sub_A897+1D5j
		push	dx
		push	ax		; src
		push	ss
		lea	ax, [bp+var_14]
		push	ax		; __int32
		call	__DOSENV
		mov	[bp+var_A], dx
		mov	[bp+var_C], ax
		or	ax, dx
		jnz	short loc_AAA0
		mov	word_213BE, 8
		push	[bp+var_6]
		push	[bp+var_8]
		nop
		push	cs
		call	near ptr sub_5093
		pop	cx
		pop	cx

loc_AA9B:				; CODE XREF: sub_A897+13Bj
					; sub_A897+182j ...
		mov	ax, 0FFFFh
		jmp	short loc_AAEB
; ---------------------------------------------------------------------------

loc_AAA0:				; CODE XREF: sub_A897+1EFj
		call	off_2381C
		push	[bp+var_A]
		push	[bp+var_C]
		push	[bp+var_6]
		push	[bp+var_8]
		cmp	[bp+var_1A], 0
		jz	short loc_AABE
		mov	dx, word ptr [bp+src+2]
		mov	ax, word ptr [bp+src]
		jmp	short loc_AAC4
; ---------------------------------------------------------------------------

loc_AABE:				; CODE XREF: sub_A897+21Dj
		mov	dx, ss
		lea	ax, [bp+pathname] ; status

loc_AAC4:				; CODE XREF: sub_A897+225j
		push	dx
		push	ax
		; Hack
		db 0ffh
		db 056h
		db 004h
		add	sp, 0Ch
		mov	[bp+var_16], ax
		push	word ptr [bp+var_14+2]
		push	word ptr [bp+var_14]
		nop
		push	cs
		call	near ptr sub_5093
		push	[bp+var_6]
		push	[bp+var_8]
		nop
		push	cs
		call	near ptr sub_5093
		add	sp, 8
		mov	ax, [bp+var_16]

loc_AAEB:				; CODE XREF: sub_A897+207j
		pop	di
		pop	si
		mov	sp, bp
		pop	bp

locret_AAF0:				; DATA XREF: sub_10898+Fo seg001:5E46o ...
		retn
sub_A897	endp

seg000		ends

; ===========================================================================

; Segment type:	Pure code
seg001		segment	byte public 'CODE' use16
		assume cs:seg001
		;org 1
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing
		db 0

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_AAF2	proc near		; CODE XREF: sub_AB88+DCp
		push	bp
		mov	bp, sp

loc_AAF5:				; CODE XREF: sub_AAF2+Aj
		mov	ax, word_23DF2
		cmp	ax, word_266D0
		jb	short loc_AAF5
		mov	word_23DF2, 0
		mov	word_266D0, 1
		pop	bp
		retn
sub_AAF2	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
_main		proc far		; CODE XREF: start+13BP

_argc		= word ptr  6
_argv		= dword	ptr  8
_envp		= dword	ptr  0Ch

		push	bp
		mov	bp, sp
		call	sub_11F96
		or	ax, ax
		jz	short loc_AB86
		mov	word_24CB2, 4E20h
		push	ds
		push	offset aUmx	; "û¶z.½"
		call	sub_13666
		les	bx, dword_2CDC6
		mov	eax, es:[bx+14h]
		mov	dword_21722, eax
		call	sub_B488
		call	sub_2254
		call	sub_1A36
		push	ds
		push	offset aGameft_bft ; "GAMEFT.bft"
		call	sub_1A76
		les	bx, dword_2CDC6
		mov	al, es:[bx+10h]
		mov	ah, 0
		push	ax
		mov	al, es:[bx+18h]
		mov	ah, 0
		push	ax
		call	sub_133FA
		push	ds
		push	offset aMiko	; "miko"
		push	0B00h
		call	sub_13496

loc_AB6B:				; CODE XREF: _main+6Fj
		call	sub_AED0
		call	sub_AB88
		cmp	byte_266D2, 2
		jnz	short loc_AB7D
		call	sub_B29E
		jmp	short loc_AB6B
; ---------------------------------------------------------------------------

loc_AB7D:				; CODE XREF: _main+6Aj
		push	ds
		push	offset arg0	; "op"
		nop
		push	cs
		call	near ptr sub_E7FD

loc_AB86:				; CODE XREF: _main+8j
		pop	bp
		retf
_main		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_AB88	proc near		; CODE XREF: _main+62p
		push	bp
		mov	bp, sp
		push	si
		mov	word_266D0, 1
		push	1
		call	sub_131B7
		call	far ptr	sub_1379C

loc_AB9E:				; CODE XREF: sub_AB88+174j
		call	sub_137A4
		call	word_23D90
		test	byte ptr word_24CB4+1, 10h
		jz	short loc_ABBA
		call	sub_B2CF
		or	ax, ax
		jz	short loc_ABBA
		mov	byte_266D2, 1

loc_ABBA:				; CODE XREF: sub_AB88+24j sub_AB88+2Bj
		call	word_255CA
		call	sub_19EE4
		call	dword_25986
		cmp	byte_256A8, 0
		jnz	short loc_ABD4
		call	word_255A8
		jmp	short loc_ABD8
; ---------------------------------------------------------------------------

loc_ABD4:				; CODE XREF: sub_AB88+44j
		call	word_255AA

loc_ABD8:				; CODE XREF: sub_AB88+4Aj
		call	sub_BCF4
		call	sub_C6E2
		call	sub_C266
		call	sub_10ABF
		call	sub_104B6
		call	sub_1C8C8
		call	sub_17E59
		call	dword_259F6
		call	dword_2D010
		call	sub_1DE5D
		call	sub_13BCE
		call	word_2566C
		call	sub_1020A
		call	word_2D014
		call	word_259FA
		call	sub_10713
		call	sub_10552
		call	sub_10BFD
		call	sub_C156
		call	sub_13C5C
		call	sub_C2B2
		call	sub_12DF0
		call	loc_BD64
		call	sub_12CE5
		call	sub_C718
		mov	dx, 7Ch	; '|'
		mov	al, 0
		out	dx, al
		call	word_259DC
		call	word_259DE
		call	loc_CD36
		call	far ptr	sub_1379C
		mov	ax, word_23DF2
		cmp	ax, word_266D0
		jb	short loc_AC56
		mov	ax, 1
		jmp	short loc_AC58
; ---------------------------------------------------------------------------

loc_AC56:				; CODE XREF: sub_AB88+C7j
		xor	ax, ax

loc_AC58:				; CODE XREF: sub_AB88+CCj
		cwde
		add	dword_22BA0, eax
		inc	dword_22BA4
		call	sub_AAF2
		cmp	byte_266D3, 0
		jz	short loc_AC7A
		call	far ptr	loc_1F04
		mov	byte_266D3, 0
		jmp	short $+2

loc_AC7A:				; CODE XREF: sub_AB88+E4j
		call	sub_CCD6
		mov	dx, 0A6h ; '¦'
		mov	al, byte_25A3D
		out	dx, al		; Interrupt Controller #2, 8259A
		mov	dx, 0A4h ; '¤'
		mov	al, byte_25A3C
		out	dx, al		; Interrupt Controller #2, 8259A
		mov	byte_25A3D, al
		xor	byte_25A3C, 1
		call	sub_138EC
		inc	dword_266C6
		mov	ax, word_266CA
		mov	dx, ax
		inc	ax
		mov	word_266CA, ax
		and	ax, 0Fh
		mov	byte_266CF, al
		and	al, 7
		mov	byte_266CE, al
		and	al, 3
		mov	byte_266CD, al
		and	al, 1
		mov	byte_266CC, al
		les	bx, dword_2CDC6
		mov	al, es:[bx+0Bh]
		mov	ah, 0
		mov	si, ax
		cmp	si, 0Ah
		jl	short loc_ACD1
		mov	ax, 3E8h
		jmp	short loc_ACDE
; ---------------------------------------------------------------------------

loc_ACD1:				; CODE XREF: sub_AB88+142j
		mov	ax, si
		imul	ax, 1F4h
		push	ax
		mov	ax, 1770h
		pop	dx
		sub	ax, dx

loc_ACDE:				; CODE XREF: sub_AB88+147j
		mov	si, ax
		mov	ax, word_266CA
		xor	dx, dx
		div	si
		or	dx, dx
		jnz	short loc_ACF4
		push	1
		nop
		push	cs
		call	near ptr sub_C364
		jmp	short $+2

loc_ACF4:				; CODE XREF: sub_AB88+161j
		call	sub_116C4
		cmp	byte_266D2, 0
		jz	loc_AB9E
		pop	si
		pop	bp
		retn
sub_AB88	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_AD03	proc near		; CODE XREF: sub_AED0+40p
		push	bp
		mov	bp, sp
		push	si
		les	bx, dword_2CDC6
		mov	word ptr es:[bx+38h], 0
		mov	byte ptr es:[bx+31h], 0
		mov	byte ptr es:[bx+32h], 0
		mov	byte ptr es:[bx+30h], 37h ; '7'
		cmp	byte ptr es:[bx+12h], 31h ; '1'
		jnz	short loc_AD2C
		mov	ax, 1
		jmp	short loc_AD2E
; ---------------------------------------------------------------------------

loc_AD2C:				; CODE XREF: sub_AD03+22j
		xor	ax, ax

loc_AD2E:				; CODE XREF: sub_AD03+27j
		mov	byte_266D8, al
		xor	si, si
		jmp	short loc_AD3B
; ---------------------------------------------------------------------------

loc_AD35:				; CODE XREF: sub_AD03+3Bj
		mov	byte ptr [si+4349h], 0
		inc	si

loc_AD3B:				; CODE XREF: sub_AD03+30j
		cmp	si, 8
		jl	short loc_AD35
		mov	byte_259A4, 1
		les	bx, dword_2CDC6
		mov	al, es:[bx+0Eh]
		mov	es:[bx+0Dh], al
		mov	al, es:[bx+0Ch]
		mov	es:[bx+0Bh], al
		call	sub_11551
		cmp	byte_266D8, 0
		jnz	short loc_AD90
		mov	word_259B4, 26h	; '&'
		les	bx, dword_2CDC6
		cmp	byte ptr es:[bx+19h], 0
		jnz	short loc_AD7C
		mov	word_257DC, 1B0Ch
		jmp	short loc_AD82
; ---------------------------------------------------------------------------

loc_AD7C:				; CODE XREF: sub_AD03+6Fj
		mov	word_257DC, 1B20h

loc_AD82:				; CODE XREF: sub_AD03+77j
		mov	word_256AA, 54C4h
		mov	word_256AC, 555Dh
		jmp	short loc_ADBB
; ---------------------------------------------------------------------------

loc_AD90:				; CODE XREF: sub_AD03+5Ej
		mov	word_259B4, 27h	; '''
		les	bx, dword_2CDC6
		cmp	byte ptr es:[bx+19h], 0
		jnz	short loc_ADA9
		mov	word_257DC, 1B34h
		jmp	short loc_ADAF
; ---------------------------------------------------------------------------

loc_ADA9:				; CODE XREF: sub_AD03+9Cj
		mov	word_257DC, 1B48h

loc_ADAF:				; CODE XREF: sub_AD03+A4j
		mov	word_256AA, 54C4h
		mov	word_256AC, 5623h

loc_ADBB:				; CODE XREF: sub_AD03+8Bj
		les	bx, dword_2CDC6
		cmp	byte ptr es:[bx+3Eh], 0
		jz	short loc_ADD7
		mov	byte_266D5, 1Ch
		mov	byte_25688, 2

loc_ADD0:				; CODE XREF: sub_AD03+E5j
		mov	byte_266E0, 1
		jmp	short loc_ADFC
; ---------------------------------------------------------------------------

loc_ADD7:				; CODE XREF: sub_AD03+C1j
		mov	byte_266D5, 10h
		cmp	byte_266D4, 6
		jnz	short loc_ADEA
		mov	byte_25688, 4
		jmp	short loc_ADD0
; ---------------------------------------------------------------------------

loc_ADEA:				; CODE XREF: sub_AD03+DEj
		les	bx, dword_2CDC6
		mov	al, es:[bx+0Fh]
		mov	byte_25688, al
		mov	al, es:[bx+49h]
		mov	byte_266E0, al

loc_ADFC:				; CODE XREF: sub_AD03+D2j
		call	sub_EEB0
		call	sub_12CC7
		mov	al, byte_25688
		mov	ah, 0
		mov	bx, ax
		cmp	bx, 4
		ja	loc_AEC2
		add	bx, bx
		jmp	cs:off_AEC6[bx]

loc_AE17:				; DATA XREF: seg001:off_AEC6o
		mov	word_2CFFE, 64h	; 'd'
		mov	byte_266D7, 4
		mov	byte_266D6, 10h
		mov	word_2D000, 945Eh
		mov	word_2D002, 94BEh
		mov	word_2D004, 9435h
		jmp	loc_AEC2
; ---------------------------------------------------------------------------

loc_AE3C:				; CODE XREF: sub_AD03+10Fj
					; DATA XREF: seg001:03D8o
		mov	word_2CFFE, 0FAh ; 'ú'
		mov	byte_266D7, 0Bh
		mov	byte_266D6, 18h
		jmp	short loc_AEB0
; ---------------------------------------------------------------------------

loc_AE4E:				; CODE XREF: sub_AD03+10Fj
					; DATA XREF: seg001:03DAo
		mov	byte_266D5, 14h
		mov	word_2CFFE, 190h
		mov	byte_266D7, 14h
		mov	byte_266D6, 20h	; ' '
		mov	word_2D000, 94A2h
		mov	word_2D002, 94F6h
		mov	word_2D004, 9448h
		jmp	short loc_AEC2
; ---------------------------------------------------------------------------

loc_AE77:				; CODE XREF: sub_AD03+10Fj
					; DATA XREF: seg001:03DCo
		mov	word_2CFFE, 1F4h
		mov	byte_266D5, 16h
		mov	byte_266D7, 16h
		mov	byte_266D6, 22h	; '"'
		mov	word_2D000, 94A2h
		mov	word_2D002, 94F6h
		mov	word_2D004, 9453h
		jmp	short loc_AEC2
; ---------------------------------------------------------------------------

loc_AEA0:				; CODE XREF: sub_AD03+10Fj
					; DATA XREF: seg001:03DEo
		mov	word_2CFFE, 0A00h
		mov	byte_266D7, 10h
		mov	byte_266D6, 14h

loc_AEB0:				; CODE XREF: sub_AD03+149j
		mov	word_2D000, 9486h
		mov	word_2D002, 94DAh
		mov	word_2D004, 9440h

loc_AEC2:				; CODE XREF: sub_AD03+109j
					; sub_AD03+136j ...
		pop	si
		pop	bp
		retn
sub_AD03	endp

; ---------------------------------------------------------------------------
		db 0
off_AEC6	dw offset loc_AE17	; DATA XREF: sub_AD03+10Fr
		dw offset loc_AE3C
		dw offset loc_AE4E
		dw offset loc_AE77
		dw offset loc_AEA0

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_AED0	proc near		; CODE XREF: _main:loc_AB6Bp
		push	bp
		mov	bp, sp
		push	si
		mov	word_213DE, 0
		mov	word_23DF4, 0
		les	bx, dword_2CDC6
		mov	al, es:[bx+11h]
		mov	byte_266D4, al
		cmp	byte_266D4, 0
		jz	short loc_AEF9
		cmp	byte_266D4, 6
		jnz	short loc_AF4A

loc_AEF9:				; CODE XREF: sub_AED0+20j
		mov	word_213DE, 1
		push	large 200005h
		call	sub_2266
		mov	word_23D90, 11BEh
		call	sub_AD03
		les	bx, dword_2CDC6
		cmp	byte ptr es:[bx+3Eh], 0
		jz	short loc_AF4A
		call	sub_B3EE
		les	bx, dword_2CDC6
		mov	al, es:[bx+3Ch]
		mov	es:[bx+11h], al
		mov	byte_266D4, al
		mov	byte_259A4, 80h	; ''
		add	al, 30h	; '0'
		mov	es:[bx+13h], al
		mov	word_23D90, 949h
		mov	dword_21722, 13Eh

loc_AF4A:				; CODE XREF: sub_AED0+27j sub_AED0+4Cj
		call	sub_12024
		mov	dx, 0A6h ; '¦'
		mov	al, 0
		out	dx, al		; Interrupt Controller #2, 8259A
		mov	dx, 0A4h ; '¤'
		out	dx, al		; Interrupt Controller #2, 8259A
		push	ds
		push	offset aEye_rgb	; "eye.rgb"
		call	sub_219C
		call	far ptr	loc_1F04
		mov	word_216E4, 0
		call	far ptr	loc_1F04
		call	sub_12024
		call	sub_10D4B
		call	sub_B1D0
		nop
		push	cs
		call	near ptr sub_F204
		call	sub_B616
		call	sub_19EBC
		cmp	word_213DE, 0
		jz	short loc_AFD5
		call	sub_B530
		call	sub_FF34
		cmp	byte_266D8, 0
		jnz	short loc_AFA0
		push	ds
		push	offset aMiko_bft ; "miko.bft"
		jmp	short loc_AFA4
; ---------------------------------------------------------------------------

loc_AFA0:				; CODE XREF: sub_AED0+C8j
		push	ds
		push	offset aMari_bft ; "mari.bft"

loc_AFA4:				; CODE XREF: sub_AED0+CEj
		call	sub_2A74
		push	ds
		push	offset aMikod_bft ; "mikod.bft"
		call	sub_2A74
		push	ds
		push	offset aMiko32_bft ; "miko32.bft"
		call	sub_2A74
		push	ds
		push	offset aMiko16_bft ; "miko16.bft"
		call	sub_2A74
		mov	si, 14h
		jmp	short loc_AFD0
; ---------------------------------------------------------------------------

loc_AFC9:				; CODE XREF: sub_AED0+103j
		push	si
		call	sub_3106
		inc	si

loc_AFD0:				; CODE XREF: sub_AED0+F7j
		cmp	si, 78h	; 'x'
		jl	short loc_AFC9

loc_AFD5:				; CODE XREF: sub_AED0+BBj
		les	bx, off_213E0
		mov	byte ptr es:[bx+2], 30h	; '0'
		les	bx, dword_2CDC6
		mov	al, es:[bx+13h]
		les	bx, off_213E0
		mov	es:[bx+3], al
		mov	al, byte_266D4
		mov	ah, 0
		mov	bx, ax
		cmp	bx, 6
		ja	loc_B144
		add	bx, bx
		jmp	cs:off_B1C2[bx]

loc_B003:				; DATA XREF: seg001:off_B1C2o
		mov	word_2CFF4, 9
		push	8
		push	ds
		push	offset aBss0_cd2 ; "BSS0.CD2"
		call	sub_139FC
		les	bx, dword_2CDC6
		mov	al, es:[bx+12h]
		les	bx, off_213E0
		mov	es:[bx+2], al
		push	ds
		push	offset aSt00_bft ; "st00.bft"
		call	sub_2A74
		call	sub_1DFEF
		les	bx, dword_2CDC6
		cmp	byte ptr es:[bx+12h], 30h ; '0'
		jnz	short loc_B044
		push	ds
		push	offset aSt00_mpn ; "st00.mpn"
		jmp	loc_B141
; ---------------------------------------------------------------------------

loc_B044:				; CODE XREF: sub_AED0+16Bj
		push	ds
		push	offset aSt10_mpn ; "st10.mpn"
		jmp	loc_B141
; ---------------------------------------------------------------------------

loc_B04B:				; CODE XREF: sub_AED0+12Ej
					; DATA XREF: seg001:06D4o
		mov	word_2CFF4, 9
		push	8
		push	ds
		push	offset aBss1_cd2 ; "BSS1.CD2"
		call	sub_139FC
		push	ds
		push	offset aSt01_bft ; "st01.bft"
		call	sub_2A74
		call	sub_1E0B3
		push	ds
		push	offset aSt01_mpn ; "st01.mpn"
		jmp	loc_B141
; ---------------------------------------------------------------------------

loc_B071:				; CODE XREF: sub_AED0+12Ej
					; DATA XREF: seg001:06D6o
		mov	word_2CFF4, 9
		push	8
		push	ds
		push	offset aBss2_cd2 ; "BSS2.CD2"
		call	sub_139FC
		push	ds
		push	offset aSt02_bft ; "st02.bft"
		call	sub_2A74
		call	sub_1E186
		push	ds
		push	offset aSt02_mpn ; "st02.mpn"
		jmp	loc_B141
; ---------------------------------------------------------------------------

loc_B097:				; CODE XREF: sub_AED0+12Ej
					; DATA XREF: seg001:06D8o
		mov	word_2CFF4, 9
		cmp	byte_266D8, 0
		jnz	short loc_B0AC
		push	8
		push	ds
		push	offset aKao3_cd2 ; "KAO3.CD2"
		jmp	short loc_B0B2
; ---------------------------------------------------------------------------

loc_B0AC:				; CODE XREF: sub_AED0+1D2j
		push	8
		push	ds
		push	offset aKao2_cd2 ; "KAO2.CD2"

loc_B0B2:				; CODE XREF: sub_AED0+1DAj
		call	sub_139FC
		push	ds
		push	offset aSt03_bft ; "st03.bft"
		call	sub_2A74
		call	sub_1E245
		push	ds
		push	offset aSt03_mpn ; "st03.mpn"
		call	sub_B8FC
		mov	word_2566C, 3FF4h
		jmp	short loc_B144
; ---------------------------------------------------------------------------

loc_B0D4:				; CODE XREF: sub_AED0+12Ej
					; DATA XREF: seg001:06DAo
		mov	word_2CFF4, 9
		push	8
		push	ds
		push	offset aBss4_cd2 ; "BSS4.CD2"
		call	sub_139FC
		push	ds
		push	offset aSt04_bft ; "st04.bft"
		call	sub_2A74
		call	sub_1E3C2
		push	ds
		push	offset aSt04_mpn ; "st04.mpn"
		jmp	short loc_B141
; ---------------------------------------------------------------------------

loc_B0F9:				; CODE XREF: sub_AED0+12Ej
					; DATA XREF: seg001:06DCo
		mov	word_2CFF4, 9
		push	ds
		push	offset aSt05_bft ; "st05.bft"
		call	sub_2A74
		push	8
		push	ds
		push	offset aBss5_cd2 ; "BSS5.CD2"
		call	sub_139FC
		call	sub_1E47C
		push	ds
		push	offset aSt05_mpn ; "st05.mpn"
		jmp	short loc_B141
; ---------------------------------------------------------------------------

loc_B11E:				; CODE XREF: sub_AED0+12Ej
					; DATA XREF: seg001:06DEo
		mov	word_2CFF4, 9
		push	ds
		push	offset aSt06_bft ; "st06.bft"
		call	sub_2A74
		push	8
		push	ds
		push	offset aBss6_cd2 ; "BSS6.CD2"
		call	sub_139FC
		call	sub_1E518
		push	ds
		push	offset aSt06_mpn ; "st06.mpn"

loc_B141:				; CODE XREF: sub_AED0+171j
					; sub_AED0+178j ...
		call	sub_B8FC

loc_B144:				; CODE XREF: sub_AED0+128j
					; sub_AED0+202j
		call	sub_B971
		call	sub_B6D1
		call	sub_CED4
		call	sub_BAA2
		mov	dx, 0A6h ; '¦'
		mov	al, 0
		out	dx, al		; Interrupt Controller #2, 8259A

loc_B156:				; CODE XREF: sub_AED0+28Cj
		cmp	word_23DF4, 80h	; ''
		jb	short loc_B156
		push	1
		call	sub_666
		mov	word_216E4, 64h	; 'd'
		call	far ptr	loc_1F04
		call	sub_10D77
		call	sub_CBB8
		mov	byte_25A3C, 1
		mov	byte_25A3D, 0
		mov	dx, 0A6h ; '¦'
		mov	al, 1
		out	dx, al		; Interrupt Controller #2, 8259A
		mov	dx, 0A4h ; '¤'
		mov	al, 0
		out	dx, al		; Interrupt Controller #2, 8259A
		call	sub_CBB8
		les	bx, dword_2CDC6
		cmp	byte ptr es:[bx+3Eh], 0
		jnz	short loc_B1AE
		push	large [off_213E0]
		push	600h
		call	sub_13496
		push	0
		call	sub_133DC

loc_B1AE:				; CODE XREF: sub_AED0+2C8j
		nop
		push	cs
		call	near ptr sub_CB99
		mov	word_259DC, 62B3h
		mov	word_259DE, 11BEh
		pop	si
		pop	bp
		retn
sub_AED0	endp

; ---------------------------------------------------------------------------
off_B1C2	dw offset loc_B003	; DATA XREF: sub_AED0+12Er
		dw offset loc_B04B
		dw offset loc_B071
		dw offset loc_B097
		dw offset loc_B0D4
		dw offset loc_B0F9
		dw offset loc_B11E

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_B1D0	proc near		; CODE XREF: sub_AED0+A6p
		push	bp
		mov	bp, sp
		call	sub_11ECB
		mov	word_266CA, 0
		mov	byte_2D00A, 0
		mov	word_255B8, 0
		mov	word_25100, 0
		mov	word_255A0, 0
		mov	word_255A2, 0
		mov	byte_255B6, 0
		mov	byte_25104, 0
		mov	byte_250FE, 0
		mov	word_255BE, 0
		mov	word_255C0, 0
		mov	word ptr dword_2598E, 0C00h
		mov	word ptr dword_2598E+2,	1400h
		mov	word ptr dword_25992, 0C00h
		mov	word ptr dword_25992+2,	1400h
		mov	word_2599A, 40h	; '@'
		mov	word_2599C, 40h	; '@'
		mov	word_2599E, 30h	; '0'
		mov	word_259A0, 30h	; '0'
		mov	byte_259A3, 0
		mov	byte_259AA, 0
		mov	byte_259A9, 0
		mov	byte_259A2, 40h	; '@'
		mov	byte_259AB, 0
		mov	byte_259B6, 0
		mov	word_255CA, 2454h
		mov	byte_255BC, 1
		call	sub_1042A
		nop
		push	cs
		call	near ptr sub_11DE6
		call	sub_BC58
		call	sub_1DA1B
		call	sub_FFA4
		call	sub_C314
		call	sub_11692
		call	sub_15D74
		call	sub_BCB2
		nop
		push	cs
		call	near ptr sub_F204
		mov	word_255AC, 20C8h
		call	sub_CB2E
		pop	bp
		retn
sub_B1D0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_B29E	proc near		; CODE XREF: _main+6Cp
		push	bp
		mov	bp, sp
		push	si
		call	sub_1DFD4
		call	sub_CF1E
		call	sub_B79E
		call	sub_B9BB
		push	large 800100h
		call	sub_2B4E
		mov	si, 8
		jmp	short loc_B2C7
; ---------------------------------------------------------------------------

loc_B2C0:				; CODE XREF: sub_B29E+2Cj
		push	si
		call	sub_13A58
		inc	si

loc_B2C7:				; CODE XREF: sub_B29E+20j
		cmp	si, 1Fh
		jl	short loc_B2C0
		pop	si
		pop	bp
		retn
sub_B29E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_B2CF	proc near		; CODE XREF: sub_AB88+26p
		push	bp
		mov	bp, sp
		push	si
		xor	si, si
		jmp	short loc_B2DC
; ---------------------------------------------------------------------------

loc_B2D7:				; CODE XREF: sub_B2CF+12j
		call	far ptr	sub_1379C

loc_B2DC:				; CODE XREF: sub_B2CF+6j
		cmp	word_24CB4, 0
		jnz	short loc_B2D7
		push	large 1A000Ch
		push	ds
		push	offset unk_213D0
		push	0C1h ; 'Á'
		call	sub_1B50
		push	large 1A000Eh
		push	ds
		push	offset unk_213D3
		push	0E9h ; 'é'
		call	sub_1B50
		push	large 1A000Fh
		push	ds
		push	offset unk_213D6
		push	0C1h ; 'Á'
		call	sub_1B50

loc_B319:				; CODE XREF: sub_B2CF+D2j
		push	0
		call	sub_13213
		test	byte ptr word_24CB4, 1
		jnz	short loc_B32E
		test	byte ptr word_24CB4, 2
		jz	short loc_B37E

loc_B32E:				; CODE XREF: sub_B2CF+56j
		mov	ax, 1
		sub	ax, si
		mov	si, ax
		or	si, si
		jnz	short loc_B35A
		push	large 1A000Eh
		push	ds
		push	offset unk_213D3
		push	0E9h ; 'é'
		call	sub_1B50
		push	large 1A000Fh
		push	ds
		push	offset unk_213D6
		push	0C1h ; 'Á'
		jmp	short loc_B379
; ---------------------------------------------------------------------------

loc_B35A:				; CODE XREF: sub_B2CF+68j
		push	large 1A000Eh
		push	ds
		push	offset unk_213D3
		push	0C1h ; 'Á'
		call	sub_1B50
		push	large 1A000Fh
		push	ds
		push	offset unk_213D6
		push	0E9h ; 'é'

loc_B379:				; CODE XREF: sub_B2CF+89j
		call	sub_1B50

loc_B37E:				; CODE XREF: sub_B2CF+5Dj
		test	byte ptr word_24CB4+1, 40h
		jz	short loc_B38A
		mov	ax, 1
		jmp	short loc_B3EB
; ---------------------------------------------------------------------------

loc_B38A:				; CODE XREF: sub_B2CF+B4j
		test	byte ptr word_24CB4+1, 10h
		jz	short loc_B395
		xor	si, si
		jmp	short loc_B3AC
; ---------------------------------------------------------------------------

loc_B395:				; CODE XREF: sub_B2CF+C0j
		test	byte ptr word_24CB4, 20h
		jnz	short loc_B3AC
		test	byte ptr word_24CB4+1, 20h
		jz	loc_B319
		jmp	short loc_B3AC
; ---------------------------------------------------------------------------

loc_B3A7:				; CODE XREF: sub_B2CF+E2j
		call	far ptr	sub_1379C

loc_B3AC:				; CODE XREF: sub_B2CF+C4j sub_B2CF+CBj ...
		cmp	word_24CB4, 0
		jnz	short loc_B3A7
		push	large 1A000Ch
		push	ds
		push	offset asc_2151E ; "	"
		push	0E1h ; 'á'
		call	sub_22F6
		push	large 1A000Eh
		push	ds
		push	offset asc_21523 ; "	"
		push	0E1h ; 'á'
		call	sub_22F6
		push	large 1A000Fh
		push	ds
		push	offset asc_21528 ; "	"
		push	0E1h ; 'á'
		call	sub_22F6
		mov	ax, si

loc_B3EB:				; CODE XREF: sub_B2CF+B9j
		pop	si
		pop	bp
		retn
sub_B2CF	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_B3EE	proc near		; CODE XREF: sub_AED0+4Ep

var_4		= dword	ptr -4

		enter	4, 0
		push	1F40h
		call	sub_2578
		mov	word ptr dword_23D92+2,	ax
		mov	word ptr dword_23D92, 0
		mov	word ptr [bp+var_4+2], ds
		mov	word ptr [bp+var_4], 1EDh
		les	bx, dword_2CDC6
		mov	al, es:[bx+3Eh]
		add	al, 30h	; '0'
		les	bx, [bp+var_4]
		mov	es:[bx+4], al
		push	word ptr [bp+var_4+2]
		push	bx
		call	sub_F14
		push	large [dword_23D92]
		push	1F40h
		call	sub_E60
		call	sub_DF4
		leave
		retn
sub_B3EE	endp

; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		cmp	word_24CB4, 0
		jnz	short loc_B46D
		les	bx, dword_23D92
		add	bx, word_266CA
		mov	al, es:[bx]
		mov	ah, 0
		mov	word_24CB4, ax
		mov	ax, word_266CA
		add	ax, 0FA0h
		mov	bx, word ptr dword_23D92
		add	bx, ax
		mov	al, es:[bx]
		mov	byte_24CB6, al
		cmp	word_266CA, 0F9Ch
		jb	short loc_B486

loc_B46D:				; CODE XREF: seg001:0951j
		push	word ptr dword_23D92+2
		call	sub_267C
		push	0Ah
		call	sub_666
		push	ds
		push	offset aOp_0	; "op"
		nop
		push	cs
		call	near ptr sub_E7FD

loc_B486:				; CODE XREF: seg001:097Bj
		pop	bp
		retn

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_B488	proc near		; CODE XREF: _main+26p
		push	bp
		mov	bp, sp
		les	bx, dword_2CDC6
		mov	al, es:[bx+11h]
		mov	byte_266D4, al
		cmp	byte_266D4, 6
		jnz	short loc_B4A4
		mov	byte_25688, 4
		jmp	short loc_B4AF
; ---------------------------------------------------------------------------

loc_B4A4:				; CODE XREF: sub_B488+13j
		les	bx, dword_2CDC6
		mov	al, es:[bx+0Fh]
		mov	byte_25688, al

loc_B4AF:				; CODE XREF: sub_B488+1Aj
		les	bx, off_213DA
		mov	al, byte_25688
		add	al, 30h	; '0'
		mov	es:[bx+3], al
		mov	word_266DE, 0
		call	sub_418A
		or	ax, ax
		jz	short loc_B52E
		call	sub_4258
		push	dx
		push	ax
		pop	eax
		cmp	eax, 2BF20h
		jb	short loc_B52E
		push	large 2BF20h
		call	sub_4156
		mov	word_266DE, ax
		cmp	word_266DE, 0
		jz	short loc_B52E
		push	ax
		push	ds
		push	offset aGensoems ; "GENSOEMS"
		call	sub_41DC
		push	1Fh
		push	large [off_213DA]
		push	0
		call	sub_13938
		push	word_266DE
		push	large 0
		push	word_24EB6
		push	0
		mov	ax, word_24EA8
		shl	ax, 2
		movzx	eax, ax
		push	eax
		call	sub_41F6
		push	1Fh
		call	sub_13A58

loc_B52E:				; CODE XREF: sub_B488+41j sub_B488+52j ...
		pop	bp
		retn
sub_B488	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_B530	proc near		; CODE XREF: sub_AED0+BDp

var_4		= dword	ptr -4

		enter	4, 0
		push	si
		push	di
		les	bx, dword_2CDC6
		mov	al, es:[bx+12h]
		les	bx, off_213E4
		mov	es:[bx+2], al
		push	0
		push	word ptr off_213E4+2
		push	bx
		push	0
		call	sub_13938
		cmp	word_266DE, 0
		jz	loc_B612
		push	word_266DE
		push	large 84D0h
		push	word_24CC6
		push	0
		mov	ax, word_24CB8
		shl	ax, 2
		movzx	eax, ax
		push	eax
		call	sub_41F6
		cmp	byte_266D8, 0
		jnz	short loc_B58D
		push	2
		push	ds
		push	offset aKao0_cd2 ; "KAO0.cd2"
		jmp	short loc_B593
; ---------------------------------------------------------------------------

loc_B58D:				; CODE XREF: sub_B530+53j
		push	2
		push	ds
		push	offset aKao1_cd2 ; "KAO1.cd2"

loc_B593:				; CODE XREF: sub_B530+5Bj
		call	sub_139FC
		mov	si, 2
		mov	[bp+var_4], 16F30h
		mov	di, word_24CD8
		jmp	short loc_B606
; ---------------------------------------------------------------------------

loc_B5A9:				; CODE XREF: sub_B530+E0j
		push	word_266DE
		push	large [bp+var_4]
		mov	bx, si
		shl	bx, 4
		push	word ptr [bx+3984h]
		push	0
		movzx	eax, di
		push	eax
		call	sub_41F6
		movzx	eax, di
		add	[bp+var_4], eax
		push	word_266DE
		push	large [bp+var_4]
		mov	bx, si
		shl	bx, 4
		push	word ptr [bx+3986h]
		push	0
		mov	ax, di
		shl	ax, 2
		movzx	eax, ax
		push	eax
		call	sub_41F6
		mov	ax, di
		shl	ax, 2
		movzx	eax, ax
		add	[bp+var_4], eax
		push	si
		call	sub_13A58
		inc	si

loc_B606:				; CODE XREF: sub_B530+77j
		mov	bx, si
		shl	bx, 4
		cmp	word ptr [bx+3984h], 0
		jnz	short loc_B5A9

loc_B612:				; CODE XREF: sub_B530+29j
		pop	di
		pop	si
		leave
		retn
sub_B530	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_B616	proc near		; CODE XREF: sub_AED0+AEp
		push	bp
		mov	bp, sp
		cmp	word_266DE, 0
		jz	short loc_B64C
		mov	ax, word_24EA8
		shl	ax, 2
		push	ax
		call	sub_2578
		mov	word_24EB6, ax
		push	word_266DE
		push	large 0
		push	ax
		push	0
		mov	ax, word_24EA8
		shl	ax, 2
		movzx	eax, ax
		push	eax
		call	sub_40F4
		jmp	short loc_B65A
; ---------------------------------------------------------------------------

loc_B64C:				; CODE XREF: sub_B616+8j
		push	1Fh
		push	large [off_213DA]
		push	0
		call	sub_13938

loc_B65A:				; CODE XREF: sub_B616+34j
		mov	word_216E4, 0
		call	far ptr	loc_1F04
		push	large 200070h
		push	1Fh
		call	sub_136B4
		push	1Fh
		call	sub_13A58
		push	1
		call	sub_622
		pop	bp
		retn
sub_B616	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_B682	proc far		; CODE XREF: seg003:05B1P seg003:05C4P ...

var_1		= byte ptr -1
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

		enter	2, 0
		push	si
		push	di
		mov	si, [bp+arg_4]
		mov	di, [bp+arg_2]
		mov	ax, si
		sar	ax, 4
		mov	si, ax
		mov	al, byte_255BC
		mov	[bp+var_1], al
		mov	byte_255BC, 1
		lea	ax, [di+100h]
		push	ax
		call	sub_BC10
		mov	di, ax
		mov	bx, 10h
		cwd
		idiv	bx
		shl	ax, 6
		push	ax
		mov	ax, si
		cwd
		idiv	bx
		add	ax, ax
		pop	bx
		add	bx, ax
		mov	ax, [bp+arg_0]
		mov	[bx+4D40h], ax
		mov	al, [bp+var_1]
		mov	byte_255BC, al
		pop	di
		pop	si
		leave
		retf	6
sub_B682	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_B6D1	proc near		; CODE XREF: sub_AED0+277p

var_4		= byte ptr -4
var_3		= byte ptr -3
var_2		= word ptr -2

		enter	4, 0
		push	si
		push	di
		call	sub_B79E
		les	bx, dword_2CDC6
		mov	al, es:[bx+13h]
		les	bx, off_21C5A
		mov	es:[bx+3], al
		push	word ptr off_21C5A+2
		push	bx
		call	sub_F14
		push	ss
		lea	ax, [bp+var_2]
		push	ax
		push	2
		call	sub_E60
		push	ss
		lea	ax, [bp+var_3]
		push	ax
		push	1
		call	sub_E60
		dec	[bp+var_2]
		push	[bp+var_2]
		call	sub_2578
		mov	word_21C58, ax
		mov	es, word_21C58
		xor	si, si
		push	es
		push	si
		push	[bp+var_2]
		call	sub_E60
		call	sub_DF4
		mov	es, word_21C58
		mov	word_266C0, 4
		mov	byte_266C2, 0
		mov	al, [bp+var_3]
		mov	ah, 0
		add	si, ax
		mov	al, es:[si]
		mov	[bp+var_3], al
		lea	ax, [si+5]
		mov	word_266C4, ax
		mov	al, es:[si]
		mov	byte_255B7, al
		mov	al, [bp+var_3]
		mov	ah, 0
		inc	ax
		add	si, ax
		xor	di, di
		mov	al, es:[si]
		mov	[bp+var_4], al
		inc	si

loc_B768:				; CODE XREF: sub_B6D1+B2j
		mov	al, es:[si]
		mov	[bp+var_3], al
		inc	si
		mov	bx, di
		add	bx, bx
		mov	[bx+3D7Ah], si
		inc	di
		mov	ah, 0
		add	si, ax
		dec	[bp+var_4]
		cmp	[bp+var_4], 0
		ja	short loc_B768
		inc	si
		mov	word ptr dword_250FA+2,	es
		mov	word ptr dword_250FA, si
		mov	word ptr dword_25986+2,	seg seg003
		mov	word ptr dword_25986, 4341h
		pop	di
		pop	si
		leave
		retn
sub_B6D1	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_B79E	proc near		; CODE XREF: sub_B29E+Cp sub_B6D1+6p ...
		push	bp
		mov	bp, sp
		cmp	word_21C58, 0
		jz	short loc_B7B7
		push	word_21C58
		call	sub_267C
		mov	word_21C58, 0

loc_B7B7:				; CODE XREF: sub_B79E+8j
		pop	bp
		retn
sub_B79E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_B7B9	proc far		; CODE XREF: sub_1E743+17FP
		push	bp
		mov	bp, sp
		les	bx, dword_2CDC6
		mov	byte ptr es:[bx+30h], 0FFh
		mov	byte ptr es:[bx+25h], 30h ; '0'
		push	204h
		call	sub_133DC
		push	10h
		call	sub_666
		push	ds
		push	offset aMaine	; "maine"
		nop
		push	cs
		call	near ptr sub_E7FD
		pop	bp
		retf
sub_B7B9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_B7E4	proc far		; CODE XREF: sub_E541+Dp sub_1E743+B9P
		push	bp
		mov	bp, sp
		les	bx, dword_2CDC6
		mov	byte ptr es:[bx+30h], 0FEh ; 'þ'
		mov	byte ptr es:[bx+25h], 31h ; '1'
		push	204h
		call	sub_133DC
		push	10h
		call	sub_666
		push	ds
		push	offset aMaine_0	; "maine"
		nop
		push	cs
		call	near ptr sub_E7FD
		pop	bp
		retf
sub_B7E4	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_B80F	proc far		; CODE XREF: sub_1E743+18DP
		push	bp
		mov	bp, sp
		les	bx, dword_2CDC6
		mov	byte ptr es:[bx+30h], 0FDh ; 'ý'
		push	204h
		call	sub_133DC
		push	10h
		call	sub_666
		push	ds
		push	offset aMaine_1	; "maine"
		nop
		push	cs
		call	near ptr sub_E7FD
		pop	bp
		retf
sub_B80F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_B835	proc near		; CODE XREF: sub_CCD6:loc_CD31p

var_1		= byte ptr -1

		enter	2, 0
		push	si
		push	di
		cmp	byte_25104, 0
		jnz	short loc_B84B
		cmp	byte_250FE, 0
		jz	loc_B8F8

loc_B84B:				; CODE XREF: sub_B835+Bj
		cmp	byte_255B7, 0
		jz	loc_B8F8
		mov	ax, word_255B8
		shr	ax, 4
		cmp	ax, word_25100
		jz	short loc_B8CE
		mov	word_25100, ax
		mov	bx, word_21C58
		mov	es, bx
		dec	byte_266C2
		jns	short loc_B89D
		mov	byte_266C2, 4
		inc	word_266C0
		inc	word_266C4
		mov	bx, word_266C4
		mov	dl, es:[bx]
		mov	byte_255B7, dl
		or	dl, dl
		jnz	short loc_B89D
		mov	word_255B8, 0
		mov	byte_250FE, 0

loc_B896:				; CODE XREF: sub_B835+B1j
		mov	byte_25104, 0
		jmp	short loc_B8F8
; ---------------------------------------------------------------------------

loc_B89D:				; CODE XREF: sub_B835+38j sub_B835+54j
		shl	ax, 6
		add	ax, 4D40h
		mov	di, ax
		xor	ax, ax
		mov	al, byte_266C2
		shl	ax, 6
		mov	bx, word_266C0
		mov	bl, es:[bx]
		xor	bh, bh
		add	bl, bl
		mov	bx, [bx+93Ah]
		mov	si, ax
		add	si, bx
		push	ds
		pop	es
		assume es:dseg
		push	ds
		mov	ax, word_25A3E
		mov	ds, ax
		mov	cx, 18h
		rep movsw
		pop	ds

loc_B8CE:				; CODE XREF: sub_B835+29j
		mov	al, byte_250FE
		mov	[bp+var_1], al
		mov	al, byte_25104
		mov	byte_250FE, al
		mov	al, [bp+var_1]
		add	byte_25104, al
		cmp	byte_255BC, 0
		jz	short loc_B896
		call	sub_CBFA
		call	sub_BAEE
		mov	byte_25104, 0
		call	sub_8D0

loc_B8F8:				; CODE XREF: sub_B835+12j sub_B835+1Bj ...
		pop	di
		pop	si
		leave
		retn
sub_B835	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_B8FC	proc near		; CODE XREF: sub_AED0+1F9p
					; sub_AED0:loc_B141p

var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  4

		enter	6, 0
		push	si
		push	di
		push	0
		push	large [bp+arg_0]
		call	sub_1328E
		mov	[bp+var_6], 0
		mov	[bp+var_2], 0
		mov	si, 240h
		jmp	short loc_B95E
; ---------------------------------------------------------------------------

loc_B91C:				; CODE XREF: sub_B8FC+66j
		mov	[bp+var_4], 0
		xor	di, di
		jmp	short loc_B952
; ---------------------------------------------------------------------------

loc_B925:				; CODE XREF: sub_B8FC+5Aj
		mov	dx, 0A6h ; '¦'
		mov	al, 1
		out	dx, al		; Interrupt Controller #2, 8259A
		push	si
		push	di
		push	0
		push	[bp+var_6]
		call	sub_3680
		mov	dx, 0A6h ; '¦'
		mov	al, 0
		out	dx, al		; Interrupt Controller #2, 8259A
		push	si
		push	di
		push	0
		push	[bp+var_6]
		call	sub_3680
		inc	[bp+var_6]
		inc	[bp+var_4]
		add	di, 10h

loc_B952:				; CODE XREF: sub_B8FC+27j
		cmp	[bp+var_4], 19h
		jl	short loc_B925
		inc	[bp+var_2]
		add	si, 10h

loc_B95E:				; CODE XREF: sub_B8FC+1Ej
		cmp	[bp+var_2], 4
		jl	short loc_B91C
		push	0
		call	sub_131EA
		pop	di
		pop	si
		leave
		retn	4
sub_B8FC	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_B971	proc near		; CODE XREF: sub_AED0:loc_B144p

var_8		= word ptr -8

		enter	8, 0
		les	bx, dword_2CDC6
		assume es:nothing
		mov	al, es:[bx+13h]
		les	bx, off_21CBA
		mov	es:[bx+3], al
		push	word ptr off_21CBA+2
		push	bx
		call	sub_F14
		push	ss
		lea	ax, [bp+var_8]
		push	ax
		push	8
		call	sub_E60
		call	sub_B9BB
		push	[bp+var_8]
		call	sub_2578
		mov	word_25A3E, ax
		push	ax
		push	0
		push	[bp+var_8]
		call	sub_E60
		call	sub_DF4
		leave
		retn
sub_B971	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_B9BB	proc near		; CODE XREF: sub_B29E+Fp sub_B971+2Ap	...
		push	bp
		mov	bp, sp
		cmp	word_25A3E, 0
		jz	short loc_B9D4
		push	word_25A3E
		call	sub_267C
		mov	word_25A3E, 0

loc_B9D4:				; CODE XREF: sub_B9BB+8j
		pop	bp
		retn
sub_B9BB	endp


; =============== S U B	R O U T	I N E =======================================


sub_B9D6	proc near		; CODE XREF: sub_BCBE+29p sub_BF94+37p ...
		mov	bx, sp
		mov	dx, word ptr dword_255A4
		shr	dx, 1
		mov	ax, ss:[bx+2]
		sar	ax, 4
		sub	ax, dx
		cmp	ax, 180h
		jl	short loc_B9EF

locret_B9EC:				; CODE XREF: sub_B9D6+27j sub_B9D6+56j ...
		retn	4
; ---------------------------------------------------------------------------

loc_B9EF:				; CODE XREF: sub_B9D6+14j
		mov	cx, ax
		or	ax, ax
		js	short loc_B9F8
		and	ax, 0Fh

loc_B9F8:				; CODE XREF: sub_B9D6+1Dj
		add	ax, word ptr dword_255A4
		dec	ax
		js	short locret_B9EC
		sar	cx, 4
		jns	short loc_BA06
		xor	cx, cx

loc_BA06:				; CODE XREF: sub_B9D6+2Cj
		mov	word_25102, cx
		shr	ax, 4
		inc	ax
		mov	cx, ax
		mov	dx, word ptr dword_255A4+2
		sar	dx, 1
		mov	ax, ss:[bx+4]
		sar	ax, 4
		add	ax, 10h
		sub	ax, dx
		jns	short loc_BA2E
		mov	dx, word ptr dword_255A4+2
		add	dx, ax
		or	dx, dx
		jle	short locret_B9EC

loc_BA2E:				; CODE XREF: sub_B9D6+4Cj
		cmp	ax, 180h
		jge	short locret_B9EC
		mov	bh, 0
		mov	bl, byte_25A3C
		add	bx, bx
		add	ax, [bx+4260h]
		jns	short loc_BA46
		add	ax, 190h
		jmp	short loc_BA4E
; ---------------------------------------------------------------------------

loc_BA46:				; CODE XREF: sub_B9D6+69j
		cmp	ax, 190h
		jl	short loc_BA4E
		sub	ax, 190h

loc_BA4E:				; CODE XREF: sub_B9D6+6Ej sub_B9D6+73j
		mov	dx, ax
		and	dx, 7
		add	dx, word ptr dword_255A4+2
		mov	bx, dx
		add	bx, ax
		shr	ax, 3
		shl	ax, 5
		push	si
		push	di
		push	ds
		pop	es
		assume es:dseg
		mov	di, ax
		add	di, word_25102
		add	di, 4700h
		mov	si, 20h	; ' '
		sub	si, cx
		mov	ah, cl
		mov	al, 1
		cmp	bx, 190h
		jl	short loc_BA92
		mov	bx, 4D40h

loc_BA81:				; CODE XREF: sub_B9D6+B6j
		mov	cl, ah
		rep stosb
		sub	dx, 8
		add	di, si
		cmp	di, bx
		jl	short loc_BA81
		sub	di, 640h

loc_BA92:				; CODE XREF: sub_B9D6+A6j sub_B9D6+C5j
		mov	cl, ah
		rep stosb
		add	di, si
		sub	dx, 8
		jg	short loc_BA92
		pop	di
		pop	si
		retn	4
sub_B9D6	endp


; =============== S U B	R O U T	I N E =======================================


sub_BAA2	proc near		; CODE XREF: sub_AED0+27Dp
		push	di
		push	si
		push	ds
		xor	bx, bx
		mov	di, 4D40h
		add	di, 600h
		xor	dx, dx
		mov	ax, ds
		mov	es, ax
		mov	ax, word_21C58
		mov	fs, ax
		mov	ax, word_25A3E
		mov	ds, ax
		mov	al, 5

loc_BAC0:				; CODE XREF: sub_BAA2+45j
		xor	dx, dx
		mov	dl, fs:[bx]
		mov	si, dx
		add	si, si
		mov	si, es:[si+93Ah]
		add	si, 100h
		mov	ah, 5

loc_BAD4:				; CODE XREF: sub_BAA2+40j
		mov	cx, 0Ch
		rep movsd
		sub	di, 70h	; 'p'
		sub	si, 70h	; 'p'
		dec	ah
		jnz	short loc_BAD4
		inc	bx
		dec	al
		jnz	short loc_BAC0
		pop	ds
		pop	si
		pop	di
		retn
sub_BAA2	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_BAEE	proc near		; CODE XREF: sub_B835+B6p
		push	bp
		push	si
		push	di
		mov	ax, 0A800h
		mov	es, ax
		assume es:nothing
		mov	dx, word_255B8
		mov	ax, 4
		mov	cx, dx
		shl	cx, 6
		add	ax, cx
		shr	cx, 2
		add	ax, cx
		mov	word_25107, ax
		mov	ax, dx
		shr	ax, 4
		shl	ax, 6
		mov	bx, ax
		mov	si, [bx+4D40h]
		mov	bx, dx
		and	bx, 0Fh
		mov	cx, bx
		shl	cx, 6
		mov	dx, cx
		shr	cx, 2
		add	dx, cx
		mov	word_25105, dx
		xor	ch, ch
		mov	cl, byte_25104
		mov	bh, bl
		add	bl, cl
		cmp	bl, 10h
		jbe	short loc_BB49
		sub	bl, 10h
		mov	cl, 10h
		sub	cl, bh
		mov	dh, bl
		jmp	short loc_BB4B
; ---------------------------------------------------------------------------

loc_BB49:				; CODE XREF: sub_BAEE+4Ej
		xor	dh, dh

loc_BB4B:				; CODE XREF: sub_BAEE+59j
		mov	dl, 18h
		mov	word_25109, cx

loc_BB51:				; CODE XREF: sub_BAEE+B0j
		mov	di, word_25107
		add	si, word_25105
		add	word_25107, 2
		mov	bl, dh

loc_BB60:				; CODE XREF: sub_BAEE+7Ej sub_BAEE+9Fj
		mov	bp, es:[si]
		mov	es:[di], bp
		add	si, 50h	; 'P'
		add	di, 50h	; 'P'
		loop	loc_BB60
		or	bl, bl
		jz	short loc_BB8F
		mov	cl, bl
		mov	bx, ax
		add	bx, 40h	; '@'
		cmp	di, 7D00h
		jb	short loc_BB87
		sub	di, 7D00h
		sub	bx, 640h

loc_BB87:				; CODE XREF: sub_BAEE+8Fj
		mov	si, [bx+4D40h]
		xor	bx, bx
		jmp	short loc_BB60
; ---------------------------------------------------------------------------

loc_BB8F:				; CODE XREF: sub_BAEE+82j
		mov	cx, word_25109
		add	ax, 2
		mov	bx, ax
		mov	si, [bx+4D40h]
		dec	dl
		jnz	short loc_BB51
		pop	di
		pop	si
		pop	bp
		retn
sub_BAEE	endp


; =============== S U B	R O U T	I N E =======================================


sub_BBA4	proc near		; CODE XREF: sub_CB58+23p seg001:76CAp ...
		push	si
		push	di
		call	sub_CBFA
		mov	ax, 0A800h
		mov	es, ax
		mov	bx, 4D20h
		mov	di, 7A84h
		mov	dh, 32h	; '2'
		mov	si, 600h

loc_BBB9:				; CODE XREF: sub_BBA4+62j
		mov	dl, 18h

loc_BBBB:				; CODE XREF: sub_BBA4+4Cj
		cmp	byte ptr [bx], 0
		jz	short loc_BBE7
		push	si
		mov	byte ptr [bx], 0
		mov	si, [si+4D40h]
		test	dh, 1
		jnz	short loc_BBD1
		add	si, 280h

loc_BBD1:				; CODE XREF: sub_BBA4+27j
		mov	cx, 8

loc_BBD4:				; CODE XREF: sub_BBA4+3Cj
		mov	ax, es:[si]
		mov	es:[di], ax
		add	si, 50h	; 'P'
		add	di, 50h	; 'P'
		loop	loc_BBD4
		sub	di, 280h
		pop	si

loc_BBE7:				; CODE XREF: sub_BBA4+1Aj
		add	di, 2
		add	si, 2
		inc	bx
		dec	dl
		jnz	short loc_BBBB
		test	dh, 1
		jnz	short loc_BBFA
		add	si, 40h	; '@'

loc_BBFA:				; CODE XREF: sub_BBA4+51j
		sub	si, 70h	; 'p'
		dec	dh
		sub	bx, 38h	; '8'
		sub	di, 2B0h
		jge	short loc_BBB9
		call	sub_8D0
		pop	di
		pop	si
		retn
sub_BBA4	endp


; =============== S U B	R O U T	I N E =======================================


sub_BC10	proc near		; CODE XREF: sub_B682+23p seg001:12B6p ...
		mov	bx, sp
		mov	ax, ss:[bx+2]
		sar	ax, 4
		cmp	byte_255BC, 0
		jz	short loc_BC24
		add	ax, word_255B8

loc_BC24:				; CODE XREF: sub_BC10+Ej
		or	ax, ax
		jge	short loc_BC2D
		add	ax, 190h
		jmp	short locret_BC35
; ---------------------------------------------------------------------------

loc_BC2D:				; CODE XREF: sub_BC10+16j
		cmp	ax, 190h
		jl	short locret_BC35
		sub	ax, 190h

locret_BC35:				; CODE XREF: sub_BC10+1Bj sub_BC10+20j
		retn	2
sub_BC10	endp


; =============== S U B	R O U T	I N E =======================================


sub_BC38	proc near		; CODE XREF: sub_C266+1Bp
					; sub_104B6+2Ap ...
		mov	bx, sp
		mov	bx, ss:[bx+2]
		mov	ax, [bx]
		mov	[bx+4],	ax
		add	ax, [bx+8]
		mov	[bx], ax
		add	bx, 2
		mov	dx, [bx]
		mov	[bx+4],	dx
		add	dx, [bx+8]
		mov	[bx], dx
		retn	2
sub_BC38	endp


; =============== S U B	R O U T	I N E =======================================


sub_BC58	proc near		; CODE XREF: sub_B1D0+A5p
		push	si
		mov	si, 0FFh

loc_BC5C:				; CODE XREF: sub_BC58+Ej
		call	sub_2172
		mov	[si+3DCCh], al
		dec	si
		jge	short loc_BC5C
		mov	word_2520C, 0
		pop	si
		retn
sub_BC58	endp

; ---------------------------------------------------------------------------
		mov	bx, word_2520C
		mov	ax, [bx+3DCCh]
		inc	byte ptr word_2520C
		retn
; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_BC7E	proc near		; CODE XREF: seg001:2FA1p seg001:3078p ...
		mov	bx, word_2520C
		mov	ax, [bx+3DCCh]
		inc	byte ptr word_2520C
		mov	bx, sp
		and	ax, ss:[bx+2]
		retn	2
sub_BC7E	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_BC94	proc near		; CODE XREF: seg001:56B3p seg001:56D4p ...
		mov	bx, word_2520C
		mov	ax, [bx+3DCCh]
		inc	byte ptr word_2520C
		xor	dx, dx
		mov	bx, sp
		div	word ptr ss:[bx+2]
		mov	ax, dx
		retn	2
sub_BC94	endp

; ---------------------------------------------------------------------------
		nop
		retn
; ---------------------------------------------------------------------------
		nop
		retf
; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_BCB2	proc near		; CODE XREF: sub_B1D0+BBp
		mov	byte_2520E, 0
		mov	byte_2520F, 0
		retn
sub_BCB2	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_BCBE	proc near		; CODE XREF: sub_CB58+18p
		push	si
		push	di
		mov	word ptr dword_255A4+2,	8
		mov	si, 9634h
		mov	di, 190h

loc_BCCC:				; CODE XREF: sub_BCBE+30j
		cmp	byte ptr [si], 0
		jz	short loc_BCEA
		mov	ax, [si+0Ch]
		mov	word ptr dword_255A4, ax
		mov	ax, [si+2]
		cmp	byte ptr [si+0Eh], 0
		jz	short loc_BCE3
		add	ax, 80h	; ''

loc_BCE3:				; CODE XREF: sub_BCBE+20j
		push	word ptr [si+6]
		push	ax
		call	sub_B9D6

loc_BCEA:				; CODE XREF: sub_BCBE+11j
		add	si, 10h
		dec	di
		jnz	short loc_BCCC
		pop	di
		pop	si
		retn
sub_BCBE	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_BCF4	proc near		; CODE XREF: sub_AB88:loc_ABD8p
		push	si
		push	di
		mov	word_25532, 0
		mov	bx, 3ED0h
		mov	si, 9634h
		mov	di, 190h

loc_BD05:				; CODE XREF: sub_BCF4+67j
		cmp	byte ptr [si], 0
		jz	short loc_BD57
		cmp	byte ptr [si], 2
		jnz	short loc_BD14
		mov	byte ptr [si], 0
		jmp	short loc_BD57
; ---------------------------------------------------------------------------

loc_BD14:				; CODE XREF: sub_BCF4+19j
		mov	cl, [si+1]
		mov	ax, [si+4]
		mov	[si+6],	ax
		cmp	cl, 18h
		jb	short loc_BD25
		sub	ax, 8

loc_BD25:				; CODE XREF: sub_BCF4+2Cj
		mov	[si+4],	ax
		cmp	ax, 0FFC0h
		jg	short loc_BD32
		mov	byte ptr [si], 2
		jmp	short loc_BD57
; ---------------------------------------------------------------------------

loc_BD32:				; CODE XREF: sub_BCF4+37j
		inc	cl
		mov	[si+1],	cl
		cmp	cl, 24h	; '$'
		jbe	short loc_BD41
		mov	byte ptr [si], 2
		jmp	short loc_BD57
; ---------------------------------------------------------------------------

loc_BD41:				; CODE XREF: sub_BCF4+46j
		mov	[bx], si
		cmp	di, 0C8h ; 'È'
		ja	short loc_BD54
		cmp	word_25532, 0
		jnz	short loc_BD54
		mov	word_25532, si

loc_BD54:				; CODE XREF: sub_BCF4+53j sub_BCF4+5Aj
		add	bx, 2

loc_BD57:				; CODE XREF: sub_BCF4+14j sub_BCF4+1Ej ...
		add	si, 10h
		dec	di
		jnz	short loc_BD05
		mov	word ptr [bx], 0
		pop	di
		pop	si
		retn
sub_BCF4	endp

; ---------------------------------------------------------------------------

loc_BD64:				; CODE XREF: sub_AB88+A1p
		push	bp
		push	si
		push	di
		mov	dx, 7Eh	; '~'
		mov	al, 0FFh
		cli
		out	dx, al
		out	dx, al
		out	dx, al
		out	dx, al
		sti
		mov	ax, 0A800h
		mov	es, ax
		mov	di, 3ED0h
		mov	si, [di]
		cmp	si, 0
		jz	short loc_BDFA

loc_BD81:				; CODE XREF: seg001:1308j
		cmp	si, word_25532
		jnz	short loc_BD96
		mov	dx, 7Eh	; '~'
		mov	al, 0FFh
		cli
		out	dx, al
		out	dx, al
		xor	al, al
		out	dx, al
		mov	al, 0FFh
		out	dx, al
		sti

loc_BD96:				; CODE XREF: seg001:1295j
		mov	dx, [si+2]
		sar	dx, 4
		add	dx, 0Ch
		mov	ax, [si+4]
		add	ax, 0C0h ; 'À'
		push	ax
		call	sub_BC10
		mov	bp, 4
		add	si, 0Bh

loc_BDAF:				; CODE XREF: seg001:12C9j
		cmp	byte ptr [si], 0
		jnz	short loc_BDBB
		add	dx, 4
		dec	si
		dec	bp
		jnz	short loc_BDAF

loc_BDBB:				; CODE XREF: seg001:12C2j
		mov	cx, bp
		inc	cx
		shl	cx, 3
		mov	cs:word_BDD9, cx

loc_BDC6:				; CODE XREF: seg001:12DFj
		xor	cx, cx
		mov	cl, [si]
		call	numerals_draw
		dec	si
		dec	bp
		jnz	short loc_BDC6
		xor	cx, cx
		call	numerals_draw
; ---------------------------------------------------------------------------
		db 0C7h, 44h, 5
word_BDD9	dw 28h			; DATA XREF: seg001:12D1w
; ---------------------------------------------------------------------------
		cmp	byte ptr [si+7], 0
		jz	short loc_BDF1
		add	word ptr [si+5], 10h
		mov	cx, 0Ah
		call	numerals_draw
		mov	cx, 0Bh
		call	numerals_draw

loc_BDF1:				; CODE XREF: seg001:12EFj
		add	di, 2
		mov	si, [di]
		or	si, si
		jnz	short loc_BD81

loc_BDFA:				; CODE XREF: seg001:128Fj
		pop	di
		pop	si
		pop	bp
		retn

; =============== S U B	R O U T	I N E =======================================

; (identical to the th05 version)

numerals_draw	proc near		; CODE XREF: seg001:12DAp seg001:12E3p ...
		push	si
		push	di
		push	ax
		push	dx
		mov	si, dx
		mov	bx, ax
		sar	dx, 3
		shl	ax, 6
		add	dx, ax
		shr	ax, 2
		add	dx, ax
		mov	di, dx
		and	si, 7
		mov	ax, si
		shl	si, 4
		add	si, offset NUMERALS
		shl	cx, 7
		add	si, cx
		cmp	bx, 188h
		ja	short loc_BE33
		mov	cx, 8
		xor	bx, bx
		jmp	short loc_BE3E
; ---------------------------------------------------------------------------

loc_BE33:				; CODE XREF: numerals_draw+2Cj
		mov	cx, 190h	; value	table for switch statement
		sub	cx, bx
		mov	bx, 8
		sub	bx, cx		; jump table for switch	statement
		nop

loc_BE3E:				; CODE XREF: numerals_draw+33j numerals_draw+54j ...
		lodsw
		or	ah, ah
		jz	short loc_BE48
		mov	es:[di], ax
		jmp	short loc_BE4F
; ---------------------------------------------------------------------------

loc_BE48:				; CODE XREF: numerals_draw+43j
		or	al, al
		jz	short loc_BE4F
		mov	es:[di], al

loc_BE4F:				; CODE XREF: numerals_draw+48j numerals_draw+4Cj
		add	di, 50h	; 'P'
		loop	loc_BE3E
		or	bx, bx
		jz	short loc_BE60
		sub	di, 7D00h
		xchg	cx, bx
		jmp	short loc_BE3E
; ---------------------------------------------------------------------------

loc_BE60:				; CODE XREF: numerals_draw+58j
		pop	dx
		pop	ax
		add	dx, 8
		pop	di
		pop	si
		retn
numerals_draw	endp


; =============== S U B	R O U T	I N E =======================================


sub_BE68	proc near		; CODE XREF: sub_E1F4+A3p sub_E1F4+BDp
		push	si
		push	di
		mov	cx, ax
		sar	ax, 3
		mov	di, ax
		and	cl, 7
		xor	ah, ah
		mov	al, [bx+0F8Ah]
		ror	ax, cl
		mov	bx, dx
		shl	dx, 6
		add	di, dx
		shr	dx, 2
		add	di, dx
		mov	dx, 0A800h
		mov	es, dx
		shr	si, 4
		mov	cx, si
		add	cx, bx
		cmp	cx, 190h
		ja	short loc_BEA0
		mov	cx, si
		xor	dx, dx
		jmp	short loc_BEA9
; ---------------------------------------------------------------------------

loc_BEA0:				; CODE XREF: sub_BE68+30j
		mov	cx, 190h
		sub	cx, bx
		mov	dx, si
		sub	dx, cx

loc_BEA9:				; CODE XREF: sub_BE68+36j sub_BE68+5Ej
		or	ah, ah
		jz	short loc_BEB6
		nop

loc_BEAE:				; CODE XREF: sub_BE68+4Aj
		stosw
		add	di, 4Eh	; 'N'
		loop	loc_BEAE
		jmp	short loc_BEBC
; ---------------------------------------------------------------------------

loc_BEB6:				; CODE XREF: sub_BE68+43j sub_BE68+52j
		stosb
		add	di, 4Fh	; 'O'
		loop	loc_BEB6

loc_BEBC:				; CODE XREF: sub_BE68+4Cj
		or	dx, dx
		jz	short loc_BEC8
		sub	di, 7D00h
		xchg	cx, dx
		jmp	short loc_BEA9
; ---------------------------------------------------------------------------

loc_BEC8:				; CODE XREF: sub_BE68+56j
		pop	di
		pop	si
		retn
sub_BE68	endp

; ---------------------------------------------------------------------------
		nop
		push	di
		mov	ax, 0AA80h
		mov	es, ax
		assume es:nothing
		mov	di, 4FB4h
		call	sub_12068
		pop	di
		retn

; =============== S U B	R O U T	I N E =======================================


sub_BEDA	proc near		; CODE XREF: seg001:7821p
		push	di
		mov	ax, 0A850h
		mov	es, ax
		assume es:nothing
		mov	di, 1134h
		nop

loc_BEE4:				; CODE XREF: sub_BEDA+1Bj
		mov	cx, 0Ch

loc_BEE7:				; CODE XREF: sub_BEDA+15j
		mov	es:[di+6180h], eax
		stosd
		loop	loc_BEE7
		sub	di, 80h	; ''
		jge	short loc_BEE4
		mov	ax, 0A968h
		mov	es, ax
		assume es:nothing
		mov	di, 4FB4h
		nop

loc_BF00:				; CODE XREF: sub_BEDA+37j
		mov	es:[di+28h], eax
		stosd
		mov	es:[di+28h], eax
		stosd
		sub	di, 58h	; 'X'
		jge	short loc_BF00
		pop	di
		retn
sub_BEDA	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_BF16	proc near		; CODE XREF: sub_1002A+1Cp
					; seg001:7843p	...

var_6		= word ptr -6
var_4		= word ptr -4
var_2		= byte ptr -2
var_1		= byte ptr -1
arg_0		= word ptr  4

		enter	6, 0
		push	di
		push	80h ; ''
		mov	al, byte_2CDCA
		mov	ah, 0
		push	ax
		call	sub_1744
		mov	ax, word_2CDCE
		mov	fs, ax
		mov	di, [bp+arg_0]
		shl	di, 7
		mov	[bp+var_6], 10h

loc_BF39:				; CODE XREF: sub_BF16+70j
		mov	[bp+var_4], 20h	; ' '
		mov	[bp+var_2], 18h

loc_BF42:				; CODE XREF: sub_BF16+62j
		mov	al, fs:[di]
		mov	[bp+var_1], al

loc_BF48:				; CODE XREF: sub_BF16+5Fj
		test	[bp+var_1], 80h
		jz	short loc_BF65
		mov	ax, [bp+var_4]
		mov	dx, [bp+var_6]
		add	dx, word_255B8
		cmp	dx, 190h
		jl	short loc_BF62
		sub	dx, 190h

loc_BF62:				; CODE XREF: sub_BF16+46j
		call	sub_11FC8

loc_BF65:				; CODE XREF: sub_BF16+36j
		shl	[bp+var_1], 1
		add	[bp+var_4], 10h
		dec	[bp+var_2]
		jz	short loc_BF7A
		test	[bp+var_2], 7
		jnz	short loc_BF48
		inc	di
		jmp	short loc_BF42
; ---------------------------------------------------------------------------

loc_BF7A:				; CODE XREF: sub_BF16+59j
		add	di, 2
		add	[bp+var_6], 10h
		cmp	[bp+var_6], 180h
		jb	short loc_BF39
		mov	dx, 7Ch	; '|'
		mov	al, 0
		out	dx, al
		pop	di
		leave
		retn	2
sub_BF16	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_BF94	proc near		; CODE XREF: seg001:76C7p seg001:7723p ...

var_6		= dword	ptr -6
var_2		= byte ptr -2
var_1		= byte ptr -1
arg_0		= word ptr  4

		enter	6, 0
		push	di
		mov	dword_255A4, 20002h
		mov	ax, word_2D02E
		mov	fs, ax
		mov	di, [bp+arg_0]
		shl	di, 7
		mov	word ptr [bp+var_6+2], 80h ; ''

loc_BFB2:				; CODE XREF: sub_BF94+5Dj
		mov	word ptr [bp+var_6], 80h ; ''
		mov	[bp+var_2], 18h

loc_BFBB:				; CODE XREF: sub_BF94+4Ej
		mov	al, fs:[di]
		mov	[bp+var_1], al

loc_BFC1:				; CODE XREF: sub_BF94+4Bj
		test	[bp+var_1], 80h
		jnz	short loc_BFCE
		push	large [bp+var_6]
		call	sub_B9D6

loc_BFCE:				; CODE XREF: sub_BF94+31j
		shl	[bp+var_1], 1
		add	word ptr [bp+var_6], 100h
		dec	[bp+var_2]
		jz	short loc_BFE4
		test	[bp+var_2], 7
		jnz	short loc_BFC1
		inc	di
		jmp	short loc_BFBB
; ---------------------------------------------------------------------------

loc_BFE4:				; CODE XREF: sub_BF94+45j
		add	di, 2
		add	word ptr [bp+var_6+2], 100h
		cmp	word ptr [bp+var_6+2], 1700h
		jb	short loc_BFB2
		pop	di
		leave
		retn	2
sub_BF94	endp


; =============== S U B	R O U T	I N E =======================================


sub_BFF8	proc near		; CODE XREF: seg001:78AEp
		push	di
		mov	ax, 0AA80h
		mov	es, ax
		assume es:nothing
		mov	di, 4FB4h
		nop

loc_C002:				; CODE XREF: sub_BFF8+13j
		stosd
		stosd
		stosd
		sub	di, 5Ch	; '\'
		jge	short loc_C002
		mov	ax, 0A850h
		mov	es, ax
		assume es:nothing
		mov	di, 22B4h
		call	sub_12068
		pop	di
		retn
sub_BFF8	endp


; =============== S U B	R O U T	I N E =======================================


sub_C01A	proc near		; CODE XREF: sub_1030D+109p
					; sub_12461+405p
		mov	bx, sp
		push	ds
		push	si
		push	di
		mov	di, ax
		shl	ax, 2
		add	di, ax
		shl	di, 4
		mov	ax, cx
		and	cx, 7
		shr	ax, 3
		add	di, ax
		mov	bx, ss:[bx+2]
		shl	bx, 1
		mov	ds, word ptr [bx+2AC4h]
		xor	si, si
		mov	ch, 10h
		jcxz	short loc_C088
		mov	dx, 0FFFFh
		shr	dl, cl
		mov	dh, dl
		not	dh
		test	di, 1
		jnz	short loc_C06C

loc_C052:				; CODE XREF: sub_C01A+4Dj
		lodsw
		ror	ax, cl
		mov	bl, al
		and	al, dl
		and	bl, dh
		mov	es:[di], ax
		mov	es:[di+2], bl
		add	di, 50h	; 'P'
		dec	ch
		jnz	short loc_C052
		jmp	short loc_C093
; ---------------------------------------------------------------------------
		nop

loc_C06C:				; CODE XREF: sub_C01A+36j sub_C01A+69j
		lodsw
		ror	ax, cl
		mov	bh, al
		and	al, dl
		and	bh, dh
		mov	bl, ah
		mov	es:[di], al
		mov	es:[di+1], bx
		add	di, 50h	; 'P'
		dec	ch
		jnz	short loc_C06C
		jmp	short loc_C093
; ---------------------------------------------------------------------------
		nop

loc_C088:				; CODE XREF: sub_C01A+27j sub_C01A+77j
		lodsw
		mov	es:[di], ax
		add	di, 50h	; 'P'
		dec	ch
		jnz	short loc_C088

loc_C093:				; CODE XREF: sub_C01A+4Fj sub_C01A+6Bj
		pop	di
		pop	si
		pop	ds
		retn	2
sub_C01A	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_C09A	proc near		; CODE XREF: sub_10EA5+38p
		push	si
		push	di
		push	ds
		mov	bx, dx
		sar	ax, 3
		shl	dx, 6
		add	ax, dx
		shr	dx, 2
		add	ax, dx
		mov	di, ax
		shl	cx, 7
		mov	si, cx
		mov	ax, word_22EA6
		mov	ds, ax
		cmp	bx, 170h
		ja	short loc_C0D9
		mov	cx, 20h	; ' '
		nop

loc_C0C2:				; CODE XREF: sub_C09A+34j sub_C09A+3Bj
		lodsd
		or	eax, eax
		jz	short loc_C0D2
		stosd
		add	di, 4Ch	; 'L'
		loop	loc_C0C2
		jmp	short loc_C0F7
; ---------------------------------------------------------------------------

loc_C0D2:				; CODE XREF: sub_C09A+2Dj
		add	di, 50h	; 'P'
		loop	loc_C0C2
		jmp	short loc_C0F7
; ---------------------------------------------------------------------------

loc_C0D9:				; CODE XREF: sub_C09A+22j
		mov	ax, 20h	; ' '
		mov	cx, 190h
		sub	cx, bx
		sub	ax, cx

loc_C0E3:				; CODE XREF: sub_C09A+4Ej
		movsd
		add	di, 4Ch	; 'L'
		loop	loc_C0E3
		sub	di, 7D00h
		mov	cx, ax

loc_C0F0:				; CODE XREF: sub_C09A+5Bj
		movsd
		add	di, 4Ch	; 'L'
		loop	loc_C0F0

loc_C0F7:				; CODE XREF: sub_C09A+36j sub_C09A+3Dj
		pop	ds
		pop	di
		pop	si
		retn
sub_C09A	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_C0FC	proc near		; CODE XREF: sub_CB58+12p
		push	si
		push	di
		mov	dword_255A4, 100010h
		mov	si, 0AF34h
		mov	di, 20h	; ' '

loc_C10D:				; CODE XREF: sub_C0FC+21j
		cmp	byte ptr [si], 0
		jz	short loc_C119
		push	large dword ptr	[si+6]
		call	sub_B9D6

loc_C119:				; CODE XREF: sub_C0FC+14j
		add	si, 14h
		dec	di
		jnz	short loc_C10D
		mov	si, 41F6h
		mov	di, 8

loc_C125:				; CODE XREF: sub_C0FC+46j
		cmp	byte ptr [si], 0
		jz	short loc_C13E
		mov	ax, [si+8]
		shr	ax, 3
		inc	ax
		mov	word ptr dword_255A4, ax
		mov	word ptr dword_255A4+2,	ax
		push	large dword ptr	[si+2]
		call	sub_B9D6

loc_C13E:				; CODE XREF: sub_C0FC+2Cj
		add	si, 0Ah
		dec	di
		jnz	short loc_C125
		pop	di
		pop	si
		retn
sub_C0FC	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_C148	proc near		; CODE XREF: seg001:7ECCp
		push	di
		mov	ax, 0AC10h
		mov	es, ax
		assume es:nothing
		mov	di, 36B4h
		call	sub_12068
		pop	di
		retn
sub_C148	endp


; =============== S U B	R O U T	I N E =======================================


sub_C156	proc near		; CODE XREF: sub_AB88+93p sub_D88C+Bp	...
		mov	al, 0C0h ; 'À'
		out	7Ch, al
		retn
sub_C156	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_C15C	proc near		; CODE XREF: seg001:5561p seg001:5628p ...
		mov	al, 80h	; ''
		out	7Ch, al
		retn
sub_C15C	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_C162	proc near		; CODE XREF: sub_C17C+8p sub_C2B2+4p ...
		cli
		mov	dx, 7Eh	; '~'
		shr	ah, 1
		sbb	al, al
		out	dx, al
		shr	ah, 1
		sbb	al, al
		out	dx, al
		shr	ah, 1
		sbb	al, al
		out	dx, al
		shr	ah, 1
		sbb	al, al
		out	dx, al
		sti
		retn
sub_C162	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_C17C	proc near		; CODE XREF: sub_12DF0+Ap

var_4		= word ptr -4
var_2		= word ptr -2

		enter	4, 0
		push	si
		push	di
		mov	ah, 0Fh
		call	sub_C162
		mov	si, 41F6h
		mov	[bp+var_2], 0
		jmp	short loc_C1F5
; ---------------------------------------------------------------------------

loc_C191:				; CODE XREF: sub_C17C+7Dj
		cmp	byte ptr [si], 1
		jnz	short loc_C1EF
		xor	di, di
		jmp	short loc_C1E9
; ---------------------------------------------------------------------------

loc_C19A:				; CODE XREF: sub_C17C+71j
		mov	ax, [si+6]
		mov	[bp+var_4], ax
		push	539Ah
		push	word ptr [si+2]
		push	word ptr [si+4]
		push	ax
		push	di
		call	sub_1333C
		cmp	word_266DC, 0
		jl	short loc_C1E6
		cmp	word_266DC, 1700h
		jge	short loc_C1E6
		cmp	word_266DA, 0
		jl	short loc_C1E6
		cmp	word_266DA, 1800h
		jge	short loc_C1E6
		mov	ax, word_266DC
		add	ax, 100h
		push	ax
		call	sub_BC10
		mov	dx, ax
		mov	ax, word_266DA
		sar	ax, 4
		add	ax, 20h	; ' '
		call	sub_C332

loc_C1E6:				; CODE XREF: sub_C17C+39j sub_C17C+41j ...
		add	di, 4

loc_C1E9:				; CODE XREF: sub_C17C+1Cj
		cmp	di, 100h
		jl	short loc_C19A

loc_C1EF:				; CODE XREF: sub_C17C+18j
		inc	[bp+var_2]
		add	si, 0Ah

loc_C1F5:				; CODE XREF: sub_C17C+13j
		cmp	[bp+var_2], 8
		jl	short loc_C191
		pop	di
		pop	si
		leave
		retn
sub_C17C	endp

; ---------------------------------------------------------------------------
		db    0

; =============== S U B	R O U T	I N E =======================================


sub_C200	proc near		; CODE XREF: sub_C2B2+2Fp
		push	si
		push	di
		mov	si, ax
		mov	bx, dx
		sar	ax, 3
		shl	dx, 6
		add	ax, dx
		shr	dx, 2
		add	ax, dx
		mov	di, ax
		and	si, 7
		mov	ax, si
		shl	si, 7
		add	si, 0F90h
		and	cx, 7
		shl	cx, 4
		add	si, cx
		cmp	bx, 188h
		ja	short loc_C236
		mov	cx, 8
		xor	bx, bx
		jmp	short loc_C240
; ---------------------------------------------------------------------------

loc_C236:				; CODE XREF: sub_C200+2Dj
		mov	cx, 190h
		sub	cx, bx
		mov	bx, 8
		sub	bx, cx

loc_C240:				; CODE XREF: sub_C200+34j sub_C200+54j ...
		lodsw
		or	ah, ah
		jz	short loc_C24A
		mov	es:[di], ax
		jmp	short loc_C251
; ---------------------------------------------------------------------------

loc_C24A:				; CODE XREF: sub_C200+43j
		or	al, al
		jz	short loc_C251
		mov	es:[di], al

loc_C251:				; CODE XREF: sub_C200+48j sub_C200+4Cj
		add	di, 50h	; 'P'
		loop	loc_C240
		or	bx, bx
		jz	short loc_C262
		sub	di, 7D00h
		xchg	cx, bx
		jmp	short loc_C240
; ---------------------------------------------------------------------------

loc_C262:				; CODE XREF: sub_C200+58j
		pop	di
		pop	si
		retn
sub_C200	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_C266	proc near		; CODE XREF: sub_AB88+56p
		push	si
		push	di
		mov	di, 60h	; '`'
		mov	si, 53E2h

loc_C26E:				; CODE XREF: sub_C266+47j
		cmp	byte ptr [si], 0
		jz	short loc_C2A9
		cmp	byte ptr [si], 1
		jz	short loc_C27D
		mov	byte ptr [si], 0
		jmp	short loc_C2A9
; ---------------------------------------------------------------------------

loc_C27D:				; CODE XREF: sub_C266+10j
		lea	ax, [si+2]
		push	ax
		call	sub_BC38
		add	ax, 40h	; '@'
		cmp	ax, 1880h
		jnb	short loc_C295
		add	dx, 40h	; '@'
		cmp	dx, 1780h
		jb	short loc_C29A

loc_C295:				; CODE XREF: sub_C266+24j
		mov	byte ptr [si], 2
		jmp	short loc_C2A9
; ---------------------------------------------------------------------------

loc_C29A:				; CODE XREF: sub_C266+2Dj
		inc	word ptr [si+0Ch]
		inc	byte ptr [si+1]
		cmp	byte ptr [si+1], 28h ; '('
		jbe	short loc_C2A9
		mov	byte ptr [si], 2

loc_C2A9:				; CODE XREF: sub_C266+Bj sub_C266+15j	...
		add	si, 10h
		dec	di
		jg	short loc_C26E
		pop	di
		pop	si
		retn
sub_C266	endp


; =============== S U B	R O U T	I N E =======================================


sub_C2B2	proc near		; CODE XREF: sub_AB88+9Bp
		push	si
		push	di
		mov	ah, 0Ch
		call	sub_C162
		mov	ax, 0A800h
		mov	es, ax
		assume es:nothing
		mov	di, 60h	; '`'
		mov	si, 53E2h

loc_C2C4:				; CODE XREF: sub_C2B2+36j
		cmp	byte ptr [si], 1
		jnz	short loc_C2E4
		mov	ax, [si+4]
		add	ax, 0C0h ; 'À'
		push	ax
		call	sub_BC10
		mov	dx, ax
		mov	ax, [si+2]
		add	ax, 1C0h
		sar	ax, 4
		mov	cl, [si+1]
		call	sub_C200

loc_C2E4:				; CODE XREF: sub_C2B2+15j
		add	si, 10h
		dec	di
		jg	short loc_C2C4
		pop	di
		pop	si
		retn
sub_C2B2	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_C2EE	proc near		; CODE XREF: sub_CB58+15p
		push	si
		push	di
		mov	dword_255A4, 80008h
		mov	di, 60h	; '`'
		mov	si, 53E2h

loc_C2FF:				; CODE XREF: sub_C2EE+21j
		cmp	byte ptr [si], 0
		jz	short loc_C30B
		push	large dword ptr	[si+6]
		call	sub_B9D6

loc_C30B:				; CODE XREF: sub_C2EE+14j
		add	si, 10h
		dec	di
		jg	short loc_C2FF
		pop	di
		pop	si
		retn
sub_C2EE	endp


; =============== S U B	R O U T	I N E =======================================


sub_C314	proc near		; CODE XREF: sub_B1D0+B0p
		push	si
		push	di
		mov	si, 53E2h
		mov	di, 60h	; '`'

loc_C31C:				; CODE XREF: sub_C314+14j
		call	sub_2172
		mov	[si+0Eh], al
		add	si, 10h
		dec	di
		jnz	short loc_C31C
		mov	byte ptr word_25534, 0
		pop	di
		pop	si
		retn
sub_C314	endp


; =============== S U B	R O U T	I N E =======================================


sub_C332	proc near		; CODE XREF: sub_C17C+67p
		mov	cx, ax
		sar	ax, 3
		shl	dx, 6
		add	ax, dx
		shr	dx, 2
		add	ax, dx
		mov	bx, ax
		mov	al, 80h	; ''
		and	cl, 7
		shr	al, cl
		mov	es:[bx], al
		retn
sub_C332	endp


; =============== S U B	R O U T	I N E =======================================


sub_C34E	proc near		; CODE XREF: sub_11ECB+5Dp
					; sub_11ECB+66p ...
		mov	bx, sp
		push	di
		mov	di, ss:[bx+4]
		mov	cx, ss:[bx+2]
		push	ds
		pop	es
		assume es:dseg
		xor	ax, ax
		rep stosd
		pop	di
		retn	4
sub_C34E	endp


; =============== S U B	R O U T	I N E =======================================


sub_C364	proc far		; CODE XREF: sub_AB88+167p
					; sub_EE06+64p	...
		mov	bx, sp
		mov	al, ss:[bx+4]
		add	al, byte_266D5
		cmp	al, byte_266D6
		jbe	short loc_C377
		mov	al, byte_266D6

loc_C377:				; CODE XREF: sub_C364+Ej
		mov	byte_266D5, al
		retf	2
sub_C364	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_C37E	proc far		; CODE XREF: sub_10988+92p
					; sub_1D6C1:loc_1D84FP	...
		mov	bx, sp
		mov	al, byte_266D5
		sub	al, ss:[bx+4]
		cmp	al, byte_266D7
		jge	short loc_C390
		mov	al, byte_266D7

loc_C390:				; CODE XREF: sub_C37E+Dj
		mov	byte_266D5, al
		retf	2
sub_C37E	endp


; =============== S U B	R O U T	I N E =======================================


sub_C396	proc far		; CODE XREF: sub_1E0B3+BDP
					; sub_1E245+92P ...
		mov	al, byte_25688
		xor	ah, ah
		add	ax, ax
		mov	bx, 0Ah
		sub	bx, ax
		add	bx, sp
		mov	ax, ss:[bx]
		retf	8
sub_C396	endp


; =============== S U B	R O U T	I N E =======================================


sub_C3AA	proc near		; CODE XREF: sub_12A0A+9Bp
					; sub_12AB7+5Bp
		mov	bx, sp
		push	si
		mov	bx, ss:[bx+2]
		mov	si, bx
		mov	cx, 0BFh ; '¿'
		mov	ah, [bx+1]
		add	bx, 4

loc_C3BC:				; CODE XREF: sub_C3AA+1Fj
		mov	al, [bx+1]
		ror	al, 3
		xor	al, ah
		add	al, [si]
		add	[bx], al
		inc	bx
		loop	loc_C3BC
		mov	al, [si]
		add	[bx], al
		xor	bx, bx
		mov	cx, 0C0h ; 'À'
		xor	dx, dx
		mov	ax, [si+2]
		add	si, 4

loc_C3DC:				; CODE XREF: sub_C3AA+37j
		mov	bl, [si]
		add	dx, bx
		inc	si
		loop	loc_C3DC
		sub	ax, dx
		pop	si
		retn	2
sub_C3AA	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_C3EA	proc near		; CODE XREF: sub_12A0A+89p
					; sub_12B1E+6p
		mov	bx, sp
		push	si
		mov	bx, ss:[bx+2]
		mov	si, bx
		xor	dx, dx
		xor	ax, ax
		add	bx, 4
		mov	cx, 0C0h ; 'À'

loc_C3FD:				; CODE XREF: sub_C3EA+18j
		mov	dl, [bx]
		add	ax, dx
		inc	bx
		loop	loc_C3FD
		mov	[si+2],	ax
		call	sub_2172
		mov	[si], ax
		xor	dx, dx
		add	si, 0C3h ; 'Ã'
		mov	cx, 0C0h ; 'À'

loc_C417:				; CODE XREF: sub_C3EA+39j
		add	dl, al
		sub	[si], dl
		mov	dl, [si]
		ror	dl, 3
		xor	dl, ah
		dec	si
		loop	loc_C417
		pop	si
		retn	2
sub_C3EA	endp

; ---------------------------------------------------------------------------
		nop
; ---------------------------------------------------------------------------
word_C42A	dw 0			; DATA XREF: sub_C42C+23w sub_C42C+3Dr ...

; =============== S U B	R O U T	I N E =======================================


sub_C42C	proc near		; CODE XREF: sub_12CE5+AAp
		mov	bx, sp
		push	ds
		push	si
		push	di
		mov	bx, ss:[bx+2]
		shl	bx, 1
		mov	ds, word ptr [bx+2AC4h]
		mov	bx, dx
		shl	bx, 2
		add	bx, dx
		shl	bx, 4
		mov	cx, ax
		and	cx, 7
		shr	ax, 3
		add	bx, ax
		mov	cs:word_C42A, bx
		xor	si, si
		lodsw
		cmp	al, 80h	; ''
		jnz	short loc_C48C
		mov	dl, 0FFh
		shr	dl, cl
		test	bl, 1
		jnz	short loc_C492

loc_C464:				; CODE XREF: sub_C42C+5Ej
		call	sub_C4C0
		mov	ch, 20h	; ' '
		mov	di, cs:word_C42A
		cmp	di, 7350h
		jb	short loc_C482

loc_C474:				; CODE XREF: sub_C42C+4Fj
		call	sub_C4DA
		cmp	di, 7D00h
		jb	short loc_C474
		sub	di, 7D00h
		nop

loc_C482:				; CODE XREF: sub_C42C+46j sub_C42C+59j
		call	sub_C4DA
		jnz	short loc_C482
		lodsw
		cmp	al, 80h	; ''
		jz	short loc_C464

loc_C48C:				; CODE XREF: sub_C42C+2Dj
		pop	di
		pop	si
		pop	ds
		retn	2
; ---------------------------------------------------------------------------

loc_C492:				; CODE XREF: sub_C42C+36j sub_C42C+8Cj
		call	sub_C4C0
		mov	ch, 20h	; ' '
		mov	di, cs:word_C42A
		cmp	di, 7350h
		jb	short loc_C4B0

loc_C4A2:				; CODE XREF: sub_C42C+7Dj
		call	sub_C50C
		cmp	di, 7D00h
		jb	short loc_C4A2
		sub	di, 7D00h
		nop

loc_C4B0:				; CODE XREF: sub_C42C+74j sub_C42C+87j
		call	sub_C50C
		jnz	short loc_C4B0
		lodsw
		cmp	al, 80h	; ''
		jz	short loc_C492
		pop	di
		pop	si
		pop	ds
		retn	2
sub_C42C	endp


; =============== S U B	R O U T	I N E =======================================


sub_C4C0	proc near		; CODE XREF: sub_C42C:loc_C464p
					; sub_C42C:loc_C492p
		shr	ah, 1
		sbb	al, al
		out	7Eh, al
		shr	ah, 1
		sbb	al, al
		out	7Eh, al
		shr	ah, 1
		sbb	al, al
		out	7Eh, al
		shr	ah, 1
		sbb	al, al
		out	7Eh, al
		retn
sub_C4C0	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_C4DA	proc near		; CODE XREF: sub_C42C:loc_C474p
					; sub_C42C:loc_C482p
		xor	bl, bl
		mov	bh, 2
		lodsd

loc_C4E0:				; CODE XREF: sub_C4DA+22j
		ror	ax, cl
		mov	dh, al
		and	al, dl
		xor	dh, al
		or	al, bl
		mov	bl, dh
		or	ax, ax
		jz	short loc_C4F3
		mov	es:[di], ax

loc_C4F3:				; CODE XREF: sub_C4DA+14j
		add	di, 2
		shr	eax, 10h
		dec	bh
		jnz	short loc_C4E0
		or	bl, bl
		jz	short loc_C505
		mov	es:[di], bl

loc_C505:				; CODE XREF: sub_C4DA+26j
		add	di, 4Ch	; 'L'
		dec	ch
		retn
sub_C4DA	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_C50C	proc near		; CODE XREF: sub_C42C:loc_C4A2p
					; sub_C42C:loc_C4B0p
		mov	bh, 2
		lodsd
		ror	al, cl
		mov	bl, al
		and	al, dl
		jz	short loc_C51B
		mov	es:[di], al

loc_C51B:				; CODE XREF: sub_C50C+Aj
		xor	bl, al
		inc	di
		shr	eax, 8

loc_C522:				; CODE XREF: sub_C50C+32j
		ror	ax, cl
		mov	dh, al
		and	al, dl
		xor	dh, al
		or	al, bl
		mov	bl, dh
		or	ax, ax
		jz	short loc_C535
		mov	es:[di], ax

loc_C535:				; CODE XREF: sub_C50C+24j
		add	di, 2
		shr	eax, 10h
		dec	bh
		jnz	short loc_C522
		add	di, 4Bh	; 'K'
		dec	ch
		retn
sub_C50C	endp


; =============== S U B	R O U T	I N E =======================================


sub_C546	proc near		; CODE XREF: sub_D88C+88p
					; sub_10552+51p ...
		mov	bx, sp
		push	ds
		push	si
		push	di
		mov	bx, ss:[bx+2]
		shl	bx, 1
		mov	ds, word ptr [bx+2AC4h]
		mov	bx, dx
		shl	bx, 2
		add	bx, dx
		shl	bx, 4
		mov	cx, ax
		and	cx, 7
		shr	ax, 3
		add	bx, ax
		xor	si, si
		lodsw
		cmp	al, 80h	; ''
		jnz	short loc_C5DC
		mov	dl, 0FFh
		shr	dl, cl
		test	bl, 1
		jnz	short loc_C5E2
		nop

loc_C57A:				; CODE XREF: sub_C546+94j
		shr	ah, 1
		sbb	al, al
		out	7Eh, al
		shr	ah, 1
		sbb	al, al
		out	7Eh, al
		shr	ah, 1
		sbb	al, al
		out	7Eh, al
		shr	ah, 1
		sbb	al, al
		out	7Eh, al
		mov	ch, 10h
		mov	di, bx
		cmp	di, 7850h
		jb	short loc_C5BE

loc_C59C:				; CODE XREF: sub_C546+71j
		lodsw
		ror	ax, cl
		mov	dh, al
		and	al, dl
		mov	es:[di], ax
		xor	al, dh
		jz	short loc_C5AE
		mov	es:[di+2], al

loc_C5AE:				; CODE XREF: sub_C546+62j
		add	di, 50h	; 'P'
		dec	ch
		cmp	di, 7D00h
		jb	short loc_C59C
		sub	di, 7D00h
		nop

loc_C5BE:				; CODE XREF: sub_C546+54j sub_C546+8Fj
		lodsw
		ror	ax, cl
		mov	dh, al
		and	al, dl
		mov	es:[di], ax
		xor	al, dh
		jz	short loc_C5D0
		mov	es:[di+2], al

loc_C5D0:				; CODE XREF: sub_C546+84j
		add	di, 50h	; 'P'
		dec	ch
		jnz	short loc_C5BE
		lodsw
		cmp	al, 80h	; ''
		jz	short loc_C57A

loc_C5DC:				; CODE XREF: sub_C546+28j
		pop	di
		pop	si
		pop	ds
		retn	2
; ---------------------------------------------------------------------------

loc_C5E2:				; CODE XREF: sub_C546+31j sub_C546+FCj
		shr	ah, 1
		sbb	al, al
		out	7Eh, al
		shr	ah, 1
		sbb	al, al
		out	7Eh, al
		shr	ah, 1
		sbb	al, al
		out	7Eh, al
		shr	ah, 1
		sbb	al, al
		out	7Eh, al
		mov	ch, 10h
		mov	di, bx
		cmp	di, 7850h
		jb	short loc_C626

loc_C604:				; CODE XREF: sub_C546+D9j
		lodsw
		ror	ax, cl
		mov	dh, al
		and	al, dl
		mov	es:[di], al
		xor	al, dh
		xchg	ah, al
		mov	es:[di+1], ax
		add	di, 50h	; 'P'
		dec	ch
		cmp	di, 7D00h
		jb	short loc_C604
		sub	di, 7D00h
		nop

loc_C626:				; CODE XREF: sub_C546+BCj sub_C546+F7j
		lodsw
		ror	ax, cl
		mov	dh, al
		and	al, dl
		mov	es:[di], al
		xor	al, dh
		xchg	ah, al
		mov	es:[di+1], ax
		add	di, 50h	; 'P'
		dec	ch
		jnz	short loc_C626
		lodsw
		cmp	al, 80h	; ''
		jz	short loc_C5E2
		pop	di
		pop	si
		pop	ds
		retn	2
sub_C546	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_C64A	proc far		; CODE XREF: seg001:55DBp seg001:5604p ...

arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		push	si
		mov	si, 9594h
		xor	cx, cx
		jmp	short loc_C68C
; ---------------------------------------------------------------------------

loc_C655:				; CODE XREF: sub_C64A+45j
		cmp	byte ptr [si], 0
		jnz	short loc_C688
		mov	byte ptr [si], 1
		mov	byte ptr [si+1], 0
		mov	ax, [bp+arg_2]
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, 20h	; ' '
		mov	[si+2],	ax
		mov	ax, [bp+arg_0]
		cwd
		idiv	bx
		add	ax, 10h
		mov	[si+4],	ax
		mov	word ptr [si+6], 4
		mov	word ptr [si+8], 8
		jmp	short loc_C691
; ---------------------------------------------------------------------------

loc_C688:				; CODE XREF: sub_C64A+Ej
		inc	cx
		add	si, 0Ah

loc_C68C:				; CODE XREF: sub_C64A+9j
		cmp	cx, 10h
		jl	short loc_C655

loc_C691:				; CODE XREF: sub_C64A+3Cj
		pop	si
		pop	bp
		retf	4
sub_C64A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_C696	proc far		; CODE XREF: sub_161D7+59P
					; sub_16389+4AP ...

arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		push	si
; ---------------------------------------------------------------------------
		db 0BEh, 94h
word_C69C	dw  3395h,0EBC9h, 8037h,   3Ch ; CODE XREF: sub_C696+45j
		dw  2E75h,  4C6h,0C601h,  144h ; value table for switch	statement
		dw  8B00h,  846h
		dw offset loc_14B47+4	; jump table for switch	statement
		dw offset loc_1D38E+2
		dw offset loc_13685+2 -	(offset	loc_13A8F+1)
		dw offset loc_15A95
		dw offset loc_1C38D+3
		dw offset loc_13CD2+2
		dw offset loc_18116+5
		dw offset loc_1D395+1
		dw offset loc_13685+2 -	(offset	loc_13A8F+1)
		dw offset off_14A94+1
		db    0
; ---------------------------------------------------------------------------
		mov	[si+4],	ax
		mov	word ptr [si+6], 84h ; ''
		mov	word ptr [si+8], 0FFF8h
		jmp	short loc_C6DD
; ---------------------------------------------------------------------------
		inc	cx
		add	si, 0Ah
		cmp	cx, 10h
		jl	short near ptr word_C69C+5

loc_C6DD:				; CODE XREF: sub_C696+3Cj
		pop	si
		pop	bp
		retf	4
sub_C696	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_C6E2	proc near		; CODE XREF: sub_AB88+53p
		push	bp
		mov	bp, sp
		push	si
		mov	si, 9594h
		xor	dx, dx
		jmp	short loc_C710
; ---------------------------------------------------------------------------

loc_C6ED:				; CODE XREF: sub_C6E2+31j
		cmp	byte ptr [si], 2
		jnz	short loc_C6F5
		mov	byte ptr [si], 0

loc_C6F5:				; CODE XREF: sub_C6E2+Ej
		cmp	byte ptr [si], 1
		jnz	short loc_C70C
		mov	ax, [si+8]
		add	[si+6],	ax
		inc	byte ptr [si+1]
		cmp	byte ptr [si+1], 10h
		jbe	short loc_C70C
		mov	byte ptr [si], 2

loc_C70C:				; CODE XREF: sub_C6E2+16j sub_C6E2+25j
		inc	dx
		add	si, 0Ah

loc_C710:				; CODE XREF: sub_C6E2+9j
		cmp	dx, 10h
		jl	short loc_C6ED
		pop	si
		pop	bp
		retn
sub_C6E2	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_C718	proc near		; CODE XREF: sub_AB88+A7p
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ah, byte_25592
		call	sub_C162
		mov	si, 9594h
		xor	di, di
		jmp	short loc_C742
; ---------------------------------------------------------------------------

loc_C72B:				; CODE XREF: sub_C718+2Dj
		cmp	byte ptr [si], 1
		jnz	short loc_C73E
		push	word ptr [si+2]
		push	word ptr [si+4]
		push	word ptr [si+6]
		call	sub_11EC

loc_C73E:				; CODE XREF: sub_C718+16j
		inc	di
		add	si, 0Ah

loc_C742:				; CODE XREF: sub_C718+11j
		cmp	di, 10h
		jl	short loc_C72B
		pop	di
		pop	si
		pop	bp
		retn
sub_C718	endp

; ---------------------------------------------------------------------------
		db    0

; =============== S U B	R O U T	I N E =======================================


sub_C74C	proc near		; CODE XREF: sub_CB58+Cp
		push	si
		push	di
		mov	dword_255A4, 200020h
		mov	si, 8A92h
		mov	di, 20h	; ' '

loc_C75D:				; CODE XREF: sub_C74C+26j
		cmp	byte ptr [si], 0
		jz	short loc_C76E
		cmp	byte ptr [si], 3
		jz	short loc_C76E
		push	large dword ptr	[si+6]
		call	sub_B9D6

loc_C76E:				; CODE XREF: sub_C74C+14j sub_C74C+19j
		add	si, 40h	; '@'
		dec	di
		jnz	short loc_C75D
		pop	di
		pop	si
		retn
sub_C74C	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_C778	proc near
		push	bp
		mov	bp, sp
		push	si
		push	di
		cmp	byte_26705, 1
		jnz	short loc_C7A1
		mov	ax, word ptr dword_266F4
		sar	ax, 4
		add	ax, 10h
		mov	di, ax
		push	word ptr dword_266F4+2
		call	sub_BC10
		mov	si, ax
		push	di
		push	ax
		mov	al, byte_26704
		mov	ah, 0
		jmp	short loc_C7DD
; ---------------------------------------------------------------------------

loc_C7A1:				; CODE XREF: sub_C778+Aj
		cmp	byte_26705, 2
		jnz	short loc_C7E6
		mov	ax, word ptr dword_266F4
		sar	ax, 4
		mov	di, ax
		mov	ax, word ptr dword_266F4+2
		add	ax, 0FF00h
		push	ax
		call	sub_BC10
		mov	si, ax
		push	di
		push	ax
		mov	al, byte_26704
		mov	ah, 0
		push	ax
		call	sub_2D3E
		mov	ax, word ptr dword_266F4+2
		add	ax, 100h
		push	ax
		call	sub_BC10
		mov	si, ax
		push	di
		push	ax
		mov	al, byte_26704
		mov	ah, 0
		inc	ax

loc_C7DD:				; CODE XREF: sub_C778+27j
		push	ax

loc_C7DE:				; CODE XREF: sub_C778+BCj
		call	sub_2D3E
		jmp	loc_C881
; ---------------------------------------------------------------------------

loc_C7E6:				; CODE XREF: sub_C778+2Ej
		cmp	byte_26705, 3
		jnz	loc_C877
		mov	ax, word ptr dword_266F4
		sar	ax, 4
		mov	di, ax
		mov	ax, word ptr dword_266F4+2
		add	ax, 0FF00h
		push	ax
		call	sub_BC10
		mov	si, ax
		cmp	byte_26708, 0
		jnz	short loc_C836
		push	di
		push	ax
		mov	ax, word_266CA
		shr	ax, 3
		mov	bx, 5
		xor	dx, dx
		div	bx
		add	dx, 93h	; ''
		push	dx
		call	sub_2D3E
		mov	ax, word ptr dword_266F4+2
		add	ax, 100h
		push	ax
		call	sub_BC10
		mov	si, ax
		push	di
		push	ax
		push	92h ; ''
		jmp	short loc_C7DE
; ---------------------------------------------------------------------------

loc_C836:				; CODE XREF: sub_C778+90j
		push	di
		push	si
		mov	ax, word_266CA
		shr	ax, 3
		mov	bx, 5
		xor	dx, dx
		div	bx
		add	dx, 93h	; ''
		push	dx
		push	large 0FFC0h
		call	far ptr	loc_2B78
		mov	ax, word ptr dword_266F4+2
		add	ax, 100h
		push	ax
		call	sub_BC10
		mov	si, ax
		push	di
		push	ax
		push	large 920000h
		push	0FFC0h
		call	far ptr	loc_2B78
		mov	byte_26708, 0
		jmp	short loc_C881
; ---------------------------------------------------------------------------

loc_C877:				; CODE XREF: sub_C778+73j
		cmp	byte_26705, 0FEh ; 'þ'
		jnz	short loc_C881
		call	sub_11A9A

loc_C881:				; CODE XREF: sub_C778+6Bj sub_C778+FDj ...
		pop	di
		pop	si
		pop	bp
		retn
sub_C778	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_C885	proc near

var_2		= word ptr -2

		enter	2, 0
		push	si
		push	di
		cmp	word ptr dword_266F4+2,	0
		jle	loc_C946
		cmp	word ptr dword_266F4+2,	1700h
		jge	loc_C946
		cmp	word ptr dword_266F4, 0
		jle	loc_C946
		cmp	word ptr dword_266F4, 1800h
		jge	loc_C946
		mov	ax, word ptr dword_266F4
		sar	ax, 4
		mov	di, ax
		mov	ax, word ptr dword_266F4+2
		add	ax, 0FF00h
		push	ax
		call	sub_BC10
		mov	[bp+var_2], ax
		cmp	byte_26705, 0FEh ; 'þ'
		jnz	short loc_C8D2
		call	sub_11A9A
		jmp	short loc_C946
; ---------------------------------------------------------------------------

loc_C8D2:				; CODE XREF: sub_C885+46j
		cmp	byte_26705, 2
		ja	short loc_C946
		mov	si, 90h	; ''
		cmp	byte_26704, 1
		jnz	short loc_C91E
		mov	ax, word_26706
		mov	bx, 20h	; ' '
		cwd
		idiv	bx
		cmp	dx, 10h
		jge	short loc_C906
		mov	ax, word_26706
		mov	bx, 10h
		cwd
		idiv	bx
		mov	bx, 4
		mov	ax, dx
		cwd
		idiv	bx
		add	si, ax
		jmp	short loc_C91E
; ---------------------------------------------------------------------------

loc_C906:				; CODE XREF: sub_C885+6Aj
		mov	ax, word_26706
		mov	bx, 10h
		cwd
		idiv	bx
		mov	bx, 4
		mov	ax, dx
		cwd
		idiv	bx
		mov	dx, 3
		sub	dx, ax
		add	si, dx

loc_C91E:				; CODE XREF: sub_C885+5Cj sub_C885+7Fj
		cmp	byte_26708, 0
		jnz	short loc_C931
		push	di
		push	[bp+var_2]
		push	si
		call	sub_2D3E
		jmp	short loc_C946
; ---------------------------------------------------------------------------

loc_C931:				; CODE XREF: sub_C885+9Ej
		push	di
		push	[bp+var_2]
		push	si
		push	large 0FFC0h
		call	far ptr	loc_2B78
		mov	byte_26708, 0

loc_C946:				; CODE XREF: sub_C885+Bj sub_C885+15j	...
		pop	di
		pop	si
		leave
		retn
sub_C885	endp

; ---------------------------------------------------------------------------
		enter	6, 0
		cmp	word ptr dword_266F4+2,	0FF00h
		jle	short locret_C999
		cmp	word ptr dword_266F4, 0FF00h
		jle	short locret_C999
		cmp	word ptr dword_266F4, 1880h
		jge	short locret_C999
		mov	ax, word ptr dword_266F4
		sar	ax, 4
		add	ax, 10h
		mov	[bp-2],	ax
		push	word ptr dword_266F4+2
		call	sub_BC10
		mov	[bp-4],	ax
		mov	al, byte_266CF
		mov	ah, 0
		mov	bx, 4
		cwd
		idiv	bx
		add	ax, 94h	; ''
		mov	[bp-6],	ax
		push	word ptr [bp-2]
		push	word ptr [bp-4]
		push	ax
		call	sub_2D3E

locret_C999:				; CODE XREF: seg001:1E64j seg001:1E6Cj ...
		leave
		retn
; ---------------------------------------------------------------------------
		db    0

; =============== S U B	R O U T	I N E =======================================


sub_C99C	proc near		; CODE XREF: sub_12CE5+CCp
		mov	ax, word_2D006
		or	ax, ax
		jnz	short loc_C9A4
		retn
; ---------------------------------------------------------------------------

loc_C9A4:				; CODE XREF: sub_C99C+5j
		push	bp
		push	si
		push	di
		mov	bp, ax
		mov	bx, 86D2h

loc_C9AC:				; CODE XREF: sub_C99C+8Bj
		mov	di, [bx]
		mov	ax, di
		sar	di, 3
		mov	cx, [bx+2]
		shl	cx, 6
		add	di, cx
		shr	cx, 2
		add	di, cx
		and	ax, 7
		mov	si, ax
		shl	si, 4
		add	si, 179Ch
		shl	ax, 3
		mov	cx, 6
		or	ax, ax
		jz	short loc_C9F4
		cmp	di, 7B70h
		jb	short loc_C9EB

loc_C9DC:				; CODE XREF: sub_C99C+49j
		movsw
		add	di, 4Eh	; 'N'
		dec	cx
		cmp	di, 7D00h
		jb	short loc_C9DC
		sub	di, 7D00h

loc_C9EB:				; CODE XREF: sub_C99C+3Ej sub_C99C+53j
		movsw
		add	di, 4Eh	; 'N'
		loop	loc_C9EB
		jmp	short loc_CA11
; ---------------------------------------------------------------------------
		nop

loc_C9F4:				; CODE XREF: sub_C99C+38j
		cmp	di, 7B70h
		jb	short loc_CA0A

loc_C9FA:				; CODE XREF: sub_C99C+68j
		movsb
		inc	si
		add	di, 4Fh	; 'O'
		dec	cx
		cmp	di, 7D00h
		jb	short loc_C9FA
		sub	di, 7D00h

loc_CA0A:				; CODE XREF: sub_C99C+5Cj sub_C99C+73j
		movsb
		inc	si
		add	di, 4Fh	; 'O'
		loop	loc_CA0A

loc_CA11:				; CODE XREF: sub_C99C+55j
		sub	di, 0F0h ; 'ð'
		jns	short loc_CA1B
		add	di, 7D00h

loc_CA1B:				; CODE XREF: sub_C99C+79j
		add	ax, 181Ch
		mov	[bx], di
		mov	[bx+2],	ax
		add	bx, 4
		dec	bp
		jnz	short loc_C9AC
		pop	di
		pop	si
		pop	bp
		retn
sub_C99C	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_CA2E	proc near		; CODE XREF: sub_12CE5+D4p
		mov	ax, word_2D006
		or	ax, ax
		jnz	short loc_CA36
		retn
; ---------------------------------------------------------------------------

loc_CA36:				; CODE XREF: sub_CA2E+5j
		push	bp
		push	si
		push	di
		mov	bp, ax
		mov	bx, 86D2h

loc_CA3E:				; CODE XREF: sub_CA2E+64j
		mov	di, [bx]
		mov	si, [bx+2]
		xor	dx, dx
		cmp	di, 7B70h
		jnb	short loc_CA51
		nop
		mov	cx, 5
		jmp	short loc_CA62
; ---------------------------------------------------------------------------

loc_CA51:				; CODE XREF: sub_CA2E+1Bj
		mov	ax, 7D4Fh
		sub	ax, di
		mov	cx, 50h	; 'P'
		div	cx
		mov	cx, ax
		mov	dx, 5
		sub	dx, cx

loc_CA62:				; CODE XREF: sub_CA2E+21j
		mov	ax, [si]
		jmp	short loc_CA67
; ---------------------------------------------------------------------------

loc_CA66:				; CODE XREF: sub_CA2E+52j sub_CA2E+5Ej
		lodsw

loc_CA67:				; CODE XREF: sub_CA2E+36j
		or	al, al
		jz	short loc_CA79
		or	ah, ah
		jz	short loc_CA74
		mov	es:[di], ax
		jmp	short loc_CA7D
; ---------------------------------------------------------------------------

loc_CA74:				; CODE XREF: sub_CA2E+3Fj
		mov	es:[di], al
		jmp	short loc_CA7D
; ---------------------------------------------------------------------------

loc_CA79:				; CODE XREF: sub_CA2E+3Bj
		mov	es:[di+1], ah

loc_CA7D:				; CODE XREF: sub_CA2E+44j sub_CA2E+49j
		add	di, 50h	; 'P'
		loop	loc_CA66
		or	dx, dx
		jz	short loc_CA8E
		sub	di, 7D00h
		xchg	cx, dx
		jmp	short loc_CA66
; ---------------------------------------------------------------------------

loc_CA8E:				; CODE XREF: sub_CA2E+56j
		add	bx, 4
		dec	bp
		jnz	short loc_CA3E
		pop	di
		pop	si
		pop	bp
		retn
sub_CA2E	endp


; =============== S U B	R O U T	I N E =======================================


sub_CA98	proc near		; CODE XREF: sub_CB58+Fp
		push	si
		push	di
		mov	si, 5A22h
		mov	di, 1B8h
		cmp	byte_2CFF9, 0
		jnz	short loc_CACF
		cmp	byte_2CFFA, 0
		jnz	short loc_CACF
		mov	dword_255A4, 80008h
		mov	di, 0F0h ; 'ð'

loc_CABA:				; CODE XREF: sub_CA98+32j
		cmp	byte ptr [si], 0
		jz	short loc_CAC6
		push	large dword ptr	[si+6]
		call	sub_B9D6

loc_CAC6:				; CODE XREF: sub_CA98+25j
		add	si, 1Ah
		dec	di
		jnz	short loc_CABA
		mov	di, 0C8h ; 'È'

loc_CACF:				; CODE XREF: sub_CA98+Dj sub_CA98+14j
		mov	dword_255A4, 100010h

loc_CAD8:				; CODE XREF: sub_CA98+69j
		cmp	byte ptr [si], 0
		jz	short loc_CAFD
		cmp	byte ptr [si+12h], 1
		jbe	short loc_CAF6
		shl	dword_255A4, 1
		push	large dword ptr	[si+6]
		call	sub_B9D6
		shr	dword_255A4, 1
		jmp	short loc_CAFD
; ---------------------------------------------------------------------------

loc_CAF6:				; CODE XREF: sub_CA98+49j
		push	large dword ptr	[si+6]
		call	sub_B9D6

loc_CAFD:				; CODE XREF: sub_CA98+43j sub_CA98+5Cj
		add	si, 1Ah
		dec	di
		jnz	short loc_CAD8
		mov	si, 9292h
		mov	di, 10h

loc_CB09:				; CODE XREF: sub_CA98+90j
		cmp	byte ptr [si], 0
		jz	short loc_CB24
		mov	ax, [si+0Eh]
		shr	ax, 3
		add	ax, 10h
		mov	word ptr dword_255A4, ax
		mov	word ptr dword_255A4+2,	ax
		push	large dword ptr	[si+6]
		call	sub_B9D6

loc_CB24:				; CODE XREF: sub_CA98+74j
		add	si, 2Ah	; '*'
		dec	di
		jnz	short loc_CB09
		pop	di
		pop	si
		retn
sub_CA98	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_CB2E	proc near		; CODE XREF: sub_B1D0+C9p
		push	di
		mov	ax, ds
		mov	es, ax
		mov	di, 4700h
		xor	eax, eax
		mov	cx, 190h
		rep stosd
		pop	di
		retn
sub_CB2E	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_CB42	proc near		; CODE XREF: seg001:2305p sub_EAE4+9Cp
		push	di
		mov	ax, ds
		mov	es, ax
		mov	di, 4700h
		mov	eax, 1010101h
		mov	cx, 190h
		rep stosd
		pop	di
		retn
sub_CB42	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_CB58	proc near		; CODE XREF: seg001:loc_121E6p
					; seg001:loc_12242p ...
		push	bp
		mov	bp, sp
		call	sub_10EED
		call	sub_107E2
		call	sub_10444
		call	sub_C74C
		call	sub_CA98
		call	sub_C0FC
		call	sub_C2EE
		call	sub_BCBE
		call	word_259F4
		call	word_2566A
		call	sub_BBA4
		pop	bp
		retn
sub_CB58	endp

; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		call	sub_CBB8
		dec	byte_255B0
		cmp	byte_255B0, 0
		jnz	short loc_CB97
		mov	word_255A8, 2068h

loc_CB97:				; CODE XREF: seg001:209Fj
		pop	bp
		retn

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_CB99	proc far		; CODE XREF: sub_AED0+2E0p
		push	bp
		mov	bp, sp
		mov	word_255A8, 2068h
		pop	bp
		retf
sub_CB99	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_CBA4	proc far		; CODE XREF: sub_D6EB+28p

arg_0		= byte ptr  6

		push	bp
		mov	bp, sp
		mov	al, [bp+arg_0]
		mov	byte_255B0, al
		mov	word_255A8, 2090h
		pop	bp
		retf	2
sub_CBA4	endp

; ---------------------------------------------------------------------------
		db    0

; =============== S U B	R O U T	I N E =======================================


sub_CBB8	proc near		; CODE XREF: sub_AED0+2A3p
					; sub_AED0+2BCp ...
		push	si
		push	di
		call	sub_CBFA
		mov	di, 7804h
		mov	bx, 5340h
		mov	ax, 0A800h
		mov	es, ax
		assume es:nothing

loc_CBC8:				; CODE XREF: sub_CBB8+38j
		mov	dl, 18h

loc_CBCA:				; CODE XREF: sub_CBB8+2Fj
		mov	si, [bx]
		mov	cx, 10h
		nop

loc_CBD0:				; CODE XREF: sub_CBB8+24j
		mov	ax, es:[si]
		mov	es:[di], ax
		add	si, 50h	; 'P'
		add	di, 50h	; 'P'
		loop	loc_CBD0
		sub	di, 4FEh
		add	bx, 2
		dec	dl
		jnz	short loc_CBCA
		sub	bx, 70h	; 'p'
		sub	di, 530h
		jge	short loc_CBC8
		call	sub_8D0
		pop	di
		pop	si
		retn
sub_CBB8	endp


; =============== S U B	R O U T	I N E =======================================


sub_CBFA	proc near		; CODE XREF: sub_B835+B3p sub_BBA4+2p	...
		mov	al, 0
		out	7Ch, al
		mov	al, 7
		out	6Ah, al		; PC-98	GDC (6a):
					;
		mov	al, 5
		out	6Ah, al		; PC-98	GDC (6a):
					;
		mov	al, 80h	; ''
		out	7Ch, al
		mov	al, 6
		out	6Ah, al		; PC-98	GDC (6a):
					;
		mov	ax, 0FFF0h
		mov	dx, 4A0h
		out	dx, ax
		mov	ax, 0FFh
		mov	dx, 4A2h
		out	dx, ax
		mov	ax, 3100h
		mov	dx, 4A4h
		out	dx, ax
		mov	ax, 0FFFFh
		mov	dx, 4A8h
		out	dx, ax
		mov	ax, 0
		mov	dx, 4ACh
		out	dx, ax
		mov	ax, 0Fh
		mov	dx, 4AEh
		out	dx, ax
		retn
sub_CBFA	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_CC3A	proc near

var_2		= word ptr -2

		enter	2, 0
		push	si
		push	di
		cmp	word ptr dword_266F4+2,	0
		jle	loc_CCD2
		mov	ax, word ptr dword_266F4
		sar	ax, 4
		mov	di, ax
		mov	ax, word ptr dword_266F4+2
		add	ax, 0FF00h
		push	ax
		call	sub_BC10
		mov	[bp+var_2], ax
		cmp	byte_26705, 2
		ja	short loc_CCD2
		cmp	byte_26704, 0
		jnz	short loc_CC7C
		mov	al, byte_266CF
		mov	ah, 0
		mov	bx, 4
		cwd
		idiv	bx
		add	ax, 92h	; ''
		jmp	short loc_CCA8
; ---------------------------------------------------------------------------

loc_CC7C:				; CODE XREF: sub_CC3A+30j
		cmp	byte_26704, 1
		jnz	short loc_CC93
		mov	al, byte_266CE
		mov	ah, 0
		mov	bx, 4
		cwd
		idiv	bx
		add	ax, 96h	; ''
		jmp	short loc_CCA8
; ---------------------------------------------------------------------------

loc_CC93:				; CODE XREF: sub_CC3A+47j
		cmp	byte_26704, 2
		jnz	short loc_CCAA
		mov	al, byte_266CE
		mov	ah, 0
		mov	bx, 4
		cwd
		idiv	bx
		add	ax, 98h	; ''

loc_CCA8:				; CODE XREF: sub_CC3A+40j sub_CC3A+57j
		mov	si, ax

loc_CCAA:				; CODE XREF: sub_CC3A+5Ej
		cmp	byte_26708, 0
		jnz	short loc_CCBD
		push	di
		push	[bp+var_2]
		push	si
		call	sub_2D3E
		jmp	short loc_CCD2
; ---------------------------------------------------------------------------

loc_CCBD:				; CODE XREF: sub_CC3A+75j
		push	di
		push	[bp+var_2]
		push	si
		push	large 0FFC0h
		call	far ptr	loc_2B78
		mov	byte_26708, 0

loc_CCD2:				; CODE XREF: sub_CC3A+Bj sub_CC3A+29j	...
		pop	di
		pop	si
		leave
		retn
sub_CC3A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_CCD6	proc near		; CODE XREF: sub_AB88:loc_AC7Ap
		push	bp
		mov	bp, sp
		mov	al, byte_25A3C
		mov	ah, 0
		add	ax, ax
		mov	dx, word_255B8
		mov	bx, ax
		mov	[bx+4260h], dx
		cmp	byte_250FE, 0
		jz	short loc_CCFE
		cmp	byte_255BC, 0
		jz	short loc_CCFE
		push	dx
		call	sub_1D50

loc_CCFE:				; CODE XREF: sub_CCD6+19j sub_CCD6+20j
		mov	word_255BA, 0
		mov	al, byte_255B6
		add	al, byte_255B7
		mov	byte_255B6, al
		cmp	al, 10h
		jb	short loc_CD31
		mov	ah, 0
		shr	ax, 4
		sub	word_255B8, ax
		jns	short loc_CD23
		add	word_255B8, 190h

loc_CD23:				; CODE XREF: sub_CCD6+45j
		mov	byte_25104, al
		and	byte_255B6, 0Fh
		shl	ax, 4
		mov	word_255BA, ax

loc_CD31:				; CODE XREF: sub_CCD6+3Aj
		call	sub_B835
		pop	bp
		retn
sub_CCD6	endp

; ---------------------------------------------------------------------------

loc_CD36:				; CODE XREF: sub_AB88+B8p
		push	bp
		mov	bp, sp
		cmp	word_255C2, 0
		jz	short loc_CD68
		cmp	byte_266CC, 0
		jnz	short loc_CD4C
		mov	ax, 0FFFEh
		jmp	short loc_CD4F
; ---------------------------------------------------------------------------

loc_CD4C:				; CODE XREF: seg001:2255j
		mov	ax, 2

loc_CD4F:				; CODE XREF: seg001:225Aj
		mov	word_255BE, ax
		cmp	byte_266CD, 1
		ja	short loc_CD5E
		mov	ax, 0FFFEh
		jmp	short loc_CD61
; ---------------------------------------------------------------------------

loc_CD5E:				; CODE XREF: seg001:2267j
		mov	ax, 2

loc_CD61:				; CODE XREF: seg001:226Cj
		mov	word_255C0, ax
		dec	word_255C2

loc_CD68:				; CODE XREF: seg001:224Ej
		cmp	word_255BE, 0
		jge	short loc_CD88
		push	large 200000h
		push	large 19F018Fh
		mov	ax, word_255BE
		neg	ax
		push	ax
		call	far ptr	loc_A22
		jmp	short loc_CDA4
; ---------------------------------------------------------------------------

loc_CD88:				; CODE XREF: seg001:227Dj
		cmp	word_255BE, 0
		jle	short loc_CDA9
		push	large 200000h
		push	large 19F018Fh
		push	word_255BE
		call	far ptr	loc_B24

loc_CDA4:				; CODE XREF: seg001:2296j
		mov	byte_22B9C, 2

loc_CDA9:				; CODE XREF: seg001:229Dj
		cmp	word_255C0, 0
		jge	short loc_CDC9
		push	large 200000h
		push	large 19F018Fh
		mov	ax, word_255C0
		neg	ax
		push	ax
		call	far ptr	loc_C34
		jmp	short loc_CDE5
; ---------------------------------------------------------------------------

loc_CDC9:				; CODE XREF: seg001:22BEj
		cmp	word_255C0, 0
		jle	short loc_CDEA
		push	large 200000h
		push	large 19F018Fh
		push	word_255C0
		call	far ptr	loc_91C

loc_CDE5:				; CODE XREF: seg001:22D7j
		mov	byte_22B9C, 2

loc_CDEA:				; CODE XREF: seg001:22DEj
		cmp	byte_22B9C, 0	; value	table for switch statement
		jz	short loc_CE04
		dec	byte_22B9C
		call	sub_CB42
		mov	word_255BE, 0
		mov	word_255C0, 0	; jump table for switch	statement

loc_CE04:				; CODE XREF: seg001:22FFj
		pop	bp
		retn
; ---------------------------------------------------------------------------
		enter	2, 0
		push	si
		push	di
		cmp	word ptr dword_266F4+2,	0
		jle	short loc_CE8F
		cmp	word ptr dword_266F4+2,	1700h
		jge	short loc_CE8F
		cmp	word ptr dword_266F4, 0
		jle	short loc_CE8F
		cmp	word ptr dword_266F4, 1800h
		jge	short loc_CE8F
		mov	ax, word ptr dword_266F4
		sar	ax, 4
		mov	di, ax
		mov	ax, word ptr dword_266F4+2
		add	ax, 0FF00h
		push	ax
		call	sub_BC10
		mov	[bp-2],	ax
		cmp	byte_26705, 2
		ja	short loc_CE85
		mov	al, byte_26704
		mov	ah, 0
		add	ax, 9Ch	; ''
		mov	si, ax
		cmp	word ptr dword_266F4, 0C00h
		jl	short loc_CE5B
		add	si, 4

loc_CE5B:				; CODE XREF: seg001:2366j
		cmp	byte_26708, 0
		jnz	short loc_CE6E
		push	di
		push	word ptr [bp-2]
		push	si
		call	sub_2D3E
		jmp	short loc_CE8F
; ---------------------------------------------------------------------------

loc_CE6E:				; CODE XREF: seg001:2370j
		push	di
		push	word ptr [bp-2]
		push	si
		push	large 0FFC0h
		call	far ptr	loc_2B78
		mov	byte_26708, 0
		jmp	short loc_CE8F
; ---------------------------------------------------------------------------

loc_CE85:				; CODE XREF: seg001:2354j
		cmp	byte_26705, 0FEh ; 'þ'
		jnz	short loc_CE8F
		call	sub_11A9A

loc_CE8F:				; CODE XREF: seg001:2321j seg001:2329j ...
		pop	di
		pop	si
		leave
		retn

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_CE93	proc near		; CODE XREF: sub_CED4+28p sub_CF01+18p

arg_0		= dword	ptr  4

		push	bp
		mov	bp, sp
		push	si
		push	word ptr dword_255CC+2
		call	sub_267C
		push	large [bp+arg_0]
		call	sub_F14
		call	sub_F92
		mov	si, ax
		push	ax
		call	sub_2578
		mov	word ptr dword_255CC+2,	ax
		mov	word ptr dword_255CC, 0
		push	ax
		push	word ptr dword_255CC
		push	si
		call	sub_E60
		call	sub_DF4
		pop	si
		pop	bp
		retn	4
sub_CE93	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_CED4	proc near		; CODE XREF: sub_AED0+27Ap
		push	bp
		mov	bp, sp
		les	bx, dword_2CDC6
		assume es:nothing
		mov	al, es:[bx+12h]
		les	bx, off_22BAA
		mov	es:[bx+3], al
		les	bx, dword_2CDC6
		mov	al, es:[bx+13h]
		les	bx, off_22BAA
		mov	es:[bx+4], al
		push	word ptr off_22BAA+2
		push	bx
		call	sub_CE93
		pop	bp
		retn
sub_CED4	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_CF01	proc far		; CODE XREF: sub_1E743:loc_1E7F2P
		push	bp
		mov	bp, sp
		les	bx, dword_2CDC6
		mov	al, es:[bx+12h]
		les	bx, off_22BAE
		mov	es:[bx+3], al
		push	word ptr off_22BAE+2
		push	bx
		call	sub_CE93
		pop	bp
		retf
sub_CF01	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_CF1E	proc near		; CODE XREF: sub_B29E+9p sub_E7FD+6Ap
		push	bp
		mov	bp, sp
		cmp	dword_255CC, 0
		jz	short loc_CF3B
		push	word ptr dword_255CC+2
		call	sub_267C
		mov	dword_255CC, 0

loc_CF3B:				; CODE XREF: sub_CF1E+9j
		pop	bp
		retn
sub_CF1E	endp

; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		mov	al, 0
		pop	bp
		retn
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		cmp	byte_255B7, 0
		jnz	short loc_CFB6
		cmp	byte_25A3C, 1
		jnz	short loc_CFB6
		cmp	byte_266D4, 5
		jz	short loc_CF63
		cmp	byte_266D4, 6
		jnz	short loc_CF70

loc_CF63:				; CODE XREF: seg001:246Aj
		push	1Fh
		call	sub_13A58
		call	sub_B79E
		call	sub_B9BB

loc_CF70:				; CODE XREF: seg001:2471j
		nop
		push	cs
		call	near ptr sub_D6EB
		mov	word_255CA, 244Dh
		mov	ax, word_2D016
		mov	word_255A8, ax
		mov	eax, dword_2D018
		mov	dword_2D010, eax
		mov	ax, word_2D01C
		mov	word_2D014, ax
		mov	al, byte_266D4
		add	al, al
		add	al, 2
		mov	bgm_title_id, al
		cmp	byte_266D4, 3
		jnz	short loc_CFAC
		cmp	byte_266D8, 0
		jz	short loc_CFAC
		mov	bgm_title_id, 10h

loc_CFAC:				; CODE XREF: seg001:24AEj seg001:24B5j
		mov	word_259DC, 66A5h
		mov	al, 1
		pop	bp
		retn
; ---------------------------------------------------------------------------

loc_CFB6:				; CODE XREF: seg001:245Cj seg001:2463j
		inc	word_22BA8
		mov	al, 0
		pop	bp
		retn

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_CFBE	proc near		; CODE XREF: sub_D098+15p sub_D098+1Fp

arg_0		= word ptr  4
arg_2		= word ptr  6
arg_4		= word ptr  8

		push	bp
		mov	bp, sp
		push	di
		push	large 0C00001h
		call	sub_1744
		mov	ax, 0A800h
		mov	es, ax
		assume es:nothing
		mov	ax, [bp+arg_4]
		mov	dx, [bp+arg_2]
		shr	ax, 3
		shl	dx, 6
		add	ax, dx
		shr	dx, 2
		add	ax, dx
		mov	di, ax
		mov	bx, [bp+arg_0]
		shl	bx, 3
		mov	dx, 30h	; '0'

loc_CFF0:				; CODE XREF: sub_CFBE+4Bj
		mov	cx, 14h
		mov	ax, [bx+1872h]
		rep stosw
		add	bx, 2
		test	bx, 7
		jnz	short loc_D005
		sub	bx, 8

loc_D005:				; CODE XREF: sub_CFBE+42j
		add	di, 28h	; '('
		dec	dx
		jnz	short loc_CFF0
		mov	dx, 7Ch	; '|'
		mov	al, 0
		out	dx, al
		pop	di
		pop	bp
		retn	6
sub_CFBE	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_D016	proc near		; CODE XREF: sub_D6EB+1Ep
		push	bp
		mov	bp, sp
		push	di
		call	sub_CBFA
		mov	ax, 0A850h
		mov	es, ax
		assume es:nothing
		mov	di, 72B4h
		mov	dx, 0A6h ; '¦'
		mov	al, byte_25A3D

loc_D02B:				; CODE XREF: sub_D016+2Dj
		mov	cx, 18h

loc_D02E:				; CODE XREF: sub_D016+27j
		out	dx, al		; Interrupt Controller #2, 8259A
		xor	al, 1
		mov	bx, es:[di]
		out	dx, al		; Interrupt Controller #2, 8259A
		xor	al, 1
		mov	es:[di], bx
		add	di, 2
		loop	loc_D02E
		sub	di, 80h	; ''
		jge	short loc_D02B
		out	dx, al		; Interrupt Controller #2, 8259A
		call	sub_8D0
		pop	di
		pop	bp
		retn
sub_D016	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_D04E	proc near		; CODE XREF: sub_D1BC+1B6p
					; sub_D1BC+1D4p

arg_0		= word ptr  4
arg_2		= word ptr  6

		push	bp
		mov	bp, sp
		push	di
		call	sub_CBFA
		mov	ax, [bp+arg_0]
		mov	bx, ax
		shl	ax, 2
		add	ax, bx
		add	ax, 0A800h
		mov	es, ax
		assume es:nothing
		mov	di, 27B0h
		mov	ax, [bp+arg_2]
		shr	ax, 3
		add	di, ax
		mov	dx, 0A6h ; '¦'
		mov	al, byte_25A3C

loc_D075:				; CODE XREF: sub_D04E+3Ej
		mov	cx, 8

loc_D078:				; CODE XREF: sub_D04E+39j
		out	dx, al		; Interrupt Controller #2, 8259A
		xor	al, 1
		mov	bx, es:[di]
		out	dx, al		; Interrupt Controller #2, 8259A
		xor	al, 1
		mov	es:[di], bx
		add	di, 2
		loop	loc_D078
		sub	di, 60h	; '`'
		jge	short loc_D075
		call	sub_8D0
		pop	di
		pop	bp
		retn	4
sub_D04E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_D098	proc near		; CODE XREF: sub_D6EB+1Bp
		push	bp
		mov	bp, sp
		push	si
		mov	word_23DF2, 0
		xor	si, si
		jmp	short loc_D0C2
; ---------------------------------------------------------------------------

loc_D0A6:				; CODE XREF: sub_D098+2Dj
		push	large 3000C0h
		push	si
		call	sub_CFBE
		push	large 500140h
		push	si
		call	sub_CFBE
		push	0Ch
		call	sub_131B7
		inc	si

loc_D0C2:				; CODE XREF: sub_D098+Cj
		cmp	si, 3
		jl	short loc_D0A6
		pop	si
		pop	bp
		retn
sub_D098	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_D0CA	proc near		; CODE XREF: sub_D193+15p sub_D1BC+59p ...

var_2		= byte ptr -2
var_1		= byte ptr -1
arg_0		= dword	ptr  4

		enter	2, 0
		les	bx, dword_255CC
		mov	cl, es:[bx]
		inc	word ptr dword_255CC
		les	bx, dword_255CC
		mov	al, es:[bx]
		mov	[bp+var_1], al
		inc	word ptr dword_255CC
		les	bx, dword_255CC
		mov	al, es:[bx]
		mov	[bp+var_2], al
		inc	word ptr dword_255CC
		mov	al, cl
		mov	ah, 0
		mov	bx, ax
		test	byte ptr [bx+2719h], 2
		jnz	short loc_D114
		les	bx, [bp+arg_0]
		mov	ax, word_255D6
		mov	es:[bx], ax
		sub	word ptr dword_255CC, 3
		leave
		retn	4
; ---------------------------------------------------------------------------

loc_D114:				; CODE XREF: sub_D0CA+36j
		mov	al, [bp+var_1]
		mov	ah, 0
		mov	bx, ax
		test	byte ptr [bx+2719h], 2
		jnz	short loc_D138
		mov	al, cl
		mov	ah, 0
		add	ax, 0FFD0h
		les	bx, [bp+arg_0]
		mov	es:[bx], ax
		sub	word ptr dword_255CC, 2
		leave
		retn	4
; ---------------------------------------------------------------------------

loc_D138:				; CODE XREF: sub_D0CA+56j
		mov	al, [bp+var_2]
		mov	ah, 0
		mov	bx, ax
		test	byte ptr [bx+2719h], 2
		jnz	short loc_D168
		mov	al, cl
		mov	ah, 0
		add	ax, 0FFD0h
		imul	ax, 0Ah
		mov	dl, [bp+var_1]
		mov	dh, 0
		add	ax, dx
		add	ax, 0FFD0h
		les	bx, [bp+arg_0]
		mov	es:[bx], ax
		dec	word ptr dword_255CC
		leave
		retn	4
; ---------------------------------------------------------------------------

loc_D168:				; CODE XREF: sub_D0CA+7Aj
		mov	al, cl
		mov	ah, 0
		add	ax, 0FFD0h
		imul	ax, 64h
		mov	dl, [bp+var_1]
		mov	dh, 0
		add	dx, 0FFD0h
		imul	dx, 0Ah
		add	ax, dx
		mov	dl, [bp+var_2]
		mov	dh, 0
		add	ax, dx
		add	ax, 0FFD0h
		les	bx, [bp+arg_0]
		mov	es:[bx], ax
		leave
		retn	4
sub_D0CA	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_D193	proc near		; CODE XREF: sub_D1BC+207p
					; sub_D1BC+20Fp

arg_0		= dword	ptr  4

		push	bp
		mov	bp, sp
		les	bx, dword_255CC
		cmp	byte ptr es:[bx], 2Ch ;	','
		jnz	short loc_D1AF
		inc	word ptr dword_255CC
		push	large [bp+arg_0]
		call	sub_D0CA
		pop	bp
		retn	4
; ---------------------------------------------------------------------------

loc_D1AF:				; CODE XREF: sub_D193+Bj
		les	bx, [bp+arg_0]
		mov	ax, word_255D6
		mov	es:[bx], ax
		pop	bp
		retn	4
sub_D193	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_D1BC	proc near		; CODE XREF: sub_D56C+44p
					; sub_D56C+10Ep

var_18		= byte ptr -18h
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= byte ptr  4

		enter	18h, 0
		push	si
		push	di
		mov	al, [bp+arg_0]
		mov	ah, 0
		push	ax		; ch
		call	_tolower
		pop	cx
		mov	[bp+arg_0], al
		mov	ah, 0
		mov	[bp+var_8], ax
		mov	cx, 0Fh		; switch 15 cases
		mov	bx, offset word_D530

loc_D1DC:				; CODE XREF: sub_D1BC+2Bj
		mov	ax, cs:[bx]
		cmp	ax, [bp+var_8]
		jz	short loc_D1EC
		add	bx, 2
		loop	loc_D1DC
		jmp	loc_D528	; default
; ---------------------------------------------------------------------------

loc_D1EC:				; CODE XREF: sub_D1BC+26j
		jmp	word ptr cs:[bx+1Eh] ; switch jump

loc_D1F0:				; DATA XREF: seg001:2A5Eo
		add	word_255D2, 10h	; jumptable 0000D1EC case 110
		cmp	word_255D4, 0
		jnz	short loc_D201
		mov	ax, 0A0h ; ' '
		jmp	short loc_D204
; ---------------------------------------------------------------------------

loc_D201:				; CODE XREF: sub_D1BC+3Ej
		mov	ax, 30h	; '0'

loc_D204:				; CODE XREF: sub_D1BC+43j
		mov	word_255D0, ax
		jmp	loc_D528	; default
; ---------------------------------------------------------------------------

loc_D20A:				; CODE XREF: sub_D1BC:loc_D1ECj
					; DATA XREF: seg001:2A5Eo
		mov	word_255D6, 64h	; 'd' ; jumptable 0000D1EC case 116
		push	ss
		lea	ax, [bp+var_2]
		push	ax
		call	sub_D0CA
		push	1
		call	sub_131B7
		mov	ax, [bp+var_2]
		mov	word_216E4, ax
		call	far ptr	loc_1F04
		jmp	loc_D528	; default
; ---------------------------------------------------------------------------

loc_D22D:				; CODE XREF: sub_D1BC:loc_D1ECj
					; DATA XREF: seg001:2A5Eo
		les	bx, dword_255CC	; jumptable 0000D1EC case 102
		mov	al, es:[bx]
		mov	[bp+arg_0], al
		cmp	[bp+arg_0], 69h	; 'i'
		jz	short loc_D245
		cmp	[bp+arg_0], 6Fh	; 'o'
		jnz	loc_D528	; default

loc_D245:				; CODE XREF: sub_D1BC+7Fj
		inc	word ptr dword_255CC
		mov	word_255D6, 1
		push	ss
		lea	ax, [bp+var_2]
		push	ax
		call	sub_D0CA
		cmp	[bp+arg_0], 69h	; 'i'
		jnz	short loc_D268
		push	[bp+var_2]
		call	sub_622
		jmp	loc_D528	; default
; ---------------------------------------------------------------------------

loc_D268:				; CODE XREF: sub_D1BC+9Fj
		push	[bp+var_2]
		call	sub_666
		jmp	loc_D528	; default
; ---------------------------------------------------------------------------

loc_D273:				; CODE XREF: sub_D1BC:loc_D1ECj
					; DATA XREF: seg001:2A5Eo
		les	bx, dword_255CC	; jumptable 0000D1EC case 119
		mov	al, es:[bx]
		mov	[bp+arg_0], al
		cmp	[bp+arg_0], 69h	; 'i'
		jz	short loc_D28B
		cmp	[bp+arg_0], 6Fh	; 'o'
		jnz	loc_D528	; default

loc_D28B:				; CODE XREF: sub_D1BC+C5j
		inc	word ptr dword_255CC
		mov	word_255D6, 1
		push	ss
		lea	ax, [bp+var_2]
		push	ax
		call	sub_D0CA
		cmp	[bp+arg_0], 69h	; 'i'
		jnz	short loc_D2AE
		push	[bp+var_2]
		call	sub_2488
		jmp	loc_D528	; default
; ---------------------------------------------------------------------------

loc_D2AE:				; CODE XREF: sub_D1BC+E5j
		push	[bp+var_2]
		call	sub_24C8
		jmp	loc_D528	; default
; ---------------------------------------------------------------------------

loc_D2B9:				; CODE XREF: sub_D1BC:loc_D1ECj
					; DATA XREF: seg001:2A5Eo
		les	bx, dword_255CC	; jumptable 0000D1EC case 103
		cmp	byte ptr es:[bx], 61h ;	'a'
		jz	short loc_D2FE
		mov	word_255D6, 8
		push	ss
		lea	ax, [bp+var_2]
		push	ax
		call	sub_D0CA
		xor	si, si
		jmp	short loc_D2EF
; ---------------------------------------------------------------------------

loc_D2D5:				; CODE XREF: sub_D1BC+136j
		test	si, 1
		jz	short loc_D2DF
		push	4
		jmp	short loc_D2E2
; ---------------------------------------------------------------------------

loc_D2DF:				; CODE XREF: sub_D1BC+11Dj
		push	18Ch

loc_D2E2:				; CODE XREF: sub_D1BC+121j
		call	sub_1D50
		push	1
		call	sub_131B7
		inc	si

loc_D2EF:				; CODE XREF: sub_D1BC+117j
		cmp	si, [bp+var_2]
		jle	short loc_D2D5
		push	0
		call	sub_1D50
		jmp	loc_D528	; default
; ---------------------------------------------------------------------------

loc_D2FE:				; CODE XREF: sub_D1BC+105j
		inc	word ptr dword_255CC
		mov	word_255D6, 0
		push	ss
		lea	ax, [bp+var_2]
		push	ax
		call	sub_D0CA
		mov	ax, word_255D0
		mov	bx, 8
		cwd
		idiv	bx
		push	ax
		mov	ax, word_255D2
		mov	bx, 10h
		cwd
		idiv	bx
		push	ax
		push	[bp+var_2]
		push	0E1h ; 'á'
		call	sub_1B0C
		add	word_255D0, 10h
		jmp	loc_D528	; default
; ---------------------------------------------------------------------------

loc_D337:				; CODE XREF: sub_D1BC:loc_D1ECj
					; DATA XREF: seg001:2A5Eo
		mov	word_255D6, 0	; jumptable 0000D1EC case 107
		push	ss
		lea	ax, [bp+var_2]
		push	ax
		call	sub_D0CA
		push	[bp+var_2]
		call	sub_13213
		jmp	loc_D478
; ---------------------------------------------------------------------------

loc_D350:				; CODE XREF: sub_D1BC:loc_D1ECj
					; DATA XREF: seg001:2A5Eo
		mov	word_255D6, 1	; jumptable 0000D1EC case 61
		push	ss
		lea	ax, [bp+var_2]
		push	ax
		call	sub_D0CA
		push	1
		call	sub_131B7
		cmp	word_255D4, 0
		jnz	short loc_D38A
		push	large 2000F0h
		call	sub_D04E
		cmp	[bp+var_2], 0FFh
		jz	loc_D528	; default
		add	[bp+var_2], 2
		push	large 2000F0h
		jmp	short loc_D3A6
; ---------------------------------------------------------------------------

loc_D38A:				; CODE XREF: sub_D1BC+1AEj
		push	large 1200070h
		call	sub_D04E
		cmp	[bp+var_2], 0FFh
		jz	loc_D528	; default
		add	[bp+var_2], 8
		push	large 1200070h

loc_D3A6:				; CODE XREF: sub_D1BC+1CCj
		push	[bp+var_2]
		call	far ptr	loc_13580
		jmp	short loc_D3E3
; ---------------------------------------------------------------------------

loc_D3B0:				; CODE XREF: sub_D1BC:loc_D1ECj
					; DATA XREF: seg001:2A5Eo
		mov	word_255D6, 0	; jumptable 0000D1EC case 98
		push	ss
		lea	ax, [bp+var_4]
		push	ax
		call	sub_D0CA
		push	ss
		lea	ax, [bp+var_6]
		push	ax
		call	sub_D193
		push	ss
		lea	ax, [bp+var_2]
		push	ax
		call	sub_D193
		push	1
		call	sub_131B7
		push	[bp+var_4]
		push	[bp+var_6]
		push	[bp+var_2]
		call	sub_2D3E

loc_D3E3:				; CODE XREF: sub_D1BC+1F2j
		jmp	loc_D528	; default
; ---------------------------------------------------------------------------

loc_D3E6:				; CODE XREF: sub_D1BC:loc_D1ECj
					; DATA XREF: seg001:2A5Eo
		les	bx, dword_255CC	; jumptable 0000D1EC case 109
		mov	al, es:[bx]
		mov	[bp+arg_0], al
		cmp	[bp+arg_0], 24h	; '$'
		jnz	short loc_D3FF
		inc	word ptr dword_255CC
		push	100h
		jmp	short loc_D40B
; ---------------------------------------------------------------------------

loc_D3FF:				; CODE XREF: sub_D1BC+238j
		cmp	[bp+arg_0], 2Ah	; '*'
		jnz	short loc_D413
		inc	word ptr dword_255CC
		push	0

loc_D40B:				; CODE XREF: sub_D1BC+241j
		call	sub_133DC
		jmp	loc_D528	; default
; ---------------------------------------------------------------------------

loc_D413:				; CODE XREF: sub_D1BC+247j
		cmp	[bp+arg_0], 2Ch	; ','
		jnz	loc_D528	; default
		inc	word ptr dword_255CC
		mov	[bp+var_2], 0
		jmp	short loc_D454
; ---------------------------------------------------------------------------

loc_D426:				; CODE XREF: sub_D1BC+29Cj
		les	bx, dword_255CC
		mov	al, es:[bx]
		mov	[bp+arg_0], al
		inc	word ptr dword_255CC
		mov	ah, 0
		mov	bx, ax
		test	byte ptr [bx+2719h], 20h
		jnz	short loc_D45A
		cmp	[bp+arg_0], 20h	; ' '
		jz	short loc_D45A
		lea	bx, [bp+var_18]
		add	bx, [bp+var_2]
		mov	al, [bp+arg_0]
		mov	ss:[bx], al
		inc	[bp+var_2]

loc_D454:				; CODE XREF: sub_D1BC+268j
		cmp	[bp+var_2], 0Ch
		jl	short loc_D426

loc_D45A:				; CODE XREF: sub_D1BC+281j
					; sub_D1BC+287j
		lea	bx, [bp+var_18]
		add	bx, [bp+var_2]
		mov	byte ptr ss:[bx], 0
		push	ss
		lea	ax, [bp+var_18]
		push	ax
		push	600h
		call	sub_13496
		push	0
		call	sub_133DC

loc_D478:				; CODE XREF: sub_D1BC+191j
		jmp	loc_D528	; default
; ---------------------------------------------------------------------------

loc_D47B:				; CODE XREF: sub_D1BC:loc_D1ECj
					; DATA XREF: seg001:2A5Eo
		push	ss		; jumptable 0000D1EC case 101
		lea	ax, [bp+var_2]
		push	ax
		call	sub_D0CA
		call	sub_138A6
		push	[bp+var_2]
		call	sub_138B2
		call	sub_138EC
		jmp	loc_D528	; default
; ---------------------------------------------------------------------------

loc_D498:				; CODE XREF: sub_D1BC:loc_D1ECj
					; DATA XREF: seg001:2A5Eo
		push	large 800100h	; jumptable 0000D1EC case 99
		call	sub_2B4E
		jmp	short loc_D508
; ---------------------------------------------------------------------------

loc_D4A5:				; CODE XREF: sub_D1BC:loc_D1ECj
					; DATA XREF: seg001:2A5Eo
		les	bx, dword_255CC	; jumptable 0000D1EC case 108
		mov	al, es:[bx]
		mov	[bp+arg_0], al
		cmp	[bp+arg_0], 2Ch	; ','
		jnz	short loc_D528	; default
		inc	word ptr dword_255CC
		mov	[bp+var_2], 0
		jmp	short loc_D4EE
; ---------------------------------------------------------------------------

loc_D4C0:				; CODE XREF: sub_D1BC+336j
		les	bx, dword_255CC
		mov	al, es:[bx]
		mov	[bp+arg_0], al
		inc	word ptr dword_255CC
		mov	ah, 0
		mov	bx, ax
		test	byte ptr [bx+2719h], 20h
		jnz	short loc_D4F4
		cmp	[bp+arg_0], 20h	; ' '
		jz	short loc_D4F4
		lea	bx, [bp+var_18]
		add	bx, [bp+var_2]
		mov	al, [bp+arg_0]
		mov	ss:[bx], al
		inc	[bp+var_2]

loc_D4EE:				; CODE XREF: sub_D1BC+302j
		cmp	[bp+var_2], 0Ch
		jl	short loc_D4C0

loc_D4F4:				; CODE XREF: sub_D1BC+31Bj
					; sub_D1BC+321j
		lea	bx, [bp+var_18]
		add	bx, [bp+var_2]
		mov	byte ptr ss:[bx], 0
		push	ss
		lea	ax, [bp+var_18]
		push	ax
		call	sub_2A74

loc_D508:				; CODE XREF: sub_D1BC+2E7j
		jmp	short loc_D528	; default
; ---------------------------------------------------------------------------

loc_D50A:				; CODE XREF: sub_D1BC:loc_D1ECj
					; DATA XREF: seg001:2A5Eo
		mov	di, 1		; jumptable 0000D1EC case 100
		jmp	short loc_D516
; ---------------------------------------------------------------------------

loc_D50F:				; CODE XREF: sub_D1BC+35Dj
		push	di
		call	sub_13A58
		inc	di

loc_D516:				; CODE XREF: sub_D1BC+351j
		cmp	di, 20h	; ' '
		jl	short loc_D50F
		jmp	short loc_D528	; default
; ---------------------------------------------------------------------------

loc_D51D:				; CODE XREF: sub_D1BC:loc_D1ECj
					; DATA XREF: seg001:2A5Eo
		push	0		; jumptable 0000D1EC case 36
		call	sub_13213

loc_D524:				; CODE XREF: sub_D1BC:loc_D1ECj
					; DATA XREF: seg001:2A5Eo
		mov	al, 0FFh	; jumptable 0000D1EC case 35
		jmp	short loc_D52A
; ---------------------------------------------------------------------------

loc_D528:				; CODE XREF: sub_D1BC+2Dj sub_D1BC+4Bj ...
		mov	al, 0		; default

loc_D52A:				; CODE XREF: sub_D1BC+36Aj
		pop	di
		pop	si
		leave
		retn	2
sub_D1BC	endp

; ---------------------------------------------------------------------------
word_D530	dw    23h,   24h,   3Dh,   62h ; DATA XREF: sub_D1BC+1Do
		dw    63h,   64h,   65h,   66h ; value table for switch	statement
		dw    67h,   6Bh,   6Ch,   6Dh
		dw    6Eh,   74h,   77h
		dw offset loc_D524	; jump table for switch	statement
		dw offset loc_D51D
		dw offset loc_D350
		dw offset loc_D3B0
		dw offset loc_D498
		dw offset loc_D50A
		dw offset loc_D47B
		dw offset loc_D22D
		dw offset loc_D2B9
		dw offset loc_D337
		dw offset loc_D4A5
		dw offset loc_D3E6
		dw offset loc_D1F0
		dw offset loc_D20A
		dw offset loc_D273

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_D56C	proc near		; CODE XREF: sub_D6EB+21p

var_6		= dword	ptr -6
var_2		= byte ptr -2
var_1		= byte ptr -1

		enter	6, 0
		push	si
		push	di
		mov	word ptr [bp+var_6+2], ds
		mov	word ptr [bp+var_6], 18A0h

loc_D57A:				; CODE XREF: sub_D56C+25j sub_D56C+2Bj ...
		les	bx, dword_255CC
		mov	al, es:[bx]
		mov	[bp+var_1], al
		inc	word ptr dword_255CC
		mov	ah, 0
		mov	bx, ax
		test	byte ptr [bx+2719h], 20h
		jnz	short loc_D57A
		cmp	[bp+var_1], 20h	; ' '
		jz	short loc_D57A
		cmp	[bp+var_1], 5Ch	; '\'
		jnz	short loc_D5BA
		les	bx, dword_255CC
		mov	al, es:[bx]
		mov	[bp+var_1], al
		inc	word ptr dword_255CC
		push	word ptr [bp+var_1]
		call	sub_D1BC
		cmp	al, 0FFh
		jnz	short loc_D57A
		jmp	loc_D6E4
; ---------------------------------------------------------------------------

loc_D5BA:				; CODE XREF: sub_D56C+31j
		cmp	[bp+var_1], 30h	; '0'
		jz	short loc_D5C6
		cmp	[bp+var_1], 31h	; '1'
		jnz	short loc_D57A

loc_D5C6:				; CODE XREF: sub_D56C+52j
		cmp	[bp+var_1], 30h	; '0'
		jnz	short loc_D5E0
		mov	word_255D0, 0A0h ; ' '
		mov	word_255D2, 140h
		mov	word_255D4, 0
		jmp	short loc_D5F2
; ---------------------------------------------------------------------------

loc_D5E0:				; CODE XREF: sub_D56C+5Ej
		mov	word_255D0, 30h	; '0'
		mov	word_255D2, 0C0h ; 'À'
		mov	word_255D4, 1

loc_D5F2:				; CODE XREF: sub_D56C+72j
		mov	ax, word_255D2
		mov	bx, 10h
		cwd
		idiv	bx
		mov	si, ax
		jmp	short loc_D62B
; ---------------------------------------------------------------------------

loc_D5FF:				; CODE XREF: sub_D56C+CDj
		mov	ax, word_255D0
		mov	bx, 8
		cwd
		idiv	bx
		mov	di, ax
		jmp	short loc_D61A
; ---------------------------------------------------------------------------

loc_D60C:				; CODE XREF: sub_D56C+BCj
		push	di
		push	si
		push	large 2000E1h
		call	sub_229E
		inc	di

loc_D61A:				; CODE XREF: sub_D56C+9Ej
		mov	ax, word_255D0
		mov	bx, 8
		cwd
		idiv	bx
		add	ax, 1Eh
		cmp	ax, di
		jg	short loc_D60C
		inc	si

loc_D62B:				; CODE XREF: sub_D56C+91j
		mov	ax, word_255D2
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, 3
		cmp	ax, si
		jg	short loc_D5FF
		mov	[bp+var_2], 0

loc_D63F:				; CODE XREF: sub_D56C+EFj sub_D56C+F5j ...
		call	far ptr	sub_1379C
		les	bx, dword_255CC
		mov	al, es:[bx]
		mov	[bp+var_1], al
		inc	word ptr dword_255CC
		mov	ah, 0
		mov	bx, ax
		test	byte ptr [bx+2719h], 20h
		jnz	short loc_D63F
		cmp	[bp+var_1], 20h	; ' '
		jz	short loc_D63F
		cmp	[bp+var_1], 5Ch	; '\'
		jnz	short loc_D684
		les	bx, dword_255CC
		mov	al, es:[bx]
		mov	[bp+var_1], al
		inc	word ptr dword_255CC
		push	word ptr [bp+var_1]
		call	sub_D1BC
		cmp	al, 0FFh
		jnz	short loc_D63F
		jmp	loc_D57A
; ---------------------------------------------------------------------------

loc_D684:				; CODE XREF: sub_D56C+FBj
		les	bx, [bp+var_6]
		mov	al, [bp+var_1]
		mov	es:[bx], al
		les	bx, dword_255CC
		mov	al, es:[bx]
		mov	[bp+var_1], al
		les	bx, [bp+var_6]
		mov	es:[bx+1], al
		inc	word ptr dword_255CC
		mov	ax, word_255D0
		mov	bx, 8
		cwd
		idiv	bx
		push	ax
		mov	ax, word_255D2
		mov	bx, 10h
		cwd
		idiv	bx
		push	ax
		push	large [bp+var_6]
		push	0E1h ; 'á'
		call	sub_22F6
		add	word_255D0, 10h
		cmp	word_24CB4, 0
		jnz	short loc_D6D2
		push	2
		jmp	short loc_D6DC
; ---------------------------------------------------------------------------

loc_D6D2:				; CODE XREF: sub_D56C+160j
		test	[bp+var_2], 1
		jz	loc_D63F
		push	1

loc_D6DC:				; CODE XREF: sub_D56C+164j
		call	sub_131B7
		jmp	loc_D63F
; ---------------------------------------------------------------------------

loc_D6E4:				; CODE XREF: sub_D56C+4Bj
		call	sub_10D4B
		pop	di
		pop	si
		leave
		retn
sub_D56C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_D6EB	proc far		; CODE XREF: seg001:2482p
					; sub_1E743+B4P ...
		push	bp
		mov	bp, sp
		call	sub_D729
		call	sub_10D4B
		mov	word_216E4, 64h	; 'd'
		call	far ptr	loc_1F04
		mov	dx, 0A6h ; '¦'
		mov	al, byte_25A3D
		out	dx, al		; Interrupt Controller #2, 8259A
		call	sub_D098
		call	sub_D016
		call	sub_D56C
		push	2
		nop
		push	cs
		call	near ptr sub_CBA4
		call	sub_D7EE
		mov	dx, 0A6h ; '¦'
		mov	al, byte_25A3C
		out	dx, al		; Interrupt Controller #2, 8259A
		push	1
		call	sub_131B7
		pop	bp
		retf
sub_D6EB	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_D729	proc near		; CODE XREF: sub_D6EB+3p

var_4		= dword	ptr -4

		enter	4, 0
		push	si
		push	di
		push	0
		call	sub_13A58
		cmp	word_266DE, 0
		jz	loc_D7D0
		mov	[bp+var_4], 16F30h
		mov	si, word_24CD8
		mov	di, 2
		jmp	short loc_D7C9
; ---------------------------------------------------------------------------

loc_D750:				; CODE XREF: sub_D729+A3j
		push	si
		call	sub_2578
		mov	bx, di
		shl	bx, 4
		mov	[bx+3984h], ax
		push	word_266DE
		push	large [bp+var_4]
		mov	bx, di
		shl	bx, 4
		push	word ptr [bx+3984h]
		push	0
		movzx	eax, si
		push	eax
		call	sub_40F4
		movzx	eax, si
		add	[bp+var_4], eax
		mov	ax, 4
		imul	si
		mov	si, ax
		push	si
		call	sub_2578
		mov	bx, di
		shl	bx, 4
		mov	[bx+3986h], ax
		push	word_266DE
		push	large [bp+var_4]
		mov	bx, di
		shl	bx, 4
		push	word ptr [bx+3986h]
		push	0
		movzx	eax, si
		push	eax
		call	sub_40F4
		movzx	eax, si
		add	[bp+var_4], eax
		mov	ax, si
		shr	ax, 2
		mov	si, ax
		inc	di

loc_D7C9:				; CODE XREF: sub_D729+25j
		cmp	di, 8
		jl	short loc_D750
		jmp	short loc_D7EA
; ---------------------------------------------------------------------------

loc_D7D0:				; CODE XREF: sub_D729+12j
		cmp	byte_266D8, 0
		jnz	short loc_D7DF
		push	2
		push	ds
		push	offset aKao0_cd2_0 ; "KAO0.cd2"
		jmp	short loc_D7E5
; ---------------------------------------------------------------------------

loc_D7DF:				; CODE XREF: sub_D729+ACj
		push	2
		push	ds
		push	offset aKao1_cd2_0 ; "KAO1.cd2"

loc_D7E5:				; CODE XREF: sub_D729+B4j
		call	sub_139FC

loc_D7EA:				; CODE XREF: sub_D729+A5j
		pop	di
		pop	si
		leave
		retn
sub_D729	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_D7EE	proc near		; CODE XREF: sub_D6EB+2Bp
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	si, 2
		jmp	short loc_D7FF
; ---------------------------------------------------------------------------

loc_D7F8:				; CODE XREF: sub_D7EE+14j
		push	si
		call	sub_13A58
		inc	si

loc_D7FF:				; CODE XREF: sub_D7EE+8j
		cmp	si, 8
		jl	short loc_D7F8
		cmp	byte_266D4, 6
		jnz	short loc_D83A
		mov	si, 8
		jmp	short loc_D817
; ---------------------------------------------------------------------------

loc_D810:				; CODE XREF: sub_D7EE+2Cj
		push	si
		call	sub_13A58
		inc	si

loc_D817:				; CODE XREF: sub_D7EE+20j
		cmp	si, 0Bh
		jl	short loc_D810
		mov	al, byte_22BCA
		inc	byte_22BCA
		or	al, al
		jnz	short loc_D82F
		push	8
		push	ds
		push	offset aBss7_cd2 ; "bss7.cd2"
		jmp	short loc_D835
; ---------------------------------------------------------------------------

loc_D82F:				; CODE XREF: sub_D7EE+37j
		push	8
		push	ds
		push	offset aBss8_cd2 ; "bss8.cd2"

loc_D835:				; CODE XREF: sub_D7EE+3Fj
		call	sub_139FC

loc_D83A:				; CODE XREF: sub_D7EE+1Bj
		cmp	word_266DE, 0
		jz	short loc_D86C
		mov	ax, word_24CB8
		shl	ax, 2
		mov	di, ax
		push	ax
		call	sub_2578
		mov	word_24CC6, ax
		push	word_266DE
		push	large 84D0h
		push	ax
		push	0
		movzx	eax, di
		push	eax
		call	sub_40F4
		jmp	short loc_D888
; ---------------------------------------------------------------------------

loc_D86C:				; CODE XREF: sub_D7EE+51j
		cmp	byte_266D8, 0
		jnz	short loc_D87B
		push	0
		push	ds
		push	offset aBb0_cdg	; "bb0.cdg"
		jmp	short loc_D881
; ---------------------------------------------------------------------------

loc_D87B:				; CODE XREF: sub_D7EE+83j
		push	0
		push	ds
		push	offset aBb1_cdg	; "bb1.cdg"

loc_D881:				; CODE XREF: sub_D7EE+8Bj
		push	0
		call	sub_13938

loc_D888:				; CODE XREF: sub_D7EE+7Cj
		pop	di
		pop	si
		pop	bp
		retn
sub_D7EE	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_D88C	proc near		; CODE XREF: sub_E8A3:loc_EA5Bp
					; sub_ED71:loc_EDD7p ...

var_7		= byte ptr -7
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2

		enter	8, 0
		push	si
		push	di
		mov	ax, 0A800h
		mov	es, ax
		assume es:nothing
		call	sub_C156
		mov	si, 4298h
		mov	[bp+var_6], 0
		jmp	loc_D943
; ---------------------------------------------------------------------------

loc_D8A5:				; CODE XREF: sub_D88C+BBj
		cmp	byte ptr [si], 0
		jz	loc_D93D
		xor	di, di
		mov	[bp+var_7], 0
		jmp	short loc_D920
; ---------------------------------------------------------------------------

loc_D8B4:				; CODE XREF: sub_D88C+97j
		push	word ptr [si+2]
		push	word ptr [si+6]
		mov	al, [bp+var_7]
		mov	ah, 0
		add	ax, ax
		mov	bx, ax
		push	word ptr [bx+566h]
		call	sub_13320
		mov	[bp+var_2], ax
		push	word ptr [si+4]
		push	word ptr [si+8]
		mov	al, [si+0Fh]
		add	al, [bp+var_7]
		mov	ah, 0
		add	ax, ax
		mov	bx, ax
		push	word ptr [bx+4E6h]
		call	sub_13320
		mov	[bp+var_4], ax
		sar	ax, 4
		add	ax, 8
		mov	dx, ax
		mov	ax, [bp+var_2]
		sar	ax, 4
		add	ax, 18h
		cmp	ax, 10h
		jbe	short loc_D917
		cmp	ax, 1A0h
		jnb	short loc_D917
		or	dx, dx
		jbe	short loc_D917
		cmp	dx, 180h
		jnb	short loc_D917
		push	44h ; 'D'
		call	sub_C546

loc_D917:				; CODE XREF: sub_D88C+75j sub_D88C+7Aj ...
		inc	di
		mov	al, [bp+var_7]
		add	al, 4
		mov	[bp+var_7], al

loc_D920:				; CODE XREF: sub_D88C+26j
		cmp	di, 40h	; '@'
		jl	short loc_D8B4
		mov	ax, [si+0Ah]
		add	[si+6],	ax
		mov	ax, [si+0Ch]
		add	[si+8],	ax
		inc	byte ptr [si+1]
		cmp	byte ptr [si+1], 20h ; ' '
		jb	short loc_D93D
		mov	byte ptr [si], 0

loc_D93D:				; CODE XREF: sub_D88C+1Cj sub_D88C+ACj
		inc	[bp+var_6]
		add	si, 10h

loc_D943:				; CODE XREF: sub_D88C+16j
		cmp	[bp+var_6], 2
		jl	loc_D8A5
		mov	dx, 7Ch	; '|'
		mov	al, 0
		out	dx, al
		pop	di
		pop	si
		leave
		retn
sub_D88C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_D955	proc near		; CODE XREF: sub_E8A3+1BBp
					; sub_ED71+69p	...

var_5		= byte ptr -5
var_4		= word ptr -4
var_2		= word ptr -2

		enter	6, 0
		push	si
		push	di
		mov	si, 42B8h
		cmp	byte ptr [si], 0
		jz	loc_DA45
		mov	[bp+var_2], 0
		mov	[bp+var_5], 0
		jmp	short loc_D9E1
; ---------------------------------------------------------------------------

loc_D970:				; CODE XREF: sub_D955+90j
		push	word ptr [si+2]
		push	word ptr [si+6]
		mov	al, [bp+var_5]
		mov	ah, 0
		add	ax, ax
		mov	bx, ax
		push	word ptr [bx+566h]
		call	sub_13320
		mov	di, ax
		sar	ax, 4
		mov	di, ax
		push	word ptr [si+4]
		push	word ptr [si+8]
		mov	al, [si+0Fh]
		add	al, [bp+var_5]
		mov	ah, 0
		add	ax, ax
		mov	bx, ax
		push	word ptr [bx+4E6h]
		call	sub_13320
		mov	[bp+var_4], ax
		sar	ax, 4
		add	ax, 0FFF0h
		mov	[bp+var_4], ax
		or	di, di
		jl	short loc_D9D6
		cmp	di, 180h
		jg	short loc_D9D6
		cmp	[bp+var_4], 0
		jl	short loc_D9D6
		cmp	[bp+var_4], 150h
		jg	short loc_D9D6
		push	di
		push	ax
		push	3
		call	sub_2F54

loc_D9D6:				; CODE XREF: sub_D955+63j sub_D955+69j ...
		inc	[bp+var_2]
		mov	al, [bp+var_5]
		add	al, 10h
		mov	[bp+var_5], al

loc_D9E1:				; CODE XREF: sub_D955+19j
		cmp	[bp+var_2], 10h
		jl	short loc_D970
		mov	ax, [si+0Ah]
		add	[si+6],	ax
		mov	ax, [si+0Ch]
		add	[si+8],	ax
		inc	byte ptr [si+1]
		cmp	byte ptr [si+1], 20h ; ' '
		jb	short loc_D9FF
		mov	byte ptr [si], 0

loc_D9FF:				; CODE XREF: sub_D955+A5j
		inc	word_22C18
		cmp	word_22C18, 8
		jge	short loc_DA19
		test	byte ptr word_22C18, 1
		jz	short loc_DA19
		mov	word_216E4, 96h	; ''
		jmp	short loc_DA36
; ---------------------------------------------------------------------------

loc_DA19:				; CODE XREF: sub_D955+B3j sub_D955+BAj
		cmp	word_22C18, 8
		jl	short loc_DA3D
		cmp	word_22C18, 10h
		jge	short loc_DA3D
		mov	ax, word_22C18
		imul	ax, 6
		mov	dx, 0C4h ; 'Ä'
		sub	dx, ax
		mov	word_216E4, dx

loc_DA36:				; CODE XREF: sub_D955+C2j sub_D955+EEj
		mov	byte_266D3, 1
		jmp	short loc_DA4B
; ---------------------------------------------------------------------------

loc_DA3D:				; CODE XREF: sub_D955+C9j sub_D955+D0j
		mov	word_216E4, 64h	; 'd'
		jmp	short loc_DA36
; ---------------------------------------------------------------------------

loc_DA45:				; CODE XREF: sub_D955+Cj
		mov	word_22C18, 0

loc_DA4B:				; CODE XREF: sub_D955+E6j
		pop	di
		pop	si
		leave
		retn
sub_D955	endp

; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jz	short loc_DA70
		mov	word ptr [si+0Eh], 22h ; '"'
		mov	byte ptr [si+10h], 0Ah

loc_DA70:				; CODE XREF: seg001:2F75j
		pop	si
		pop	bp
		retn
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jz	short loc_DAA3
		add	ax, 0Ah
		push	ax
		push	7
		call	sub_BC7E
		add	al, 0BCh ; '¼'
		push	ax
		call	sub_11DCA
		mov	word ptr [si+0Eh], 22h ; '"'
		mov	byte ptr [si+10h], 0Ah

loc_DAA3:				; CODE XREF: seg001:2F99j
		pop	si
		pop	bp
		retn

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_DAA6	proc near		; CODE XREF: seg001:3062p seg001:30A4p ...

arg_0		= byte ptr  4
arg_2		= word ptr  6

		push	bp
		mov	bp, sp
		push	si
		cmp	word_25608, 0
		jnz	short loc_DADA
		mov	ax, [bp+arg_2]
		mov	word_25608, ax
		mov	al, [bp+arg_0]
		mov	byte_2560A, al
		mov	ax, word ptr dword_259AC
		mov	word ptr dword_2560C, ax
		mov	ax, word ptr dword_259AC+2
		mov	word ptr dword_2560C+2,	ax
		mov	ax, word ptr dword_259AC
		mov	word ptr dword_25610, ax
		mov	ax, word ptr dword_259AC+2
		mov	word ptr dword_25610+2,	ax
		mov	byte_22C1A, 0

loc_DADA:				; CODE XREF: sub_DAA6+9j
		cmp	word_25608, 30h	; '0'
		jb	short loc_DB45
		inc	byte_22C1A
		cmp	byte_22C1A, 4
		ja	short loc_DB39
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jz	short loc_DB17
		mov	word ptr [si+0Eh], 46h ; 'F'
		mov	byte ptr [si+10h], 9
		mov	word ptr [si+0Ch], 0FEE0h
		mov	ax, word ptr dword_259AC
		add	ax, 0FE80h
		mov	[si+2],	ax

loc_DB17:				; CODE XREF: sub_DAA6+58j
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jz	short loc_DB45
		mov	word ptr [si+0Eh], 46h ; 'F'
		mov	byte ptr [si+10h], 9
		mov	word ptr [si+0Ch], 0FEE0h
		mov	ax, word ptr dword_259AC
		add	ax, 180h
		mov	[si+2],	ax
		jmp	short loc_DB45
; ---------------------------------------------------------------------------

loc_DB39:				; CODE XREF: sub_DAA6+44j
		cmp	byte_22C1A, 8
		jb	short loc_DB45
		mov	byte_22C1A, 0

loc_DB45:				; CODE XREF: sub_DAA6+39j sub_DAA6+78j ...
		pop	si
		pop	bp
		retn	4
sub_DAA6	endp

; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	40h ; '@'
		push	0
		call	sub_DAA6
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		jmp	short loc_DB7C
; ---------------------------------------------------------------------------

loc_DB62:				; CODE XREF: seg001:3093j
		lea	ax, [si+0Ah]
		push	ax
		push	7
		call	sub_BC7E
		add	al, 0BCh ; '¼'
		push	ax
		call	sub_11DCA
		mov	word ptr [si+0Eh], 22h ; '"'
		mov	byte ptr [si+10h], 9
		jmp	short loc_DB85
; ---------------------------------------------------------------------------

loc_DB7C:				; CODE XREF: seg001:3070j
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jnz	short loc_DB62

loc_DB85:				; CODE XREF: seg001:308Aj
		pop	si
		pop	bp
		retn
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	di, 2
		push	48h ; 'H'
		push	0
		call	sub_DAA6
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		jmp	short loc_DBC1
; ---------------------------------------------------------------------------

loc_DBA4:				; CODE XREF: seg001:30D8j
		cmp	di, 2
		jnz	short loc_DBB0
		sub	word ptr [si+2], 80h ; ''
		jmp	short loc_DBB5
; ---------------------------------------------------------------------------

loc_DBB0:				; CODE XREF: seg001:30B7j
		add	word ptr [si+2], 80h ; ''

loc_DBB5:				; CODE XREF: seg001:30BEj
		mov	word ptr [si+0Eh], 22h ; '"'
		mov	byte ptr [si+10h], 9
		dec	di
		jle	short loc_DBCA

loc_DBC1:				; CODE XREF: seg001:30B2j
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jnz	short loc_DBA4

loc_DBCA:				; CODE XREF: seg001:30CFj
		pop	di
		pop	si
		pop	bp
		retn
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	di, 2
		push	58h ; 'X'
		push	1
		call	sub_DAA6
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		jmp	short loc_DC07
; ---------------------------------------------------------------------------

loc_DBEA:				; CODE XREF: seg001:311Ej
		cmp	di, 2
		jnz	short loc_DBF6
		sub	word ptr [si+2], 80h ; ''
		jmp	short loc_DBFB
; ---------------------------------------------------------------------------

loc_DBF6:				; CODE XREF: seg001:30FDj
		add	word ptr [si+2], 80h ; ''

loc_DBFB:				; CODE XREF: seg001:3104j
		mov	word ptr [si+0Eh], 22h ; '"'
		mov	byte ptr [si+10h], 9
		dec	di
		jle	short loc_DC10

loc_DC07:				; CODE XREF: seg001:30F8j
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jnz	short loc_DBEA

loc_DC10:				; CODE XREF: seg001:3115j
		pop	di
		pop	si
		pop	bp
		retn
; ---------------------------------------------------------------------------
		enter	2, 0
		push	si
		push	di
		mov	di, 3
		push	68h ; 'h'
		push	1
		call	sub_DAA6
		mov	byte ptr [bp-1], 0B8h ;	'¸'
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		jmp	short loc_DC53
; ---------------------------------------------------------------------------

loc_DC35:				; CODE XREF: seg001:316Aj
		lea	ax, [si+0Ah]
		push	ax
		push	word ptr [bp-1]
		call	sub_11DCA
		mov	word ptr [si+0Eh], 22h ; '"'
		mov	byte ptr [si+10h], 8
		mov	al, [bp-1]
		add	al, 8
		mov	[bp-1],	al
		dec	di
		jle	short loc_DC5C

loc_DC53:				; CODE XREF: seg001:3143j
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jnz	short loc_DC35

loc_DC5C:				; CODE XREF: seg001:3161j
		pop	di
		pop	si
		leave
		retn
; ---------------------------------------------------------------------------
		enter	2, 0
		push	si
		push	di
		mov	di, 3
		push	80h ; ''
		push	2
		call	sub_DAA6
		mov	byte ptr [bp-1], 0B8h ;	'¸'
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		jmp	short loc_DCA0
; ---------------------------------------------------------------------------

loc_DC82:				; CODE XREF: seg001:31B7j
		lea	ax, [si+0Ah]
		push	ax
		push	word ptr [bp-1]
		call	sub_11DCA
		mov	word ptr [si+0Eh], 22h ; '"'
		mov	byte ptr [si+10h], 8
		mov	al, [bp-1]
		add	al, 8
		mov	[bp-1],	al
		dec	di
		jle	short loc_DCA9

loc_DCA0:				; CODE XREF: seg001:3190j
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jnz	short loc_DC82

loc_DCA9:				; CODE XREF: seg001:31AEj
		pop	di
		pop	si
		leave
		retn
; ---------------------------------------------------------------------------
		enter	2, 0
		push	si
		push	di
		mov	di, 3
		push	90h ; ''
		push	3
		call	sub_DAA6
		mov	byte ptr [bp-1], 0B8h ;	'¸'
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		jmp	short loc_DCED
; ---------------------------------------------------------------------------

loc_DCCF:				; CODE XREF: seg001:3204j
		lea	ax, [si+0Ah]
		push	ax
		push	word ptr [bp-1]
		call	sub_11DCA
		mov	word ptr [si+0Eh], 22h ; '"'
		mov	byte ptr [si+10h], 8
		mov	al, [bp-1]
		add	al, 8
		mov	[bp-1],	al
		dec	di
		jle	short loc_DCF6

loc_DCED:				; CODE XREF: seg001:31DDj
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jnz	short loc_DCCF

loc_DCF6:				; CODE XREF: seg001:31FBj
		pop	di
		pop	si
		leave
		retn
; ---------------------------------------------------------------------------
		enter	2, 0
		push	si
		push	di
		mov	di, 5
		push	0A8h ; '¨'
		push	3
		call	sub_DAA6
		mov	byte ptr [bp-1], 0B4h ;	'´'
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		jmp	short loc_DD3A
; ---------------------------------------------------------------------------

loc_DD1C:				; CODE XREF: seg001:3251j
		lea	ax, [si+0Ah]
		push	ax
		push	word ptr [bp-1]
		call	sub_11DCA
		mov	word ptr [si+0Eh], 22h ; '"'
		mov	byte ptr [si+10h], 7
		mov	al, [bp-1]
		add	al, 6
		mov	[bp-1],	al
		dec	di
		jle	short loc_DD43

loc_DD3A:				; CODE XREF: seg001:322Aj
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jnz	short loc_DD1C

loc_DD43:				; CODE XREF: seg001:3248j
		pop	di
		pop	si
		leave
		retn
; ---------------------------------------------------------------------------
		enter	2, 0
		push	si
		push	di
		mov	di, 5
		push	0C0h ; 'À'
		push	4
		call	sub_DAA6
		mov	byte ptr [bp-1], 0B4h ;	'´'
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		jmp	short loc_DD87
; ---------------------------------------------------------------------------

loc_DD69:				; CODE XREF: seg001:329Ej
		lea	ax, [si+0Ah]
		push	ax
		push	word ptr [bp-1]
		call	sub_11DCA
		mov	word ptr [si+0Eh], 22h ; '"'
		mov	byte ptr [si+10h], 7
		mov	al, [bp-1]
		add	al, 6
		mov	[bp-1],	al
		dec	di
		jle	short loc_DD90

loc_DD87:				; CODE XREF: seg001:3277j
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jnz	short loc_DD69

loc_DD90:				; CODE XREF: seg001:3295j
		pop	di
		pop	si
		leave
		retn
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	di, 3
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		jmp	short loc_DDEA
; ---------------------------------------------------------------------------

loc_DDA9:				; CODE XREF: seg001:3301j
		cmp	di, 1
		jg	short loc_DDC8
		mov	word ptr [si+0Eh], 22h ; '"'
		lea	ax, [si+0Ah]
		push	ax
		push	7
		call	sub_BC7E
		add	al, 0BCh ; '¼'
		push	ax
		call	sub_11DCA
		mov	byte ptr [si+10h], 0Ah
		jmp	short loc_DDE7
; ---------------------------------------------------------------------------

loc_DDC8:				; CODE XREF: seg001:32BCj
		cmp	di, 3
		jnz	short loc_DDD4
		sub	word ptr [si+2], 180h
		jmp	short loc_DDD9
; ---------------------------------------------------------------------------

loc_DDD4:				; CODE XREF: seg001:32DBj
		add	word ptr [si+2], 180h

loc_DDD9:				; CODE XREF: seg001:32E2j
		mov	word ptr [si+0Eh], 24h ; '$'
		mov	word ptr [si+0Ch], 0FF00h
		mov	byte ptr [si+10h], 6

loc_DDE7:				; CODE XREF: seg001:32D6j
		dec	di
		jle	short loc_DDF3

loc_DDEA:				; CODE XREF: seg001:32B7j
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jnz	short loc_DDA9

loc_DDF3:				; CODE XREF: seg001:32F8j
		pop	di
		pop	si
		pop	bp
		retn
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	di, 4
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		jmp	short loc_DE4F
; ---------------------------------------------------------------------------

loc_DE0C:				; CODE XREF: seg001:3366j
		cmp	di, 2
		jg	short loc_DE2D
		cmp	di, 2
		jnz	short loc_DE1D
		sub	word ptr [si+2], 80h ; ''
		jmp	short loc_DE22
; ---------------------------------------------------------------------------

loc_DE1D:				; CODE XREF: seg001:3324j
		add	word ptr [si+2], 80h ; ''

loc_DE22:				; CODE XREF: seg001:332Bj
		mov	word ptr [si+0Eh], 22h ; '"'
		mov	byte ptr [si+10h], 9
		jmp	short loc_DE4C
; ---------------------------------------------------------------------------

loc_DE2D:				; CODE XREF: seg001:331Fj
		cmp	di, 4
		jnz	short loc_DE39
		sub	word ptr [si+2], 180h
		jmp	short loc_DE3E
; ---------------------------------------------------------------------------

loc_DE39:				; CODE XREF: seg001:3340j
		add	word ptr [si+2], 180h

loc_DE3E:				; CODE XREF: seg001:3347j
		mov	word ptr [si+0Eh], 24h ; '$'
		mov	word ptr [si+0Ch], 0FF00h
		mov	byte ptr [si+10h], 6

loc_DE4C:				; CODE XREF: seg001:333Bj
		dec	di
		jle	short loc_DE58

loc_DE4F:				; CODE XREF: seg001:331Aj
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jnz	short loc_DE0C

loc_DE58:				; CODE XREF: seg001:335Dj
		pop	di
		pop	si
		pop	bp
		retn
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	di, 4
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		jmp	short loc_DEC9
; ---------------------------------------------------------------------------

loc_DE71:				; CODE XREF: seg001:33E0j
		cmp	di, 2
		jg	short loc_DE92
		cmp	di, 2
		jnz	short loc_DE82
		sub	word ptr [si+2], 80h ; ''
		jmp	short loc_DE87
; ---------------------------------------------------------------------------

loc_DE82:				; CODE XREF: seg001:3389j
		add	word ptr [si+2], 80h ; ''

loc_DE87:				; CODE XREF: seg001:3390j
		mov	word ptr [si+0Eh], 22h ; '"'
		mov	byte ptr [si+10h], 9
		jmp	short loc_DEC6
; ---------------------------------------------------------------------------

loc_DE92:				; CODE XREF: seg001:3384j
		cmp	di, 4
		jnz	short loc_DE9E
		sub	word ptr [si+2], 180h
		jmp	short loc_DEA3
; ---------------------------------------------------------------------------

loc_DE9E:				; CODE XREF: seg001:33A5j
		add	word ptr [si+2], 180h

loc_DEA3:				; CODE XREF: seg001:33ACj
		mov	word ptr [si+0Eh], 24h ; '$'
		push	ds
		lea	ax, [si+0Ah]
		push	ax
		push	ds
		lea	ax, [si+0Ch]
		push	ax
		push	7
		call	sub_BC7E
		add	al, 0BCh ; '¼'
		push	ax
		push	100h
		call	sub_13117
		mov	byte ptr [si+10h], 6

loc_DEC6:				; CODE XREF: seg001:33A0j
		dec	di
		jle	short loc_DED2

loc_DEC9:				; CODE XREF: seg001:337Fj
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jnz	short loc_DE71

loc_DED2:				; CODE XREF: seg001:33D7j
		pop	di
		pop	si
		pop	bp
		retn
; ---------------------------------------------------------------------------
		enter	2, 0
		push	si
		push	di
		mov	di, 5
		mov	byte ptr [bp-1], 0B8h ;	'¸'
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		jmp	short loc_DF49
; ---------------------------------------------------------------------------

loc_DEF0:				; CODE XREF: seg001:3460j
		cmp	di, 3
		jg	short loc_DF12
		mov	word ptr [si+0Eh], 22h ; '"'
		lea	ax, [si+0Ah]
		push	ax
		push	word ptr [bp-1]
		call	sub_11DCA
		mov	byte ptr [si+10h], 9
		mov	al, [bp-1]
		add	al, 8
		mov	[bp-1],	al
		jmp	short loc_DF46
; ---------------------------------------------------------------------------

loc_DF12:				; CODE XREF: seg001:3403j
		cmp	di, 5
		jnz	short loc_DF1E
		sub	word ptr [si+2], 180h
		jmp	short loc_DF23
; ---------------------------------------------------------------------------

loc_DF1E:				; CODE XREF: seg001:3425j
		add	word ptr [si+2], 180h

loc_DF23:				; CODE XREF: seg001:342Cj
		push	ds
		lea	ax, [si+0Ah]
		push	ax
		push	ds
		lea	ax, [si+0Ch]
		push	ax
		push	7
		call	sub_BC7E
		add	al, 0BCh ; '¼'
		push	ax
		push	100h
		call	sub_13117
		mov	word ptr [si+0Eh], 24h ; '$'
		mov	byte ptr [si+10h], 5

loc_DF46:				; CODE XREF: seg001:3420j
		dec	di
		jle	short loc_DF52

loc_DF49:				; CODE XREF: seg001:33FEj
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jnz	short loc_DEF0

loc_DF52:				; CODE XREF: seg001:3457j
		pop	di
		pop	si
		leave
		retn
; ---------------------------------------------------------------------------
		enter	4, 0
		push	si
		push	di
		mov	di, 7
		mov	byte ptr [bp-3], 0B8h ;	'¸'
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		jmp	short loc_DFD4
; ---------------------------------------------------------------------------

loc_DF70:				; CODE XREF: seg001:34EBj
		cmp	di, 3
		jg	short loc_DF92
		mov	word ptr [si+0Eh], 22h ; '"'
		lea	ax, [si+0Ah]
		push	ax
		push	word ptr [bp-3]
		call	sub_11DCA
		mov	byte ptr [si+10h], 9
		mov	al, [bp-3]
		add	al, 8
		mov	[bp-3],	al
		jmp	short loc_DFD1
; ---------------------------------------------------------------------------

loc_DF92:				; CODE XREF: seg001:3483j
		mov	bx, di
		sub	bx, 4
		cmp	bx, 3
		ja	short loc_DFBD
		add	bx, bx
		jmp	cs:off_DFE2[bx]

loc_DFA3:				; DATA XREF: seg001:34F8o
		mov	word ptr [bp-2], 0FE00h
		jmp	short loc_DFBD
; ---------------------------------------------------------------------------

loc_DFAA:				; CODE XREF: seg001:34AEj
					; DATA XREF: seg001:34F6o
		mov	word ptr [bp-2], 0FF00h
		jmp	short loc_DFBD
; ---------------------------------------------------------------------------

loc_DFB1:				; CODE XREF: seg001:34AEj
					; DATA XREF: seg001:34F4o
		mov	word ptr [bp-2], 200h
		jmp	short loc_DFBD
; ---------------------------------------------------------------------------

loc_DFB8:				; CODE XREF: seg001:34AEj
					; DATA XREF: seg001:off_DFE2o
		mov	word ptr [bp-2], 100h

loc_DFBD:				; CODE XREF: seg001:34AAj seg001:34B8j ...
		mov	ax, [bp-2]
		sub	[si+2],	ax
		mov	word ptr [si+0Eh], 24h ; '$'
		mov	word ptr [si+0Ch], 0FF00h
		mov	byte ptr [si+10h], 5

loc_DFD1:				; CODE XREF: seg001:34A0j
		dec	di
		jle	short loc_DFDD

loc_DFD4:				; CODE XREF: seg001:347Ej
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jnz	short loc_DF70

loc_DFDD:				; CODE XREF: seg001:34E2j
		pop	di
		pop	si
		leave
		retn
; ---------------------------------------------------------------------------
		db    0
off_DFE2	dw offset loc_DFB8	; DATA XREF: seg001:34AEr
		dw offset loc_DFB1
		dw offset loc_DFAA
		dw offset loc_DFA3

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_DFEA	proc near

var_3		= word ptr -3

		enter	4, 0
		push	si
		push	di
		mov	di, 7
		mov	byte ptr [bp+var_3], 0B6h ; '¶'
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		jmp	short loc_E068
; ---------------------------------------------------------------------------

loc_E004:				; CODE XREF: sub_DFEA+85j
		cmp	di, 3
		jg	short loc_E026
		mov	word ptr [si+0Eh], 22h ; '"'
		lea	ax, [si+0Ah]
		push	ax
		push	[bp+var_3]
		call	sub_11DCA
		mov	byte ptr [si+10h], 8
		mov	al, byte ptr [bp+var_3]
		add	al, 0Ah
		mov	byte ptr [bp+var_3], al
		jmp	short loc_E065
; ---------------------------------------------------------------------------

loc_E026:				; CODE XREF: sub_DFEA+1Dj
		mov	bx, di
		sub	bx, 4
		cmp	bx, 3
		ja	short loc_E051
		add	bx, bx
		jmp	cs:off_E076[bx]

loc_E037:				; DATA XREF: seg001:358Co
		mov	[bp+var_3+1], 0FE00h
		jmp	short loc_E051
; ---------------------------------------------------------------------------

loc_E03E:				; CODE XREF: sub_DFEA+48j
					; DATA XREF: seg001:358Ao
		mov	[bp+var_3+1], 0FF00h
		jmp	short loc_E051
; ---------------------------------------------------------------------------

loc_E045:				; CODE XREF: sub_DFEA+48j
					; DATA XREF: seg001:3588o
		mov	[bp+var_3+1], 200h
		jmp	short loc_E051
; ---------------------------------------------------------------------------

loc_E04C:				; CODE XREF: sub_DFEA+48j
					; DATA XREF: seg001:off_E076o
		mov	[bp+var_3+1], 100h

loc_E051:				; CODE XREF: sub_DFEA+44j sub_DFEA+52j ...
		mov	ax, [bp+var_3+1]
		sub	[si+2],	ax
		mov	word ptr [si+0Eh], 24h ; '$'
		mov	word ptr [si+0Ch], 0FF00h
		mov	byte ptr [si+10h], 5

loc_E065:				; CODE XREF: sub_DFEA+3Aj
		dec	di
		jle	short loc_E071

loc_E068:				; CODE XREF: sub_DFEA+18j
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jnz	short loc_E004

loc_E071:				; CODE XREF: sub_DFEA+7Cj
		pop	di
		pop	si
		leave
		retn
sub_DFEA	endp

; ---------------------------------------------------------------------------
		db    0
off_E076	dw offset loc_E04C	; DATA XREF: sub_DFEA+48r
		dw offset loc_E045
		dw offset loc_E03E
		dw offset loc_E037

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_E07E	proc near

var_3		= word ptr -3

		enter	4, 0
		push	si
		push	di
		mov	di, 8
		mov	byte ptr [bp+var_3], 0B6h ; '¶'
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		jmp	loc_E118
; ---------------------------------------------------------------------------

loc_E099:				; CODE XREF: sub_E07E+A1j
		cmp	di, 4
		jg	short loc_E0D6
		cmp	di, 3
		jnz	short loc_E0AA
		sub	word ptr [si+2], 80h ; ''
		jmp	short loc_E0B4
; ---------------------------------------------------------------------------

loc_E0AA:				; CODE XREF: sub_E07E+23j
		cmp	di, 2
		jnz	short loc_E0B4
		add	word ptr [si+2], 80h ; ''

loc_E0B4:				; CODE XREF: sub_E07E+2Aj sub_E07E+2Fj
		mov	word ptr [si+0Eh], 22h ; '"'
		lea	ax, [si+0Ah]
		push	ax
		push	[bp+var_3]
		call	sub_11DCA
		mov	byte ptr [si+10h], 8
		cmp	di, 3
		jz	short loc_E115
		mov	al, byte ptr [bp+var_3]
		add	al, 0Ah
		mov	byte ptr [bp+var_3], al
		jmp	short loc_E115
; ---------------------------------------------------------------------------

loc_E0D6:				; CODE XREF: sub_E07E+1Ej
		mov	bx, di
		sub	bx, 5
		cmp	bx, 3
		ja	short loc_E101
		add	bx, bx
		jmp	cs:off_E128[bx]

loc_E0E7:				; DATA XREF: seg001:363Eo
		mov	[bp+var_3+1], 0FE00h
		jmp	short loc_E101
; ---------------------------------------------------------------------------

loc_E0EE:				; CODE XREF: sub_E07E+64j
					; DATA XREF: seg001:363Co
		mov	[bp+var_3+1], 0FF00h
		jmp	short loc_E101
; ---------------------------------------------------------------------------

loc_E0F5:				; CODE XREF: sub_E07E+64j
					; DATA XREF: seg001:363Ao
		mov	[bp+var_3+1], 200h
		jmp	short loc_E101
; ---------------------------------------------------------------------------

loc_E0FC:				; CODE XREF: sub_E07E+64j
					; DATA XREF: seg001:off_E128o
		mov	[bp+var_3+1], 100h

loc_E101:				; CODE XREF: sub_E07E+60j sub_E07E+6Ej ...
		mov	ax, [bp+var_3+1]
		sub	[si+2],	ax
		mov	word ptr [si+0Eh], 24h ; '$'
		mov	word ptr [si+0Ch], 0FF00h
		mov	byte ptr [si+10h], 5

loc_E115:				; CODE XREF: sub_E07E+4Cj sub_E07E+56j
		dec	di
		jle	short loc_E123

loc_E118:				; CODE XREF: sub_E07E+18j
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jnz	loc_E099

loc_E123:				; CODE XREF: sub_E07E+98j
		pop	di
		pop	si
		leave
		retn
sub_E07E	endp

; ---------------------------------------------------------------------------
		db    0
off_E128	dw offset loc_E0FC	; DATA XREF: sub_E07E+64r
		dw offset loc_E0F5
		dw offset loc_E0EE
		dw offset loc_E0E7

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_E130	proc near

var_3		= word ptr -3

		enter	4, 0
		push	si
		push	di
		mov	di, 0Ah
		mov	byte ptr [bp+var_3], 0B6h ; '¶'
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		jmp	loc_E1D8
; ---------------------------------------------------------------------------

loc_E14B:				; CODE XREF: sub_E130+AFj
		cmp	di, 4
		jg	short loc_E188
		cmp	di, 3
		jnz	short loc_E15C
		sub	word ptr [si+2], 80h ; ''
		jmp	short loc_E166
; ---------------------------------------------------------------------------

loc_E15C:				; CODE XREF: sub_E130+23j
		cmp	di, 2
		jnz	short loc_E166
		add	word ptr [si+2], 80h ; ''

loc_E166:				; CODE XREF: sub_E130+2Aj sub_E130+2Fj
		mov	word ptr [si+0Eh], 22h ; '"'
		lea	ax, [si+0Ah]
		push	ax
		push	[bp+var_3]
		call	sub_11DCA
		mov	byte ptr [si+10h], 8
		cmp	di, 3
		jz	short loc_E1D5
		mov	al, byte ptr [bp+var_3]
		add	al, 0Ah
		mov	byte ptr [bp+var_3], al
		jmp	short loc_E1D5
; ---------------------------------------------------------------------------

loc_E188:				; CODE XREF: sub_E130+1Ej
		mov	bx, di
		sub	bx, 5
		cmp	bx, 5
		ja	short loc_E1C1
		add	bx, bx
		jmp	cs:off_E1E8[bx]

loc_E199:				; DATA XREF: seg001:3702o
		mov	[bp+var_3+1], 0FD00h
		jmp	short loc_E1C1
; ---------------------------------------------------------------------------

loc_E1A0:				; CODE XREF: sub_E130+64j
					; DATA XREF: seg001:3700o
		mov	[bp+var_3+1], 0FE00h
		jmp	short loc_E1C1
; ---------------------------------------------------------------------------

loc_E1A7:				; CODE XREF: sub_E130+64j
					; DATA XREF: seg001:36FEo
		mov	[bp+var_3+1], 0FF00h
		jmp	short loc_E1C1
; ---------------------------------------------------------------------------

loc_E1AE:				; CODE XREF: sub_E130+64j
					; DATA XREF: seg001:36FCo
		mov	[bp+var_3+1], 300h
		jmp	short loc_E1C1
; ---------------------------------------------------------------------------

loc_E1B5:				; CODE XREF: sub_E130+64j
					; DATA XREF: seg001:36FAo
		mov	[bp+var_3+1], 200h
		jmp	short loc_E1C1
; ---------------------------------------------------------------------------

loc_E1BC:				; CODE XREF: sub_E130+64j
					; DATA XREF: seg001:off_E1E8o
		mov	[bp+var_3+1], 100h

loc_E1C1:				; CODE XREF: sub_E130+60j sub_E130+6Ej ...
		mov	ax, [bp+var_3+1]
		sub	[si+2],	ax
		mov	word ptr [si+0Eh], 24h ; '$'
		mov	word ptr [si+0Ch], 0FF00h
		mov	byte ptr [si+10h], 4

loc_E1D5:				; CODE XREF: sub_E130+4Cj sub_E130+56j
		dec	di
		jle	short loc_E1E3

loc_E1D8:				; CODE XREF: sub_E130+18j
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jnz	loc_E14B

loc_E1E3:				; CODE XREF: sub_E130+A6j
		pop	di
		pop	si
		leave
		retn
sub_E130	endp

; ---------------------------------------------------------------------------
		db    0
off_E1E8	dw offset loc_E1BC	; DATA XREF: sub_E130+64r
		dw offset loc_E1B5
		dw offset loc_E1AE
		dw offset loc_E1A7
		dw offset loc_E1A0
		dw offset loc_E199

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_E1F4	proc near		; CODE XREF: sub_10552+14p
		push	bp
		mov	bp, sp
		push	si
		push	di
		cmp	word_25608, 20h	; ' '
		jbe	loc_E2B4
		mov	al, byte_2560A
		mov	ah, 0
		mov	bx, ax
		cmp	bx, 4
		ja	short loc_E276
		add	bx, bx
		jmp	cs:off_E2B9[bx]

loc_E215:				; DATA XREF: seg001:37CBo
		cmp	word_25608, 28h	; '('
		ja	short loc_E262
		jmp	short loc_E257
; ---------------------------------------------------------------------------

loc_E21E:				; CODE XREF: sub_E1F4+1Cj
					; DATA XREF: seg001:37CDo
		cmp	word_25608, 28h	; '('
		ja	short loc_E227
		jmp	short loc_E257
; ---------------------------------------------------------------------------

loc_E227:				; CODE XREF: sub_E1F4+2Fj
		cmp	word_25608, 30h	; '0'
		ja	short loc_E26E
		jmp	short loc_E262
; ---------------------------------------------------------------------------

loc_E230:				; CODE XREF: sub_E1F4+1Cj
					; DATA XREF: seg001:37CFo
		cmp	word_25608, 28h	; '('
		ja	short loc_E239
		jmp	short loc_E257
; ---------------------------------------------------------------------------

loc_E239:				; CODE XREF: sub_E1F4+41j
		cmp	word_25608, 30h	; '0'
		ja	short loc_E242
		jmp	short loc_E262
; ---------------------------------------------------------------------------

loc_E242:				; CODE XREF: sub_E1F4+4Aj
		cmp	word_25608, 38h	; '8'
		ja	short loc_E24B
		jmp	short loc_E26E
; ---------------------------------------------------------------------------

loc_E24B:				; CODE XREF: sub_E1F4+53j
		mov	di, 3
		jmp	short loc_E276
; ---------------------------------------------------------------------------

loc_E250:				; CODE XREF: sub_E1F4+1Cj
					; DATA XREF: seg001:37D1o
		cmp	word_25608, 28h	; '('
		ja	short loc_E25B

loc_E257:				; CODE XREF: sub_E1F4+1Cj sub_E1F4+28j ...
		xor	di, di
		jmp	short loc_E276
; ---------------------------------------------------------------------------

loc_E25B:				; CODE XREF: sub_E1F4+61j
		cmp	word_25608, 30h	; '0'
		ja	short loc_E267

loc_E262:				; CODE XREF: sub_E1F4+26j sub_E1F4+3Aj ...
		mov	di, 1
		jmp	short loc_E276
; ---------------------------------------------------------------------------

loc_E267:				; CODE XREF: sub_E1F4+6Cj
		cmp	word_25608, 38h	; '8'
		ja	short loc_E273

loc_E26E:				; CODE XREF: sub_E1F4+38j sub_E1F4+55j
		mov	di, 2
		jmp	short loc_E276
; ---------------------------------------------------------------------------

loc_E273:				; CODE XREF: sub_E1F4+78j
		mov	di, 4

loc_E276:				; CODE XREF: sub_E1F4+18j sub_E1F4+5Aj ...
		mov	al, byte_266CC
		add	al, 8
		mov	ah, al
		call	sub_C162
		mov	si, word ptr dword_2560C+2
		push	100h
		call	sub_BC10
		mov	dx, ax
		mov	ax, word ptr dword_2560C
		sar	ax, 4
		add	ax, 4
		mov	bx, di
		call	sub_BE68
		mov	si, word ptr dword_2560C+2
		push	100h
		call	sub_BC10
		mov	dx, ax
		mov	ax, word ptr dword_2560C
		sar	ax, 4
		add	ax, 34h	; '4'
		mov	bx, di
		call	sub_BE68

loc_E2B4:				; CODE XREF: sub_E1F4+Aj
		pop	di
		pop	si
		pop	bp
		retn
sub_E1F4	endp

; ---------------------------------------------------------------------------
		db 0
off_E2B9	dw offset loc_E257	; DATA XREF: sub_E1F4+1Cr
		dw offset loc_E215
		dw offset loc_E21E
		dw offset loc_E230
		dw offset loc_E250

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_E2C3	proc near		; CODE XREF: sub_E8A3+1C5p
					; seg001:729Cp	...

var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2

		push	bp
		mov	bp, sp
		sub	sp, 0Ah
		push	si
		push	di
		mov	si, 42F0h
		mov	[bp+var_2], 0
		jmp	loc_E44F
; ---------------------------------------------------------------------------

loc_E2D6:				; CODE XREF: sub_E2C3+190j
		cmp	byte ptr [si], 0
		jz	loc_E449
		cmp	byte ptr [si], 1
		jnz	short loc_E316
		mov	ax, [si+2]
		sar	ax, 4
		add	ax, 20h	; ' '
		mov	[bp+var_4], ax
		mov	ax, [si+4]
		sar	ax, 4
		add	ax, 10h
		mov	[bp+var_6], ax
		push	large 0C0000Fh
		call	sub_1744
		push	[bp+var_4]
		push	[bp+var_6]
		push	17Fh
		call	sub_1774
		jmp	loc_E449
; ---------------------------------------------------------------------------

loc_E316:				; CODE XREF: sub_E2C3+1Dj
		mov	ax, [si+2]
		sar	ax, 4
		add	ax, 20h	; ' '
		mov	[bp+var_4], ax
		mov	ax, [si+4]
		sar	ax, 4
		add	ax, [si+14h]
		add	ax, 10h
		mov	[bp+var_6], ax
		mov	ax, [bp+var_4]
		sub	ax, [si+14h]
		mov	[bp+var_8], ax
		mov	ax, [si+14h]
		add	ax, [bp+var_4]
		mov	[bp+var_A], ax
		mov	ax, [si+14h]
		mov	bx, 4
		cwd
		idiv	bx
		mov	di, ax
		cmp	di, 10h
		jle	short loc_E356
		mov	di, 10h

loc_E356:				; CODE XREF: sub_E2C3+8Ej
		mov	ax, di
		cwd
		sub	ax, dx
		sar	ax, 1
		or	ax, ax
		jz	short loc_E3B1
		push	0C0h ; 'À'
		mov	al, [si+10h]
		mov	ah, 0
		push	ax
		call	sub_1744
		push	[bp+var_4]
		push	[bp+var_6]
		push	word ptr [si+14h]
		call	sub_114C
		push	[bp+var_8]
		push	[bp+var_6]
		mov	ax, di
		cwd
		sub	ax, dx
		sar	ax, 1
		add	ax, [bp+var_8]
		push	ax
		push	17Fh
		call	sub_107C
		mov	ax, di
		cwd
		sub	ax, dx
		sar	ax, 1
		mov	dx, [bp+var_A]
		sub	dx, ax
		push	dx
		push	[bp+var_6]
		push	[bp+var_A]
		push	17Fh
		call	sub_107C

loc_E3B1:				; CODE XREF: sub_E2C3+9Cj
		or	di, di
		jz	short loc_E416
		push	0C0h ; 'À'
		mov	al, [si+10h]
		mov	ah, 0
		inc	ax
		push	ax
		call	sub_1744
		push	[bp+var_4]
		push	[bp+var_6]
		mov	ax, di
		cwd
		sub	ax, dx
		sar	ax, 1
		mov	dx, [si+14h]
		sub	dx, ax
		push	dx
		call	sub_114C
		mov	ax, di
		cwd
		sub	ax, dx
		sar	ax, 1
		add	ax, [bp+var_8]
		push	ax
		push	[bp+var_6]
		mov	ax, [bp+var_8]
		add	ax, di
		push	ax
		push	17Fh
		call	sub_107C
		mov	ax, [bp+var_A]
		sub	ax, di
		push	ax
		push	[bp+var_6]
		mov	ax, di
		cwd
		sub	ax, dx
		sar	ax, 1
		mov	dx, [bp+var_A]
		sub	dx, ax
		push	dx
		push	17Fh
		call	sub_107C

loc_E416:				; CODE XREF: sub_E2C3+F0j
		add	[bp+var_8], di
		sub	[bp+var_A], di
		push	large 0C0000Fh
		call	sub_1744
		push	[bp+var_4]
		push	[bp+var_6]
		mov	ax, [si+14h]
		sub	ax, di
		push	ax
		call	sub_114C
		push	[bp+var_8]
		push	[bp+var_6]
		push	[bp+var_A]
		push	17Fh
		call	sub_107C

loc_E449:				; CODE XREF: sub_E2C3+16j sub_E2C3+50j
		inc	[bp+var_2]
		add	si, 18h

loc_E44F:				; CODE XREF: sub_E2C3+10j
		cmp	[bp+var_2], 2
		jl	loc_E2D6
		mov	dx, 7Ch	; '|'
		mov	al, 0
		out	dx, al
		pop	di
		pop	si
		leave
		retn
sub_E2C3	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_E461	proc near		; CODE XREF: sub_E541:loc_E571p
					; sub_E541:loc_E63Fp

var_1		= byte ptr -1

		enter	2, 0
		push	si
		push	di
		cmp	byte_25660, 24h	; '$'
		jb	short loc_E47B
		call	sub_10D4B
		mov	word_259DC, 11BEh
		mov	al, 1
		jmp	short loc_E4CD
; ---------------------------------------------------------------------------

loc_E47B:				; CODE XREF: sub_E461+Bj
		mov	al, byte_25660
		mov	ah, 0
		mov	bx, 4
		cwd
		idiv	bx
		or	dx, dx
		jnz	short loc_E4C7
		mov	al, byte_25660
		mov	ah, 0
		cwd
		idiv	bx
		mov	[bp+var_1], al
		cmp	[bp+var_1], 0
		jz	short loc_E4C7
		mov	si, 1
		jmp	short loc_E4C2
; ---------------------------------------------------------------------------

loc_E4A0:				; CODE XREF: sub_E461+64j
		mov	di, 4
		jmp	short loc_E4BC
; ---------------------------------------------------------------------------

loc_E4A5:				; CODE XREF: sub_E461+5Ej
		push	di
		push	si
		mov	al, [bp+var_1]
		mov	ah, 0
		mov	dx, 40h	; '@'
		sub	dx, ax
		push	dx
		push	1
		call	sub_1B0C
		add	di, 2

loc_E4BC:				; CODE XREF: sub_E461+42j
		cmp	di, 34h	; '4'
		jl	short loc_E4A5
		inc	si

loc_E4C2:				; CODE XREF: sub_E461+3Dj
		cmp	si, 18h
		jl	short loc_E4A0

loc_E4C7:				; CODE XREF: sub_E461+27j sub_E461+38j
		inc	byte_25660
		mov	al, 0

loc_E4CD:				; CODE XREF: sub_E461+18j
		pop	di
		pop	si
		leave
		retn
sub_E461	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_E4D1	proc near		; CODE XREF: sub_E541:loc_E556p
					; sub_E541:loc_E61Ep

var_1		= byte ptr -1

		enter	2, 0
		push	si
		push	di
		cmp	byte_25660, 0
		jnz	short loc_E4EB
		call	sub_10D77
		mov	word_259DC, 11BEh
		mov	al, 1
		jmp	short loc_E53D
; ---------------------------------------------------------------------------

loc_E4EB:				; CODE XREF: sub_E4D1+Bj
		dec	byte_25660
		mov	al, byte_25660
		mov	ah, 0
		mov	bx, 4
		cwd
		idiv	bx
		or	dx, dx
		jnz	short loc_E53B
		mov	al, byte_25660
		mov	ah, 0
		cwd
		idiv	bx
		mov	[bp+var_1], al
		cmp	[bp+var_1], 0
		jz	short loc_E53B
		mov	si, 1
		jmp	short loc_E536
; ---------------------------------------------------------------------------

loc_E514:				; CODE XREF: sub_E4D1+68j
		mov	di, 4
		jmp	short loc_E530
; ---------------------------------------------------------------------------

loc_E519:				; CODE XREF: sub_E4D1+62j
		push	di
		push	si
		mov	al, [bp+var_1]
		mov	ah, 0
		mov	dx, 40h	; '@'
		sub	dx, ax
		push	dx
		push	1
		call	sub_1B0C
		add	di, 2

loc_E530:				; CODE XREF: sub_E4D1+46j
		cmp	di, 34h	; '4'
		jl	short loc_E519
		inc	si

loc_E536:				; CODE XREF: sub_E4D1+41j
		cmp	si, 18h
		jl	short loc_E514

loc_E53B:				; CODE XREF: sub_E4D1+2Bj sub_E4D1+3Cj
		mov	al, 0

loc_E53D:				; CODE XREF: sub_E4D1+18j
		pop	di
		pop	si
		leave
		retn
sub_E4D1	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_E541	proc near		; CODE XREF: sub_10988:loc_10AB7p

var_2		= word ptr -2

		enter	2, 0
		cmp	byte_266D4, 5
		jnz	short loc_E551
		nop
		push	cs
		call	near ptr sub_B7E4

loc_E551:				; CODE XREF: sub_E541+9j
		mov	byte_25660, 20h	; ' '

loc_E556:				; CODE XREF: sub_E541+23j
		call	sub_E4D1
		or	al, al
		jnz	short loc_E566
		push	1
		call	sub_131B7
		jmp	short loc_E556
; ---------------------------------------------------------------------------

loc_E566:				; CODE XREF: sub_E541+1Aj
		mov	word_216E4, 32h	; '2'
		call	far ptr	loc_1F04

loc_E571:				; CODE XREF: sub_E541+3Ej
		call	sub_E461
		or	al, al
		jnz	short loc_E581
		push	1
		call	sub_131B7
		jmp	short loc_E571
; ---------------------------------------------------------------------------

loc_E581:				; CODE XREF: sub_E541+35j
		mov	[bp+var_2], 32h	; '2'
		jmp	short loc_E5B5
; ---------------------------------------------------------------------------

loc_E588:				; CODE XREF: sub_E541+78j
		push	[bp+var_2]
		push	large 0C00B0h
		push	0E1h ; 'á'
		call	sub_1B0C
		push	1
		call	sub_131B7
		push	[bp+var_2]
		push	0Ch
		push	ds
		push	offset asc_22C3F ; "  "
		push	0E1h ; 'á'
		call	sub_22F6
		sub	[bp+var_2], 2

loc_E5B5:				; CODE XREF: sub_E541+45j
		cmp	[bp+var_2], 8
		jg	short loc_E588
		mov	[bp+var_2], 8
		jmp	short loc_E5EF
; ---------------------------------------------------------------------------

loc_E5C2:				; CODE XREF: sub_E541+B2j
		push	[bp+var_2]
		push	large 0C00B0h
		push	0E1h ; 'á'
		call	sub_1B0C
		push	1
		call	sub_131B7
		push	[bp+var_2]
		push	0Ch
		push	ds
		push	offset asc_22C42 ; "  "
		push	0E1h ; 'á'
		call	sub_22F6
		add	[bp+var_2], 2

loc_E5EF:				; CODE XREF: sub_E541+7Fj
		cmp	[bp+var_2], 14h
		jl	short loc_E5C2
		push	large 14000Ch
		push	ds
		push	offset aKOO	; "°ª¶®¸¿®»"
		push	0E1h ; 'á'
		call	sub_1B50
		push	0
		call	sub_13213
		call	sub_10D4B
		call	sub_E67A
		mov	ah, 0
		mov	[bp+var_2], ax
		mov	byte_25660, 20h	; ' '

loc_E61E:				; CODE XREF: sub_E541+EBj
		call	sub_E4D1
		or	al, al
		jnz	short loc_E62E
		push	1
		call	sub_131B7
		jmp	short loc_E61E
; ---------------------------------------------------------------------------

loc_E62E:				; CODE XREF: sub_E541+E2j
		cmp	[bp+var_2], 0
		jnz	short loc_E654
		mov	word_216E4, 64h	; 'd'
		call	far ptr	loc_1F04

loc_E63F:				; CODE XREF: sub_E541+10Cj
		call	sub_E461
		or	al, al
		jnz	short loc_E64F
		push	1
		call	sub_131B7
		jmp	short loc_E63F
; ---------------------------------------------------------------------------

loc_E64F:				; CODE XREF: sub_E541+103j
		call	sub_10D4B
		jmp	short loc_E675
; ---------------------------------------------------------------------------

loc_E654:				; CODE XREF: sub_E541+F1j
		les	bx, dword_2CDC6
		assume es:nothing
		mov	byte ptr es:[bx+30h], 0
		push	204h
		call	sub_133DC
		push	4
		call	sub_666
		push	ds
		push	offset aMaine_2	; "maine"
		nop
		push	cs
		call	near ptr sub_E7FD

loc_E675:				; CODE XREF: sub_E541+111j
		mov	al, byte ptr [bp+var_2]
		leave
		retn
sub_E541	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_E67A	proc near		; CODE XREF: sub_E541+D0p

var_2		= byte ptr -2
var_1		= byte ptr -1

		enter	2, 0
		push	si
		push	di
		cmp	byte_266D4, 6
		jz	loc_E7D8
		xor	di, di
		mov	si, 1
		mov	al, 3
		sub	al, byte_25689
		mov	[bp+var_2], al
		cmp	[bp+var_2], 0
		jz	loc_E7D8
		push	large 13000Ah
		push	ds
		push	offset aMO	; "¬¸·½²·¾®\b"
		push	0E1h ; 'á'
		call	sub_1B50
		push	large 18000Dh
		push	ds
		push	offset aO	; "Â®¼"
		push	85h ; ''
		call	sub_1B50
		push	large 19000Fh
		push	ds
		push	offset asc_22C35 ; "·¸"
		push	0E1h ; 'á'
		call	sub_1B50
		push	large 130016h
		push	ds
		push	offset aMOn	; "¬»®­²½"
		push	81h ; ''
		call	sub_1B50
		push	large 210016h
		mov	al, [bp+var_2]
		mov	ah, 0
		add	ax, 0A0h ; ' '
		push	ax
		push	81h ; ''
		call	sub_1B0C
		call	far ptr	sub_1379C

loc_E703:				; CODE XREF: sub_E67A+119j
		call	sub_137A4
		or	si, si
		jnz	short loc_E783
		mov	si, word_24CB4
		test	si, 1
		jnz	short loc_E71C
		test	si, 2
		jz	short loc_E76A

loc_E71C:				; CODE XREF: sub_E67A+9Aj
		mov	ax, 1
		sub	ax, di
		mov	di, ax
		or	di, di
		jnz	short loc_E72D
		mov	[bp+var_1], 85h	; ''
		jmp	short loc_E731
; ---------------------------------------------------------------------------

loc_E72D:				; CODE XREF: sub_E67A+ABj
		mov	[bp+var_1], 0E1h ; 'á'

loc_E731:				; CODE XREF: sub_E67A+B1j
		push	large 18000Dh
		push	ds
		push	offset aO	; "Â®¼"
		mov	al, [bp+var_1]
		mov	ah, 0
		push	ax
		call	sub_1B50
		cmp	di, 1
		jnz	short loc_E751
		mov	[bp+var_1], 85h	; ''
		jmp	short loc_E755
; ---------------------------------------------------------------------------

loc_E751:				; CODE XREF: sub_E67A+CFj
		mov	[bp+var_1], 0E1h ; 'á'

loc_E755:				; CODE XREF: sub_E67A+D5j
		push	large 19000Fh
		push	ds
		push	offset asc_22C35 ; "·¸"
		mov	al, [bp+var_1]
		mov	ah, 0
		push	ax
		call	sub_1B50

loc_E76A:				; CODE XREF: sub_E67A+A0j
		test	si, 1000h
		jz	short loc_E775
		mov	di, 1
		jmp	short loc_E796
; ---------------------------------------------------------------------------

loc_E775:				; CODE XREF: sub_E67A+F4j
		test	si, 2000h
		jnz	short loc_E796
		test	si, 20h
		jz	short loc_E787
		jmp	short loc_E796
; ---------------------------------------------------------------------------

loc_E783:				; CODE XREF: sub_E67A+90j
		mov	si, word_24CB4

loc_E787:				; CODE XREF: sub_E67A+105j
		call	far ptr	sub_1379C
		push	1
		call	sub_131B7
		jmp	loc_E703
; ---------------------------------------------------------------------------

loc_E796:				; CODE XREF: sub_E67A+F9j sub_E67A+FFj ...
		or	di, di
		jnz	short loc_E7D8
		call	sub_12CB5
		mov	byte_259A4, 1
		mov	byte_259B6, 0
		les	bx, dword_2CDC6
		mov	al, es:[bx+0Eh]
		mov	es:[bx+0Dh], al
		mov	al, es:[bx+0Ch]
		mov	es:[bx+0Bh], al
		nop
		push	cs
		call	near ptr sub_11DE6
		nop
		push	cs
		call	near ptr sub_EEE8
		nop
		push	cs
		call	near ptr sub_EFA1
		inc	byte_25689
		call	sub_EEB0
		call	sub_11692
		mov	al, 0
		jmp	short loc_E7DA
; ---------------------------------------------------------------------------

loc_E7D8:				; CODE XREF: sub_E67A+Bj sub_E67A+21j	...
		mov	al, 1

loc_E7DA:				; CODE XREF: sub_E67A+15Cj
		pop	di
		pop	si
		leave
		retn
sub_E67A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_E7DE	proc near		; CODE XREF: sub_E7FD+3p
		push	bp
		mov	bp, sp
		push	si
		xor	si, si
		jmp	short loc_E7F5
; ---------------------------------------------------------------------------

loc_E7E6:				; CODE XREF: sub_E7DE+1Aj
		mov	al, [si+4349h]
		les	bx, dword_2CDC6
		add	bx, si
		mov	es:[bx+1Dh], al
		inc	si

loc_E7F5:				; CODE XREF: sub_E7DE+6j
		cmp	si, 8
		jl	short loc_E7E6
		pop	si
		pop	bp
		retn
sub_E7DE	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	__far sub_E7FD(char *arg0)
sub_E7FD	proc far		; CODE XREF: _main+77p	seg001:0993p ...

_arg0		= dword	ptr  6

		push	bp
		mov	bp, sp
		call	sub_E7DE
		cmp	word_266DE, 0
		jz	short loc_E813
		push	word_266DE
		call	sub_41B4

loc_E813:				; CODE XREF: sub_E7FD+Bj
		les	bx, dword_2CDC6
		mov	ax, word_22BA8
		mov	es:[bx+26h], ax
		mov	ax, word_236D8
		mov	es:[bx+28h], ax
		mov	ax, word_236DA
		mov	es:[bx+2Ah], ax
		mov	ax, word_236DC
		mov	es:[bx+2Ch], ax
		mov	ax, word_236DE
		mov	es:[bx+2Eh], ax
		mov	ax, word_22E9E
		mov	es:[bx+34h], ax
		mov	ax, word_22EA0
		mov	es:[bx+36h], ax
		mov	eax, dword_22BA0
		mov	es:[bx+40h], eax
		mov	eax, dword_22BA4
		mov	es:[bx+44h], eax
		call	sub_1159B
		call	sub_13A8E
		call	sub_1DFD4
		call	sub_CF1E
		call	sub_FF89
		call	sub_B79E
		call	sub_B9BB
		call	sub_2748
		call	sub_1D4A
		call	sub_2254
		call	sub_1A5A
		call	sub_1361E
		push	large 0
		push	large [bp+_arg0]	; arg0
		push	large [bp+_arg0]	; path
		call	_execl
		add	sp, 0Ch
		pop	bp
		retf	4
sub_E7FD	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_E8A3	proc near

var_2		= word ptr -2

		enter	2, 0
		push	si
		push	di
		mov	ax, word ptr dword_2670A
		sar	ax, 4
		add	ax, 0FFF0h
		mov	si, ax
		mov	ax, word ptr dword_2670A+2
		sar	ax, 4
		add	ax, 0FFE0h
		mov	di, ax
		cmp	byte_26719, 0FEh ; 'þ'
		jnz	short loc_E8D8
		push	si
		push	ax
		mov	al, byte_26718
		mov	ah, 0
		push	ax
		push	3
		call	far ptr	loc_31A2
		jmp	loc_EA5B
; ---------------------------------------------------------------------------

loc_E8D8:				; CODE XREF: sub_E8A3+21j
		cmp	byte_26719, 1
		ja	short loc_E91D
		mov	ax, word ptr dword_2670A
		sar	ax, 4
		mov	si, ax
		mov	ax, word ptr dword_2670A+2
		sar	ax, 4
		add	ax, 0FFF0h
		mov	di, ax
		cmp	byte_2671C, 0
		jnz	short loc_E906
		push	si
		push	ax
		push	80h ; ''
		call	sub_2F54
		jmp	loc_EA5B
; ---------------------------------------------------------------------------

loc_E906:				; CODE XREF: sub_E8A3+54j
		push	si
		push	di
		push	large 800000h
		push	0FFC0h
		call	far ptr	loc_2838
		mov	byte_2671C, 0
		jmp	loc_EA5B
; ---------------------------------------------------------------------------

loc_E91D:				; CODE XREF: sub_E8A3+3Aj
		cmp	byte_26719, 0FEh ; 'þ'
		jnb	loc_EA5B
		cmp	byte_25667, 0
		jnz	short loc_E98E
		mov	al, byte_266CF
		mov	ah, 0
		mov	bx, 4
		cwd
		idiv	bx
		add	ax, ax
		add	ax, 81h	; ''
		mov	[bp+var_2], ax
		cmp	byte_2671C, 0
		jnz	short loc_E961
		push	si
		push	di
		push	ax
		call	sub_2F54
		lea	ax, [si+30h]
		push	ax
		push	di
		mov	ax, [bp+var_2]
		inc	ax
		push	ax
		call	sub_2F54
		jmp	loc_EA5B
; ---------------------------------------------------------------------------

loc_E961:				; CODE XREF: sub_E8A3+A2j
		push	si
		push	di
		push	[bp+var_2]
		push	large 0FFC0h
		call	far ptr	loc_2838
		lea	ax, [si+30h]
		push	ax
		push	di
		mov	ax, [bp+var_2]
		inc	ax
		push	ax
		push	large 0FFC0h
		call	far ptr	loc_2838
		mov	byte_2671C, 0
		jmp	loc_EA5B
; ---------------------------------------------------------------------------

loc_E98E:				; CODE XREF: sub_E8A3+88j
		cmp	byte_25667, 1
		jnz	short loc_E9DD
		mov	ax, word ptr dword_2670A
		sar	ax, 4
		mov	si, ax
		mov	ax, word ptr dword_2670A+2
		sar	ax, 4
		add	ax, 0FFF0h
		mov	di, ax
		call	sub_C156
		mov	ah, 0Fh
		call	sub_C162
		mov	ax, word_2671A
		add	ax, ax
		mov	dx, 50h	; 'P'
		sub	dx, ax
		mov	[bp+var_2], dx
		lea	ax, [si+20h]
		push	ax
		lea	ax, [di+20h]
		push	ax
		push	dx
		call	sub_114C
		mov	dx, 7Ch	; '|'
		mov	al, 0
		out	dx, al
		push	si
		push	di
		push	80h ; ''
		call	sub_2F54
		jmp	short loc_EA5B
; ---------------------------------------------------------------------------

loc_E9DD:				; CODE XREF: sub_E8A3+F0j
		cmp	byte_25667, 2
		jnz	short loc_EA0D
		mov	ax, word ptr dword_2670A
		sar	ax, 4
		add	ax, 20h	; ' '
		mov	si, ax
		mov	ax, word ptr dword_2670A+2
		sar	ax, 4
		add	ax, 10h
		mov	di, ax
		call	sub_C156
		mov	ah, 0Fh
		call	sub_C162
		push	si
		push	di
		push	10h
		call	sub_114C
		jmp	short loc_EA55
; ---------------------------------------------------------------------------

loc_EA0D:				; CODE XREF: sub_E8A3+13Fj
		cmp	byte_25667, 3
		jnz	short loc_EA5B
		mov	ax, word ptr dword_2670A
		sar	ax, 4
		mov	si, ax
		mov	ax, word ptr dword_2670A+2
		sar	ax, 4
		add	ax, 0FFF0h
		mov	di, ax
		call	sub_C156
		mov	ah, 0Fh
		call	sub_C162
		mov	ax, word_2671A
		shl	ax, 3
		add	ax, 10h
		mov	[bp+var_2], ax
		lea	ax, [si+20h]
		push	ax
		lea	ax, [di+20h]
		push	ax
		push	[bp+var_2]
		call	sub_114C
		push	si
		push	di
		push	80h ; ''
		call	sub_2F54

loc_EA55:				; CODE XREF: sub_E8A3+168j
		mov	dx, 7Ch	; '|'
		mov	al, 0
		out	dx, al

loc_EA5B:				; CODE XREF: sub_E8A3+32j sub_E8A3+60j ...
		call	sub_D88C
		call	sub_D955
		cmp	byte_26719, 0FFh
		jnb	short loc_EA6B
		call	sub_E2C3

loc_EA6B:				; CODE XREF: sub_E8A3+1C3j
		pop	di
		pop	si
		leave
		retn
sub_E8A3	endp

; ---------------------------------------------------------------------------
		db    0

; =============== S U B	R O U T	I N E =======================================


sub_EA70	proc near
		push	di
		mov	ax, 0AC10h
		mov	es, ax
		assume es:nothing
		mov	di, 3BB4h
		call	sub_12068
		mov	ax, 0A850h
		mov	es, ax
		assume es:nothing
		mov	di, 18B4h
		call	sub_12068
		pop	di
		retn
sub_EA70	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_EA8A	proc near		; CODE XREF: sub_EAE4+BBp sub_EAE4+DFp

arg_0		= word ptr  4
arg_2		= word ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		push	ds
		pop	es
		assume es:dseg
		mov	bx, 18h
		mov	ax, [bp+arg_2]
		mul	bx
		mov	si, ax
		add	si, 199Ch
		mov	ax, [bp+arg_0]
		add	bx, bx
		mul	bx
		add	ax, 190Ch
		mov	bx, ax
		xor	dx, dx
		mov	cx, 18h

loc_EAB0:				; CODE XREF: sub_EA8A+52j
		lodsb
		cmp	al, 1
		jnz	short loc_EAD8
		mov	di, dx
		shl	di, 1
		mov	ax, [bx]

loc_EABB:				; CODE XREF: sub_EA8A+3Cj
		mov	[di+4D40h], ax
		add	di, 40h	; '@'
		cmp	di, 640h
		jb	short loc_EABB
		mov	di, dx

loc_EACA:				; CODE XREF: sub_EA8A+4Cj
		mov	byte ptr [di+4700h], 1
		add	di, 20h	; ' '
		cmp	di, 640h
		jb	short loc_EACA

loc_EAD8:				; CODE XREF: sub_EA8A+29j
		inc	dx
		add	bx, 2
		loop	loc_EAB0
		pop	di
		pop	si
		pop	bp
		retn	4
sub_EA8A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_EAE4	proc near

var_2		= word ptr -2

		enter	2, 0
		push	si
		push	di
		mov	word ptr dword_255A4, 180h
		mov	word ptr dword_255A4+2,	2
		push	large 0C00h
		call	sub_B9D6
		mov	ax, word_255B8
		mov	bx, 10h
		cwd
		idiv	bx
		mov	[bp+var_2], ax
		xor	di, di
		jmp	short loc_EB42
; ---------------------------------------------------------------------------

loc_EB0F:				; CODE XREF: sub_EAE4+61j
		mov	bx, word_22D9C
		imul	bx, 18h
		cmp	byte ptr [bx+di+199Ch],	2
		jnz	short loc_EB41
		mov	al, byte_25668	; jump table for switch	statement
		mov	ah, 0
		imul	ax, 30h
		mov	dx, di
		add	dx, dx
		add	ax, dx
		mov	bx, ax
		mov	ax, [bx+190Ch]
		mov	bx, [bp+var_2]
		shl	bx, 6
		mov	dx, di
		add	dx, dx
		add	bx, dx
		mov	[bx+4D40h], ax

loc_EB41:				; CODE XREF: sub_EAE4+37j
		inc	di

loc_EB42:				; CODE XREF: sub_EAE4+29j
		cmp	di, 18h
		jl	short loc_EB0F
		cmp	word_266CA, 1
		ja	short loc_EB8A
		mov	[bp+var_2], 0
		jmp	short loc_EB7A
; ---------------------------------------------------------------------------

loc_EB55:				; CODE XREF: sub_EAE4+9Aj
		xor	di, di
		jmp	short loc_EB72
; ---------------------------------------------------------------------------

loc_EB59:				; CODE XREF: sub_EAE4+91j
		mov	bx, [bp+var_2]
		shl	bx, 6
		mov	ax, di
		add	ax, ax
		add	bx, ax
		mov	si, di
		add	si, si
		mov	ax, [si+190Ch]
		mov	[bx+4D40h], ax
		inc	di

loc_EB72:				; CODE XREF: sub_EAE4+73j
		cmp	di, 18h
		jl	short loc_EB59
		inc	[bp+var_2]

loc_EB7A:				; CODE XREF: sub_EAE4+6Fj
		cmp	[bp+var_2], 19h
		jl	short loc_EB55
		call	sub_CB42
		mov	byte_25668, 0
		jmp	short loc_EBEA
; ---------------------------------------------------------------------------

loc_EB8A:				; CODE XREF: sub_EAE4+68j
		cmp	byte_25668, 0
		jnz	short loc_EBB6
		cmp	word_266CA, 680h
		jb	short loc_EBEA
		push	word_22D9C
		push	1
		call	sub_EA8A
		cmp	byte_266CD, 0
		jnz	short loc_EBEA
		inc	word_22D9C
		cmp	word_22D9C, 7
		jle	short loc_EBEA
		jmp	short loc_EBD8
; ---------------------------------------------------------------------------

loc_EBB6:				; CODE XREF: sub_EAE4+ABj
		cmp	byte_25668, 1
		jnz	short loc_EBE4
		push	word_22D9C
		push	2
		call	sub_EA8A
		cmp	byte_266CD, 0
		jnz	short loc_EBEA
		inc	word_22D9C
		cmp	word_22D9C, 7
		jle	short loc_EBEA

loc_EBD8:				; CODE XREF: sub_EAE4+D0j
		inc	byte_25668
		mov	word_22D9C, 0
		jmp	short loc_EBEA
; ---------------------------------------------------------------------------

loc_EBE4:				; CODE XREF: sub_EAE4+D7j
		mov	word_2566C, 11BEh

loc_EBEA:				; CODE XREF: sub_EAE4+A4j sub_EAE4+B3j ...
		pop	di
		pop	si
		leave
		retn
sub_EAE4	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_EBEE	proc near

var_2		= word ptr -2

		enter	2, 0
		push	si
		cmp	byte_26719, 1
		jb	short loc_EC01
		cmp	byte_26719, 0FEh ; 'þ'
		jb	short loc_EC56

loc_EC01:				; CODE XREF: sub_EBEE+Aj
		xor	si, si
		jmp	short loc_EC51
; ---------------------------------------------------------------------------

loc_EC05:				; CODE XREF: sub_EBEE+66j
		mov	bx, si
		add	bx, bx
		add	word ptr [bx-430Ch], 40h ; '@'
		mov	bx, si
		add	bx, bx
		cmp	word ptr [bx-430Ch], 1900h
		jl	short loc_EC24
		mov	bx, si
		add	bx, bx
		sub	word ptr [bx-430Ch], 1900h

loc_EC24:				; CODE XREF: sub_EBEE+2Aj
		mov	bx, si
		add	bx, bx
		mov	ax, [bx-430Ch]
		add	ax, 0FE80h
		push	ax
		call	sub_BC10
		mov	[bp+var_2], ax
		mov	ax, si
		shl	ax, 7
		add	ax, 30h	; '0'
		push	ax
		push	[bp+var_2]
		push	large 110000h
		push	0E000h
		call	far ptr	loc_1371A
		inc	si

loc_EC51:				; CODE XREF: sub_EBEE+15j
		cmp	si, 3
		jl	short loc_EC05

loc_EC56:				; CODE XREF: sub_EBEE+11j
		pop	si
		leave
		retn
sub_EBEE	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_EC59	proc near
		push	bp
		mov	bp, sp
		push	si
		mov	word ptr dword_255A4, 60h ; '`'
		mov	word ptr dword_255A4+2,	50h ; 'P'
		xor	si, si
		jmp	short loc_EC86
; ---------------------------------------------------------------------------

loc_EC6D:				; CODE XREF: sub_EC59+30j
		mov	bx, si
		add	bx, bx
		mov	ax, [bx-430Ch]
		add	ax, 0FFC0h
		push	ax
		mov	ax, si
		shl	ax, 0Bh
		add	ax, 400h
		push	ax
		call	sub_B9D6
		inc	si

loc_EC86:				; CODE XREF: sub_EC59+12j
		cmp	si, 3
		jl	short loc_EC6D
		pop	si
		pop	bp
		retn
sub_EC59	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_EC8E	proc near		; CODE XREF: sub_ED71:loc_EDBEp

var_4		= word ptr -4
var_2		= word ptr -2

		enter	4, 0
		push	si
		push	di
		call	sub_C156
		mov	ah, 9
		call	sub_C162
		mov	di, 1
		jmp	short loc_ECC7
; ---------------------------------------------------------------------------

loc_ECA1:				; CODE XREF: sub_EC8E+40j
		mov	bx, di
		add	bx, bx
		push	word ptr [bx+4336h]
		mov	bx, di
		add	bx, bx
		push	word ptr [bx+433Eh]
		mov	bx, di
		add	bx, bx
		push	word ptr [bx+4338h]
		mov	bx, di
		add	bx, bx
		push	word ptr [bx+4340h]
		call	sub_1562
		inc	di

loc_ECC7:				; CODE XREF: sub_EC8E+11j
		mov	al, byte_25672
		mov	ah, 0
		cmp	ax, di
		jg	short loc_ECA1
		cmp	byte_25672, 3
		jb	short loc_ECF4
		mov	bx, di
		add	bx, bx
		push	word ptr [bx+4336h]
		mov	bx, di
		add	bx, bx
		push	word ptr [bx+433Eh]
		push	word_25678
		push	word_25680
		call	sub_1562

loc_ECF4:				; CODE XREF: sub_EC8E+47j
		mov	dx, 7Ch	; '|'
		mov	al, 0
		out	dx, al
		mov	si, 0B204h
		xor	di, di
		jmp	short loc_ED68
; ---------------------------------------------------------------------------

loc_ED01:				; CODE XREF: sub_EC8E+DDj
		cmp	byte ptr [si], 0
		jz	short loc_ED64
		cmp	word ptr [si+2], 0FF00h
		jle	short loc_ED64
		cmp	word ptr [si+2], 1800h
		jge	short loc_ED64
		cmp	word ptr [si+4], 0FF00h
		jle	short loc_ED64
		cmp	word ptr [si+4], 1700h
		jge	short loc_ED64
		mov	ax, [si+2]
		sar	ax, 4
		add	ax, 10h
		mov	[bp+var_2], ax
		mov	ax, [si+4]
		sar	ax, 4
		mov	[bp+var_4], ax
		cmp	word ptr [si+16h], 0
		jnz	short loc_ED4B
		push	[bp+var_2]
		push	ax
		push	word ptr [si+6]
		call	sub_2D3E
		jmp	short loc_ED64
; ---------------------------------------------------------------------------

loc_ED4B:				; CODE XREF: sub_EC8E+ADj
		push	[bp+var_2]
		push	[bp+var_4]
		push	word ptr [si+6]
		push	large 0FFC0h
		call	far ptr	loc_2B78
		mov	word ptr [si+16h], 0

loc_ED64:				; CODE XREF: sub_EC8E+76j sub_EC8E+7Dj ...
		inc	di
		add	si, 1Ah

loc_ED68:				; CODE XREF: sub_EC8E+71j
		cmp	di, 4
		jl	short loc_ED01
		pop	di
		pop	si
		leave
		retn
sub_EC8E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_ED71	proc near
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, word ptr dword_2670A
		sar	ax, 4
		mov	si, ax
		mov	ax, word ptr dword_2670A+2
		sar	ax, 4
		add	ax, 0FFF0h
		mov	di, ax
		cmp	byte_26719, 0FEh ; 'þ'
		jnb	short loc_EDC3
		cmp	byte_2671C, 0
		jnz	short loc_EDA6
		push	si
		push	ax
		mov	al, byte_26718
		mov	ah, 0
		push	ax
		call	sub_2F54
		jmp	short loc_EDBE
; ---------------------------------------------------------------------------

loc_EDA6:				; CODE XREF: sub_ED71+24j
		push	si
		push	di
		mov	al, byte_26718
		mov	ah, 0
		push	ax
		push	large 0FFC0h
		call	far ptr	loc_2838
		mov	byte_2671C, 0

loc_EDBE:				; CODE XREF: sub_ED71+33j
		call	sub_EC8E
		jmp	short loc_EDD7
; ---------------------------------------------------------------------------

loc_EDC3:				; CODE XREF: sub_ED71+1Dj
		cmp	byte_26719, 0FEh ; 'þ'
		jnz	short loc_EDD7
		push	si
		push	di
		mov	al, byte_26718
		mov	ah, 0
		push	ax
		call	sub_1E2A

loc_EDD7:				; CODE XREF: sub_ED71+50j sub_ED71+57j
		call	sub_D88C
		call	sub_D955
		pop	di
		pop	si
		pop	bp
		retn
sub_ED71	endp

; ---------------------------------------------------------------------------
		db    0

; =============== S U B	R O U T	I N E =======================================


sub_EDE2	proc near
		push	di
		mov	dx, 0A850h
		mov	es, dx
		assume es:nothing
		mov	di, 2534h
		call	sub_12068
		cli
		mov	dx, 7Eh	; '~'
		xor	al, al
		out	dx, al
		out	dx, al
		out	dx, al
		out	dx, al
		sti
		mov	ax, 0AD28h
		mov	es, ax
		assume es:nothing
		mov	di, 2534h
		call	sub_12068
		pop	di
		retn
sub_EDE2	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_EE06	proc near		; CODE XREF: sub_116C4+65p

var_1		= byte ptr -1

		push	bp
		mov	bp, sp
		sub	sp, 2
		mov	[bp+var_1], 0
		mov	al, byte_22DA6
		mov	ah, 0
		mov	bx, ax
		cmp	bx, 4
		ja	short loc_EE60
		add	bx, bx
		jmp	cs:off_EEA6[bx]

loc_EE23:				; DATA XREF: seg001:off_EEA6o
		cmp	byte_2568F, 3
		jb	short loc_EE60
		jmp	short loc_EE5C
; ---------------------------------------------------------------------------

loc_EE2C:				; CODE XREF: sub_EE06+18j
					; DATA XREF: seg001:43B8o
		cmp	byte_2568F, 8
		jb	short loc_EE60
		jmp	short loc_EE5C
; ---------------------------------------------------------------------------

loc_EE35:				; CODE XREF: sub_EE06+18j
					; DATA XREF: seg001:43BAo
		cmp	byte_25690, 1
		jb	short loc_EE60
		cmp	byte_2568F, 5
		jb	short loc_EE60
		jmp	short loc_EE5C
; ---------------------------------------------------------------------------

loc_EE45:				; CODE XREF: sub_EE06+18j
					; DATA XREF: seg001:43BCo
		cmp	byte_25690, 2
		jb	short loc_EE60
		cmp	byte_2568F, 2
		jb	short loc_EE60
		jmp	short loc_EE5C
; ---------------------------------------------------------------------------

loc_EE55:				; CODE XREF: sub_EE06+18j
					; DATA XREF: seg001:43BEo
		cmp	byte_25690, 3
		jb	short loc_EE60

loc_EE5C:				; CODE XREF: sub_EE06+24j sub_EE06+2Dj ...
		mov	[bp+var_1], 1

loc_EE60:				; CODE XREF: sub_EE06+14j sub_EE06+22j ...
		cmp	[bp+var_1], 0
		jz	short locret_EEA3
		push	4
		nop
		push	cs
		call	near ptr sub_C364
		inc	byte_22DA6
		les	bx, dword_2CDC6
		assume es:nothing
		cmp	byte ptr es:[bx+0Bh], 63h ; 'c'
		ja	short locret_EEA3
		inc	byte ptr es:[bx+0Bh]
		cmp	byte_2CFFA, 14h
		jnb	short loc_EE8C
		mov	byte_2CFFA, 14h

loc_EE8C:				; CODE XREF: sub_EE06+7Fj
		nop
		push	cs
		call	near ptr sub_EEE8
		mov	byte_259DB, 1
		mov	word_259DE, 67E8h
		push	7
		call	sub_138B2

locret_EEA3:				; CODE XREF: sub_EE06+5Ej sub_EE06+74j
		leave
		retn
sub_EE06	endp

; ---------------------------------------------------------------------------
		db    0
off_EEA6	dw offset loc_EE23	; DATA XREF: sub_EE06+18r
		dw offset loc_EE2C
		dw offset loc_EE35
		dw offset loc_EE45
		dw offset loc_EE55

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_EEB0	proc near		; CODE XREF: sub_AD03:loc_ADFCp
					; sub_E67A+154p
		push	bp
		mov	bp, sp
		push	si
		mov	si, 1
		jmp	short loc_EEBF
; ---------------------------------------------------------------------------

loc_EEB9:				; CODE XREF: sub_EEB0+12j
		mov	byte ptr [si+4349h], 0
		inc	si

loc_EEBF:				; CODE XREF: sub_EEB0+7j
		cmp	si, 8
		jl	short loc_EEB9
		mov	dword_2569A, 0
		mov	dword_2569E, 0
		mov	byte_25699, 0
		mov	byte_22DA6, 0
		mov	byte_22DA7, 0
		pop	si
		pop	bp
		retn
sub_EEB0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_EEE8	proc far		; CODE XREF: sub_E67A+148p
					; sub_EE06+88p	...

var_2		= byte ptr -2
var_1		= byte ptr -1

		push	bp
		mov	bp, sp
		sub	sp, 2
		push	si
		les	bx, dword_2CDC6
		mov	al, es:[bx+0Bh]
		dec	al
		mov	[bp+var_1], al
		cmp	[bp+var_1], 6
		jge	short loc_EF47
		mov	[bp+var_2], 0
		mov	si, 3Eh	; '>'
		jmp	short loc_EF20
; ---------------------------------------------------------------------------

loc_EF0B:				; CODE XREF: sub_EEE8+3Ej
		push	si
		push	large 0D00D4h
		push	0E1h ; 'á'
		call	sub_1B0C
		add	si, 2
		inc	[bp+var_2]

loc_EF20:				; CODE XREF: sub_EEE8+21j
		mov	al, [bp+var_2]
		cmp	al, [bp+var_1]
		jl	short loc_EF0B
		jmp	short loc_EF3F
; ---------------------------------------------------------------------------

loc_EF2A:				; CODE XREF: sub_EEE8+5Bj
		push	si
		push	large 0D0002h
		push	0E1h ; 'á'
		call	sub_1B0C
		add	si, 2
		inc	[bp+var_2]

loc_EF3F:				; CODE XREF: sub_EEE8+40j
		cmp	[bp+var_2], 5
		jl	short loc_EF2A
		jmp	short loc_EF9E
; ---------------------------------------------------------------------------

loc_EF47:				; CODE XREF: sub_EEE8+18j
		push	large 3E000Dh
		push	ds
		push	offset aB@b@bB@b@ ; "@@~@@"
		push	0E1h ; 'á'
		call	sub_22F6
		cmp	[bp+var_1], 0Ah
		jl	short loc_EF88
		push	large 44000Dh
		mov	al, [bp+var_1]
		cbw
		mov	bx, 0Ah
		cwd
		idiv	bx
		add	ax, 0A0h ; ' '
		push	ax
		push	0E1h ; 'á'
		call	sub_1B0C
		mov	al, [bp+var_1]
		cbw
		mov	bx, 0Ah
		cwd
		idiv	bx
		mov	[bp+var_1], dl

loc_EF88:				; CODE XREF: sub_EEE8+75j
		push	large 46000Dh
		mov	al, [bp+var_1]
		cbw
		add	ax, 0A0h ; ' '
		push	ax
		push	0E1h ; 'á'
		call	sub_1B0C

loc_EF9E:				; CODE XREF: sub_EEE8+5Dj
		pop	si
		leave
		retf
sub_EEE8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_EFA1	proc far		; CODE XREF: sub_E67A+14Dp
					; sub_F204+54p	...

var_2		= byte ptr -2
var_1		= byte ptr -1

		push	bp
		mov	bp, sp
		sub	sp, 2
		push	si
		mov	[bp+var_2], 0
		les	bx, dword_2CDC6
		cmp	byte ptr es:[bx+0Dh], 5
		ja	short loc_EFFF
		mov	si, 3Eh	; '>'
		mov	al, es:[bx+0Dh]
		mov	[bp+var_1], al
		jmp	short loc_EFD8
; ---------------------------------------------------------------------------

loc_EFC3:				; CODE XREF: sub_EFA1+3Dj
		push	si
		push	large 0B00D3h
		push	0E1h ; 'á'
		call	sub_1B0C
		add	si, 2
		inc	[bp+var_2]

loc_EFD8:				; CODE XREF: sub_EFA1+20j
		mov	al, [bp+var_2]
		cmp	al, [bp+var_1]
		jl	short loc_EFC3
		jmp	short loc_EFF7
; ---------------------------------------------------------------------------

loc_EFE2:				; CODE XREF: sub_EFA1+5Aj
		push	si
		push	large 0B0002h
		push	0E1h ; 'á'
		call	sub_1B0C
		add	si, 2
		inc	[bp+var_2]

loc_EFF7:				; CODE XREF: sub_EFA1+3Fj
		cmp	[bp+var_2], 5
		jl	short loc_EFE2
		jmp	short loc_F061
; ---------------------------------------------------------------------------

loc_EFFF:				; CODE XREF: sub_EFA1+14j
		les	bx, dword_2CDC6
		mov	al, es:[bx+0Dh]
		mov	[bp+var_1], al
		push	large 3E000Bh
		push	ds
		push	offset aB@b@bB@b@_0 ; "@@~@@"
		push	0E1h ; 'á'
		call	sub_22F6
		cmp	[bp+var_1], 0Ah
		jl	short loc_F04B
		push	large 44000Bh
		mov	al, [bp+var_1]
		cbw
		mov	bx, 0Ah
		cwd
		idiv	bx
		add	ax, 0A0h ; ' '
		push	ax
		push	0E1h ; 'á'
		call	sub_1B0C
		mov	al, [bp+var_1]
		cbw
		mov	bx, 0Ah
		cwd
		idiv	bx
		mov	[bp+var_1], dl

loc_F04B:				; CODE XREF: sub_EFA1+7Fj
		push	large 46000Bh
		mov	al, [bp+var_1]
		cbw
		add	ax, 0A0h ; ' '
		push	ax
		push	0E1h ; 'á'
		call	sub_1B0C

loc_F061:				; CODE XREF: sub_EFA1+5Cj
		pop	si
		leave
		retf
sub_EFA1	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_F064	proc far		; CODE XREF: sub_F204+96p
					; sub_1DBAE+D9P
		push	bp
		mov	bp, sp
		push	large 3E000Fh
		mov	al, byte_259AB
		mov	ah, 0
		push	ax
		call	sub_1D519
		pop	bp
		retf
sub_F064	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_F07A	proc far		; CODE XREF: sub_F204+ABp
					; sub_10988+73p ...
		push	bp
		mov	bp, sp
		push	large 3E0011h
		mov	ax, word_2D00C
		imul	ax, 0Ah
		push	ax
		call	sub_1D519
		pop	bp
		retf
sub_F07A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_F091	proc far		; CODE XREF: sub_F204+C0p
					; sub_1C8C8+1EDP
		push	bp
		mov	bp, sp
		push	large 3E0013h
		push	word_2CFFC
		call	sub_1D519
		pop	bp
		retf
sub_F091	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_F0A5	proc far		; CODE XREF: sub_F204+EDp
					; sub_11DE6+28p

var_A		= byte ptr -0Ah

		push	bp
		mov	bp, sp
		sub	sp, 0Ah
		push	si
		push	di
		mov	si, 1ABDh
		lea	di, [bp+var_A]
		push	ss
		pop	es
		mov	cx, 5
		rep movsw
		push	16h
		mov	al, byte_259A4
		mov	ah, 0
		push	ax
		mov	al, byte_259A5
		mov	ah, 0
		lea	dx, [bp+var_A]
		add	ax, dx
		mov	bx, ax
		mov	al, ss:[bx]
		mov	ah, 0
		push	ax
		nop
		push	cs
		call	near ptr sub_F177
		pop	di
		pop	si
		leave
		retf
sub_F0A5	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_F0DD	proc far		; CODE XREF: sub_F204+133p
					; sub_19F16+4DP

var_10		= word ptr -10h
var_E		= word ptr -0Eh
var_C		= byte ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= byte ptr -2
arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		sub	sp, 10h
		push	si
		mov	si, [bp+arg_0]
		mov	ax, word_22E07
		mov	[bp+var_A], ax
		mov	ax, word_22E09
		mov	[bp+var_8], ax
		mov	ax, word_22E0B
		mov	[bp+var_6], ax
		mov	ax, word_22E0D
		mov	[bp+var_4], ax
		mov	al, byte_22E0F
		mov	[bp+var_2], al
		mov	ax, word_22E10
		mov	[bp+var_10], ax
		mov	ax, word_22E12
		mov	[bp+var_E], ax
		mov	al, byte_22E14
		mov	[bp+var_C], al
		or	si, si
		jz	short loc_F14C
		push	large 3D0008h
		push	ds
		push	offset aI	; "êëì"
		push	0C1h ; 'Á'
		call	sub_1B50
		push	9
		push	si
		mov	ax, si
		mov	bx, 20h	; ' '
		cwd
		idiv	bx
		lea	dx, [bp+var_10]
		add	ax, dx
		mov	bx, ax
		mov	al, ss:[bx]
		mov	ah, 0
		push	ax
		nop
		push	cs
		call	near ptr sub_F177
		jmp	short loc_F172
; ---------------------------------------------------------------------------

loc_F14C:				; CODE XREF: sub_F0DD+3Cj
		push	large 3D0008h
		push	ss
		lea	ax, [bp+var_6+1]
		push	ax
		push	0E1h ; 'á'
		call	sub_1B50
		push	large 380009h
		push	ss
		lea	ax, [bp+var_A]
		push	ax
		push	0E1h ; 'á'
		call	sub_1B50

loc_F172:				; CODE XREF: sub_F0DD+6Dj
		pop	si
		leave
		retf	2
sub_F0DD	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_F177	proc far		; CODE XREF: sub_F0A5+31p sub_F0DD+6Ap

var_16		= byte ptr -16h
var_E		= byte ptr -0Eh
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= byte ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		sub	sp, 16h
		push	si
		push	di
		mov	di, [bp+arg_2]
		mov	ax, word_22E15
		mov	[bp+var_C], ax
		mov	ax, word_22E17
		mov	[bp+var_A], ax
		mov	ax, word_22E19
		mov	[bp+var_8], ax
		mov	ax, word_22E1B
		mov	[bp+var_6], ax
		mov	al, byte_22E1D
		mov	[bp+var_4], al
		cmp	di, 80h	; ''
		jl	short loc_F1B1
		push	38h ; '8'
		push	[bp+arg_4]
		push	ss
		lea	ax, [bp+var_C]
		jmp	short loc_F1F5
; ---------------------------------------------------------------------------

loc_F1B1:				; CODE XREF: sub_F177+2Dj
		mov	[bp+var_2], di
		sub	[bp+var_2], 10h
		xor	si, si
		jmp	short loc_F1C5
; ---------------------------------------------------------------------------

loc_F1BC:				; CODE XREF: sub_F177+52j
		mov	[bp+si+var_16],	2Fh ; '/'
		sub	[bp+var_2], 10h
		inc	si

loc_F1C5:				; CODE XREF: sub_F177+43j
		cmp	[bp+var_2], 0
		jg	short loc_F1BC
		lea	ax, [di-1]
		and	ax, 0Fh
		mov	[bp+var_2], ax
		mov	al, byte ptr [bp+var_2]
		add	al, 20h	; ' '
		mov	[bp+si+var_16],	al
		jmp	short loc_F1E2
; ---------------------------------------------------------------------------

loc_F1DE:				; CODE XREF: sub_F177+6Fj
		mov	[bp+si+var_16],	2

loc_F1E2:				; CODE XREF: sub_F177+65j
		inc	si
		cmp	si, 7
		jle	short loc_F1DE
		mov	[bp+var_E], 0
		push	38h ; '8'
		push	[bp+arg_4]
		push	ss
		lea	ax, [bp+var_16]

loc_F1F5:				; CODE XREF: sub_F177+38j
		push	ax
		push	[bp+arg_0]
		call	sub_1B50
		pop	di
		pop	si
		leave
		retf	6
sub_F177	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_F204	proc far		; CODE XREF: sub_AED0+ABp sub_B1D0+C0p
		push	bp
		mov	bp, sp
		push	large 3C0003h
		push	ds
		push	offset asc_22DD5 ; "Ö×ØÙ"
		push	0C1h ; 'Á'
		call	sub_1B50
		push	large 3D0005h
		push	ds
		push	offset unk_22DD0
		push	0C1h ; 'Á'
		call	sub_1B50
		call	sub_11692
		les	bx, dword_2CDC6
		cmp	byte ptr es:[bx+12h], 30h ; '0'
		jnz	short loc_F245
		push	large 39000Bh
		push	ds
		push	offset asc_22DDA ; "ÚÛ"
		jmp	short loc_F24F
; ---------------------------------------------------------------------------

loc_F245:				; CODE XREF: sub_F204+33j
		push	large 39000Bh
		push	ds
		push	offset aRs	; "àá"

loc_F24F:				; CODE XREF: sub_F204+3Fj
		push	0C1h ; 'Á'
		call	sub_1B50
		push	cs
		call	near ptr sub_EFA1
		push	cs
		call	near ptr sub_EEE8
		les	bx, dword_2CDC6
		cmp	byte ptr es:[bx+12h], 30h ; '0'
		jnz	short loc_F276
		push	large 39000Dh
		push	ds
		push	offset asc_22DDF ; "ÜÝ"
		jmp	short loc_F280
; ---------------------------------------------------------------------------

loc_F276:				; CODE XREF: sub_F204+64j
		push	large 39000Dh
		push	ds
		push	offset aTu	; "âã"

loc_F280:				; CODE XREF: sub_F204+70j
		push	0C1h ; 'Á'
		call	sub_1B50
		push	large 3A000Fh
		push	large 0E600C1h
		call	sub_1B0C
		push	cs
		call	near ptr sub_F064
		push	large 3A0011h
		push	large 0E700C1h
		call	sub_1B0C
		push	cs
		call	near ptr sub_F07A
		push	large 3A0013h
		push	large 0E800C1h
		call	sub_1B0C
		push	cs
		call	near ptr sub_F091
		les	bx, dword_2CDC6
		cmp	byte ptr es:[bx+12h], 30h ; '0'
		jnz	short loc_F2DE
		push	large 3E0015h
		push	ds
		push	offset unk_22DE4
		jmp	short loc_F2E8
; ---------------------------------------------------------------------------

loc_F2DE:				; CODE XREF: sub_F204+CCj
		push	large 3E0015h
		push	ds
		push	offset aFx	; "äå"

loc_F2E8:				; CODE XREF: sub_F204+D8j
		push	0C1h ; 'Á'
		call	sub_1B50
		push	cs
		call	near ptr sub_F0A5
		push	large 390017h
		push	ds
		mov	al, byte_25688
		mov	ah, 0
		shl	ax, 3
		add	ax, 1A68h
		push	ax
		cmp	byte_25688, 0
		jnz	short loc_F313
		mov	ax, 81h	; ''
		jmp	short loc_F32E
; ---------------------------------------------------------------------------

loc_F313:				; CODE XREF: sub_F204+108j
		cmp	byte_25688, 1
		jnz	short loc_F31F
		mov	ax, 0A1h ; '¡'
		jmp	short loc_F32E
; ---------------------------------------------------------------------------

loc_F31F:				; CODE XREF: sub_F204+114j
		cmp	byte_25688, 2
		jnz	short loc_F32B
		mov	ax, 61h	; 'a'
		jmp	short loc_F32E
; ---------------------------------------------------------------------------

loc_F32B:				; CODE XREF: sub_F204+120j
		mov	ax, 41h	; 'A'

loc_F32E:				; CODE XREF: sub_F204+10Dj
					; sub_F204+119j ...
		push	ax
		call	sub_1B50
		push	0
		push	cs
		call	near ptr sub_F0DD
		pop	bp
		retf
sub_F204	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_F33C	proc near		; CODE XREF: seg001:4947p seg001:49DDp ...

arg_0		= word ptr  4
arg_2		= word ptr  6

		push	bp
		mov	bp, sp
		push	si
		mov	si, [bp+arg_2]
		mov	ax, word_25984
		sub	ax, word ptr dword_2598E+2
		push	ax
		mov	ax, word_25982
		sub	ax, [si+2]
		push	ax
		call	sub_1DA8
		add	al, byte ptr [bp+arg_0]
		mov	byte ptr [bp+arg_0], al
		lea	ax, [si+0Ah]
		push	ax
		push	[bp+arg_0]
		call	sub_11DCA
		pop	si
		pop	bp
		retn	4
sub_F33C	endp

; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jz	short loc_F38D
		mov	word ptr [si+0Eh], 1Ch
		mov	byte ptr [si+10h], 0Ah

loc_F38D:				; CODE XREF: seg001:4892j
		pop	si
		pop	bp
		retn
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jz	short loc_F3C0
		add	ax, 0Ah
		push	ax
		push	7
		call	sub_BC7E
		add	al, 0BCh ; '¼'
		push	ax
		call	sub_11DCA
		mov	word ptr [si+0Eh], 1Ch
		mov	byte ptr [si+10h], 0Ah

loc_F3C0:				; CODE XREF: seg001:48B6j
		pop	si
		pop	bp
		retn
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	di, 1
		cmp	byte_259A6, 12h
		jnz	short loc_F3D7
		mov	byte_256A2, 0

loc_F3D7:				; CODE XREF: seg001:48E0j
		mov	al, byte_256A2
		mov	ah, 0
		mov	bx, 3
		cwd
		idiv	bx
		or	dx, dx
		jnz	short loc_F3E9
		add	di, 2

loc_F3E9:				; CODE XREF: seg001:48F4j
		inc	byte_256A2
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		jmp	short loc_F446
; ---------------------------------------------------------------------------

loc_F3FA:				; CODE XREF: seg001:495Dj
		cmp	di, 1
		jnz	short loc_F415
		lea	ax, [si+0Ah]
		push	ax
		push	0Fh
		call	sub_BC7E
		add	al, 0B8h ; '¸'
		push	ax
		call	sub_11DCA
		mov	word ptr [si+0Eh], 1Ch
		jmp	short loc_F43F
; ---------------------------------------------------------------------------

loc_F415:				; CODE XREF: seg001:490Dj
		cmp	di, 3
		jnz	short loc_F421
		sub	word ptr [si+2], 180h
		jmp	short loc_F426
; ---------------------------------------------------------------------------

loc_F421:				; CODE XREF: seg001:4928j
		add	word ptr [si+2], 180h

loc_F426:				; CODE XREF: seg001:492Fj
		cmp	word_25984, 0C190h
		jz	short loc_F43A
		push	si
		push	7
		call	sub_BC7E
		sub	al, 4
		push	ax
		call	sub_F33C

loc_F43A:				; CODE XREF: seg001:493Cj
		mov	word ptr [si+0Eh], 1Eh

loc_F43F:				; CODE XREF: seg001:4923j
		mov	byte ptr [si+10h], 0Ah
		dec	di
		jle	short loc_F44F

loc_F446:				; CODE XREF: seg001:4908j
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jnz	short loc_F3FA

loc_F44F:				; CODE XREF: seg001:4954j
		pop	di
		pop	si
		pop	bp
		retn
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	di, 2
		cmp	byte_259A6, 12h
		jnz	short loc_F467
		mov	byte_256A2, 0

loc_F467:				; CODE XREF: seg001:4970j
		mov	al, byte_256A2
		mov	ah, 0
		mov	bx, 3
		cwd
		idiv	bx
		or	dx, dx
		jnz	short loc_F479
		add	di, 2

loc_F479:				; CODE XREF: seg001:4984j
		inc	byte_256A2
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		jmp	short loc_F4DC
; ---------------------------------------------------------------------------

loc_F48A:				; CODE XREF: seg001:49F3j
		cmp	di, 2
		jg	short loc_F4AB
		cmp	di, 2
		jnz	short loc_F49B
		sub	word ptr [si+2], 80h ; ''
		jmp	short loc_F4A0
; ---------------------------------------------------------------------------

loc_F49B:				; CODE XREF: seg001:49A2j
		add	word ptr [si+2], 80h ; ''

loc_F4A0:				; CODE XREF: seg001:49A9j
		mov	word ptr [si+0Eh], 1Ch
		mov	byte ptr [si+10h], 9
		jmp	short loc_F4D9
; ---------------------------------------------------------------------------

loc_F4AB:				; CODE XREF: seg001:499Dj
		cmp	di, 4
		jnz	short loc_F4B7
		sub	word ptr [si+2], 180h
		jmp	short loc_F4BC
; ---------------------------------------------------------------------------

loc_F4B7:				; CODE XREF: seg001:49BEj
		add	word ptr [si+2], 180h

loc_F4BC:				; CODE XREF: seg001:49C5j
		cmp	word_25984, 0C190h
		jz	short loc_F4D0
		push	si
		push	7
		call	sub_BC7E
		sub	al, 4
		push	ax
		call	sub_F33C

loc_F4D0:				; CODE XREF: seg001:49D2j
		mov	word ptr [si+0Eh], 1Eh
		mov	byte ptr [si+10h], 0Ah

loc_F4D9:				; CODE XREF: seg001:49B9j
		dec	di
		jle	short loc_F4E5

loc_F4DC:				; CODE XREF: seg001:4998j
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jnz	short loc_F48A

loc_F4E5:				; CODE XREF: seg001:49EAj
		pop	di
		pop	si
		pop	bp
		retn
; ---------------------------------------------------------------------------
		enter	2, 0
		push	si
		push	di
		mov	di, 3
		cmp	byte_259A6, 12h
		jnz	short loc_F4FE
		mov	byte_256A2, 0

loc_F4FE:				; CODE XREF: seg001:4A07j
		mov	al, byte_256A2
		mov	ah, 0
		mov	bx, 3
		cwd
		idiv	bx
		or	dx, dx
		jnz	short loc_F510
		add	di, 2

loc_F510:				; CODE XREF: seg001:4A1Bj
		inc	byte_256A2
		mov	byte ptr [bp-1], 0BAh ;	'º'
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		jmp	short loc_F578
; ---------------------------------------------------------------------------

loc_F525:				; CODE XREF: seg001:4A8Fj
		cmp	di, 3
		jg	short loc_F547
		lea	ax, [si+0Ah]
		push	ax
		push	word ptr [bp-1]
		call	sub_11DCA
		mov	word ptr [si+0Eh], 1Ch
		mov	byte ptr [si+10h], 8
		mov	al, [bp-1]
		add	al, 6
		mov	[bp-1],	al
		jmp	short loc_F575
; ---------------------------------------------------------------------------

loc_F547:				; CODE XREF: seg001:4A38j
		cmp	di, 5
		jnz	short loc_F553
		sub	word ptr [si+2], 180h
		jmp	short loc_F558
; ---------------------------------------------------------------------------

loc_F553:				; CODE XREF: seg001:4A5Aj
		add	word ptr [si+2], 180h

loc_F558:				; CODE XREF: seg001:4A61j
		cmp	word_25984, 0C190h
		jz	short loc_F56C
		push	si
		push	7
		call	sub_BC7E
		sub	al, 4
		push	ax
		call	sub_F33C

loc_F56C:				; CODE XREF: seg001:4A6Ej
		mov	word ptr [si+0Eh], 1Eh
		mov	byte ptr [si+10h], 9

loc_F575:				; CODE XREF: seg001:4A55j
		dec	di
		jle	short loc_F581

loc_F578:				; CODE XREF: seg001:4A33j
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jnz	short loc_F525

loc_F581:				; CODE XREF: seg001:4A86j
		pop	di
		pop	si
		leave
		retn
; ---------------------------------------------------------------------------
		enter	2, 0
		push	si
		push	di
		mov	di, 3
		cmp	byte_259A6, 12h
		jnz	short loc_F59A
		mov	byte_256A2, 0

loc_F59A:				; CODE XREF: seg001:4AA3j
		mov	al, byte_256A2
		mov	ah, 0
		mov	bx, 2
		cwd
		idiv	bx
		or	dx, dx
		jnz	short loc_F5AC
		add	di, 2

loc_F5AC:				; CODE XREF: seg001:4AB7j
		inc	byte_256A2
		mov	byte ptr [bp-1], 0B8h ;	'¸'
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		jmp	short loc_F614
; ---------------------------------------------------------------------------

loc_F5C1:				; CODE XREF: seg001:4B2Bj
		cmp	di, 3
		jg	short loc_F5E3
		lea	ax, [si+0Ah]
		push	ax
		push	word ptr [bp-1]
		call	sub_11DCA
		mov	word ptr [si+0Eh], 1Ch
		mov	byte ptr [si+10h], 8
		mov	al, [bp-1]
		add	al, 8
		mov	[bp-1],	al
		jmp	short loc_F611
; ---------------------------------------------------------------------------

loc_F5E3:				; CODE XREF: seg001:4AD4j
		cmp	di, 5
		jnz	short loc_F5EF
		sub	word ptr [si+2], 180h
		jmp	short loc_F5F4
; ---------------------------------------------------------------------------

loc_F5EF:				; CODE XREF: seg001:4AF6j
		add	word ptr [si+2], 180h

loc_F5F4:				; CODE XREF: seg001:4AFDj
		cmp	word_25984, 0C190h
		jz	short loc_F608
		push	si
		push	7
		call	sub_BC7E
		sub	al, 4
		push	ax
		call	sub_F33C

loc_F608:				; CODE XREF: seg001:4B0Aj
		mov	word ptr [si+0Eh], 1Eh
		mov	byte ptr [si+10h], 9

loc_F611:				; CODE XREF: seg001:4AF1j
		dec	di
		jle	short loc_F61D

loc_F614:				; CODE XREF: seg001:4ACFj
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jnz	short loc_F5C1

loc_F61D:				; CODE XREF: seg001:4B22j
		pop	di
		pop	si
		leave
		retn
; ---------------------------------------------------------------------------
		enter	2, 0
		push	si
		push	di
		mov	di, 3
		cmp	byte_259A6, 12h
		jnz	short loc_F636
		mov	byte_256A2, 0

loc_F636:				; CODE XREF: seg001:4B3Fj
		mov	al, byte_256A2
		mov	ah, 0
		mov	bx, 2
		cwd
		idiv	bx
		or	dx, dx
		jnz	short loc_F648
		add	di, 2

loc_F648:				; CODE XREF: seg001:4B53j
		inc	byte_256A2
		mov	byte ptr [bp-1], 0B8h ;	'¸'
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		jmp	short loc_F6B0
; ---------------------------------------------------------------------------

loc_F65D:				; CODE XREF: seg001:4BC7j
		cmp	di, 3
		jg	short loc_F67F
		lea	ax, [si+0Ah]
		push	ax
		push	word ptr [bp-1]
		call	sub_11DCA
		mov	word ptr [si+0Eh], 1Ch
		mov	byte ptr [si+10h], 7
		mov	al, [bp-1]
		add	al, 8
		mov	[bp-1],	al
		jmp	short loc_F6AD
; ---------------------------------------------------------------------------

loc_F67F:				; CODE XREF: seg001:4B70j
		cmp	di, 5
		jnz	short loc_F68B
		sub	word ptr [si+2], 180h
		jmp	short loc_F690
; ---------------------------------------------------------------------------

loc_F68B:				; CODE XREF: seg001:4B92j
		add	word ptr [si+2], 180h

loc_F690:				; CODE XREF: seg001:4B99j
		cmp	word_25984, 0C190h
		jz	short loc_F6A4
		push	si
		push	7
		call	sub_BC7E
		sub	al, 4
		push	ax
		call	sub_F33C

loc_F6A4:				; CODE XREF: seg001:4BA6j
		mov	word ptr [si+0Eh], 1Eh
		mov	byte ptr [si+10h], 8

loc_F6AD:				; CODE XREF: seg001:4B8Dj
		dec	di
		jle	short loc_F6B9

loc_F6B0:				; CODE XREF: seg001:4B6Bj
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jnz	short loc_F65D

loc_F6B9:				; CODE XREF: seg001:4BBEj
		pop	di
		pop	si
		leave
		retn
; ---------------------------------------------------------------------------
		enter	2, 0
		push	si
		push	di
		mov	di, 5
		cmp	byte_259A6, 12h
		jnz	short loc_F6D2
		mov	byte_256A2, 0

loc_F6D2:				; CODE XREF: seg001:4BDBj
		mov	al, byte_256A2
		mov	ah, 0
		mov	bx, 2
		cwd
		idiv	bx
		or	dx, dx
		jnz	short loc_F6E4
		add	di, 2

loc_F6E4:				; CODE XREF: seg001:4BEFj
		inc	byte_256A2
		mov	byte ptr [bp-1], 0BAh ;	'º'
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		jmp	loc_F780
; ---------------------------------------------------------------------------

loc_F6FA:				; CODE XREF: seg001:4C97j
		cmp	di, 3
		jg	short loc_F720
		lea	ax, [si+0Ah]
		push	ax
		push	word ptr [bp-1]
		call	sub_11DCA
		mov	word ptr [si+0Eh], 1Ch
		mov	byte ptr [si+10h], 4
		mov	byte ptr [si+10h], 7
		mov	al, [bp-1]
		add	al, 6
		mov	[bp-1],	al
		jmp	short loc_F77D
; ---------------------------------------------------------------------------

loc_F720:				; CODE XREF: seg001:4C0Dj
		cmp	di, 5
		jg	short loc_F74F
		cmp	di, 5
		jnz	short loc_F735
		sub	word ptr [si+2], 180h
		mov	byte ptr [bp-2], 0B8h ;	'¸'
		jmp	short loc_F73E
; ---------------------------------------------------------------------------

loc_F735:				; CODE XREF: seg001:4C38j
		add	word ptr [si+2], 180h
		mov	byte ptr [bp-2], 0C8h ;	'È'

loc_F73E:				; CODE XREF: seg001:4C43j
		lea	ax, [si+0Ah]
		push	ax
		push	word ptr [bp-2]
		call	sub_11DCA
		mov	word ptr [si+0Eh], 1Ch
		jmp	short loc_F779
; ---------------------------------------------------------------------------

loc_F74F:				; CODE XREF: seg001:4C33j
		cmp	di, 7
		jnz	short loc_F75B
		sub	word ptr [si+2], 180h
		jmp	short loc_F760
; ---------------------------------------------------------------------------

loc_F75B:				; CODE XREF: seg001:4C62j
		add	word ptr [si+2], 180h

loc_F760:				; CODE XREF: seg001:4C69j
		cmp	word_25984, 0C190h
		jz	short loc_F774
		push	si
		push	7
		call	sub_BC7E
		sub	al, 4
		push	ax
		call	sub_F33C

loc_F774:				; CODE XREF: seg001:4C76j
		mov	word ptr [si+0Eh], 1Eh

loc_F779:				; CODE XREF: seg001:4C5Dj
		mov	byte ptr [si+10h], 7

loc_F77D:				; CODE XREF: seg001:4C2Ej
		dec	di
		jle	short loc_F78B

loc_F780:				; CODE XREF: seg001:4C07j
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jnz	loc_F6FA

loc_F78B:				; CODE XREF: seg001:4C8Ej
		pop	di
		pop	si
		leave
		retn
; ---------------------------------------------------------------------------
		enter	2, 0
		push	si
		push	di
		mov	di, 5
		add	di, 2
		inc	byte_256A2
		mov	byte ptr [bp-1], 0BAh ;	'º'
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		jmp	loc_F833
; ---------------------------------------------------------------------------

loc_F7B1:				; CODE XREF: seg001:4D4Aj
		cmp	di, 3
		jg	short loc_F7D3
		lea	ax, [si+0Ah]
		push	ax
		push	word ptr [bp-1]
		call	sub_11DCA
		mov	word ptr [si+0Eh], 1Ch
		mov	byte ptr [si+10h], 7
		mov	al, [bp-1]
		add	al, 6
		mov	[bp-1],	al
		jmp	short loc_F830
; ---------------------------------------------------------------------------

loc_F7D3:				; CODE XREF: seg001:4CC4j
		cmp	di, 5
		jg	short loc_F802
		cmp	di, 5
		jnz	short loc_F7E8
		sub	word ptr [si+2], 180h
		mov	byte ptr [bp-2], 0B8h ;	'¸'
		jmp	short loc_F7F1
; ---------------------------------------------------------------------------

loc_F7E8:				; CODE XREF: seg001:4CEBj
		add	word ptr [si+2], 180h
		mov	byte ptr [bp-2], 0C8h ;	'È'

loc_F7F1:				; CODE XREF: seg001:4CF6j
		lea	ax, [si+0Ah]
		push	ax
		push	word ptr [bp-2]
		call	sub_11DCA
		mov	word ptr [si+0Eh], 1Ch
		jmp	short loc_F82C
; ---------------------------------------------------------------------------

loc_F802:				; CODE XREF: seg001:4CE6j
		cmp	di, 7
		jnz	short loc_F80E
		sub	word ptr [si+2], 180h
		jmp	short loc_F813
; ---------------------------------------------------------------------------

loc_F80E:				; CODE XREF: seg001:4D15j
		add	word ptr [si+2], 180h

loc_F813:				; CODE XREF: seg001:4D1Cj
		cmp	word_25984, 0C190h
		jz	short loc_F827
		push	si
		push	7
		call	sub_BC7E
		sub	al, 4
		push	ax
		call	sub_F33C

loc_F827:				; CODE XREF: seg001:4D29j
		mov	word ptr [si+0Eh], 1Eh

loc_F82C:				; CODE XREF: seg001:4D10j
		mov	byte ptr [si+10h], 7

loc_F830:				; CODE XREF: seg001:4CE1j
		dec	di
		jle	short loc_F83E

loc_F833:				; CODE XREF: seg001:4CBEj
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jnz	loc_F7B1

loc_F83E:				; CODE XREF: seg001:4D41j
		pop	di
		pop	si
		leave
		retn
; ---------------------------------------------------------------------------
		enter	2, 0
		push	si
		push	di
		mov	di, 5
		add	di, 2
		cmp	byte_259A6, 12h
		jnz	short loc_F85A
		mov	byte_256A2, 0

loc_F85A:				; CODE XREF: seg001:4D63j
		mov	al, byte_256A2
		mov	ah, 0
		mov	bx, 2
		cwd
		idiv	bx
		or	dx, dx
		jnz	short loc_F86C
		add	di, 2

loc_F86C:				; CODE XREF: seg001:4D77j
		inc	byte_256A2
		mov	byte ptr [bp-1], 0BAh ;	'º'
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		jmp	loc_F948
; ---------------------------------------------------------------------------

loc_F882:				; CODE XREF: seg001:4E5Fj
		cmp	di, 3
		jg	short loc_F8A5
		lea	ax, [si+0Ah]
		push	ax
		push	word ptr [bp-1]
		call	sub_11DCA
		mov	word ptr [si+0Eh], 1Ch
		mov	byte ptr [si+10h], 6
		mov	al, [bp-1]
		add	al, 6
		mov	[bp-1],	al
		jmp	loc_F945
; ---------------------------------------------------------------------------

loc_F8A5:				; CODE XREF: seg001:4D95j
		cmp	di, 5
		jg	short loc_F8D4
		cmp	di, 5
		jnz	short loc_F8BA
		sub	word ptr [si+2], 180h
		mov	byte ptr [bp-2], 0B8h ;	'¸'
		jmp	short near ptr word_F8C0+3
; ---------------------------------------------------------------------------

loc_F8BA:				; CODE XREF: seg001:4DBDj
		add	word ptr [si+2], 180h
; ---------------------------------------------------------------------------
		db 0C6h
word_F8C0	dw 0FE46h, 8DC8h, 0A44h,0FF50h ; CODE XREF: seg001:4DC8j
		dw 0FE76h		; value	table for switch statement
		dw offset loc_13876+2 -	(offset	loc_13A8F+1) ; jump table for switch statement
		dw offset loc_201B4
		dw offset loc_148D0+4
		dw offset loc_13AAC
		dw offset loc_1A87B
; ---------------------------------------------------------------------------

loc_F8D4:				; CODE XREF: seg001:4DB8j
		cmp	di, 7
		jg	short loc_F91D
		cmp	di, 7
		jnz	short loc_F8E9
		sub	word ptr [si+2], 180h
		mov	byte ptr [bp-2], 0B4h ;	'´'
		jmp	short loc_F8F2
; ---------------------------------------------------------------------------

loc_F8E9:				; CODE XREF: seg001:4DECj
		add	word ptr [si+2], 180h
		mov	byte ptr [bp-2], 0CCh ;	'Ì'

loc_F8F2:				; CODE XREF: seg001:4DF7j
		cmp	word_25984, 0C190h
		jz	short loc_F908
		push	si
		push	7
		call	sub_BC7E
		sub	al, 4
		push	ax
		call	sub_F33C
		jmp	short loc_F912
; ---------------------------------------------------------------------------

loc_F908:				; CODE XREF: seg001:4E08j
		lea	ax, [si+0Ah]
		push	ax
		push	word ptr [bp-2]
		call	sub_11DCA

loc_F912:				; CODE XREF: seg001:4E16j
		mov	word ptr [si+0Eh], 1Eh
		mov	byte ptr [si+10h], 5
		jmp	short loc_F945
; ---------------------------------------------------------------------------

loc_F91D:				; CODE XREF: seg001:4DE7j
		cmp	di, 9
		jnz	short loc_F929
		sub	word ptr [si+2], 180h
		jmp	short loc_F92E
; ---------------------------------------------------------------------------

loc_F929:				; CODE XREF: seg001:4E30j
		add	word ptr [si+2], 180h

loc_F92E:				; CODE XREF: seg001:4E37j
		cmp	word_25984, 0C190h
		jz	short loc_F93C
		push	si
		push	0
		call	sub_F33C

loc_F93C:				; CODE XREF: seg001:4E44j
		mov	word ptr [si+0Eh], 1Eh
		mov	byte ptr [si+10h], 7

loc_F945:				; CODE XREF: seg001:4DB2j seg001:4E2Bj
		dec	di
		jle	short loc_F953

loc_F948:				; CODE XREF: seg001:4D8Fj
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jnz	loc_F882

loc_F953:				; CODE XREF: seg001:4E56j
		pop	di
		pop	si
		leave
		retn
; ---------------------------------------------------------------------------
		db 0C8h, 2, 2 dup(0), 56h, 57h,	0BFh, 1, 0, 80h, 3Eh, 66h
		db 46h,	12h, 75h, 5, 0C6h, 6, 62h
		dw    43h, 62A0h,0B443h,0BB00h ; value table for switch	statement
		dw offset loc_13A93 - (offset loc_13A8F+1) ; jump table	for switch statement
		dw offset loc_13229 - (offset loc_13A8F+1)
		dw offset loc_1468B
		dw offset loc_1B05F+3
; ---------------------------------------------------------------------------
		add	ax, [bp+di+2C7h]
		inc	byte_256A2
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		jmp	short loc_F9D9
; ---------------------------------------------------------------------------

loc_F98F:				; CODE XREF: seg001:4EF0j
		cmp	di, 1
		jnz	short loc_F9AA
		lea	ax, [si+0Ah]
		push	ax
		push	0Fh
		call	sub_BC7E
		add	al, 0B8h ; '¸'
		push	ax
		call	sub_11DCA
		mov	word ptr [si+0Eh], 1Ch
		jmp	short loc_F9D2
; ---------------------------------------------------------------------------

loc_F9AA:				; CODE XREF: seg001:4EA2j
		cmp	di, 3
		jnz	short loc_F9BA
		sub	word ptr [si+2], 180h
		mov	byte ptr [bp-1], 0B8h ;	'¸'
		jmp	short loc_F9C3
; ---------------------------------------------------------------------------

loc_F9BA:				; CODE XREF: seg001:4EBDj
		add	word ptr [si+2], 180h
		mov	byte ptr [bp-1], 0C8h ;	'È'

loc_F9C3:				; CODE XREF: seg001:4EC8j
		lea	ax, [si+0Ah]
		push	ax
		push	word ptr [bp-1]
		call	sub_11DCA
		mov	word ptr [si+0Eh], 20h ; ' '

loc_F9D2:				; CODE XREF: seg001:4EB8j
		mov	byte ptr [si+10h], 0Ah
		dec	di
		jle	short loc_F9E2

loc_F9D9:				; CODE XREF: seg001:4E9Dj
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jnz	short loc_F98F

loc_F9E2:				; CODE XREF: seg001:4EE7j
		pop	di
		pop	si
		leave
		retn
; ---------------------------------------------------------------------------
		enter	4, 0
		push	si
		push	di
		mov	di, 2
		cmp	byte_259A6, 12h
		jnz	short loc_F9FB
		mov	byte_256A2, 0

loc_F9FB:				; CODE XREF: seg001:4F04j
		mov	al, byte_256A2
		mov	ah, 0
		mov	bx, 3
		cwd
		idiv	bx
		or	dx, dx
		jnz	short loc_FA0D
		add	di, 2

loc_FA0D:				; CODE XREF: seg001:4F18j
		inc	byte_256A2
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		jmp	short loc_FA70
; ---------------------------------------------------------------------------

loc_FA1E:				; CODE XREF: seg001:4F87j
		cmp	di, 2
		jg	short loc_FA3B
		cmp	di, 2
		jnz	short loc_FA2F
		mov	word ptr [bp-2], 0FF80h
		jmp	short loc_FA34
; ---------------------------------------------------------------------------

loc_FA2F:				; CODE XREF: seg001:4F36j
		mov	word ptr [bp-2], 80h ; ''

loc_FA34:				; CODE XREF: seg001:4F3Dj
		mov	word ptr [si+0Eh], 1Ch
		jmp	short loc_FA63
; ---------------------------------------------------------------------------

loc_FA3B:				; CODE XREF: seg001:4F31j
		cmp	di, 4
		jnz	short loc_FA4B
		mov	word ptr [bp-2], 0FE80h
		mov	byte ptr [bp-3], 0B8h ;	'¸'
		jmp	short loc_FA54
; ---------------------------------------------------------------------------

loc_FA4B:				; CODE XREF: seg001:4F4Ej
		mov	word ptr [bp-2], 180h
		mov	byte ptr [bp-3], 0C8h ;	'È'

loc_FA54:				; CODE XREF: seg001:4F59j
		lea	ax, [si+0Ah]
		push	ax
		push	word ptr [bp-3]
		call	sub_11DCA
		mov	word ptr [si+0Eh], 20h ; ' '

loc_FA63:				; CODE XREF: seg001:4F49j
		mov	byte ptr [si+10h], 9
		mov	ax, [bp-2]
		add	[si+2],	ax
		dec	di
		jle	short loc_FA79

loc_FA70:				; CODE XREF: seg001:4F2Cj
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jnz	short loc_FA1E

loc_FA79:				; CODE XREF: seg001:4F7Ej
		pop	di
		pop	si
		leave
		retn
; ---------------------------------------------------------------------------
		enter	4, 0
		push	si
		push	di
		mov	di, 3
		cmp	byte_259A6, 12h
		jnz	short loc_FA92
		mov	byte_256A2, 0

loc_FA92:				; CODE XREF: seg001:4F9Bj
		mov	al, byte_256A2
		mov	ah, 0
		mov	bx, 2
		cwd
		idiv	bx
		or	dx, dx
		jnz	short loc_FAA4
		add	di, 2

loc_FAA4:				; CODE XREF: seg001:4FAFj
		inc	byte_256A2
		mov	byte ptr [bp-3], 0BAh ;	'º'
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		jmp	short loc_FB15
; ---------------------------------------------------------------------------

loc_FAB9:				; CODE XREF: seg001:502Cj
		cmp	di, 3
		jg	short loc_FAE0
		mov	word ptr [bp-2], 0
		lea	ax, [si+0Ah]
		push	ax
		push	word ptr [bp-3]
		call	sub_11DCA
		mov	word ptr [si+0Eh], 1Ch
		mov	byte ptr [si+10h], 9
		mov	al, [bp-3]
		add	al, 6
		mov	[bp-3],	al
		jmp	short loc_FB0C
; ---------------------------------------------------------------------------

loc_FAE0:				; CODE XREF: seg001:4FCCj
		cmp	di, 5
		jnz	short loc_FAF0
		mov	word ptr [bp-2], 0FE80h
		mov	byte ptr [bp-4], 0B8h ;	'¸'
		jmp	short loc_FAF9
; ---------------------------------------------------------------------------

loc_FAF0:				; CODE XREF: seg001:4FF3j
		mov	word ptr [bp-2], 180h
		mov	byte ptr [bp-4], 0C8h ;	'È'

loc_FAF9:				; CODE XREF: seg001:4FFEj
		lea	ax, [si+0Ah]
		push	ax
		push	word ptr [bp-4]
		call	sub_11DCA
		mov	word ptr [si+0Eh], 20h ; ' '
		mov	byte ptr [si+10h], 9

loc_FB0C:				; CODE XREF: seg001:4FEEj
		mov	ax, [bp-2]
		add	[si+2],	ax
		dec	di
		jle	short loc_FB1E

loc_FB15:				; CODE XREF: seg001:4FC7j
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jnz	short loc_FAB9

loc_FB1E:				; CODE XREF: seg001:5023j
		pop	di
		pop	si
		leave
		retn
; ---------------------------------------------------------------------------
		enter	4, 0
		push	si
		push	di
		mov	di, 3
		cmp	byte_259A6, 12h
		jnz	short loc_FB37
		mov	byte_256A2, 0

loc_FB37:				; CODE XREF: seg001:5040j
		mov	al, byte_256A2
		mov	ah, 0
		mov	bx, 2
		cwd
		idiv	bx
		or	dx, dx
		jnz	short loc_FB49
		add	di, 4

loc_FB49:				; CODE XREF: seg001:5054j
		inc	byte_256A2
		mov	byte ptr [bp-3], 0BAh ;	'º'
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		jmp	short loc_FBD9
; ---------------------------------------------------------------------------

loc_FB5E:				; CODE XREF: seg001:50F0j
		cmp	di, 3
		jg	short loc_FB85
		mov	word ptr [bp-2], 0
		lea	ax, [si+0Ah]
		push	ax
		push	word ptr [bp-3]
		call	sub_11DCA
		mov	word ptr [si+0Eh], 1Ch
		mov	byte ptr [si+10h], 8
		mov	al, [bp-3]
		add	al, 7
		mov	[bp-3],	al
		jmp	short loc_FBD0
; ---------------------------------------------------------------------------

loc_FB85:				; CODE XREF: seg001:5071j
		cmp	di, 6
		jl	short loc_FB91
		mov	word ptr [bp-2], 0FE80h
		jmp	short loc_FB96
; ---------------------------------------------------------------------------

loc_FB91:				; CODE XREF: seg001:5098j
		mov	word ptr [bp-2], 180h

loc_FB96:				; CODE XREF: seg001:509Fj
		mov	bx, di
		sub	bx, 4
		cmp	bx, 3
		ja	short loc_FBBD
		add	bx, bx
		jmp	cs:off_FBE8[bx]

loc_FBA7:				; DATA XREF: seg001:50FEo
		mov	byte ptr [bp-4], 0B2h ;	'²'
		jmp	short loc_FBBD
; ---------------------------------------------------------------------------

loc_FBAD:				; CODE XREF: seg001:50B2j
					; DATA XREF: seg001:50FCo
		mov	byte ptr [bp-4], 0B9h ;	'¹'
		jmp	short loc_FBBD
; ---------------------------------------------------------------------------

loc_FBB3:				; CODE XREF: seg001:50B2j
					; DATA XREF: seg001:50FAo
		mov	byte ptr [bp-4], 0CEh ;	'Î'
		jmp	short loc_FBBD
; ---------------------------------------------------------------------------

loc_FBB9:				; CODE XREF: seg001:50B2j
					; DATA XREF: seg001:off_FBE8o
		mov	byte ptr [bp-4], 0C7h ;	'Ç'

loc_FBBD:				; CODE XREF: seg001:50AEj seg001:50BBj ...
		lea	ax, [si+0Ah]
		push	ax
		push	word ptr [bp-4]
		call	sub_11DCA
		mov	word ptr [si+0Eh], 20h ; ' '
		mov	byte ptr [si+10h], 9

loc_FBD0:				; CODE XREF: seg001:5093j
		mov	ax, [bp-2]
		add	[si+2],	ax
		dec	di
		jle	short loc_FBE4

loc_FBD9:				; CODE XREF: seg001:506Cj
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jnz	loc_FB5E

loc_FBE4:				; CODE XREF: seg001:50E7j
		pop	di
		pop	si
		leave
		retn
; ---------------------------------------------------------------------------
off_FBE8	dw offset loc_FBB9	; DATA XREF: seg001:50B2r
		dw offset loc_FBB3
		dw offset loc_FBAD
		dw offset loc_FBA7
; ---------------------------------------------------------------------------
		enter	4, 0
		push	si
		push	di
		mov	di, 3
		cmp	byte_259A6, 12h
		jnz	short loc_FC05
		mov	byte_256A2, 0

loc_FC05:				; CODE XREF: seg001:510Ej
		mov	al, byte_256A2
		mov	ah, 0
		mov	bx, 2
		cwd
		idiv	bx
		or	dx, dx
		jnz	short loc_FC17
		add	di, 4

loc_FC17:				; CODE XREF: seg001:5122j
		inc	byte_256A2
		mov	byte ptr [bp-3], 0BAh ;	'º'
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		jmp	short loc_FCA7
; ---------------------------------------------------------------------------

loc_FC2C:				; CODE XREF: seg001:51BEj
		cmp	di, 3
		jg	short loc_FC53
		mov	word ptr [bp-2], 0
		lea	ax, [si+0Ah]
		push	ax
		push	word ptr [bp-3]
		call	sub_11DCA
		mov	word ptr [si+0Eh], 1Ch
		mov	byte ptr [si+10h], 8
		mov	al, [bp-3]
		add	al, 6
		mov	[bp-3],	al
		jmp	short loc_FC9E
; ---------------------------------------------------------------------------

loc_FC53:				; CODE XREF: seg001:513Fj
		cmp	di, 6
		jl	short loc_FC5F
		mov	word ptr [bp-2], 0FE80h
		jmp	short loc_FC64
; ---------------------------------------------------------------------------

loc_FC5F:				; CODE XREF: seg001:5166j
		mov	word ptr [bp-2], 180h

loc_FC64:				; CODE XREF: seg001:516Dj
		mov	bx, di
		sub	bx, 4
		cmp	bx, 3
		ja	short loc_FC8B
		add	bx, bx
		jmp	cs:off_FCB6[bx]

loc_FC75:				; DATA XREF: seg001:51CCo
		mov	byte ptr [bp-4], 0B2h ;	'²'
		jmp	short loc_FC8B
; ---------------------------------------------------------------------------

loc_FC7B:				; CODE XREF: seg001:5180j
					; DATA XREF: seg001:51CAo
		mov	byte ptr [bp-4], 0B9h ;	'¹'
		jmp	short loc_FC8B
; ---------------------------------------------------------------------------

loc_FC81:				; CODE XREF: seg001:5180j
					; DATA XREF: seg001:51C8o
		mov	byte ptr [bp-4], 0CEh ;	'Î'
		jmp	short loc_FC8B
; ---------------------------------------------------------------------------

loc_FC87:				; CODE XREF: seg001:5180j
					; DATA XREF: seg001:off_FCB6o
		mov	byte ptr [bp-4], 0C7h ;	'Ç'

loc_FC8B:				; CODE XREF: seg001:517Cj seg001:5189j ...
		lea	ax, [si+0Ah]
		push	ax
		push	word ptr [bp-4]
		call	sub_11DCA
		mov	word ptr [si+0Eh], 20h ; ' '
		mov	byte ptr [si+10h], 9

loc_FC9E:				; CODE XREF: seg001:5161j
		mov	ax, [bp-2]
		add	[si+2],	ax
		dec	di
		jle	short loc_FCB2

loc_FCA7:				; CODE XREF: seg001:513Aj
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jnz	loc_FC2C

loc_FCB2:				; CODE XREF: seg001:51B5j
		pop	di
		pop	si
		leave
		retn
; ---------------------------------------------------------------------------
off_FCB6	dw offset loc_FC87	; DATA XREF: seg001:5180r
		dw offset loc_FC81
		dw offset loc_FC7B
		dw offset loc_FC75
; ---------------------------------------------------------------------------
		enter	4, 0
		push	si
		push	di
		mov	di, 3
		cmp	byte_259A6, 12h
		jnz	short loc_FCD3
		mov	byte_256A2, 0

loc_FCD3:				; CODE XREF: seg001:51DCj
		mov	al, byte_256A2
		mov	ah, 0
		mov	bx, 2
		cwd
		idiv	bx
		or	dx, dx
		jnz	short loc_FCE5
		add	di, 4

loc_FCE5:				; CODE XREF: seg001:51F0j
		inc	byte_256A2
		mov	byte ptr [bp-3], 0BAh ;	'º'
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		jmp	short loc_FD75
; ---------------------------------------------------------------------------

loc_FCFA:				; CODE XREF: seg001:528Cj
		cmp	di, 3
		jg	short loc_FD21
		mov	word ptr [bp-2], 0
		lea	ax, [si+0Ah]
		push	ax
		push	word ptr [bp-3]
		call	sub_11DCA
		mov	word ptr [si+0Eh], 1Ch
		mov	byte ptr [si+10h], 8
		mov	al, [bp-3]
		add	al, 6
		mov	[bp-3],	al
		jmp	short loc_FD6C
; ---------------------------------------------------------------------------

loc_FD21:				; CODE XREF: seg001:520Dj
		cmp	di, 6
		jl	short loc_FD2D
		mov	word ptr [bp-2], 0FE80h
		jmp	short loc_FD32
; ---------------------------------------------------------------------------

loc_FD2D:				; CODE XREF: seg001:5234j
		mov	word ptr [bp-2], 180h

loc_FD32:				; CODE XREF: seg001:523Bj
		mov	bx, di
		sub	bx, 4
		cmp	bx, 3
		ja	short loc_FD59
		add	bx, bx
		jmp	cs:off_FD84[bx]

loc_FD43:				; DATA XREF: seg001:529Ao
		mov	byte ptr [bp-4], 0B2h ;	'²'
		jmp	short loc_FD59
; ---------------------------------------------------------------------------

loc_FD49:				; CODE XREF: seg001:524Ej
					; DATA XREF: seg001:5298o
		mov	byte ptr [bp-4], 0B9h ;	'¹'
		jmp	short loc_FD59
; ---------------------------------------------------------------------------

loc_FD4F:				; CODE XREF: seg001:524Ej
					; DATA XREF: seg001:5296o
		mov	byte ptr [bp-4], 0CEh ;	'Î'
		jmp	short loc_FD59
; ---------------------------------------------------------------------------

loc_FD55:				; CODE XREF: seg001:524Ej
					; DATA XREF: seg001:off_FD84o
		mov	byte ptr [bp-4], 0C7h ;	'Ç'

loc_FD59:				; CODE XREF: seg001:524Aj seg001:5257j ...
		lea	ax, [si+0Ah]
		push	ax
		push	word ptr [bp-4]
		call	sub_11DCA
		mov	word ptr [si+0Eh], 20h ; ' '
		mov	byte ptr [si+10h], 9

loc_FD6C:				; CODE XREF: seg001:522Fj
		mov	ax, [bp-2]
		add	[si+2],	ax
		dec	di
		jle	short loc_FD80

loc_FD75:				; CODE XREF: seg001:5208j
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jnz	loc_FCFA

loc_FD80:				; CODE XREF: seg001:5283j
		pop	di
		pop	si
		leave
		retn
; ---------------------------------------------------------------------------
off_FD84	dw offset loc_FD55	; DATA XREF: seg001:524Er
		dw offset loc_FD4F
		dw offset loc_FD49
		dw offset loc_FD43
; ---------------------------------------------------------------------------
		enter	4, 0
		push	si
		push	di
		mov	di, 5
		cmp	byte_259A6, 12h
		jnz	short loc_FDA1
		mov	byte_256A2, 0

loc_FDA1:				; CODE XREF: seg001:52AAj
		mov	al, byte_256A2
		mov	ah, 0
		mov	bx, 2
		cwd
		idiv	bx
		or	dx, dx
		jnz	short loc_FDB3
		add	di, 4

loc_FDB3:				; CODE XREF: seg001:52BEj
		inc	byte_256A2
		mov	byte ptr [bp-3], 0B8h ;	'¸'
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		jmp	short loc_FE43
; ---------------------------------------------------------------------------

loc_FDC8:				; CODE XREF: seg001:535Aj
		cmp	di, 5
		jg	short loc_FDEF
		mov	word ptr [bp-2], 0
		lea	ax, [si+0Ah]
		push	ax
		push	word ptr [bp-3]
		call	sub_11DCA
		mov	word ptr [si+0Eh], 1Ch
		mov	byte ptr [si+10h], 8
		mov	al, [bp-3]
		add	al, 4
		mov	[bp-3],	al
		jmp	short loc_FE3A
; ---------------------------------------------------------------------------

loc_FDEF:				; CODE XREF: seg001:52DBj
		cmp	di, 8
		jl	short loc_FDFB
		mov	word ptr [bp-2], 0FE80h
		jmp	short loc_FE00
; ---------------------------------------------------------------------------

loc_FDFB:				; CODE XREF: seg001:5302j
		mov	word ptr [bp-2], 180h

loc_FE00:				; CODE XREF: seg001:5309j
		mov	bx, di
		sub	bx, 6
		cmp	bx, 3
		ja	short loc_FE27
		add	bx, bx
		jmp	cs:off_FE52[bx]

loc_FE11:				; DATA XREF: seg001:5368o
		mov	byte ptr [bp-4], 0B2h ;	'²'
		jmp	short loc_FE27
; ---------------------------------------------------------------------------

loc_FE17:				; CODE XREF: seg001:531Cj
					; DATA XREF: seg001:5366o
		mov	byte ptr [bp-4], 0B9h ;	'¹'
		jmp	short loc_FE27
; ---------------------------------------------------------------------------

loc_FE1D:				; CODE XREF: seg001:531Cj
					; DATA XREF: seg001:5364o
		mov	byte ptr [bp-4], 0CEh ;	'Î'
		jmp	short loc_FE27
; ---------------------------------------------------------------------------

loc_FE23:				; CODE XREF: seg001:531Cj
					; DATA XREF: seg001:off_FE52o
		mov	byte ptr [bp-4], 0C7h ;	'Ç'

loc_FE27:				; CODE XREF: seg001:5318j seg001:5325j ...
		lea	ax, [si+0Ah]
		push	ax
		push	word ptr [bp-4]
		call	sub_11DCA
		mov	word ptr [si+0Eh], 20h ; ' '
		mov	byte ptr [si+10h], 9

loc_FE3A:				; CODE XREF: seg001:52FDj
		mov	ax, [bp-2]
		add	[si+2],	ax
		dec	di
		jle	short loc_FE4E

loc_FE43:				; CODE XREF: seg001:52D6j
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jnz	loc_FDC8

loc_FE4E:				; CODE XREF: seg001:5351j
		pop	di
		pop	si
		leave
		retn
; ---------------------------------------------------------------------------
off_FE52	dw offset loc_FE23	; DATA XREF: seg001:531Cr
		dw offset loc_FE1D
		dw offset loc_FE17
		dw offset loc_FE11
; ---------------------------------------------------------------------------
		enter	4, 0
		push	si
		push	di
		mov	di, 7
		cmp	byte_259A6, 12h
		jnz	short loc_FE6F
		mov	byte_256A2, 0

loc_FE6F:				; CODE XREF: seg001:5378j
		mov	al, byte_256A2
		mov	ah, 0
		mov	bx, 2
		cwd
		idiv	bx
		or	dx, dx
		jnz	short loc_FE81
		add	di, 4

loc_FE81:				; CODE XREF: seg001:538Cj
		inc	byte_256A2
		mov	byte ptr [bp-3], 0B8h ;	'¸'
		mov	word_256A4, 0B55Eh
		mov	byte_256A6, 0
		jmp	loc_FF19
; ---------------------------------------------------------------------------

loc_FE97:				; CODE XREF: seg001:5430j
		cmp	di, 5
		jg	short loc_FEBE
		mov	word ptr [bp-2], 0
		lea	ax, [si+0Ah]
		push	ax
		push	word ptr [bp-3]
		call	sub_11DCA
		mov	word ptr [si+0Eh], 1Ch
		mov	byte ptr [si+10h], 8
		mov	al, [bp-3]
		add	al, 4
		mov	[bp-3],	al
		jmp	short loc_FF10
; ---------------------------------------------------------------------------

loc_FEBE:				; CODE XREF: seg001:53AAj
		mov	bx, di
		sub	bx, 6
		cmp	bx, 5
		ja	short loc_FEEB
		add	bx, bx
		jmp	cs:off_FF28[bx]

loc_FECF:				; DATA XREF: seg001:5440o seg001:5442o
		mov	byte ptr [bp-4], 0C0h ;	'À'
		jmp	short loc_FEEB
; ---------------------------------------------------------------------------

loc_FED5:				; CODE XREF: seg001:53DAj
					; DATA XREF: seg001:543Eo
		mov	byte ptr [bp-4], 0ACh ;	'¬'
		jmp	short loc_FEEB
; ---------------------------------------------------------------------------

loc_FEDB:				; CODE XREF: seg001:53DAj
					; DATA XREF: seg001:543Co
		mov	byte ptr [bp-4], 0D4h ;	'Ô'
		jmp	short loc_FEEB
; ---------------------------------------------------------------------------

loc_FEE1:				; CODE XREF: seg001:53DAj
					; DATA XREF: seg001:543Ao
		mov	byte ptr [bp-4], 0B6h ;	'¶'
		jmp	short loc_FEEB
; ---------------------------------------------------------------------------

loc_FEE7:				; CODE XREF: seg001:53DAj
					; DATA XREF: seg001:off_FF28o
		mov	byte ptr [bp-4], 0CAh ;	'Ê'

loc_FEEB:				; CODE XREF: seg001:53D6j seg001:53E3j ...
		test	di, 1
		jz	short loc_FEF8
		mov	word ptr [bp-2], 0FE80h
		jmp	short loc_FEFD
; ---------------------------------------------------------------------------

loc_FEF8:				; CODE XREF: seg001:53FFj
		mov	word ptr [bp-2], 180h

loc_FEFD:				; CODE XREF: seg001:5406j
		lea	ax, [si+0Ah]
		push	ax
		push	word ptr [bp-4]
		call	sub_11DCA
		mov	word ptr [si+0Eh], 20h ; ' '
		mov	byte ptr [si+10h], 9

loc_FF10:				; CODE XREF: seg001:53CCj
		mov	ax, [bp-2]
		add	[si+2],	ax
		dec	di
		jle	short loc_FF24

loc_FF19:				; CODE XREF: seg001:53A4j
		call	sub_11D96
		mov	si, ax
		or	ax, ax
		jnz	loc_FE97

loc_FF24:				; CODE XREF: seg001:5427j
		pop	di
		pop	si
		leave
		retn
; ---------------------------------------------------------------------------
off_FF28	dw offset loc_FEE7	; DATA XREF: seg001:53DAr
		dw offset loc_FEE1
		dw offset loc_FEDB
		dw offset loc_FED5
		dw offset loc_FECF
		dw offset loc_FECF

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_FF34	proc near		; CODE XREF: sub_AED0+C0p
		push	bp
		mov	bp, sp
		les	bx, dword_2CDC6
		mov	al, es:[bx+12h]
		les	bx, off_22E34
		mov	es:[bx+2], al
		les	bx, dword_2CDC6
		les	bx, off_22E38
		mov	es:[bx+2], al
		push	large [off_22E34]
		call	sub_F14
		push	800h
		call	sub_2578
		mov	word_256AE, ax
		push	ax
		push	large 800h
		call	sub_E60
		call	sub_DF4
		push	0
		push	large [off_22E38]
		push	0
		call	sub_13938
		pop	bp
		retn
sub_FF34	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_FF89	proc near		; CODE XREF: sub_E7FD+6Dp
		push	bp
		mov	bp, sp
		cmp	word_256AE, 0
		jz	short loc_FFA2
		push	word_256AE
		call	sub_267C
		mov	word_256AE, 0

loc_FFA2:				; CODE XREF: sub_FF89+8j
		pop	bp
		retn
sub_FF89	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_FFA4	proc near		; CODE XREF: sub_B1D0+ADp
		push	bp
		mov	bp, sp
		mov	byte_256A8, 0
		mov	word_255AA, 11BEh
		pop	bp
		retn
sub_FFA4	endp

; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		cmp	byte_256A8, 0
		jnz	short loc_10028
		les	bx, dword_2CDC6
		cmp	byte ptr es:[bx+0Dh], 0
		jz	short loc_10028
		cmp	byte_2D00A, 0
		jnz	short loc_10028
		cmp	byte_259AA, 0
		jz	short loc_FFED
		cmp	byte_259AA, 20h	; ' '
		jbe	short loc_10028
		mov	byte_259AA, 0
		mov	byte_259A9, 0
		mov	byte_259A3, 0

loc_FFED:				; CODE XREF: seg001:54E5j
		les	bx, dword_2CDC6
		dec	byte ptr es:[bx+0Dh]
		nop
		push	cs
		call	near ptr sub_EFA1
		mov	byte_256A8, 1
		mov	byte_256A9, 0
		mov	byte_259A2, 0FFh
		mov	ax, word_255AC
		mov	word_255AA, ax
		mov	byte_2CFFA, 0C0h ; 'À'
		push	0Dh
		call	sub_138B2
		mov	byte_236E0, 1
		les	bx, dword_2CDC6
		inc	byte ptr es:[bx+32h]

loc_10028:				; CODE XREF: seg001:54CCj seg001:54D7j ...
		pop	bp
		retn

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1002A	proc near		; CODE XREF: sub_1020A+35p

arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		cmp	byte_266D8, 0
		jnz	short loc_10038
		mov	al, 0Fh
		jmp	short loc_1003A
; ---------------------------------------------------------------------------

loc_10038:				; CODE XREF: sub_1002A+8j
		mov	al, 2

loc_1003A:				; CODE XREF: sub_1002A+Cj
		mov	byte_2CDCA, al
		mov	ax, word_256AE
		mov	word_2CDCE, ax
		push	[bp+arg_0]
		call	sub_BF16
		pop	bp
		retn	2
sub_1002A	endp

; ---------------------------------------------------------------------------
		enter	2, 0
		call	sub_C15C
		mov	ah, 0Fh
		call	sub_C162
		call	sub_1200A
		mov	dx, 7Ch	; '|'
		mov	al, 0
		out	dx, al
		push	large 200038h
		push	0
		call	sub_136B4
		cmp	byte_256A9, 50h	; 'P'
		ja	short loc_10096
		mov	byte_25592, 9
		mov	al, byte_256A9
		mov	ah, 0
		add	ax, 0FFD0h
		imul	ax, 3
		mov	dx, 0C4h ; 'Ä'
		sub	dx, ax
		mov	word_216E4, dx
		mov	byte_266D3, 1
		jmp	short loc_100FE
; ---------------------------------------------------------------------------

loc_10096:				; CODE XREF: seg001:5584j
		cmp	byte_256A9, 0A0h ; ' '
		ja	short loc_100FE
		cmp	byte_266CD, 0
		jnz	short loc_100FE
		mov	al, byte ptr word_266CA
		shl	al, 2
		mov	[bp-1],	al
		push	539Ah
		push	large 0C000B80h
		push	800h
		mov	ah, 0
		push	ax
		call	sub_1333C
		push	word_266DA
		push	word_266DC
		nop
		push	cs
		call	near ptr sub_C64A
		mov	al, 80h	; ''
		sub	al, [bp-1]
		mov	[bp-1],	al
		push	539Ah
		push	large 0C000B80h
		push	800h
		mov	ah, 0
		push	ax
		call	sub_1333C
		push	word_266DA
		push	word_266DC
		nop
		push	cs
		call	near ptr sub_C64A
		push	9
		call	sub_138B2

loc_100FE:				; CODE XREF: seg001:55A4j seg001:55ABj ...
		call	sub_C156
		mov	ah, 0Eh
		call	sub_C162
		push	0
		call	sub_1030D
		mov	dx, 7Ch	; '|'
		mov	al, 0
		out	dx, al
		leave
		retn
; ---------------------------------------------------------------------------
		enter	2, 0
		push	si
		call	sub_C15C
		mov	ah, 1
		call	sub_C162
		call	sub_1200A
		mov	dx, 7Ch	; '|'
		mov	al, 0
		out	dx, al
		push	large 200038h
		push	0
		call	sub_136B4
		cmp	byte_256A9, 50h	; 'P'
		ja	short loc_1015E
		mov	byte_25592, 0Fh
		mov	al, byte_256A9
		mov	ah, 0
		add	ax, 0FFD0h
		imul	ax, 3
		mov	dx, 0C4h ; 'Ä'
		sub	dx, ax
		mov	word_216E4, dx
		mov	byte_266D3, 1
		jmp	loc_101F4
; ---------------------------------------------------------------------------

loc_1015E:				; CODE XREF: seg001:564Bj
		cmp	byte_256A9, 0A0h ; ' '
		ja	loc_101F4
		cmp	byte_266CD, 0
		jnz	loc_101F4
		mov	al, byte_256A9
		mov	ah, 0
		add	ax, 0FFB0h
		shl	ax, 2
		mov	si, ax
		mov	al, byte_256A9
		mov	ah, 0
		mov	dx, 0A1h ; '¡'
		sub	dx, ax
		imul	dx, 3
		add	dx, 28h	; '('
		mov	[bp-2],	dx
		cmp	byte_256A9, 78h	; 'x'
		jnb	short loc_101B6
		mov	al, byte_256A9
		mov	ah, 0
		add	ax, 0FFB0h
		shl	ax, 3
		push	ax
		call	sub_BC94
		mov	dl, byte_256A9
		mov	dh, 0
		add	dx, 0FFC0h
		shl	dx, 2
		sub	ax, dx
		jmp	short loc_101D7
; ---------------------------------------------------------------------------

loc_101B6:				; CODE XREF: seg001:56A5j
		mov	al, byte_256A9
		mov	ah, 0
		mov	dx, 0A1h ; '¡'
		sub	dx, ax
		shl	dx, 3
		push	dx
		call	sub_BC94
		mov	dl, byte_256A9
		mov	dh, 0
		mov	bx, 0A1h ; '¡'
		sub	bx, dx
		shl	bx, 2
		sub	ax, bx

loc_101D7:				; CODE XREF: seg001:56C4j
		add	ax, si
		mov	si, ax
		mov	ax, si
		shl	ax, 4
		push	ax
		mov	ax, [bp-2]
		shl	ax, 4
		push	ax
		nop
		push	cs
		call	near ptr sub_C64A
		push	9
		call	sub_138B2

loc_101F4:				; CODE XREF: seg001:566Bj seg001:5673j ...
		call	sub_C156
		mov	ah, 8
		call	sub_C162
		push	1
		call	sub_1030D
		mov	dx, 7Ch	; '|'
		mov	al, 0
		out	dx, al
		pop	si
		leave
		retn

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1020A	proc near		; CODE XREF: sub_AB88+7Fp
		push	bp
		mov	bp, sp
		cmp	byte_256A8, 0
		jz	loc_1030B
		cmp	byte_256A9, 20h	; ' '
		jnb	short loc_1022A
		mov	al, byte_256A9
		mov	ah, 0
		mov	bx, 4
		cwd
		idiv	bx
		jmp	short loc_1023E
; ---------------------------------------------------------------------------

loc_1022A:				; CODE XREF: sub_1020A+11j
		cmp	byte_256A9, 30h	; '0'
		jnb	short loc_10245
		mov	al, byte_256A9
		mov	ah, 0
		cwd
		sub	ax, dx
		sar	ax, 1
		add	ax, 0FFF8h

loc_1023E:				; CODE XREF: sub_1020A+1Ej
		push	ax
		call	sub_1002A

loc_10242:				; CODE XREF: sub_1020A+E5j
		jmp	loc_10307
; ---------------------------------------------------------------------------

loc_10245:				; CODE XREF: sub_1020A+25j
		cmp	byte_256A9, 30h	; '0'
		jnz	short loc_10281
		mov	byte_255BC, 0
		push	0
		call	sub_1D50
		mov	word_255AA, 11BEh
		mov	al, byte_23DEC
		mov	byte_257D6, al
		mov	al, byte_23DED
		mov	byte_257D7, al
		mov	al, byte_23DEE
		mov	byte_257D8, al
		mov	byte_23DEC, 0F0h ; 'ð'
		mov	byte_23DED, 0B0h ; '°'
		mov	byte_23DEE, 0C0h ; 'À'
		jmp	short loc_10288
; ---------------------------------------------------------------------------

loc_10281:				; CODE XREF: sub_1020A+40j
		cmp	byte_256A9, 0B0h ; '°'
		jnb	short loc_1028E

loc_10288:				; CODE XREF: sub_1020A+75j
		call	word_256AC
		jmp	short loc_10307
; ---------------------------------------------------------------------------

loc_1028E:				; CODE XREF: sub_1020A+7Cj
		cmp	byte_256A9, 0B0h ; '°'
		jnz	short loc_102A8
		push	0Fh
		call	sub_138B2
		mov	byte_255BC, 1
		mov	byte_236E0, 0
		jmp	short loc_102AF
; ---------------------------------------------------------------------------

loc_102A8:				; CODE XREF: sub_1020A+89j
		cmp	byte_256A9, 0E2h ; 'â'
		jnb	short loc_102F2

loc_102AF:				; CODE XREF: sub_1020A+9Cj
		mov	al, byte_257D6
		mov	byte_23DEC, al
		mov	al, byte_257D7
		mov	byte_23DED, al
		mov	al, byte_257D8
		mov	byte_23DEE, al
		mov	ax, word_255AC
		mov	word_255AA, ax
		mov	al, byte_256A9
		mov	ah, 0
		add	ax, 0FF50h
		add	ax, ax
		mov	dx, 0C8h ; 'È'
		sub	dx, ax
		mov	word_216E4, dx
		mov	byte_266D3, 1
		cmp	byte_256A9, 0B1h ; '±'
		jnz	short loc_10307
		push	word_255B8
		call	sub_1D50
		jmp	loc_10242
; ---------------------------------------------------------------------------

loc_102F2:				; CODE XREF: sub_1020A+A3j
		mov	byte_256A8, 0
		mov	word_216E4, 64h	; 'd'
		mov	byte_266D3, 1
		mov	byte_25592, 0Dh

loc_10307:				; CODE XREF: sub_1020A:loc_10242j
					; sub_1020A+82j ...
		inc	byte_256A9

loc_1030B:				; CODE XREF: sub_1020A+8j
		pop	bp
		retn
sub_1020A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1030D	proc near		; CODE XREF: seg001:5618p seg001:570Ep

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  4

		enter	4, 0
		push	si
		push	di
		cmp	byte_256A9, 30h	; '0'
		jnz	short loc_10386
		mov	si, 4370h
		xor	di, di
		jmp	short loc_10381
; ---------------------------------------------------------------------------

loc_10321:				; CODE XREF: sub_1030D+77j
		push	1800h
		call	sub_BC94
		mov	[si], ax
		push	1700h
		call	sub_BC94
		mov	[si+2],	ax
		cmp	[bp+arg_0], 0
		jnz	short loc_1036F
		mov	byte ptr [si+4], 0C0h ;	'À'
		jmp	short loc_10346
; ---------------------------------------------------------------------------

loc_1033E:				; CODE XREF: sub_1030D+43j
		push	1800h
		call	sub_BC94
		mov	[si], ax

loc_10346:				; CODE XREF: sub_1030D+2Fj
		cmp	word ptr [si], 800h
		jl	short loc_10352
		cmp	word ptr [si], 1000h
		jle	short loc_1033E

loc_10352:				; CODE XREF: sub_1030D+3Dj
		cmp	word ptr [si], 0C00h
		jg	short loc_1035F
		mov	ax, 820h
		sub	ax, [si]
		jmp	short loc_10364
; ---------------------------------------------------------------------------

loc_1035F:				; CODE XREF: sub_1030D+49j
		mov	ax, [si]
		add	ax, 0F020h

loc_10364:				; CODE XREF: sub_1030D+50j
		mov	[bp+var_2], ax
		mov	bx, 9
		cwd
		idiv	bx
		jmp	short loc_1037A
; ---------------------------------------------------------------------------

loc_1036F:				; CODE XREF: sub_1030D+29j
		mov	byte ptr [si+4], 0E0h ;	'à'
		push	7Fh ; ''
		call	sub_BC7E
		add	al, 0A0h ; ' '

loc_1037A:				; CODE XREF: sub_1030D+60j
		mov	[si+5],	al
		inc	di
		add	si, 6

loc_10381:				; CODE XREF: sub_1030D+12j
		cmp	di, 30h	; '0'
		jl	short loc_10321

loc_10386:				; CODE XREF: sub_1030D+Bj
		mov	si, 4370h
		xor	di, di
		jmp	loc_1041D
; ---------------------------------------------------------------------------

loc_1038E:				; CODE XREF: sub_1030D+113j
		push	ss
		lea	ax, [bp+var_2]
		push	ax
		push	ss
		lea	ax, [bp+var_4]
		push	ax
		push	word ptr [si+4]
		mov	al, [si+5]
		mov	ah, 0
		push	ax
		call	sub_13117
		mov	ax, [bp+var_2]
		add	[si], ax
		mov	ax, [bp+var_4]
		add	[si+2],	ax
		cmp	word ptr [si], 0FF80h
		jle	short loc_103C9
		cmp	word ptr [si], 1880h
		jge	short loc_103C9
		cmp	word ptr [si+2], 0FF80h
		jle	short loc_103C9
		cmp	word ptr [si+2], 1800h
		jl	short loc_103F8

loc_103C9:				; CODE XREF: sub_1030D+A7j
					; sub_1030D+ADj ...
		cmp	[bp+arg_0], 0
		jnz	short loc_103D6
		mov	word ptr [si+2], 1800h
		jmp	short loc_103F8
; ---------------------------------------------------------------------------

loc_103D6:				; CODE XREF: sub_1030D+C0j
		test	di, 1
		jz	short loc_103EB
		mov	word ptr [si], 0FF80h
		push	1700h
		call	sub_BC94
		mov	[si+2],	ax
		jmp	short loc_103F8
; ---------------------------------------------------------------------------

loc_103EB:				; CODE XREF: sub_1030D+CDj
		push	1800h
		call	sub_BC94
		mov	[si], ax
		mov	word ptr [si+2], 1780h

loc_103F8:				; CODE XREF: sub_1030D+BAj
					; sub_1030D+C7j ...
		mov	ax, 0A800h
		mov	es, ax
		assume es:nothing
		mov	ax, [si]
		sar	ax, 4
		add	ax, 18h
		mov	[bp+var_2], ax
		mov	ax, [si+2]
		sar	ax, 4
		add	ax, 8
		mov	cx, [bp+var_2]
		push	78h ; 'x'
		call	sub_C01A
		inc	di
		add	si, 6

loc_1041D:				; CODE XREF: sub_1030D+7Ej
		cmp	di, 30h	; '0'
		jl	loc_1038E
		pop	di
		pop	si
		leave
		retn	2
sub_1030D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1042A	proc near		; CODE XREF: sub_B1D0+9Dp
		push	bp
		mov	bp, sp
		mov	word_25608, 0
		mov	byte_2560A, 0
		mov	byte_259A6, 0
		mov	byte_259A7, 0
		pop	bp
		retn
sub_1042A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10444	proc near		; CODE XREF: sub_CB58+9p
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	word ptr dword_255A4, 10h
		mov	word ptr dword_255A4+2,	10h
		mov	si, 0B55Eh
		xor	di, di
		jmp	short loc_1046E
; ---------------------------------------------------------------------------

loc_1045C:				; CODE XREF: sub_10444+2Dj
		cmp	byte ptr [si], 0
		jz	short loc_1046A
		push	word ptr [si+8]
		push	word ptr [si+6]
		call	sub_B9D6

loc_1046A:				; CODE XREF: sub_10444+1Bj
		inc	di
		add	si, 12h

loc_1046E:				; CODE XREF: sub_10444+16j
		cmp	di, 44h	; 'D'
		jl	short loc_1045C
		cmp	word_25608, 20h	; ' '
		jb	short loc_104B2
		mov	word ptr dword_255A4, 8
		mov	ax, word ptr dword_25610+2
		mov	bx, 10h
		cwd
		idiv	bx
		mov	word ptr dword_255A4+2,	ax
		mov	ax, word ptr dword_25610+2
		cwd
		sub	ax, dx
		sar	ax, 1
		push	ax
		mov	ax, word ptr dword_25610
		add	ax, 0FE80h
		push	ax
		call	sub_B9D6
		mov	ax, word ptr dword_25610+2
		cwd
		sub	ax, dx
		sar	ax, 1
		push	ax
		mov	ax, word ptr dword_25610
		add	ax, 180h
		push	ax
		call	sub_B9D6

loc_104B2:				; CODE XREF: sub_10444+34j
		pop	di
		pop	si
		pop	bp
		retn
sub_10444	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_104B6	proc near		; CODE XREF: sub_AB88+5Cp

var_2		= word ptr -2

		enter	2, 0
		push	si
		push	di
		mov	word_2597E, 0
		mov	si, 0B55Eh
		mov	di, 44A6h
		mov	[bp+var_2], 0
		jmp	short loc_1052D
; ---------------------------------------------------------------------------

loc_104CF:				; CODE XREF: sub_104B6+7Bj
		cmp	byte ptr [si], 12h
		jb	short loc_104D7
		mov	byte ptr [si], 0

loc_104D7:				; CODE XREF: sub_104B6+1Cj
		cmp	byte ptr [si], 0
		jz	short loc_10527
		lea	ax, [si+2]
		push	ax
		call	sub_BC38
		cmp	ax, 0FF80h
		jle	short loc_104F8
		cmp	ax, 1880h
		jge	short loc_104F8
		cmp	dx, 0FF80h
		jle	short loc_104F8
		cmp	dx, 1780h
		jl	short loc_104FD

loc_104F8:				; CODE XREF: sub_104B6+30j
					; sub_104B6+35j ...
		mov	byte ptr [si], 12h
		jmp	short loc_10527
; ---------------------------------------------------------------------------

loc_104FD:				; CODE XREF: sub_104B6+40j
		cmp	byte ptr [si], 1
		jbe	short loc_10515
		inc	byte ptr [si]
		mov	al, [si]
		mov	ah, 0
		and	ax, 3
		cmp	ax, 2
		jnz	short loc_10527
		inc	word ptr [si+0Eh]
		jmp	short loc_10527
; ---------------------------------------------------------------------------

loc_10515:				; CODE XREF: sub_104B6+4Aj
		mov	[di], ax
		mov	[di+2],	dx
		mov	[di+4],	si
		add	di, 6
		inc	word_2597E
		inc	byte ptr [si+1]

loc_10527:				; CODE XREF: sub_104B6+24j
					; sub_104B6+45j ...
		inc	[bp+var_2]
		add	si, 12h

loc_1052D:				; CODE XREF: sub_104B6+17j
		cmp	[bp+var_2], 44h	; 'D'
		jl	short loc_104CF
		cmp	word_25608, 0
		jz	short loc_1054E
		mov	eax, dword_2560C
		mov	dword_25610, eax
		mov	eax, dword_259AC
		mov	dword_2560C, eax
		dec	word_25608

loc_1054E:				; CODE XREF: sub_104B6+82j
		pop	di
		pop	si
		leave
		retn
sub_104B6	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10552	proc near		; CODE XREF: sub_AB88+8Dp
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, 0A800h
		mov	es, ax
		call	sub_C156
		cmp	word_25608, 20h	; ' '
		jbe	short loc_10569
		call	sub_E1F4

loc_10569:				; CODE XREF: sub_10552+12j
		mov	si, 0BA14h
		xor	di, di
		jmp	short loc_105AA
; ---------------------------------------------------------------------------

loc_10570:				; CODE XREF: sub_10552+5Bj
		cmp	byte ptr [si], 0
		jz	short loc_105A6
		cmp	byte ptr [si], 12h
		jnb	short loc_105A6
		mov	ch, 0
		mov	cl, [si+0Eh]
		cmp	byte ptr [si], 1
		jnz	short loc_1058D
		mov	al, [si+1]
		and	al, 1
		add	al, cl
		mov	cl, al

loc_1058D:				; CODE XREF: sub_10552+30j
		mov	ax, [si+4]
		add	ax, 80h	; ''
		push	ax
		call	sub_BC10
		mov	dx, ax
		mov	ax, [si+2]
		sar	ax, 4
		add	ax, 18h
		push	cx
		call	sub_C546

loc_105A6:				; CODE XREF: sub_10552+21j
					; sub_10552+26j
		inc	di
		sub	si, 12h

loc_105AA:				; CODE XREF: sub_10552+1Cj
		cmp	di, 44h	; 'D'
		jl	short loc_10570
		mov	dx, 7Ch	; '|'
		mov	al, 0
		out	dx, al
		pop	di
		pop	si
		pop	bp
		retn
sub_10552	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_105B9	proc far		; CODE XREF: seg003:0722P seg003:078DP ...

var_F		= byte ptr -0Fh
var_E		= word ptr -0Eh
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2

		enter	10h, 0
		push	si
		push	di
		mov	ax, word ptr dword_257DE
		sub	ax, word_257E2
		mov	[bp+var_6], ax
		mov	ax, word ptr dword_257DE+2
		sub	ax, word_257E4
		mov	[bp+var_8], ax
		mov	ax, word_257E2
		add	ax, ax
		mov	[bp+var_A], ax
		mov	ax, word_257E4
		add	ax, ax
		mov	[bp+var_C], ax
		xor	di, di
		mov	[bp+var_F], 0
		mov	[bp+var_4], 44A6h
		mov	[bp+var_2], 0
		jmp	short loc_10664
; ---------------------------------------------------------------------------

loc_105F5:				; CODE XREF: sub_105B9+B2j
		mov	bx, [bp+var_4]
		mov	ax, [bx]
		sub	ax, [bp+var_6]
		cmp	ax, [bp+var_A]
		ja	short loc_1065D
		mov	ax, [bx+2]
		sub	ax, [bp+var_8]
		cmp	ax, [bp+var_C]
		ja	short loc_1065D
		mov	si, [bx+4]
		mov	byte ptr [si], 2
		mov	ax, [si+0Ah]
		mov	bx, 6
		cwd
		idiv	bx
		mov	[si+0Ah], ax
		mov	ax, [si+0Ch]
		cwd
		idiv	bx
		mov	[si+0Ch], ax
		mov	word ptr [si+0Eh], 28h ; '('
		inc	[bp+var_F]
		mov	al, [si+10h]
		mov	ah, 0
		mov	dl, [bp+var_F]
		mov	dh, 0
		push	dx
		cwd
		pop	bx
		idiv	bx
		add	di, ax
		inc	byte_25980
		test	byte_25980, 1
		jz	short loc_1065D
		push	word ptr [si+2]
		push	word ptr [si+4]
		push	large 800001h
		call	sub_13E2A

loc_1065D:				; CODE XREF: sub_105B9+47j
					; sub_105B9+52j ...
		inc	[bp+var_2]
		add	[bp+var_4], 6

loc_10664:				; CODE XREF: sub_105B9+3Aj
		mov	ax, [bp+var_2]
		cmp	ax, word_2597E
		jb	short loc_105F5
		cmp	byte_256A8, 0
		jz	short loc_1068C
		cmp	byte_266CD, 0
		jnz	short loc_1067E
		add	di, 5

loc_1067E:				; CODE XREF: sub_105B9+C0j
		cmp	byte_22E9C, 0
		jz	short loc_1068C
		mov	ax, di
		shr	ax, 2
		mov	di, ax

loc_1068C:				; CODE XREF: sub_105B9+B9j
					; sub_105B9+CAj
		cmp	byte_266CC, 0
		jz	short loc_10704
		cmp	word_25608, 20h	; ' '
		jbe	short loc_10704
		mov	ax, [bp+var_8]
		cmp	ax, word ptr dword_2560C+2
		ja	short loc_10704
		mov	ax, word ptr dword_2560C
		add	ax, 0FE80h
		mov	[bp+var_E], ax
		sub	ax, [bp+var_6]
		cmp	ax, [bp+var_A]
		ja	short loc_106D4
		add	di, 3
		inc	byte_25980
		test	byte_25980, 3
		jnz	short loc_106D4
		push	[bp+var_E]
		push	word ptr dword_257DE+2
		push	large 800001h
		call	sub_13E2A

loc_106D4:				; CODE XREF: sub_105B9+F9j
					; sub_105B9+107j
		add	[bp+var_E], 300h
		mov	ax, [bp+var_E]
		sub	ax, [bp+var_6]
		cmp	ax, [bp+var_A]
		ja	short loc_10704
		add	di, 3
		inc	byte_25980
		test	byte_25980, 3
		jnz	short loc_10704
		push	[bp+var_E]
		push	word ptr dword_257DE+2
		push	large 800001h
		call	sub_13E2A

loc_10704:				; CODE XREF: sub_105B9+D8j
					; sub_105B9+DFj ...
		movzx	eax, di
		add	dword_2569A, eax
		mov	ax, di
		pop	di
		pop	si
		leave
		retf
sub_105B9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10713	proc near		; CODE XREF: sub_AB88+8Ap

var_5		= byte ptr -5
var_4		= word ptr -4
var_2		= word ptr -2

		enter	6, 0
		push	si
		push	di
		mov	si, 8A92h
		mov	[bp+var_2], 0
		jmp	loc_107D6
; ---------------------------------------------------------------------------

loc_10724:				; CODE XREF: sub_10713+C7j
		cmp	byte ptr [si], 1
		jz	short loc_10730
		cmp	byte ptr [si], 80h ; ''
		jb	loc_107D0

loc_10730:				; CODE XREF: sub_10713+14j
		cmp	word ptr [si+8], 0FF00h
		jle	loc_107D0
		cmp	word ptr [si+8], 1800h
		jge	loc_107D0
		mov	al, [si+0Eh]
		mov	[bp+var_5], al
		cmp	byte ptr [si+25h], 1
		jbe	short loc_10776
		mov	al, [si+1]
		mov	ah, 0
		mov	dl, [si+26h]
		mov	dh, 0
		push	dx
		cwd
		pop	bx
		idiv	bx
		or	dx, dx
		jnz	short loc_10770
		inc	byte ptr [si+27h]
		mov	al, [si+27h]
		cmp	al, [si+25h]
		jb	short loc_10770
		mov	byte ptr [si+27h], 0

loc_10770:				; CODE XREF: sub_10713+4Cj
					; sub_10713+57j
		mov	al, [si+27h]
		add	[bp+var_5], al

loc_10776:				; CODE XREF: sub_10713+39j
		mov	ax, [si+2]
		sar	ax, 4
		add	ax, 10h
		mov	di, ax
		push	word ptr [si+4]
		call	sub_BC10
		mov	[bp+var_4], ax
		or	di, di
		jle	short loc_107D0
		cmp	di, 1A0h
		jge	short loc_107D0
		cmp	word ptr [si+4], 0FF00h
		jle	short loc_107D0
		cmp	word ptr [si+4], 1800h
		jge	short loc_107D0
		cmp	byte ptr [si+24h], 0
		jnz	short loc_107B7
		push	di
		push	ax
		mov	al, [bp+var_5]
		mov	ah, 0
		push	ax
		call	sub_2D3E
		jmp	short loc_107D0
; ---------------------------------------------------------------------------

loc_107B7:				; CODE XREF: sub_10713+93j
		push	di
		push	[bp+var_4]
		mov	al, [bp+var_5]
		mov	ah, 0
		push	ax
		push	large 0FFC0h
		call	far ptr	loc_2B78
		mov	byte ptr [si+24h], 0

loc_107D0:				; CODE XREF: sub_10713+19j
					; sub_10713+22j ...
		inc	[bp+var_2]
		add	si, 40h	; '@'

loc_107D6:				; CODE XREF: sub_10713+Ej
		cmp	[bp+var_2], 20h	; ' '
		jl	loc_10724
		pop	di
		pop	si
		leave
		retn
sub_10713	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_107E2	proc near		; CODE XREF: sub_CB58+6p

var_1		= byte ptr -1

		enter	2, 0
		push	si
		push	di
		mov	word ptr dword_255A4+2,	30h ; '0'
		cmp	byte_259AA, 0
		jz	short loc_10872
		mov	word ptr dword_255A4, 30h ; '0'
		mov	ax, word_259BA
		add	ax, 0FF90h
		mov	di, ax
		xor	si, si
		mov	al, byte_259B9
		add	al, 0F8h ; 'ø'
		jmp	short loc_10868
; ---------------------------------------------------------------------------

loc_1080C:				; CODE XREF: sub_107E2+8Cj
		cmp	si, 4
		jnz	short loc_10822
		mov	ax, di
		cwd
		sub	ax, dx
		sar	ax, 1
		mov	di, ax
		mov	al, [bp+var_1]
		neg	al
		mov	[bp+var_1], al

loc_10822:				; CODE XREF: sub_107E2+2Dj
		push	539Ah
		push	word ptr dword_2598E
		push	word ptr dword_2598E+2
		push	di
		mov	al, [bp+var_1]
		mov	ah, 0
		push	ax
		call	sub_1333C
		cmp	word_266DC, 0FF80h
		jl	short loc_10862
		cmp	word_266DC, 1780h
		jge	short loc_10862
		cmp	word_266DA, 0FF80h
		jl	short loc_10862
		cmp	word_266DA, 1880h
		jge	short loc_10862
		push	word_266DC
		push	word_266DA
		call	sub_B9D6

loc_10862:				; CODE XREF: sub_107E2+5Cj
					; sub_107E2+64j ...
		inc	si
		mov	al, [bp+var_1]
		add	al, 40h	; '@'

loc_10868:				; CODE XREF: sub_107E2+28j
		mov	[bp+var_1], al
		cmp	si, 8
		jl	short loc_1080C
		jmp	short loc_10894
; ---------------------------------------------------------------------------

loc_10872:				; CODE XREF: sub_107E2+11j
		mov	word ptr dword_255A4, 20h ; ' '
		push	large [dword_25992]
		call	sub_B9D6
		mov	word ptr dword_255A4, 40h ; '@'
		mov	word ptr dword_255A4+2,	10h
		push	large [dword_259B0]
		call	sub_B9D6

loc_10894:				; CODE XREF: sub_107E2+8Ej
		pop	di
		pop	si
		leave
		retn
sub_107E2	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10898	proc near		; CODE XREF: sub_10ABF+74p

var_2		= word ptr -2
arg_0		= word ptr  4

		enter	2, 0
		mov	dl, 1
		mov	ax, [bp+arg_0]
		mov	[bp+var_2], ax
		mov	cx, 0Dh		; switch 13 cases
		mov	bx, (offset loc_91C - offset locret_AAF0)

loc_108AA:				; CODE XREF: sub_10898+1Dj
		mov	ax, cs:[bx]
		cmp	ax, [bp+var_2]
		jz	short loc_108B9
		add	bx, 2
		loop	loc_108AA
		jmp	short loc_10913	; default
; ---------------------------------------------------------------------------

loc_108B9:				; CODE XREF: sub_10898+18j
		jmp	word ptr cs:[bx+1Ah] ; switch jump
		mov	dl, 2		; jumptable 000108B9 case 0
		jmp	short loc_10915
; ---------------------------------------------------------------------------

loc_108C1:				; CODE XREF: sub_10898:loc_108B9j
		mov	word_25996, 0FFC0h ; jumptable 000108B9	case 4
		jmp	short loc_10915
; ---------------------------------------------------------------------------

loc_108C9:				; CODE XREF: sub_10898:loc_108B9j
		mov	word_25996, 0FFD0h ; jumptable 000108B9	cases 6,1024
		mov	word_25998, 30h	; '0'
		jmp	short loc_10915
; ---------------------------------------------------------------------------

loc_108D7:				; CODE XREF: sub_10898:loc_108B9j
		mov	word_25998, 40h	; '@' ; jumptable 000108B9 case 2
		jmp	short loc_10915
; ---------------------------------------------------------------------------

loc_108DF:				; CODE XREF: sub_10898:loc_108B9j
		mov	word_25996, 30h	; '0' ; jumptable 000108B9 cases 10,2048
		mov	word_25998, 30h	; '0'
		jmp	short loc_10915
; ---------------------------------------------------------------------------

loc_108ED:				; CODE XREF: sub_10898:loc_108B9j
		mov	word_25996, 40h	; '@' ; jumptable 000108B9 case 8
		jmp	short loc_10915
; ---------------------------------------------------------------------------

loc_108F5:				; CODE XREF: sub_10898:loc_108B9j
		mov	word_25996, 30h	; '0' ; jumptable 000108B9 cases 9,512
		jmp	short loc_1090B
; ---------------------------------------------------------------------------

loc_108FD:				; CODE XREF: sub_10898:loc_108B9j
		mov	word_25998, 0FFC0h ; jumptable 000108B9	case 1
		jmp	short loc_10915
; ---------------------------------------------------------------------------

loc_10905:				; CODE XREF: sub_10898:loc_108B9j
		mov	word_25996, 0FFD0h ; jumptable 000108B9	cases 5,256

loc_1090B:				; CODE XREF: sub_10898+63j
		mov	word_25998, 0FFD0h
		jmp	short loc_10915
; ---------------------------------------------------------------------------

loc_10913:				; CODE XREF: sub_10898+1Fj
		mov	dl, 0		; default

loc_10915:				; CODE XREF: sub_10898+27j
					; sub_10898+2Fj ...
		mov	al, dl
		leave
		retn	2
sub_10898	endp

; ---------------------------------------------------------------------------
		db    0
		dw	0,     1,     2,     4 ; value table for switch	statement
		dw	5,     6,     8,     9
		dw    0Ah,  100h,  200h,  400h
		dw   800h
		dw offset loc_8BC+1 - offset locret_AAF0 ; jump	table for switch statement
		dw offset loc_8FB+2 - offset locret_AAF0
		dw offset loc_8D7 - offset locret_AAF0
		dw offset loc_8C0+1 - offset locret_AAF0
		dw offset loc_905 - offset locret_AAF0
		dw offset loc_8C8+1 - offset locret_AAF0
		dw offset loc_8EC+1 - offset locret_AAF0
		dw offset loc_8F4+1 - offset locret_AAF0
		dw offset loc_8DE+1 - offset locret_AAF0
		dw offset loc_905 - offset locret_AAF0
		dw offset loc_8F4+1 - offset locret_AAF0
		dw offset loc_8C8+1 - offset locret_AAF0
		dw offset loc_8DE+1 - offset locret_AAF0

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10950	proc near		; CODE XREF: sub_10ABF:loc_10B75p
		push	bp
		mov	bp, sp
		push	464Eh
		call	sub_BC38
		cmp	ax, 80h	; ''
		jge	short loc_10963
		mov	ax, 80h	; ''
		jmp	short loc_1096B
; ---------------------------------------------------------------------------

loc_10963:				; CODE XREF: sub_10950+Cj
		cmp	ax, 1780h
		jle	short loc_1096B
		mov	ax, 1780h

loc_1096B:				; CODE XREF: sub_10950+11j
					; sub_10950+16j
		cmp	dx, 80h	; ''
		jge	short loc_10976
		mov	dx, 80h	; ''
		jmp	short loc_1097F
; ---------------------------------------------------------------------------

loc_10976:				; CODE XREF: sub_10950+1Fj
		cmp	dx, 1600h
		jle	short loc_1097F
		mov	dx, 1600h

loc_1097F:				; CODE XREF: sub_10950+24j
					; sub_10950+2Aj
		mov	word ptr dword_2598E, ax
		mov	word ptr dword_2598E+2,	dx
		pop	bp
		retn
sub_10950	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10988	proc near		; CODE XREF: sub_10ABF+138p

var_1		= byte ptr -1

		enter	2, 0
		dec	byte_259AA
		cmp	byte_259AA, 20h	; ' '
		ja	locret_10ABD
		cmp	byte_259AA, 20h	; ' '
		jnz	loc_10A25
		mov	word_25996, 0
		mov	word_25998, 0
		mov	word_236D6, 0
		mov	word_259BA, 0
		call	sub_1DACE
		mov	al, byte_259A4
		mov	ah, 0
		mov	bx, 4
		cwd
		idiv	bx
		mov	[bp+var_1], al
		cmp	[bp+var_1], 10h
		jbe	short loc_109D7
		mov	[bp+var_1], 10h

loc_109D7:				; CODE XREF: sub_10988+49j
		mov	al, [bp+var_1]
		sub	byte_259A4, al
		cmp	byte_259B6, 0
		jz	short loc_109E9
		dec	byte_259B6

loc_109E9:				; CODE XREF: sub_10988+5Bj
		mov	al, byte_259B6
		mov	ah, 0
		add	ax, ax
		mov	bx, ax
		mov	ax, [bx+2386h]
		mov	word_2D00C, ax
		nop
		push	cs
		call	near ptr sub_F07A
		nop
		push	cs
		call	near ptr sub_11DE6
		push	2
		call	sub_138B2
		cmp	byte_266D5, 16h
		jb	short loc_10A16
		mov	byte_266D5, 15h

loc_10A16:				; CODE XREF: sub_10988+87j
		push	4
		nop
		push	cs
		call	near ptr sub_C37E
		les	bx, dword_2CDC6
		assume es:nothing
		inc	byte ptr es:[bx+31h]

loc_10A25:				; CODE XREF: sub_10988+16j
		add	word_259BA, 70h	; 'p'
		mov	al, byte_259B9
		add	al, 8
		mov	byte_259B9, al
		cmp	byte_259AA, 4
		jnb	locret_10ABD
		les	bx, dword_2CDC6
		cmp	byte ptr es:[bx+0Bh], 1
		jbe	short loc_10A60
		test	byte_259AA, 1
		jz	short loc_10A55
		mov	word_216E4, 96h	; ''
		jmp	short loc_10A5B
; ---------------------------------------------------------------------------

loc_10A55:				; CODE XREF: sub_10988+C3j
		mov	word_216E4, 64h	; 'd'

loc_10A5B:				; CODE XREF: sub_10988+CBj
		mov	byte_266D3, 1

loc_10A60:				; CODE XREF: sub_10988+BCj
		cmp	byte_259AA, 0
		jnz	short locret_10ABD
		mov	word ptr dword_2598E, 0C00h
		mov	word ptr dword_25992, 0C00h
		mov	word ptr dword_2598E+2,	1700h
		mov	word ptr dword_25992+2,	1700h
		mov	word_25996, 0
		mov	word_25998, 0FFE0h
		les	bx, dword_2CDC6
		cmp	byte ptr es:[bx+0Bh], 1
		jbe	short loc_10AB7
		dec	byte ptr es:[bx+0Bh]
		nop
		push	cs
		call	near ptr sub_EEE8
		les	bx, dword_2CDC6
		mov	al, es:[bx+0Eh]
		mov	es:[bx+0Dh], al
		nop
		push	cs
		call	near ptr sub_EFA1
		mov	byte_2CFFA, 20h	; ' '
		leave
		retn
; ---------------------------------------------------------------------------

loc_10AB7:				; CODE XREF: sub_10988+10Cj
		call	sub_E541
		mov	byte_266D2, al

locret_10ABD:				; CODE XREF: sub_10988+Dj
					; sub_10988+AFj ...
		leave
		retn
sub_10988	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10ABF	proc near		; CODE XREF: sub_AB88+59p

var_2		= byte ptr -2
var_1		= byte ptr -1

		enter	2, 0
		push	si
		cmp	byte_259A2, 0
		jz	short loc_10ACF
		dec	byte_259A2

loc_10ACF:				; CODE XREF: sub_10ABF+Aj
		cmp	byte_259A9, 0
		jz	short loc_10B11
		cmp	byte_259A2, 0
		jz	short loc_10AE4
		mov	byte_259A9, 0
		jmp	short loc_10B11
; ---------------------------------------------------------------------------

loc_10AE4:				; CODE XREF: sub_10ABF+1Cj
		cmp	word_25608, 21h	; '!'
		jbe	short loc_10AF1
		mov	word_25608, 21h	; '!'

loc_10AF1:				; CODE XREF: sub_10ABF+2Aj
		mov	byte_259AA, 28h	; '('
		mov	byte_259A9, 0
		mov	byte_259A2, 0C0h ; 'À'
		mov	byte_259A3, 48h	; 'H'
		mov	word_25996, 0
		mov	word_25998, 0

loc_10B11:				; CODE XREF: sub_10ABF+15j
					; sub_10ABF+23j
		cmp	byte_259A3, 0
		jnz	loc_10BBD
		mov	word_25996, 0
		mov	word_25998, 0
		mov	ax, word_24CB4
		and	ax, 0F0Fh
		mov	si, ax
		mov	[bp+var_1], 1

loc_10B32:				; CODE XREF: sub_10ABF+97j
		push	si
		call	sub_10898
		mov	[bp+var_2], al
		cmp	[bp+var_2], 0
		jnz	short loc_10B58
		cmp	[bp+var_1], 0
		jz	short loc_10B58
		cmp	word_2598C, si
		jz	short loc_10B58
		mov	ax, word_2598C
		not	ax
		and	si, ax
		mov	[bp+var_1], 0
		jmp	short loc_10B32
; ---------------------------------------------------------------------------

loc_10B58:				; CODE XREF: sub_10ABF+7Ej
					; sub_10ABF+84j ...
		cmp	byte_24CB6, 0
		jz	short loc_10B75
		mov	ax, word_25996
		cwd
		sub	ax, dx
		sar	ax, 1
		mov	word_25996, ax
		mov	ax, word_25998
		cwd
		sub	ax, dx
		sar	ax, 1
		mov	word_25998, ax

loc_10B75:				; CODE XREF: sub_10ABF+9Ej
		call	sub_10950
		cmp	[bp+var_1], 0
		jz	short loc_10B82
		mov	word_2598C, si

loc_10B82:				; CODE XREF: sub_10ABF+BDj
		test	byte ptr word_24CB4, 20h
		jz	short loc_10B97
		cmp	byte_259A6, 1
		ja	short loc_10B97
		mov	byte_259A6, 12h
		jmp	short loc_10BB0
; ---------------------------------------------------------------------------

loc_10B97:				; CODE XREF: sub_10ABF+C8j
					; sub_10ABF+CFj
		cmp	byte_259A6, 0
		jz	short loc_10BC7
		dec	byte_259A6
		cmp	byte_259A6, 6
		jz	short loc_10BB0
		cmp	byte_259A6, 0Ch
		jnz	short loc_10BC7

loc_10BB0:				; CODE XREF: sub_10ABF+D6j
					; sub_10ABF+E8j
		call	word_257DA
		push	1
		call	sub_138B2
		jmp	short loc_10BC7
; ---------------------------------------------------------------------------

loc_10BBD:				; CODE XREF: sub_10ABF+57j
		push	464Eh
		call	sub_BC38
		dec	byte_259A3

loc_10BC7:				; CODE XREF: sub_10ABF+DDj
					; sub_10ABF+EFj ...
		mov	eax, dword_259AC
		mov	dword_259B0, eax
		mov	eax, dword_2598E
		mov	dword_259AC, eax
		mov	ax, word_25996
		sub	word ptr dword_259AC, ax
		mov	ax, word_25998
		sub	word ptr dword_259AC+2,	ax
		test	byte ptr word_24CB4, 10h
		jz	short loc_10BF0
		call	word_256AA

loc_10BF0:				; CODE XREF: sub_10ABF+12Bj
		cmp	byte_259AA, 0
		jz	short loc_10BFA
		call	sub_10988

loc_10BFA:				; CODE XREF: sub_10ABF+136j
		pop	si
		leave
		retn
sub_10ABF	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10BFD	proc near		; CODE XREF: sub_AB88+90p

var_5		= byte ptr -5
var_4		= word ptr -4
var_2		= word ptr -2

		enter	6, 0
		push	si
		push	di
		cmp	byte_259AA, 0
		jz	short loc_10C13
		cmp	byte_259AA, 20h	; ' '
		jbe	loc_10CB2

loc_10C13:				; CODE XREF: sub_10BFD+Bj
		mov	ax, word ptr dword_2598E
		sar	ax, 4
		add	ax, 10h
		mov	di, ax
		mov	ax, word ptr dword_2598E+2
		add	ax, 0FF80h
		push	ax
		call	sub_BC10
		mov	[bp+var_2], ax
		cmp	word_25996, 0
		jge	short loc_10C37
		mov	si, 1
		jmp	short loc_10C45
; ---------------------------------------------------------------------------

loc_10C37:				; CODE XREF: sub_10BFD+33j
		cmp	word_25996, 0
		jz	short loc_10C43
		mov	si, 2
		jmp	short loc_10C45
; ---------------------------------------------------------------------------

loc_10C43:				; CODE XREF: sub_10BFD+3Fj
		xor	si, si

loc_10C45:				; CODE XREF: sub_10BFD+38j
					; sub_10BFD+44j
		cmp	byte_259A2, 0
		jz	short loc_10C65
		cmp	byte_266CD, 0
		jnz	short loc_10C65
		push	di
		push	[bp+var_2]
		push	si
		push	large 0FFC0h
		call	far ptr	loc_2B78
		jmp	short loc_10C6F
; ---------------------------------------------------------------------------

loc_10C65:				; CODE XREF: sub_10BFD+4Dj
					; sub_10BFD+54j
		push	di
		push	[bp+var_2]
		push	si
		call	sub_2D3E

loc_10C6F:				; CODE XREF: sub_10BFD+66j
		cmp	byte_259A5, 2
		jb	loc_10D47
		call	sub_C156
		mov	ax, word ptr dword_259AC
		sar	ax, 4
		mov	di, ax
		mov	ax, word ptr dword_259AC+2
		add	ax, 80h	; ''
		push	ax
		call	sub_BC10
		mov	[bp+var_2], ax
		mov	ax, di
		mov	dx, [bp+var_2]
		push	word_259B4
		call	sub_C546
		lea	ax, [di+30h]
		mov	dx, [bp+var_2]
		push	word_259B4
		call	sub_C546
		mov	dx, 7Ch	; '|'
		mov	al, 0
		out	dx, al
		jmp	loc_10D47
; ---------------------------------------------------------------------------

loc_10CB2:				; CODE XREF: sub_10BFD+12j
		cmp	byte_259AA, 1
		jbe	loc_10D47
		mov	si, word_259BA
		mov	[bp+var_4], 0
		mov	al, byte_259B9
		jmp	short loc_10D3E
; ---------------------------------------------------------------------------

loc_10CC9:				; CODE XREF: sub_10BFD+148j
		cmp	[bp+var_4], 4
		jnz	short loc_10CE0
		mov	ax, si
		cwd
		sub	ax, dx
		sar	ax, 1
		mov	si, ax
		mov	al, [bp+var_5]
		neg	al
		mov	[bp+var_5], al

loc_10CE0:				; CODE XREF: sub_10BFD+D0j
		push	539Ah
		push	word ptr dword_2598E
		push	word ptr dword_2598E+2
		push	si
		mov	al, [bp+var_5]
		mov	ah, 0
		push	ax
		call	sub_1333C
		cmp	word_266DC, 0FF80h
		jl	short loc_10D36
		cmp	word_266DC, 1780h
		jge	short loc_10D36
		cmp	word_266DA, 0FF80h
		jl	short loc_10D36
		cmp	word_266DA, 1880h
		jge	short loc_10D36
		mov	ax, word_266DA
		sar	ax, 4
		add	ax, 8
		mov	di, ax
		mov	ax, word_266DC
		add	ax, 0FF80h
		push	ax
		call	sub_BC10
		mov	[bp+var_2], ax
		push	di
		push	ax
		push	3
		call	sub_2D3E

loc_10D36:				; CODE XREF: sub_10BFD+FFj
					; sub_10BFD+107j ...
		inc	[bp+var_4]
		mov	al, [bp+var_5]
		add	al, 40h	; '@'

loc_10D3E:				; CODE XREF: sub_10BFD+CAj
		mov	[bp+var_5], al
		cmp	[bp+var_4], 8
		jl	short loc_10CC9

loc_10D47:				; CODE XREF: sub_10BFD+77j
					; sub_10BFD+B2j ...
		pop	di
		pop	si
		leave
		retn
sub_10BFD	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10D4B	proc near		; CODE XREF: sub_AED0+A3p
					; sub_D56C:loc_D6E4p ...
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	si, 1
		jmp	short loc_10D6E
; ---------------------------------------------------------------------------

loc_10D55:				; CODE XREF: sub_10D4B+26j
		mov	di, 4
		jmp	short loc_10D68
; ---------------------------------------------------------------------------

loc_10D5A:				; CODE XREF: sub_10D4B+20j
		push	di
		push	si
		push	large 2000E1h
		call	sub_229E
		inc	di

loc_10D68:				; CODE XREF: sub_10D4B+Dj
		cmp	di, 34h	; '4'
		jl	short loc_10D5A
		inc	si

loc_10D6E:				; CODE XREF: sub_10D4B+8j
		cmp	si, 18h
		jl	short loc_10D55
		pop	di
		pop	si
		pop	bp
		retn
sub_10D4B	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10D77	proc near		; CODE XREF: sub_AED0+2A0p sub_E4D1+Dp ...
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	si, 1
		jmp	short loc_10D9A
; ---------------------------------------------------------------------------

loc_10D81:				; CODE XREF: sub_10D77+26j
		mov	di, 4
		jmp	short loc_10D94
; ---------------------------------------------------------------------------

loc_10D86:				; CODE XREF: sub_10D77+20j
		push	di
		push	si
		push	large 200005h
		call	sub_229E
		inc	di

loc_10D94:				; CODE XREF: sub_10D77+Dj
		cmp	di, 34h	; '4'
		jl	short loc_10D86
		inc	si

loc_10D9A:				; CODE XREF: sub_10D77+8j
		cmp	si, 18h
		jl	short loc_10D81
		pop	di
		pop	si
		pop	bp
		retn
sub_10D77	endp

; ---------------------------------------------------------------------------
		enter	2, 0
		push	si
		push	di
		cmp	byte_22EA2, 48h	; 'H'
		jb	short loc_10DE5
		call	sub_10D4B
		les	bx, dword_2CDC6
		cmp	byte ptr es:[bx+3Eh], 0
		jnz	short loc_10DC6
		mov	word_259DC, 6446h
		jmp	short loc_10DDE
; ---------------------------------------------------------------------------

loc_10DC6:				; CODE XREF: seg001:62CCj
		mov	word_259DC, 11BEh
		push	large 12000Ch
		push	ds
		push	offset byte_22F60
		push	0C3h ; 'Ã'
		call	sub_1B50

loc_10DDE:				; CODE XREF: seg001:62D4j
		mov	byte_259E0, 0
		jmp	short loc_10E35
; ---------------------------------------------------------------------------

loc_10DE5:				; CODE XREF: seg001:62BEj
		mov	al, byte_22EA2
		mov	ah, 0
		mov	bx, 8
		cwd
		idiv	bx
		or	dx, dx
		jnz	short loc_10E31
		mov	al, byte_22EA2
		mov	ah, 0
		cwd
		idiv	bx
		mov	[bp-1],	al
		cmp	byte ptr [bp-1], 0
		jz	short loc_10E31
		mov	si, 1
		jmp	short loc_10E2C
; ---------------------------------------------------------------------------

loc_10E0A:				; CODE XREF: seg001:633Fj
		mov	di, 4
		jmp	short loc_10E26
; ---------------------------------------------------------------------------

loc_10E0F:				; CODE XREF: seg001:6339j
		push	di
		push	si
		mov	al, [bp-1]
		mov	ah, 0
		mov	dx, 40h	; '@'
		sub	dx, ax
		push	dx
		push	1
		call	sub_1B0C
		add	di, 2

loc_10E26:				; CODE XREF: seg001:631Dj
		cmp	di, 34h	; '4'
		jl	short loc_10E0F
		inc	si

loc_10E2C:				; CODE XREF: seg001:6318j
		cmp	si, 18h
		jl	short loc_10E0A

loc_10E31:				; CODE XREF: seg001:6302j seg001:6313j
		inc	byte_22EA2

loc_10E35:				; CODE XREF: seg001:62F3j
		pop	di
		pop	si
		leave
		retn
; ---------------------------------------------------------------------------
		enter	2, 0
		push	si
		push	di
		cmp	byte_22EA2, 0
		jnz	short loc_10E51
		call	sub_10D77
		mov	word_259DC, 11BEh
		jmp	short loc_10EA1
; ---------------------------------------------------------------------------

loc_10E51:				; CODE XREF: seg001:6354j
		dec	byte_22EA2
		mov	al, byte_22EA2
		mov	ah, 0
		mov	bx, 8
		cwd
		idiv	bx
		or	dx, dx
		jnz	short loc_10EA1
		mov	al, byte_22EA2
		mov	ah, 0
		cwd
		idiv	bx
		mov	[bp-1],	al
		cmp	byte ptr [bp-1], 0
		jz	short loc_10EA1
		mov	si, 1
		jmp	short loc_10E9C
; ---------------------------------------------------------------------------

loc_10E7A:				; CODE XREF: seg001:63AFj
		mov	di, 4
		jmp	short loc_10E96
; ---------------------------------------------------------------------------

loc_10E7F:				; CODE XREF: seg001:63A9j
		push	di
		push	si
		mov	al, [bp-1]
		mov	ah, 0
		mov	dx, 40h	; '@'
		sub	dx, ax
		push	dx
		push	1
		call	sub_1B0C
		add	di, 2

loc_10E96:				; CODE XREF: seg001:638Dj
		cmp	di, 34h	; '4'
		jl	short loc_10E7F
		inc	si

loc_10E9C:				; CODE XREF: seg001:6388j
		cmp	si, 18h
		jl	short loc_10E7A

loc_10EA1:				; CODE XREF: seg001:635Fj seg001:6372j ...
		pop	di
		pop	si
		leave
		retn

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10EA5	proc near		; CODE XREF: seg001:loc_10FA1p
					; seg001:64C2p	...

arg_0		= word ptr  4
arg_2		= word ptr  6
arg_4		= word ptr  8

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	si, [bp+arg_4]
		mov	di, [bp+arg_0]
		dec	si
		add	di, si
		mov	ax, 8
		imul	di
		mov	di, ax
		mov	ax, 8
		imul	si
		mov	si, ax
		push	[bp+arg_2]
		call	sub_BC10
		mov	[bp+arg_2], ax
		mov	ax, 0A800h
		mov	es, ax
		assume es:nothing
		jmp	short loc_10EE3
; ---------------------------------------------------------------------------

loc_10ED1:				; CODE XREF: sub_10EA5+40j
		mov	al, byte_22EF6
		mov	ah, 0
		mov	cx, ax
		mov	dx, [bp+arg_2]
		mov	ax, si
		call	sub_C09A
		add	si, 10h

loc_10EE3:				; CODE XREF: sub_10EA5+2Aj
		cmp	si, di
		jl	short loc_10ED1
		pop	di
		pop	si
		pop	bp
		retn	6
sub_10EA5	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10EED	proc near		; CODE XREF: sub_CB58+3p

var_1		= byte ptr -1

		enter	2, 0
		mov	al, byte_259E0
		add	al, byte_22EA3
		mov	[bp+var_1], al
		cmp	[bp+var_1], 0
		jz	short locret_10F34
		cmp	[bp+var_1], 0C0h ; 'À'
		jnb	short loc_10F0D
		cmp	[bp+var_1], 22h	; '"'
		ja	short locret_10F34

loc_10F0D:				; CODE XREF: sub_10EED+18j
		mov	word ptr dword_255A4, 180h
		mov	word ptr dword_255A4+2,	20h ; ' '
		push	large 0A800C00h
		call	sub_B9D6
		push	large 0C800C00h
		call	sub_B9D6
		push	large 16800C00h
		call	sub_B9D6

locret_10F34:				; CODE XREF: sub_10EED+12j
					; sub_10EED+1Ej
		leave
		retn
sub_10EED	endp

; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		cmp	byte_259E0, 0C0h ; 'À'
		jb	loc_10FED
		cmp	byte_259E0, 0C0h ; 'À'
		jnz	short loc_10F53
		call	sub_10D4B
		mov	byte_22EF6, 0
		jmp	short loc_10F5E
; ---------------------------------------------------------------------------

loc_10F53:				; CODE XREF: seg001:6457j
		test	byte_259E0, 1
		jnz	short loc_10F5E
		inc	byte_22EF6

loc_10F5E:				; CODE XREF: seg001:6461j seg001:6468j
		cmp	byte_22EF6, 10h
		jb	short loc_10F80
		test	byte_259E0, 1
		jz	loc_1118F
		mov	word_259DC, 11BEh
		mov	byte_259E0, 0
		mov	byte_22EF6, 0
		pop	bp
		retn
; ---------------------------------------------------------------------------

loc_10F80:				; CODE XREF: seg001:6473j
		call	sub_C156
		mov	ah, 0Bh
		call	sub_C162
		cmp	byte_266D4, 5
		jnb	short loc_10F99
		push	large 150A80h
		push	0Eh
		jmp	short loc_10FA1
; ---------------------------------------------------------------------------

loc_10F99:				; CODE XREF: seg001:649Dj
		push	large 110A80h
		push	16h

loc_10FA1:				; CODE XREF: seg001:64A7j
		call	sub_10EA5
		mov	ax, 30h	; '0'
		sub	ax, bgm_title_len
		push	ax
		push	large 16800002h
		call	sub_10EA5
		mov	ah, 0Fh
		call	sub_C162
		mov	ax, 33h	; '3'
		sub	ax, bgm_title_len
		push	ax
		push	1680h
		push	bgm_title_len
		call	sub_10EA5
		mov	ax, stage_title_len
		cwd
		sub	ax, dx
		sar	ax, 1
		mov	dx, 1Ch
		sub	dx, ax
		push	dx
		push	0C80h
		push	stage_title_len
		call	sub_10EA5
		mov	dx, 7Ch	; '|'
		mov	al, 0
		out	dx, al
		jmp	loc_1118F
; ---------------------------------------------------------------------------

loc_10FED:				; CODE XREF: seg001:644Ej
		cmp	byte_259E0, 0
		jnz	short loc_11057
		mov	byte_22EF6, 10h
		mov	al, byte_266D4
		inc	al
		mov	stage_title_id, al
		mov	al, byte_266D4
		add	al, al
		inc	al
		mov	bgm_title_id, al
		cmp	byte_266D4, 0
		jnz	short loc_11023
		cmp	byte_266D8, 0
		jnz	short loc_11023
		mov	stage_title_id, 0
		mov	bgm_title_id, 0

loc_11023:				; CODE XREF: seg001:6520j seg001:6527j
		mov	al, stage_title_id
		mov	ah, 0
		shl	ax, 2
		mov	bx, ax
		push	large STAGE_TITLE[bx]
		call	_strlen
		add	sp, 4
		mov	stage_title_len, ax
		mov	al, bgm_title_id
		mov	ah, 0
		shl	ax, 2
		mov	bx, ax
		push	large BGM_TITLE[bx]
		call	_strlen
		add	sp, 4
		mov	bgm_title_len, ax

loc_11057:				; CODE XREF: seg001:6502j
		cmp	byte_22EF6, 10h
		jb	loc_1118F
		cmp	byte_22EF6, 16h
		jnz	loc_11107
		mov	al, byte_266D4
		add	al, 0A1h ; '¡'
		mov	byte_22EAE, al
		cmp	byte_266D4, 5
		jnz	short loc_11084
		push	large 11000Bh
		push	ds
		push	offset unk_22EB0
		jmp	short loc_110A1
; ---------------------------------------------------------------------------

loc_11084:				; CODE XREF: seg001:6586j
		cmp	byte_266D4, 6
		jnz	short loc_11097
		push	large 11000Bh
		push	ds
		push	offset unk_22EBC
		jmp	short loc_110A1
; ---------------------------------------------------------------------------

loc_11097:				; CODE XREF: seg001:6599j
		push	large 15000Bh
		push	ds
		push	offset unk_22EA8

loc_110A1:				; CODE XREF: seg001:6592j seg001:65A5j
		push	0C1h ; 'Á'
		call	sub_1B50
		mov	ax, stage_title_len
		cwd
		sub	ax, dx
		sar	ax, 1
		mov	dx, 1Ch
		sub	dx, ax
		push	dx
		push	0Dh
		mov	al, stage_title_id
		mov	ah, 0
		shl	ax, 2
		mov	bx, ax
		push	large STAGE_TITLE[bx]
		push	0E1h ; 'á'
		call	sub_22F6
		mov	ax, 30h	; '0'
		sub	ax, bgm_title_len
		push	ax
		push	large 170003h
		push	0C1h ; 'Á'
		call	sub_1B0C
		mov	ax, 33h	; '3'
		sub	ax, bgm_title_len
		push	ax
		push	17h
		mov	al, bgm_title_id
		mov	ah, 0
		shl	ax, 2
		mov	bx, ax
		push	large BGM_TITLE[bx]
		push	0E1h ; 'á'
		call	sub_22F6

loc_11107:				; CODE XREF: seg001:6575j
		call	sub_C156
		mov	ah, 0Bh
		call	sub_C162
		cmp	byte_266D4, 5
		jnb	short loc_11120
		push	large 150A80h
		push	0Eh
		jmp	short loc_11128
; ---------------------------------------------------------------------------

loc_11120:				; CODE XREF: seg001:6624j
		push	large 110A80h
		push	16h

loc_11128:				; CODE XREF: seg001:662Ej
		call	sub_10EA5
		mov	ax, 30h	; '0'
		sub	ax, bgm_title_len
		push	ax
		push	large 16800002h
		call	sub_10EA5
		mov	ah, 0Fh
		call	sub_C162
		mov	ax, 33h	; '3'
		sub	ax, bgm_title_len
		push	ax
		push	1680h
		push	bgm_title_len
		call	sub_10EA5
		mov	ax, stage_title_len
		cwd
		sub	ax, dx
		sar	ax, 1
		mov	dx, 1Ch
		sub	dx, ax
		push	dx
		push	0C80h
		push	stage_title_len
		call	sub_10EA5
		mov	dx, 7Ch	; '|'
		mov	al, 0
		out	dx, al
		test	byte_259E0, 3
		jnz	short loc_1118F
		cmp	byte_259E0, 0
		jz	short loc_1118F
		inc	byte_22EF6
		cmp	byte_22EF6, 18h
		jb	short loc_1118F
		mov	byte_22EF6, 0

loc_1118F:				; CODE XREF: seg001:647Aj seg001:64FAj ...
		inc	byte_259E0
		pop	bp
		retn
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		cmp	byte_22EA3, 0C0h ; 'À'
		jb	short loc_11211
		cmp	byte_22EA3, 0C0h ; 'À'
		jnz	short loc_111B0
		call	sub_10D4B
		mov	byte_22EF6, 0
		jmp	short loc_111BB
; ---------------------------------------------------------------------------

loc_111B0:				; CODE XREF: seg001:66B4j
		test	byte_22EA3, 1
		jnz	short loc_111BB
		inc	byte_22EF6

loc_111BB:				; CODE XREF: seg001:66BEj seg001:66C5j
		cmp	byte_22EF6, 10h
		jb	short loc_111D8
		test	byte_22EA3, 1
		jz	loc_112D2
		mov	word_259DC, 11BEh
		mov	byte_22EA3, 0
		pop	bp
		retn
; ---------------------------------------------------------------------------

loc_111D8:				; CODE XREF: seg001:66D0j
		call	sub_C156
		mov	ah, 0Bh
		call	sub_C162
		mov	ax, 30h	; '0'
		sub	ax, word_259C6
		push	ax
		push	large 16800002h
		call	sub_10EA5
		mov	ah, 0Fh
		call	sub_C162
		mov	ax, 33h	; '3'
		sub	ax, word_259C6
		push	ax
		push	1680h
		push	word_259C6
		call	sub_10EA5
		mov	dx, 7Ch	; '|'
		mov	al, 0
		out	dx, al
		jmp	loc_112D2
; ---------------------------------------------------------------------------

loc_11211:				; CODE XREF: seg001:66ADj
		cmp	byte_22EA3, 0
		jnz	short loc_11237
		mov	byte_22EF6, 10h
		mov	al, bgm_title_id
		mov	ah, 0
		shl	ax, 2
		mov	bx, ax
		push	large BGM_TITLE[bx]
		call	_strlen
		add	sp, 4
		mov	word_259C6, ax

loc_11237:				; CODE XREF: seg001:6726j
		cmp	byte_22EF6, 10h
		jb	loc_112D2
		cmp	byte_22EF6, 16h
		jnz	short loc_1127E
		mov	ax, 30h	; '0'
		sub	ax, word_259C6
		push	ax
		push	large 170003h
		push	0C1h ; 'Á'
		call	sub_1B0C
		mov	ax, 33h	; '3'
		sub	ax, word_259C6
		push	ax
		push	17h
		mov	al, bgm_title_id
		mov	ah, 0
		shl	ax, 2
		mov	bx, ax
		push	large BGM_TITLE[bx]
		push	0E1h ; 'á'
		call	sub_22F6

loc_1127E:				; CODE XREF: seg001:6755j
		call	sub_C156
		mov	ah, 0Bh
		call	sub_C162
		mov	ax, 30h	; '0'
		sub	ax, word_259C6
		push	ax
		push	large 16800002h
		call	sub_10EA5
		mov	ah, 0Fh
		call	sub_C162
		mov	ax, 33h	; '3'
		sub	ax, word_259C6
		push	ax
		push	1680h
		push	word_259C6
		call	sub_10EA5
		mov	dx, 7Ch	; '|'
		mov	al, 0
		out	dx, al
		test	byte_22EA3, 3
		jnz	short loc_112D2
		cmp	byte_22EA3, 0
		jz	short loc_112D2
		inc	byte_22EF6
		cmp	byte_22EF6, 18h
		jb	short loc_112D2
		mov	byte_22EF6, 0

loc_112D2:				; CODE XREF: seg001:66D7j seg001:671Ej ...
		inc	byte_22EA3
		pop	bp
		retn
; ---------------------------------------------------------------------------
		enter	2, 0
		mov	al, byte_259DB
		cmp	al, byte_259CA
		jz	short loc_11317
		cmp	byte_22EA4, 40h	; '@'
		jb	short loc_11317
		push	large 40002h
		push	large [off_22EF8]
		push	0E1h ; 'á'
		call	sub_22F6
		push	large 40017h
		push	large [off_22EF8]
		push	0E1h ; 'á'
		call	sub_22F6
		mov	byte_22EA4, 0

loc_11317:				; CODE XREF: seg001:67F3j seg001:67FAj
		cmp	byte_22EA4, 0
		jnz	short loc_1138B
		mov	al, byte_259DB
		mov	byte_259CA, al
		mov	byte ptr [bp-1], 0
		jmp	short loc_11339
; ---------------------------------------------------------------------------

loc_1132A:				; CODE XREF: seg001:684Dj
		mov	al, [bp-1]
		mov	ah, 0
		mov	bx, ax
		mov	byte ptr [bx+468Ch], 2
		inc	byte ptr [bp-1]

loc_11339:				; CODE XREF: seg001:6838j
		cmp	byte ptr [bp-1], 8
		jb	short loc_1132A
		mov	al, byte_259CA
		mov	ah, 0
		shl	ax, 2
		mov	bx, ax
		push	large dword ptr	[bx+1BA6h]
		call	_strlen
		add	sp, 4
		mov	word_259C8, ax
		mov	bx, word_259C8
		mov	byte ptr [bx+468Ch], 0
		add	ax, ax
		mov	dx, 34h	; '4'
		sub	dx, ax
		mov	word_259D6, dx
		cmp	byte_259DB, 2
		jz	short loc_11380
		mov	ax, 1Ch
		sub	ax, word_259C8
		mov	word_259D8, ax
		jmp	short loc_11386
; ---------------------------------------------------------------------------

loc_11380:				; CODE XREF: seg001:6882j
		mov	word_259D8, 10h

loc_11386:				; CODE XREF: seg001:688Ej
		mov	byte_259CB, 0

loc_1138B:				; CODE XREF: seg001:682Cj
		cmp	byte_22EA4, 80h	; ''
		jb	short loc_113B2
		push	large 40002h
		push	large [off_22EF8]
		push	0E1h ; 'á'
		call	sub_22F6
		mov	byte_22EA4, 0
		mov	word_259DE, 11BEh
		leave
		retn
; ---------------------------------------------------------------------------

loc_113B2:				; CODE XREF: seg001:68A0j
		mov	al, byte_22EA4
		mov	ah, 0
		mov	dx, word_259C8
		dec	dx
		cmp	ax, dx
		jge	short loc_11424
		mov	byte ptr [bp-1], 0
		jmp	short loc_113DF
; ---------------------------------------------------------------------------

loc_113C6:				; CODE XREF: seg001:68FBj
		mov	al, [bp-1]
		mov	ah, 0
		mov	bx, ax
		mov	al, [bx+468Dh]
		mov	dl, [bp-1]
		mov	dh, 0
		mov	bx, dx
		mov	[bx+468Ch], al
		inc	byte ptr [bp-1]

loc_113DF:				; CODE XREF: seg001:68D4j
		mov	al, [bp-1]
		mov	ah, 0
		mov	dx, word_259C8
		dec	dx
		cmp	ax, dx
		jl	short loc_113C6
		mov	al, byte_259CA
		mov	ah, 0
		shl	ax, 2
		mov	bx, ax
		les	bx, [bx+1BA6h]
		assume es:nothing
		mov	al, byte_22EA4
		mov	ah, 0
		add	bx, ax
		mov	al, es:[bx]
		mov	bx, 468Ch
		dec	bx
		add	bx, word_259C8
		mov	[bx], al
		push	word_259D6
		push	2
		push	ds
		push	offset unk_259CC
		push	0E1h ; 'á'
		call	sub_1B50
		jmp	loc_114BF
; ---------------------------------------------------------------------------

loc_11424:				; CODE XREF: seg001:68CEj
		mov	ax, word_259D6
		cmp	ax, word_259D8
		jle	short loc_11474
		push	ax
		push	2
		mov	al, byte_259CA
		mov	ah, 0
		shl	ax, 2
		mov	bx, ax
		push	large dword ptr	[bx+1BA6h]
		push	0E1h ; 'á'
		call	sub_1B50
		mov	ax, word_259C8
		add	ax, ax
		add	ax, word_259D6
		cmp	ax, 32h	; '2'
		jg	short loc_1146D
		mov	ax, word_259C8
		add	ax, ax
		add	ax, word_259D6
		push	ax
		push	large 22020h
		push	0E1h ; 'á'
		call	sub_229E

loc_1146D:				; CODE XREF: seg001:6963j
		sub	word_259D6, 2
		jmp	short loc_114BF
; ---------------------------------------------------------------------------

loc_11474:				; CODE XREF: seg001:693Bj
		cmp	byte_259CB, 0
		jnz	short loc_11493
		mov	byte_259CB, 1
		push	large 40002h
		push	large [off_22EF8]
		push	0E1h ; 'á'
		call	sub_22F6

loc_11493:				; CODE XREF: seg001:6989j
		push	word_259D8
		push	2
		mov	al, byte_259CA
		mov	ah, 0
		shl	ax, 2
		mov	bx, ax
		push	large dword ptr	[bx+1BA6h]
		push	0E1h ; 'á'
		call	sub_1B50
		cmp	byte_259CA, 2
		jnz	short loc_114BF
		push	large [dword_259E2]
		call	sub_114C5

loc_114BF:				; CODE XREF: seg001:6931j seg001:6982j ...
		inc	byte_22EA4
		leave
		retn

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_114C5	proc near		; CODE XREF: seg001:69CCp

var_12		= dword	ptr -12h
var_E		= dword	ptr -0Eh
var_A		= byte ptr -0Ah
var_4		= byte ptr -4
var_3		= byte ptr -3
var_2		= byte ptr -2
arg_0		= dword	ptr  4

		enter	12h, 0
		push	si
		push	di
		mov	[bp+var_E], 0F4240h
		xor	si, si
		xor	di, di
		jmp	short loc_11521
; ---------------------------------------------------------------------------

loc_114D9:				; CODE XREF: sub_114C5+61j
		mov	eax, [bp+arg_0]
		xor	edx, edx
		div	[bp+var_E]
		mov	[bp+var_12], eax
		mov	eax, [bp+arg_0]
		xor	edx, edx
		div	[bp+var_E]
		mov	[bp+arg_0], edx
		or	di, word ptr [bp+var_12]
		or	di, di
		jz	short loc_11508
		mov	al, byte ptr [bp+var_12]
		add	al, 0A0h ; ' '
		mov	[bp+si+var_A], al
		jmp	short loc_1150C
; ---------------------------------------------------------------------------

loc_11508:				; CODE XREF: sub_114C5+37j
		mov	[bp+si+var_A], 2

loc_1150C:				; CODE XREF: sub_114C5+41j
		mov	ebx, 0Ah
		mov	eax, [bp+var_E]
		xor	edx, edx
		div	ebx
		mov	[bp+var_E], eax
		inc	si

loc_11521:				; CODE XREF: sub_114C5+12j
		cmp	[bp+var_E], 1
		ja	short loc_114D9
		mov	al, byte ptr [bp+arg_0]
		add	al, 0A0h ; ' '
		mov	[bp+var_4], al
		mov	[bp+var_3], 0A0h ; ' '
		mov	[bp+var_2], 0
		push	large 1C0002h
		push	ss
		lea	ax, [bp+var_A]
		push	ax
		push	0E1h ; 'á'
		call	sub_1B50
		pop	di
		pop	si
		leave
		retn	4
sub_114C5	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_11551	proc near		; CODE XREF: sub_AD03+56p
		push	bp
		mov	bp, sp
		push	0C00h
		call	sub_2578
		mov	word_22EA6, ax
		push	ds
		push	offset aTxt_bb	; "txt.bb"
		call	sub_F14
		push	word_22EA6
		push	large 800h
		call	sub_E60
		call	sub_DF4
		push	ds
		push	offset aTxt2_bb	; "txt2.bb"
		call	sub_F14
		push	word_22EA6
		push	large 8000400h
		call	sub_E60
		call	sub_DF4
		pop	bp
		retn
sub_11551	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1159B	proc near		; CODE XREF: sub_E7FD+5Dp
		push	bp
		mov	bp, sp
		cmp	word_22EA6, 0
		jz	short loc_115B4
		push	word_22EA6
		call	sub_267C
		mov	word_22EA6, 0

loc_115B4:				; CODE XREF: sub_1159B+8j
		pop	bp
		retn
sub_1159B	endp

; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		cmp	byte_26718, 0
		jz	short loc_1163D
		mov	ax, word ptr dword_2670A
		sar	ax, 4
		mov	si, ax
		mov	ax, word ptr dword_2670A+2
		sar	ax, 4
		add	ax, 0FFE0h
		mov	di, ax
		cmp	byte_26719, 0FEh ; 'þ'
		jnb	short loc_11629
		cmp	byte_2671C, 0
		jnz	short loc_115F5
		push	si
		push	ax
		mov	al, byte_26718
		mov	ah, 0
		push	ax
		call	sub_2F54
		call	sub_11647
		jmp	short loc_1163D
; ---------------------------------------------------------------------------

loc_115F5:				; CODE XREF: seg001:6AF1j
		inc	byte_259E6
		test	byte_259E6, 1
		jz	short loc_1160F
		push	si
		push	di
		mov	al, byte_26718
		mov	ah, 0
		push	ax
		call	sub_2F54
		jmp	short loc_11622
; ---------------------------------------------------------------------------

loc_1160F:				; CODE XREF: seg001:6B0Ej
		push	si
		push	di
		mov	al, byte_26718
		mov	ah, 0
		push	ax
		push	large 0FFC0h
		call	far ptr	loc_2838

loc_11622:				; CODE XREF: seg001:6B1Dj
		mov	byte_2671C, 0
		jmp	short loc_1163D
; ---------------------------------------------------------------------------

loc_11629:				; CODE XREF: seg001:6AEAj
		cmp	byte_26719, 0FEh ; 'þ'
		jnz	short loc_1163D
		push	si
		push	di
		mov	al, byte_26718
		mov	ah, 0
		push	ax
		call	sub_1E2A

loc_1163D:				; CODE XREF: seg001:6AD0j seg001:6B03j ...
		call	sub_D88C
		call	sub_D955
		pop	di
		pop	si
		pop	bp
		retn

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_11647	proc near		; CODE XREF: seg001:6B00p seg001:851Cp
		push	bp
		mov	bp, sp
		push	si
		push	di
		cmp	byte_259EF, 0
		jz	short loc_1168E
		cmp	byte_259EF, 20h	; ' '
		jnb	short loc_11661
		test	byte_259EF, 1
		jz	short loc_1168E

loc_11661:				; CODE XREF: sub_11647+11j
		mov	ax, word ptr dword_2670A
		sar	ax, 4
		add	ax, 0FFF1h
		mov	si, ax
		mov	ax, word ptr dword_2670A+2
		sar	ax, 4
		add	ax, 0FFE0h
		mov	di, ax
		push	si
		push	ax
		push	88h ; ''
		call	sub_2F54
		lea	ax, [si+30h]
		push	ax
		push	di
		push	89h ; ''
		call	sub_2F54

loc_1168E:				; CODE XREF: sub_11647+Aj
					; sub_11647+18j
		pop	di
		pop	si
		pop	bp
		retn
sub_11647	endp


; =============== S U B	R O U T	I N E =======================================


sub_11692	proc near		; CODE XREF: sub_B1D0+B3p
					; sub_E67A+157p ...
		push	si
		push	di
		mov	si, 4358h
		mov	di, 4

loc_1169A:				; CODE XREF: sub_11692+2Dj
		mov	cx, 8
		mov	bx, 1EC6h

loc_116A0:				; CODE XREF: sub_11692+16j
		mov	al, [si]
		add	al, 0A0h ; ' '
		mov	[bx], al
		inc	bx
		dec	si
		loop	loc_116A0
		push	38h ; '8'
		push	di
		push	ds
		push	offset unk_23206
		push	0E1h ; 'á'
		call	sub_1B50
		add	di, 2
		cmp	di, 6
		jz	short loc_1169A
		pop	si
		pop	di
		retn
sub_11692	endp


; =============== S U B	R O U T	I N E =======================================


sub_116C4	proc near		; CODE XREF: sub_AB88:loc_ACF4p
		mov	eax, dword_2569A
		or	eax, eax
		jz	short locret_1172C
		cmp	dword_2569E, eax
		jbe	short loc_116D7
		mov	word ptr dword_2569E, ax

loc_116D7:				; CODE XREF: sub_116C4+Ej
		shr	eax, 5
		or	eax, eax
		jnz	short loc_116E3
		inc	ax
		jmp	short loc_116EE
; ---------------------------------------------------------------------------

loc_116E3:				; CODE XREF: sub_116C4+1Aj
		cmp	eax, 17DFh
		jbe	short loc_116EE
		mov	ax, 17DFh

loc_116EE:				; CODE XREF: sub_116C4+1Dj
					; sub_116C4+25j
		cmp	word ptr dword_2569E, ax
		jnb	short loc_116F7
		mov	word ptr dword_2569E, ax

loc_116F7:				; CODE XREF: sub_116C4+2Ej
		mov	cx, word ptr dword_2569E
		jmp	short loc_1172E
; ---------------------------------------------------------------------------

loc_116FD:				; CODE XREF: sub_116C4+CCj
		cmp	byte_22DA7, 0
		jnz	short loc_11718
		or	al, al
		jz	short loc_11718
		mov	byte_22DA7, 1
		mov	byte_259DB, 0
		mov	word_259DE, 67E8h

loc_11718:				; CODE XREF: sub_116C4+3Ej
					; sub_116C4+42j
		mov	eax, dword_2569E
		sub	dword_2569A, eax
		call	sub_11692
		mov	byte_25699, 0
		call	sub_EE06

locret_1172C:				; CODE XREF: sub_116C4+7j
		retn
; ---------------------------------------------------------------------------
		nop

loc_1172E:				; CODE XREF: sub_116C4+37j
		push	si
		push	di
		mov	bx, 1EC2h
		mov	si, 1EB4h

loc_11736:				; CODE XREF: sub_116C4+83j
		mov	ax, cx
		xor	dx, dx
		div	word ptr [si]
		mov	cx, dx
		mov	[bx], al
		dec	bx
		add	si, 2
		cmp	word ptr [si], 1
		ja	short loc_11736
		mov	[bx], cl
		mov	si, 434Ah
		mov	cx, 6
		xor	ah, ah

loc_11753:				; CODE XREF: sub_116C4+9Cj
		mov	al, [bx]
		add	al, [si]
		aaa
		mov	[si], al
		inc	bx
		inc	si
		add	[si], ah
		mov	ah, 0
		loop	loc_11753
		mov	al, [bx]
		add	[si], al
		push	ds
		pop	es
		assume es:dseg
		mov	si, 4350h
		mov	di, 4358h
		xor	dl, dl
		mov	cx, 8
		cmp	byte_22DA7, 0
		jnz	short loc_11786

loc_1177A:				; CODE XREF: sub_116C4+C0j
		mov	al, [si]
		cmp	[di], al
		ja	short loc_1178C
		jb	short loc_11786
		dec	di
		dec	si
		loop	loc_1177A

loc_11786:				; CODE XREF: sub_116C4+B4j
					; sub_116C4+BCj
		std
		rep movsb
		cld
		inc	dl

loc_1178C:				; CODE XREF: sub_116C4+BAj
		mov	al, dl
		pop	di
		pop	si
		jmp	loc_116FD
sub_116C4	endp

; ---------------------------------------------------------------------------
		enter	0Ah, 0
		push	si
		push	di
		cmp	byte_26719, 2
		jnb	loc_1183C
		mov	ax, word ptr dword_2670A
		sar	ax, 4
		mov	si, ax
		mov	ax, word ptr dword_2670A+2
		sar	ax, 4
		add	ax, 0FFF0h
		mov	di, ax
		mov	al, byte_26718
		mov	ah, 0
		mov	dl, byte_266CF
		mov	dh, 0
		mov	bx, 4
		push	ax
		mov	ax, dx
		cwd
		idiv	bx
		pop	dx
		add	dx, ax
		add	dx, 92h	; ''
		mov	[bp-2],	dx
		push	si
		push	di
		push	dx
		call	sub_2F54
		cmp	byte_26719, 0
		jnz	loc_11961
		cmp	word_2671A, 80h	; ''
		jle	loc_11961
		mov	ax, 140h
		sub	ax, word_2671A
		add	ax, ax
		mov	[bp-2],	ax
		add	si, 20h	; ' '
		add	di, 18h
		call	sub_C156
		mov	ah, 7
		call	sub_C162
		push	si
		push	di
		push	word ptr [bp-2]
		call	sub_11EC
		mov	ah, 6
		call	sub_C162
		push	si
		push	di
		mov	ax, [bp-2]
		add	ax, 6
		push	ax
		call	sub_11EC
		push	si
		push	di
		mov	ax, [bp-2]
		add	ax, 0Ch
		push	ax
		call	sub_11EC
		mov	dx, 7Ch	; '|'
		mov	al, 0
		out	dx, al
		jmp	loc_11961
; ---------------------------------------------------------------------------

loc_1183C:				; CODE XREF: seg001:6CAEj
		cmp	byte_26719, 0FEh ; 'þ'
		jnb	loc_1193A
		mov	ax, word ptr dword_2670A
		sar	ax, 4
		mov	si, ax
		mov	ax, word ptr dword_2670A+2
		sar	ax, 4
		add	ax, 0FFF0h
		mov	di, ax
		mov	al, byte_26718
		mov	ah, 0
		add	ax, 92h	; ''
		mov	[bp-2],	ax
		cmp	byte_26718, 0
		jz	short loc_11871
		cmp	byte_26718, 0Ch
		jnz	short loc_1187F

loc_11871:				; CODE XREF: seg001:6D78j
		mov	al, byte_266CF
		mov	ah, 0
		mov	bx, 4
		cwd
		idiv	bx
		add	[bp-2],	ax

loc_1187F:				; CODE XREF: seg001:6D7Fj
		cmp	byte_26718, 4
		jz	short loc_1188D
		cmp	byte_26718, 6
		jnz	short loc_1189B

loc_1188D:				; CODE XREF: seg001:6D94j
		mov	al, byte_266CE
		mov	ah, 0
		mov	bx, 4
		cwd
		idiv	bx
		add	[bp-2],	ax

loc_1189B:				; CODE XREF: seg001:6D9Bj
		cmp	byte_2671C, 0
		jnz	short loc_118AE
		push	si
		push	di
		push	word ptr [bp-2]
		call	sub_2F54
		jmp	short loc_118BE
; ---------------------------------------------------------------------------

loc_118AE:				; CODE XREF: seg001:6DB0j
		push	si
		push	di
		push	word ptr [bp-2]
		push	large 0FFC0h
		call	far ptr	loc_2838

loc_118BE:				; CODE XREF: seg001:6DBCj
		call	sub_C156
		mov	ah, 9
		call	sub_C162
		mov	word ptr [bp-0Ah], 0B204h
		mov	word ptr [bp-4], 0
		jmp	short loc_11932
; ---------------------------------------------------------------------------

loc_118D2:				; CODE XREF: seg001:6E46j
		mov	bx, [bp-0Ah]
		cmp	byte ptr [bx], 0
		jz	short loc_1192B
		mov	bx, [bp-0Ah]
		mov	ax, [bx+2]
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, 20h	; ' '
		mov	si, ax
		mov	bx, [bp-0Ah]
		mov	ax, [bx+4]
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, 10h
		mov	di, ax
		mov	bx, [bp-0Ah]
		mov	ax, [bx+6]
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, 20h	; ' '
		mov	[bp-6],	ax
		mov	bx, [bp-0Ah]
		mov	ax, [bx+8]
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, 10h
		mov	[bp-8],	ax
		push	si
		push	di
		push	word ptr [bp-6]
		push	ax
		call	sub_1562

loc_1192B:				; CODE XREF: seg001:6DE8j
		inc	word ptr [bp-4]
		add	word ptr [bp-0Ah], 1Ah

loc_11932:				; CODE XREF: seg001:6DE0j
		cmp	word ptr [bp-4], 6
		jl	short loc_118D2
		jmp	short loc_11961
; ---------------------------------------------------------------------------

loc_1193A:				; CODE XREF: seg001:6D51j
		cmp	byte_26719, 0FEh ; 'þ'
		jnz	short loc_11961
		mov	ax, word ptr dword_2670A
		sar	ax, 4
		mov	si, ax
		mov	ax, word ptr dword_2670A+2
		sar	ax, 4
		add	ax, 0FFF0h
		mov	di, ax
		push	si
		push	ax
		mov	al, byte_26718
		mov	ah, 0
		push	ax
		call	sub_1E2A

loc_11961:				; CODE XREF: seg001:6CF0j seg001:6CFAj ...
		call	sub_D88C
		call	sub_D955
		pop	di
		pop	si
		leave
		retn
; ---------------------------------------------------------------------------
		enter	2, 0
		push	si
		push	di
		cmp	byte_26719, 2
		jnb	loc_11A12
		mov	ax, word ptr dword_2670A
		sar	ax, 4
		add	ax, 10h
		mov	si, ax
		mov	ax, word ptr dword_2670A+2
		sar	ax, 4
		add	ax, 0FFF8h
		mov	di, ax
		mov	al, byte_26718
		mov	ah, 0
		mov	dl, byte_266CE
		mov	dh, 0
		mov	bx, 4
		push	ax
		mov	ax, dx
		cwd
		idiv	bx
		pop	dx
		add	dx, ax
		mov	[bp-2],	dx
		push	si
		push	di
		push	dx
		call	sub_2F54
		cmp	byte_26719, 0
		jnz	loc_11A90
		cmp	word_2671A, 0C0h ; 'À'
		jl	loc_11A90
		mov	ax, 160h
		sub	ax, word_2671A
		add	ax, ax
		mov	[bp-2],	ax
		add	si, 18h
		add	di, 8
		call	sub_C156
		mov	ah, 0Fh
		call	sub_C162
		push	si
		push	di
		push	word ptr [bp-2]
		call	sub_11EC
		mov	ah, 9
		call	sub_C162
		push	si
		push	di
		mov	ax, [bp-2]
		add	ax, 6
		push	ax
		call	sub_11EC
		push	si
		push	di
		mov	ax, [bp-2]
		add	ax, 0Ch
		push	ax
		call	sub_11EC
		mov	dx, 7Ch	; '|'
		mov	al, 0
		out	dx, al
		jmp	short loc_11A90
; ---------------------------------------------------------------------------

loc_11A12:				; CODE XREF: seg001:6E86j
		cmp	byte_26719, 0FEh ; 'þ'
		jnb	short loc_11A69
		mov	ax, word ptr dword_2670A
		sar	ax, 4
		mov	si, ax
		mov	ax, word ptr dword_2670A+2
		sar	ax, 4
		add	ax, 0FFE8h
		mov	di, ax
		mov	al, byte_26718
		mov	ah, 0
		mov	dl, byte_266CF
		mov	dh, 0
		mov	bx, 4
		push	ax
		mov	ax, dx
		cwd
		idiv	bx
		pop	dx
		add	dx, ax
		mov	[bp-2],	dx
		cmp	byte_2671C, 0
		jnz	short loc_11A57
		push	si
		push	di
		push	dx
		call	sub_2F54
		jmp	short loc_11A90
; ---------------------------------------------------------------------------

loc_11A57:				; CODE XREF: seg001:6F5Bj
		push	si
		push	di
		push	word ptr [bp-2]
		push	large 0FFC0h
		call	far ptr	loc_2838
		jmp	short loc_11A90
; ---------------------------------------------------------------------------

loc_11A69:				; CODE XREF: seg001:6F27j
		cmp	byte_26719, 0FEh ; 'þ'
		jnz	short loc_11A90
		mov	ax, word ptr dword_2670A
		sar	ax, 4
		mov	si, ax
		mov	ax, word ptr dword_2670A+2
		sar	ax, 4
		add	ax, 0FFF0h
		mov	di, ax
		push	si
		push	ax
		mov	al, byte_26718
		mov	ah, 0
		push	ax
		call	sub_1E2A

loc_11A90:				; CODE XREF: seg001:6EC7j seg001:6ED1j ...
		call	sub_D88C
		call	sub_D955
		pop	di
		pop	si
		leave
		retn

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_11A9A	proc near		; CODE XREF: sub_C778+106p
					; sub_C885+48p	...

var_4		= word ptr -4
var_2		= word ptr -2

		enter	4, 0
		push	si
		push	di
		mov	ax, word_26706
		shl	ax, 4
		mov	[bp+var_4], ax
		cmp	[bp+var_4], 300h
		jl	short loc_11ABD
		mov	[bp+var_4], 300h
		mov	al, byte_23212
		inc	al
		mov	byte_23212, al

loc_11ABD:				; CODE XREF: sub_11A9A+14j
		mov	[bp+var_2], 0
		jmp	short loc_11B3A
; ---------------------------------------------------------------------------

loc_11AC4:				; CODE XREF: sub_11A9A+A4j
		push	word ptr dword_266F4
		push	[bp+var_4]
		mov	al, byte_23212
		mov	ah, 0
		add	ax, ax
		mov	bx, ax
		push	word ptr [bx+566h]
		call	sub_13320
		mov	si, ax
		push	word ptr dword_266F4+2
		push	[bp+var_4]
		mov	al, byte_23212
		mov	ah, 0
		add	ax, ax
		mov	bx, ax
		push	word ptr [bx+4E6h]
		call	sub_13320
		mov	di, ax
		cmp	di, 0FF00h
		jle	short loc_11B2F
		cmp	di, 1800h
		jge	short loc_11B2F
		cmp	si, 0FF00h
		jle	short loc_11B2F
		cmp	si, 1900h
		jge	short loc_11B2F
		mov	ax, si
		sar	ax, 4
		add	ax, 10h
		mov	si, ax
		push	di
		call	sub_BC10
		mov	di, ax
		push	si
		push	ax
		mov	al, byte_26704
		mov	ah, 0
		push	ax
		call	sub_2D3E

loc_11B2F:				; CODE XREF: sub_11A9A+64j
					; sub_11A9A+6Aj ...
		inc	[bp+var_2]
		mov	al, byte_23212
		add	al, 10h
		mov	byte_23212, al

loc_11B3A:				; CODE XREF: sub_11A9A+28j
		cmp	[bp+var_2], 10h
		jl	short loc_11AC4
		pop	di
		pop	si
		leave
		retn
sub_11A9A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_11B44	proc near		; CODE XREF: seg001:729Fp

var_4		= word ptr -4
var_2		= word ptr -2

		enter	4, 0
		push	si
		push	di
		mov	si, 0B204h
		xor	di, di
		jmp	loc_11BD1
; ---------------------------------------------------------------------------

loc_11B52:				; CODE XREF: sub_11B44+90j
		cmp	byte ptr [si], 0
		jz	short loc_11BCD
		mov	ax, [si+2]
		sar	ax, 4
		add	ax, 10h
		mov	[bp+var_2], ax
		mov	ax, [si+4]
		sar	ax, 4
		mov	[bp+var_4], ax
		cmp	byte ptr [si], 1
		jnz	short loc_11BAD
		cmp	word ptr [si+16h], 0
		jnz	short loc_11B8E
		push	[bp+var_2]
		push	ax
		mov	ax, [si+0Eh]
		shr	ax, 1
		and	ax, 3
		add	ax, 0BAh ; 'º'
		push	ax
		call	sub_2F54
		jmp	short loc_11BCD
; ---------------------------------------------------------------------------

loc_11B8E:				; CODE XREF: sub_11B44+31j
		push	[bp+var_2]
		push	[bp+var_4]
		mov	ax, [si+0Eh]
		shr	ax, 1
		and	ax, 3
		add	ax, 0BAh ; 'º'
		push	ax
		push	large 0FFC0h
		call	far ptr	loc_2838
		jmp	short loc_11BCD
; ---------------------------------------------------------------------------

loc_11BAD:				; CODE XREF: sub_11B44+2Bj
		push	[bp+var_2]
		push	[bp+var_4]
		mov	al, [si]
		mov	ah, 0
		mov	bx, 4
		cwd
		idiv	bx
		push	ax
		call	sub_2F54
		inc	byte ptr [si]
		cmp	byte ptr [si], 30h ; '0'
		jb	short loc_11BCD
		mov	byte ptr [si], 0

loc_11BCD:				; CODE XREF: sub_11B44+11j
					; sub_11B44+48j ...
		inc	di
		add	si, 1Ah

loc_11BD1:				; CODE XREF: sub_11B44+Bj
		cmp	di, 1Fh
		jl	loc_11B52
		cmp	byte ptr [si], 0
		jz	short loc_11C16
		call	sub_C156
		mov	ah, 2
		call	sub_C162
		push	word ptr [si+2]
		push	word ptr [si+4]
		push	word ptr [si+10h]
		call	sub_114C
		cmp	byte ptr [si], 1
		jz	short loc_11C16
		mov	ah, [si+18h]
		call	sub_C162
		push	word ptr [si+2]
		push	word ptr [si+4]
		mov	ax, [si+12h]
		add	ax, [si+10h]
		push	ax
		call	sub_11EC
		mov	dx, 7Ch	; '|'
		mov	al, 0
		out	dx, al

loc_11C16:				; CODE XREF: sub_11B44+97j
					; sub_11B44+B2j
		pop	di
		pop	si
		leave
		retn
sub_11B44	endp

; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, word ptr dword_2670A
		sar	ax, 4
		add	ax, 0FFF0h
		mov	si, ax
		mov	ax, word ptr dword_2670A+2
		sar	ax, 4
		add	ax, 0FFE0h
		mov	di, ax
		cmp	byte_26719, 0FFh
		jz	loc_11D92
		cmp	byte_26719, 0FEh ; 'þ'
		jnz	short loc_11C57
		push	si
		push	di
		mov	al, byte_26718
		mov	ah, 0
		push	ax
		push	3
		call	far ptr	loc_31A2
		jmp	loc_11D92
; ---------------------------------------------------------------------------

loc_11C57:				; CODE XREF: seg001:7153j
		cmp	byte_25A08, 0
		jz	short loc_11C7A
		lea	ax, [si+18h]
		push	ax
		lea	ax, [di+18h]
		push	ax
		mov	al, byte_266CF
		mov	ah, 0
		mov	bx, 4
		cwd
		idiv	bx
		add	ax, 0B6h ; '¶'
		push	ax
		call	sub_2F54

loc_11C7A:				; CODE XREF: seg001:716Cj
		cmp	byte_26718, 0
		jz	loc_11D86
		cmp	byte_2671C, 0
		jz	short loc_11C91
		test	byte_25A03, 1
		jz	short loc_11CB1

loc_11C91:				; CODE XREF: seg001:7198j
		push	si
		push	di
		mov	al, byte_26718
		mov	ah, 0
		push	ax
		call	sub_2F54
		lea	ax, [si+30h]
		push	ax
		push	di
		mov	al, byte_26718
		mov	ah, 0
		inc	ax
		push	ax
		call	sub_2F54
		jmp	short loc_11CDB
; ---------------------------------------------------------------------------

loc_11CB1:				; CODE XREF: seg001:719Fj
		push	si
		push	di
		mov	al, byte_26718
		mov	ah, 0
		push	ax
		push	large 0FFCDh
		call	far ptr	loc_2838
		lea	ax, [si+30h]
		push	ax
		push	di
		mov	al, byte_26718
		mov	ah, 0
		inc	ax
		push	ax
		push	large 0FFCDh
		call	far ptr	loc_2838

loc_11CDB:				; CODE XREF: seg001:71BFj
		cmp	byte_2671C, 0
		jz	short loc_11CE7
		mov	ax, 1
		jmp	short loc_11CE9
; ---------------------------------------------------------------------------

loc_11CE7:				; CODE XREF: seg001:71F0j
		xor	ax, ax

loc_11CE9:				; CODE XREF: seg001:71F5j
		add	al, byte_25A03
		mov	byte_25A03, al
		mov	byte_2671C, 0
		cmp	byte_25A1B, 2
		jnz	loc_11D86
		mov	ax, word_25A0C
		sar	ax, 4
		add	ax, 0FFF0h
		mov	si, ax
		mov	ax, word_25A0E
		sar	ax, 4
		add	ax, 0FFE0h
		mov	di, ax
		cmp	byte_25A1E, 0
		jz	short loc_11D22
		test	byte_25A04, 1
		jz	short loc_11D42

loc_11D22:				; CODE XREF: seg001:7229j
		push	si
		push	di
		mov	al, byte_26718
		mov	ah, 0
		push	ax
		call	sub_2F54
		lea	ax, [si+30h]
		push	ax
		push	di
		mov	al, byte_26718
		mov	ah, 0
		inc	ax
		push	ax
		call	sub_2F54
		jmp	short loc_11D6C
; ---------------------------------------------------------------------------

loc_11D42:				; CODE XREF: seg001:7230j
		push	si
		push	di
		mov	al, byte_26718
		mov	ah, 0
		push	ax
		push	large 0FFCDh
		call	far ptr	loc_2838
		lea	ax, [si+30h]
		push	ax
		push	di
		mov	al, byte_26718
		mov	ah, 0
		inc	ax
		push	ax
		push	large 0FFCDh
		call	far ptr	loc_2838

loc_11D6C:				; CODE XREF: seg001:7250j
		cmp	byte_25A1E, 0
		jz	short loc_11D78
		mov	ax, 1
		jmp	short loc_11D7A
; ---------------------------------------------------------------------------

loc_11D78:				; CODE XREF: seg001:7281j
		xor	ax, ax

loc_11D7A:				; CODE XREF: seg001:7286j
		add	al, byte_25A04
		mov	byte_25A04, al
		mov	byte_25A1E, 0

loc_11D86:				; CODE XREF: seg001:718Fj seg001:720Aj
		call	sub_D88C
		call	sub_D955
		call	sub_E2C3
		call	sub_11B44

loc_11D92:				; CODE XREF: seg001:714Aj seg001:7164j
		pop	di
		pop	si
		pop	bp
		retn

; =============== S U B	R O U T	I N E =======================================


sub_11D96	proc near		; CODE XREF: seg001:2F6Ep seg001:2F92p ...
		xor	ax, ax

loc_11D98:				; CODE XREF: sub_11D96+1Bj
		cmp	byte_256A6, 44h	; 'D'
		jnb	short locret_11DC9
		mov	bx, word_256A4
		add	word_256A4, 12h
		cmp	byte ptr [bx], 0
		jz	short loc_11DB3
		inc	byte_256A6
		jmp	short loc_11D98
; ---------------------------------------------------------------------------

loc_11DB3:				; CODE XREF: sub_11D96+15j
		mov	word ptr [bx], 1
		mov	eax, dword_2598E
		mov	[bx+2],	eax
		mov	dword ptr [bx+0Ah], 0FF400000h
		mov	ax, bx

locret_11DC9:				; CODE XREF: sub_11D96+7j
		retn
sub_11D96	endp


; =============== S U B	R O U T	I N E =======================================


sub_11DCA	proc near		; CODE XREF: seg001:2FA7p seg001:307Ep ...
		mov	bx, sp
		push	si
		mov	si, ss:[bx+4]
		mov	bl, ss:[bx+2]
		xor	bh, bh
		shl	bx, 2
		mov	eax, [bx+1390h]
		mov	[si], eax
		pop	si
		retn	4
sub_11DCA	endp


; =============== S U B	R O U T	I N E =======================================


sub_11DE6	proc far		; CODE XREF: sub_B1D0+A2p
					; sub_E67A+143p ...
		xor	bx, bx
		xor	ax, ax
		mov	al, byte_259A4
		mov	cx, 9

loc_11DF0:				; CODE XREF: sub_11DE6+13j
		cmp	ax, [bx+1EDEh]
		jb	short loc_11DFB
		add	bx, 2
		loop	loc_11DF0

loc_11DFB:				; CODE XREF: sub_11DE6+Ej
		mov	dx, bx
		shr	dx, 1
		mov	byte_259A5, dl
		add	bx, word_257DC
		mov	ax, [bx]
		mov	word_257DA, ax
		nop
		push	cs
		call	near ptr sub_F0A5
		retf
sub_11DE6	endp

; ---------------------------------------------------------------------------
		enter	2, 0
		push	si
		push	di
		mov	ax, word ptr dword_2670A
		sar	ax, 4
		mov	si, ax
		mov	ax, word ptr dword_2670A+2
		sar	ax, 4
		add	ax, 0FFF0h
		mov	di, ax
		cmp	byte_26719, 0FEh ; 'þ'
		jnb	short loc_11E5D
		cmp	byte_2671C, 0
		jnz	short loc_11E48
		push	si
		push	ax
		mov	al, byte_26718
		mov	ah, 0
		push	ax
		call	sub_2F54
		jmp	short loc_11E71
; ---------------------------------------------------------------------------

loc_11E48:				; CODE XREF: seg001:7347j
		push	si
		push	di
		mov	al, byte_26718
		mov	ah, 0
		push	ax
		push	large 0FFC0h
		call	far ptr	loc_2838
		jmp	short loc_11E71
; ---------------------------------------------------------------------------

loc_11E5D:				; CODE XREF: seg001:7340j
		cmp	byte_26719, 0FEh ; 'þ'
		jnz	short loc_11E71
		push	si
		push	di
		mov	al, byte_26718
		mov	ah, 0
		push	ax
		call	sub_1E2A

loc_11E71:				; CODE XREF: seg001:7356j seg001:736Bj ...
		cmp	byte_25A27, 1
		jnz	short loc_11EC1
		cmp	word_25A28, 0
		jl	short loc_11EC1
		cmp	word_25A28, 1800h
		jge	short loc_11EC1
		cmp	word_25A2A, 0
		jl	short loc_11EC1
		cmp	word_25A2A, 1700h
		jge	short loc_11EC1
		mov	ax, word_25A28
		sar	ax, 4
		mov	si, ax
		mov	ax, word_25A2A
		sar	ax, 4
		add	ax, 0FFF0h
		mov	di, ax
		mov	al, byte_266CE
		mov	ah, 0
		cwd
		sub	ax, dx
		sar	ax, 1
		add	ax, 8Eh	; ''
		mov	[bp-2],	ax
		push	si
		push	di
		push	ax
		call	sub_2F54

loc_11EC1:				; CODE XREF: seg001:7386j seg001:738Dj ...
		call	sub_D88C
		call	sub_D955
		pop	di
		pop	si
		leave
		retn

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_11ECB	proc near		; CODE XREF: sub_B1D0+3p
		push	bp
		mov	bp, sp
		mov	dword_266C6, 0
		mov	word_266CA, 0
		mov	byte_266CC, 0
		mov	byte_266CD, 0
		mov	byte_266CE, 0
		mov	byte_266CF, 0
		mov	word_266D0, 1
		mov	byte_266D2, 0
		mov	byte_266D3, 0
		mov	byte_2CFF9, 0
		mov	word_2CFFC, 0
		mov	byte_25592, 0Dh
		push	large 200010h
		push	large 19F017Fh
		call	sub_144A
		push	0B55Eh
		push	132h
		call	sub_C34E
		push	8A92h
		push	200h
		call	sub_C34E
		push	53E2h
		push	180h
		call	sub_C34E
		push	5A22h
		push	0B2Ch
		call	sub_C34E
		push	0B204h
		push	0D0h ; 'Ð'
		call	sub_C34E
		push	9594h
		push	28h ; '('
		call	sub_C34E
		push	0AF34h
		push	0A0h ; ' '
		call	sub_C34E
		push	9634h
		push	640h
		call	sub_C34E
		push	9292h
		push	0A8h ; '¨'
		call	sub_C34E
		mov	word_2A8D0, 8
		mov	byte_2A8D2, 9
		mov	word_2A8CE, 400h
		mov	byte_2A8D3, 2
		mov	word ptr dword_2A8CA, 0
		mov	word ptr dword_2A8CA+2,	0
		pop	bp
		retn
sub_11ECB	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_11F96	proc near		; CODE XREF: _main+3p

var_A		= byte ptr -0Ah
var_4		= word ptr -4

		enter	0Ah, 0
		push	si
		push	ds
		push	offset aMiko_cfg ; "MIKO.CFG"
		call	sub_F14
		push	ss
		lea	ax, [bp+var_A]
		push	ax
		push	0Ah
		call	sub_E60
		call	sub_DF4
		mov	si, [bp+var_4]
		mov	word ptr dword_2CDC6+2,	si
		mov	word ptr dword_2CDC6, 0
		mov	ax, si
		pop	si
		leave
		retn
sub_11F96	endp

; ---------------------------------------------------------------------------
		db    0

; =============== S U B	R O U T	I N E =======================================


sub_11FC8	proc near		; CODE XREF: sub_BF16:loc_BF62p
		push	di
		mov	bx, dx
		sar	ax, 3
		shl	dx, 6
		add	ax, dx
		shr	dx, 2
		add	ax, dx
		mov	di, ax
		mov	ax, 0A800h
		mov	es, ax
		assume es:nothing
		cmp	bx, 180h
		ja	short loc_11FEC
		mov	cx, 10h
		xor	bx, bx
		jmp	short loc_11FF6
; ---------------------------------------------------------------------------

loc_11FEC:				; CODE XREF: sub_11FC8+1Bj
		mov	cx, 190h
		sub	cx, bx
		mov	bx, 10h
		sub	bx, cx

loc_11FF6:				; CODE XREF: sub_11FC8+22j
					; sub_11FC8+32j ...
		stosw
		add	di, 4Eh	; 'N'
		loop	loc_11FF6
		or	bx, bx
		jz	short loc_12008
		sub	di, 7D00h
		xchg	cx, bx
		jmp	short loc_11FF6
; ---------------------------------------------------------------------------

loc_12008:				; CODE XREF: sub_11FC8+36j
		pop	di
		retn
sub_11FC8	endp


; =============== S U B	R O U T	I N E =======================================


sub_1200A	proc near		; CODE XREF: seg001:5569p seg001:5630p
		push	di
		mov	ax, 0A850h
		mov	es, ax
		assume es:nothing
		mov	di, 0C34h
		call	sub_12068
		mov	ax, 0AE72h
		mov	es, ax
		assume es:nothing
		mov	di, 1094h
		call	sub_12068
		pop	di
		retn
sub_1200A	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_12024	proc near		; CODE XREF: sub_AED0:loc_AF4Ap
					; sub_AED0+A0p
		cli
		mov	al, 80h	; ''
		out	7Ch, al
		mov	dx, 7Eh	; '~'
		mov	al, 0FFh
		out	dx, al
		xor	al, al
		out	dx, al
		out	dx, al
		out	dx, al
		sti
		push	di
		mov	ax, 0A800h
		mov	es, ax
		assume es:nothing
		mov	ax, 1
		out	0A6h, ax	; Interrupt Controller #2, 8259A
		xor	di, di
		mov	cx, 1F40h
		rep stosd
		xor	ax, ax
		out	0A6h, ax	; Interrupt Controller #2, 8259A
		mov	cx, 1F40h
		xor	di, di
		rep stosd
		pop	di
		xor	al, al
		out	7Ch, al
		retn
sub_12024	endp


; =============== S U B	R O U T	I N E =======================================


sub_1205A	proc near		; CODE XREF: seg001:7DDEp seg001:7E4Fp ...
		push	di
		mov	ax, 0A850h
		mov	es, ax
		assume es:nothing
		mov	di, 72B4h
		call	sub_12068
		pop	di
		retn
sub_1205A	endp


; =============== S U B	R O U T	I N E =======================================


sub_12068	proc near		; CODE XREF: seg001:13E5p sub_BFF8+1Dp ...
		mov	cx, 0Ch
		rep stosd
		sub	di, 80h	; ''
		jge	short sub_12068
		retn
sub_12068	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_12076	proc near		; CODE XREF: seg001:loc_12944p
					; seg001:7E6Fp
		push	di
		cli
		mov	dx, 7Eh	; '~'
		xor	al, al
		out	dx, al
		out	dx, al
		out	dx, al
		out	dx, al
		sti
		mov	bx, word_23240

loc_12086:				; CODE XREF: sub_12076+78j
		mov	dx, word_2323A
		mov	di, bx
		and	di, 0FFh
		add	di, word_2323C
		jmp	short loc_120AF
; ---------------------------------------------------------------------------

loc_12096:				; CODE XREF: sub_12076+5Ej
		mov	dx, 0A850h
		mov	di, bx
		and	di, 0FFh
		add	di, word_2323E
		jmp	short loc_120AF
; ---------------------------------------------------------------------------

loc_120A5:				; CODE XREF: sub_12076+58j
		mov	di, bx
		and	di, 0FFh
		add	di, 9B0h

loc_120AF:				; CODE XREF: sub_12076+1Ej
					; sub_12076+2Dj
		mov	es, dx

loc_120B1:				; CODE XREF: sub_12076+4Bj
		mov	cx, 6

loc_120B4:				; CODE XREF: sub_12076+45j
		mov	es:[di], eax
		add	di, 8
		loop	loc_120B4
		sub	di, 80h	; ''
		jge	short loc_120B1
		xor	bl, 0Ch
		sub	dx, 0A0h ; ' '
		cmp	dx, 0A850h
		jg	short loc_120A5
		cmp	dx, 0A7B0h
		jnz	short loc_12096
		dec	bh
		jz	short loc_120F0
		cli
		mov	dx, 7Eh	; '~'
		mov	al, 0FFh
		out	dx, al
		xor	al, al
		out	dx, al
		out	dx, al
		out	dx, al
		sti
		mov	bl, byte ptr word_23240
		xor	bl, 0Ch
		jmp	short loc_12086
; ---------------------------------------------------------------------------

loc_120F0:				; CODE XREF: sub_12076+62j
		sub	word_2323A, 14h
		add	word_2323C, 140h
		cmp	word_2323A, 0AEE0h
		jge	short loc_12114
		mov	word_2323A, 0AF6Ch
		mov	word_2323C, 140h
		xor	byte ptr word_23240, 0Ch

loc_12114:				; CODE XREF: sub_12076+8Bj
		sub	word_2323E, 140h
		jns	short loc_12122
		mov	word_2323E, 9B0h

loc_12122:				; CODE XREF: sub_12076+A4j
		pop	di
		retn
sub_12076	endp

; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		cmp	byte_26705, 0FEh ; 'þ'
		jnb	short loc_12141
		mov	word ptr dword_255A4, 40h ; '@'
		mov	word ptr dword_255A4+2,	40h ; '@'
		push	large [dword_266F8]
		jmp	short loc_12152
; ---------------------------------------------------------------------------

loc_12141:				; CODE XREF: seg001:763Cj
		mov	word ptr dword_255A4, 80h ; ''
		mov	word ptr dword_255A4+2,	80h ; ''
		push	large [dword_266F4]

loc_12152:				; CODE XREF: seg001:764Fj
		call	sub_B9D6
		pop	bp
		retn

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_12157	proc near		; CODE XREF: seg001:76B8p seg001:76DEp ...

arg_0		= byte ptr  4
arg_2		= word ptr  6
arg_4		= word ptr  8

		push	bp
		mov	bp, sp
		push	[bp+arg_4]
		push	[bp+arg_2]
		push	10h
		call	sub_136B4
		call	sub_C15C
		mov	ah, [bp+arg_0]
		call	sub_C162
		call	word_2CDCC
		mov	dx, 7Ch	; '|'
		mov	al, 0
		out	dx, al
		pop	bp
		retn	6
sub_12157	endp

; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		cmp	byte_26719, 0
		jnz	short loc_12199
		cmp	word_2671A, 0C0h ; 'À'
		jge	short loc_121E1
		cmp	word_2671A, 2
		jg	short loc_121E6
		jmp	short loc_121E1
; ---------------------------------------------------------------------------

loc_12199:				; CODE XREF: seg001:7696j
		cmp	byte_26719, 1
		jnz	short loc_121BF
		push	large 200088h
		push	1
		call	sub_12157
		mov	ax, word_2D02E
		mov	word_2CDCE, ax
		mov	ax, word_2671A
		sar	ax, 1
		push	ax
		call	sub_BF94
		call	sub_BBA4
		pop	bp
		retn
; ---------------------------------------------------------------------------

loc_121BF:				; CODE XREF: seg001:76AEj
		cmp	byte_26719, 0FEh ; 'þ'
		jnb	short loc_121D3
		push	large 200088h
		push	1
		call	sub_12157
		pop	bp
		retn
; ---------------------------------------------------------------------------

loc_121D3:				; CODE XREF: seg001:76D4j
		cmp	byte_26719, 0FEh ; 'þ'
		jz	short loc_121E1
		cmp	word_2671A, 2
		jg	short loc_121E6

loc_121E1:				; CODE XREF: seg001:769Ej seg001:76A7j ...
		call	sub_CBB8
		pop	bp
		retn
; ---------------------------------------------------------------------------

loc_121E6:				; CODE XREF: seg001:76A5j seg001:76EFj
		call	sub_CB58
		pop	bp
		retn
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		cmp	byte_26719, 0
		jz	short loc_1223D
		cmp	byte_26719, 1
		jnz	short loc_1221B
		push	large 200060h
		push	0
		call	sub_12157
		mov	ax, word_2D02E
		mov	word_2CDCE, ax
		mov	ax, word_2671A
		sar	ax, 1
		push	ax
		call	sub_BF94
		call	sub_BBA4
		pop	bp
		retn
; ---------------------------------------------------------------------------

loc_1221B:				; CODE XREF: seg001:770Aj
		cmp	byte_26719, 0FEh ; 'þ'
		jnb	short loc_1222F
		push	large 200060h
		push	0
		call	sub_12157
		pop	bp
		retn
; ---------------------------------------------------------------------------

loc_1222F:				; CODE XREF: seg001:7730j
		cmp	byte_26719, 0FEh ; 'þ'
		jz	short loc_1223D
		cmp	word_2671A, 2
		jg	short loc_12242

loc_1223D:				; CODE XREF: seg001:7703j seg001:7744j
		call	sub_CBB8
		pop	bp
		retn
; ---------------------------------------------------------------------------

loc_12242:				; CODE XREF: seg001:774Bj
		call	sub_CB58
		pop	bp
		retn

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_12247	proc near		; CODE XREF: seg001:7790p
		push	bp
		mov	bp, sp
		mov	word ptr dword_255A4, 40h ; '@'
		mov	word ptr dword_255A4+2,	40h ; '@'
		push	large [dword_2670E]
		call	sub_B9D6
		cmp	byte_25A27, 0
		jz	short loc_1226D
		push	large [dword_25A2C]
		call	sub_B9D6

loc_1226D:				; CODE XREF: sub_12247+1Cj
		pop	bp
		retn
sub_12247	endp

; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		cmp	byte_26719, 1
		ja	short loc_12285
		cmp	word_2671A, 2
		jle	short loc_122CD
		call	sub_12247
		jmp	short loc_122D2
; ---------------------------------------------------------------------------

loc_12285:				; CODE XREF: seg001:7787j
		cmp	byte_26719, 2
		jnz	short loc_122AB
		push	large 200010h
		push	0
		call	sub_12157
		mov	ax, word_2D02E
		mov	word_2CDCE, ax
		mov	ax, word_2671A
		sar	ax, 1
		push	ax
		call	sub_BF94
		call	sub_BBA4
		pop	bp
		retn
; ---------------------------------------------------------------------------

loc_122AB:				; CODE XREF: seg001:779Aj
		cmp	byte_26719, 0FEh ; 'þ'
		jnb	short loc_122BF
		push	large 200010h
		push	0
		call	sub_12157
		pop	bp
		retn
; ---------------------------------------------------------------------------

loc_122BF:				; CODE XREF: seg001:77C0j
		cmp	byte_26719, 0FEh ; 'þ'
		jz	short loc_122CD
		cmp	word_2671A, 2
		jg	short loc_122D2

loc_122CD:				; CODE XREF: seg001:778Ej seg001:77D4j
		call	sub_CBB8
		pop	bp
		retn
; ---------------------------------------------------------------------------

loc_122D2:				; CODE XREF: seg001:7793j seg001:77DBj
		call	sub_CB58
		pop	bp
		retn
; ---------------------------------------------------------------------------
		enter	2, 0
		cmp	byte_26719, 0
		jnz	short loc_122EB
		cmp	word_2671A, 2
		jg	short loc_1235F
		jmp	short loc_1235A
; ---------------------------------------------------------------------------

loc_122EB:				; CODE XREF: seg001:77F0j
		cmp	byte_26719, 1
		jnz	short loc_12338
		mov	ax, word_2671A
		mov	bx, 8
		cwd
		idiv	bx
		mov	[bp-1],	al
		cmp	byte ptr [bp-1], 8
		jnb	short loc_12309
		call	sub_CBB8
		jmp	short loc_12327
; ---------------------------------------------------------------------------

loc_12309:				; CODE XREF: seg001:7812j
		call	sub_C15C
		mov	ah, 1
		call	sub_C162
		call	sub_BEDA
		mov	dx, 7Ch	; '|'
		mov	al, 0
		out	dx, al
		push	large 600048h
		push	10h
		call	sub_136B4

loc_12327:				; CODE XREF: seg001:7817j
		mov	ax, word_2D02E
		mov	word_2CDCE, ax
		mov	al, [bp-1]
		mov	ah, 0
		push	ax
		call	sub_BF16
		leave
		retn
; ---------------------------------------------------------------------------

loc_12338:				; CODE XREF: seg001:7800j
		cmp	byte_26719, 0FEh ; 'þ'
		jnb	short loc_1234C
		push	large 600048h
		push	1
		call	sub_12157
		leave
		retn
; ---------------------------------------------------------------------------

loc_1234C:				; CODE XREF: seg001:784Dj
		cmp	byte_26719, 0FEh ; 'þ'
		jz	short loc_1235A
		cmp	word_2671A, 2
		jg	short loc_1235F

loc_1235A:				; CODE XREF: seg001:77F9j seg001:7861j
		call	sub_CBB8
		leave
		retn
; ---------------------------------------------------------------------------

loc_1235F:				; CODE XREF: seg001:77F7j seg001:7868j
		call	sub_CB58
		leave
		retn
; ---------------------------------------------------------------------------
		enter	2, 0
		cmp	byte_26719, 0
		jnz	short loc_12378
		cmp	word_2671A, 2
		jg	short loc_123EC
		jmp	short loc_123E7
; ---------------------------------------------------------------------------

loc_12378:				; CODE XREF: seg001:787Dj
		cmp	byte_26719, 1
		jnz	short loc_123C5
		mov	ax, word_2671A
		mov	bx, 4
		cwd
		idiv	bx
		mov	[bp-1],	al
		cmp	byte ptr [bp-1], 8
		jnb	short loc_12396
		call	sub_CBB8
		jmp	short loc_123B4
; ---------------------------------------------------------------------------

loc_12396:				; CODE XREF: seg001:789Fj
		call	sub_C15C
		mov	ah, 0
		call	sub_C162
		call	sub_BFF8
		mov	dx, 7Ch	; '|'
		mov	al, 0
		out	dx, al
		push	large 800080h
		push	10h
		call	sub_136B4

loc_123B4:				; CODE XREF: seg001:78A4j
		mov	ax, word_2D02E
		mov	word_2CDCE, ax
		mov	al, [bp-1]
		mov	ah, 0
		push	ax
		call	sub_BF16
		leave
		retn
; ---------------------------------------------------------------------------

loc_123C5:				; CODE XREF: seg001:788Dj
		cmp	byte_26719, 0FEh ; 'þ'
		jnb	short loc_123D9
		push	large 800080h
		push	0
		call	sub_12157
		leave
		retn
; ---------------------------------------------------------------------------

loc_123D9:				; CODE XREF: seg001:78DAj
		cmp	byte_26719, 0FEh ; 'þ'
		jz	short loc_123E7
		cmp	word_2671A, 2
		jg	short loc_123EC

loc_123E7:				; CODE XREF: seg001:7886j seg001:78EEj
		call	sub_CBB8
		leave
		retn
; ---------------------------------------------------------------------------

loc_123EC:				; CODE XREF: seg001:7884j seg001:78F5j
		call	sub_CB58
		leave
		retn
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		mov	si, [bp+4]
		inc	byte ptr [si+5]
		cmp	word ptr [si], 0FF80h
		jle	short loc_12413
		cmp	word ptr [si], 1880h
		jge	short loc_12413
		cmp	word ptr [si+2], 0FF80h
		jle	short loc_12413
		cmp	word ptr [si+2], 1800h
		jl	short loc_12422

loc_12413:				; CODE XREF: seg001:790Ej seg001:7914j ...
		mov	word ptr [si], 0C00h
		mov	word ptr [si+2], 0B80h
		mov	al, byte ptr word_2CF2A
		mov	[si+5],	al

loc_12422:				; CODE XREF: seg001:7921j
		pop	si
		pop	bp
		retn	2
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		mov	si, [bp+4]
		cmp	word ptr [si], 0FF80h
		jg	short loc_12439
		add	word ptr [si], 1900h
		jmp	short loc_12443
; ---------------------------------------------------------------------------

loc_12439:				; CODE XREF: seg001:7941j
		cmp	word ptr [si], 1880h
		jl	short loc_12443
		sub	word ptr [si], 1900h

loc_12443:				; CODE XREF: seg001:7947j seg001:794Dj
		cmp	word ptr [si+2], 0FF80h
		jg	short loc_12450
		add	word ptr [si+2], 1880h
		jmp	short loc_1245C
; ---------------------------------------------------------------------------

loc_12450:				; CODE XREF: seg001:7957j
		cmp	word ptr [si+2], 1800h
		jl	short loc_1245C
		sub	word ptr [si+2], 1880h

loc_1245C:				; CODE XREF: seg001:795Ej seg001:7965j
		pop	si
		pop	bp
		retn	2

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_12461	proc near		; CODE XREF: seg001:loc_12972p

var_9		= byte ptr -9
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2

		enter	0Ah, 0
		push	si
		push	di
		cmp	byte_2CDD1, 0
		jnz	short loc_12492
		mov	si, 0BA92h
		mov	al, byte_2CDD0
		mov	ah, 0
		mov	bx, ax
		cmp	bx, 0Ch
		ja	short loc_12492
		add	bx, bx
		jmp	word ptr cs:(loc_289F -	locret_AAF0)[bx]

loc_12484:				; CODE XREF: sub_12461+BCj
		mov	word_2CF2C, 7937h
		jmp	short loc_12492
; ---------------------------------------------------------------------------

loc_1248C:				; CODE XREF: sub_12461+1Ej
					; sub_12461+BCj
		mov	word_2CF2C, 7901h

loc_12492:				; CODE XREF: sub_12461+Bj
					; sub_12461+1Aj ...
		call	sub_C156
		cmp	byte_2CDD1, 80h	; ''
		jnb	short loc_124A1
		mov	al, byte_2CDD1
		jmp	short loc_124A7
; ---------------------------------------------------------------------------

loc_124A1:				; CODE XREF: sub_12461+39j
		mov	al, 0FFh
		sub	al, byte_2CDD1

loc_124A7:				; CODE XREF: sub_12461+3Ej
		mov	[bp+var_9], al
		cmp	byte_2CDD0, 10h
		jnb	short loc_124D7
		mov	ah, 8
		call	sub_C162
		test	byte_2CDD0, 1
		jz	short loc_124C5
		mov	al, [bp+var_9]
		mov	byte_23DC2, al
		jmp	short loc_124D2
; ---------------------------------------------------------------------------

loc_124C5:				; CODE XREF: sub_12461+5Aj
		mov	al, [bp+var_9]
		mov	ah, 0
		imul	ax, 3
		cwd
		sub	ax, dx
		sar	ax, 1

loc_124D2:				; CODE XREF: sub_12461+62j
		mov	byte_23DC4, al
		jmp	short loc_12508
; ---------------------------------------------------------------------------

loc_124D7:				; CODE XREF: sub_12461+4Ej
		mov	ah, 9
		call	sub_C162
		cmp	byte_23242, 0
		jnz	short loc_12508
		mov	byte_23DC2, 0
		mov	byte_23DC3, 0
		mov	al, [bp+var_9]
		mov	ah, 0
		imul	ax, 3
		cwd
		sub	ax, dx
		sar	ax, 1
		mov	byte_23DC4, al
		cmp	[bp+var_9], 7Fh	; ''
		jb	short loc_12508
		mov	byte_23242, 1

loc_12508:				; CODE XREF: sub_12461+74j
					; sub_12461+80j ...
		mov	byte_266D3, 1
		mov	al, byte_2CDD0
		mov	ah, 0
		mov	bx, ax
		cmp	bx, 10h
		ja	loc_127EC
		add	bx, bx
		jmp	word ptr cs:(loc_287D -	locret_AAF0)[bx]
		cmp	byte_26719, 2
		jbe	short loc_12567
		inc	byte_2CDD1
		cmp	byte_2CDD1, 0FEh ; 'þ'
		jb	loc_127EC
		mov	word_2CF28, 78h	; 'x'
		mov	byte_2CDD0, 4
		mov	si, 0BA92h
		xor	di, di
		jmp	short loc_12554
; ---------------------------------------------------------------------------

loc_12548:				; CODE XREF: sub_12461+F6j
		mov	byte ptr [si+4], 40h ; '@'
		mov	byte ptr [si+5], 40h ; '@'
		inc	di
		add	si, 6

loc_12554:				; CODE XREF: sub_12461+E5j
		cmp	di, 38h	; '8'
		jl	short loc_12548
		mov	byte_2CDD1, 0FFh
		mov	word_2CF2A, 40h	; '@'
		jmp	loc_127EC
; ---------------------------------------------------------------------------

loc_12567:				; CODE XREF: sub_12461+C6j
		cmp	byte_2CDD1, 0FFh
		jnz	loc_127EC
		inc	word_2CF28
		inc	byte_2CDD0
		cmp	byte_2CDD0, 4
		jb	short loc_1258A
		mov	byte_2CDD0, 0
		mov	word_2CF28, 78h	; 'x'

loc_1258A:				; CODE XREF: sub_12461+11Cj
		mov	si, 0BA92h
		xor	di, di
		jmp	short loc_1259D
; ---------------------------------------------------------------------------

loc_12591:				; CODE XREF: sub_12461+13Fj
		mov	al, 80h	; ''
		sub	al, [si+4]
		mov	[si+4],	al
		inc	di
		add	si, 6

loc_1259D:				; CODE XREF: sub_12461+12Ej
		cmp	di, 38h	; '8'
		jl	short loc_12591
		jmp	loc_127EC
; ---------------------------------------------------------------------------

loc_125A5:				; CODE XREF: sub_12461+BCj
		cmp	byte_26719, 4
		jbe	short loc_125F6
		inc	byte_2CDD1
		cmp	byte_2CDD1, 0FEh ; 'þ'
		jb	loc_127EC
		mov	word_2CF28, 78h	; 'x'
		mov	byte_2CDD0, 6
		mov	si, 0BA92h
		xor	di, di
		jmp	short loc_125E8
; ---------------------------------------------------------------------------

loc_125CB:				; CODE XREF: sub_12461+18Aj
		mov	ax, [si+2]
		add	ax, 0F400h
		push	ax
		mov	ax, [si]
		add	ax, 0F380h
		push	ax
		call	sub_1DA8
		mov	[si+4],	al
		mov	byte ptr [si+5], 10h
		inc	di
		add	si, 6

loc_125E8:				; CODE XREF: sub_12461+168j
		cmp	di, 38h	; '8'
		jl	short loc_125CB
		mov	word_2CF2A, 10h
		jmp	loc_12705
; ---------------------------------------------------------------------------

loc_125F6:				; CODE XREF: sub_12461+149j
		cmp	byte_2CDD1, 0FFh
		jnz	loc_127EC
		cmp	byte_2CDD0, 4
		jnz	loc_127AB
		jmp	loc_127B1
; ---------------------------------------------------------------------------

loc_1260B:				; CODE XREF: sub_12461+BCj
		cmp	byte_26719, 7
		jz	short loc_12627
		cmp	byte_26719, 8
		jz	short loc_12627
		cmp	byte_26719, 0Bh
		jz	short loc_12627
		cmp	byte_26719, 0Ch
		jnz	short loc_1267C

loc_12627:				; CODE XREF: sub_12461+1AFj
					; sub_12461+1B6j ...
		inc	byte_2CDD1
		cmp	byte_2CDD1, 0FEh ; 'þ'
		jb	loc_127EC
		mov	word_2CF28, 78h	; 'x'
		cmp	byte_2CDD0, 0Ah
		jnb	short loc_12645
		mov	al, 8
		jmp	short loc_12647
; ---------------------------------------------------------------------------

loc_12645:				; CODE XREF: sub_12461+1DEj
		mov	al, 0Ch

loc_12647:				; CODE XREF: sub_12461+1E2j
		mov	byte_2CDD0, al
		mov	si, 0BA92h
		xor	di, di
		jmp	short loc_12674
; ---------------------------------------------------------------------------

loc_12651:				; CODE XREF: sub_12461+216j
		push	1800h
		call	sub_BC94
		mov	[si], ax
		push	1700h
		call	sub_BC94
		mov	[si+2],	ax
		push	0Fh
		call	sub_BC7E
		add	al, 0B8h ; '¸'
		mov	[si+4],	al
		mov	byte ptr [si+5], 48h ; 'H'
		inc	di
		add	si, 6

loc_12674:				; CODE XREF: sub_12461+1EEj
		cmp	di, 38h	; '8'
		jl	short loc_12651
		jmp	loc_126FF
; ---------------------------------------------------------------------------

loc_1267C:				; CODE XREF: sub_12461+1C4j
		cmp	byte_2CDD1, 0FFh
		jnz	loc_127EC
		test	byte_2CDD0, 1
		jz	loc_127B1
		jmp	loc_127AB
; ---------------------------------------------------------------------------

loc_12691:				; CODE XREF: sub_12461+BCj
		cmp	byte_26719, 9
		jz	short loc_126A6
		cmp	byte_26719, 0Ah
		jz	short loc_126A6
		cmp	byte_26719, 0Dh
		jb	short loc_1270D

loc_126A6:				; CODE XREF: sub_12461+235j
					; sub_12461+23Cj
		inc	byte_2CDD1
		cmp	byte_2CDD1, 0FEh ; 'þ'
		jb	loc_127EC
		mov	word_2CF28, 78h	; 'x'
		cmp	byte_2CDD0, 0Ch
		jnb	short loc_126C4
		mov	al, 0Ah
		jmp	short loc_126C6
; ---------------------------------------------------------------------------

loc_126C4:				; CODE XREF: sub_12461+25Dj
		mov	al, 0Eh

loc_126C6:				; CODE XREF: sub_12461+261j
		mov	byte_2CDD0, al
		mov	si, 0BA92h
		xor	di, di
		jmp	short loc_126FA
; ---------------------------------------------------------------------------

loc_126D0:				; CODE XREF: sub_12461+29Cj
		mov	ax, [si+2]
		add	ax, 0F400h
		push	ax
		mov	ax, [si]
		add	ax, 0F380h
		push	ax
		call	sub_1DA8
		mov	[si+4],	al
		cmp	byte_2CDD0, 0Eh
		jz	short loc_126F2
		mov	byte ptr [si+5], 10h
		jmp	short loc_126F6
; ---------------------------------------------------------------------------

loc_126F2:				; CODE XREF: sub_12461+289j
		mov	byte ptr [si+5], 40h ; '@'

loc_126F6:				; CODE XREF: sub_12461+28Fj
		inc	di
		add	si, 6

loc_126FA:				; CODE XREF: sub_12461+26Dj
		cmp	di, 38h	; '8'
		jl	short loc_126D0

loc_126FF:				; CODE XREF: sub_12461+218j
		mov	word_2CF2A, 40h	; '@'

loc_12705:				; CODE XREF: sub_12461+192j
		mov	byte_2CDD1, 0FFh
		jmp	loc_127EC
; ---------------------------------------------------------------------------

loc_1270D:				; CODE XREF: sub_12461+243j
		cmp	byte_2CDD1, 0FFh
		jnz	loc_127EC
		test	byte_2CDD0, 1
		jz	loc_127B1
		jmp	loc_127AB
; ---------------------------------------------------------------------------

loc_12722:				; CODE XREF: sub_12461+BCj
		mov	si, 0BA92h
		cmp	byte_2CDD0, 0Eh
		jnz	short loc_12730
		mov	al, 2
		jmp	short loc_12732
; ---------------------------------------------------------------------------

loc_12730:				; CODE XREF: sub_12461+2C9j
		mov	al, 0FEh ; 'þ'

loc_12732:				; CODE XREF: sub_12461+2CDj
		mov	[bp+var_9], al
		xor	di, di
		jmp	short loc_12743
; ---------------------------------------------------------------------------

loc_12739:				; CODE XREF: sub_12461+2E5j
		mov	al, [bp+var_9]
		add	[si+4],	al
		inc	di
		add	si, 6

loc_12743:				; CODE XREF: sub_12461+2D6j
		cmp	di, 38h	; '8'
		jl	short loc_12739
		cmp	byte_26719, 0Fh
		jb	short loc_1279D
		inc	byte_2CDD1
		cmp	byte_2CDD1, 0FEh ; 'þ'
		jb	loc_127EC
		mov	word_2CF28, 7Ch	; '|'
		mov	byte_2CDD0, 10h
		mov	byte_2CDD1, 0FFh
		mov	si, 0BA92h
		xor	di, di
		jmp	short loc_12790
; ---------------------------------------------------------------------------

loc_12773:				; CODE XREF: sub_12461+332j
		push	1800h
		call	sub_BC94
		mov	[si], ax
		push	1700h
		call	sub_BC94
		mov	[si+2],	ax
		mov	byte ptr [si+4], 40h ; '@'
		mov	byte ptr [si+5], 0C0h ;	'À'
		inc	di
		add	si, 6

loc_12790:				; CODE XREF: sub_12461+310j
		cmp	di, 38h	; '8'
		jl	short loc_12773
		mov	word_2CF2A, 0C0h ; 'À'
		jmp	short loc_127EC
; ---------------------------------------------------------------------------

loc_1279D:				; CODE XREF: sub_12461+2ECj
		cmp	byte_2CDD1, 0FFh
		jnz	short loc_127EC
		test	byte_2CDD0, 1
		jz	short loc_127B1

loc_127AB:				; CODE XREF: sub_12461+1A3j
					; sub_12461+22Dj ...
		dec	byte_2CDD0
		jmp	short loc_127EC
; ---------------------------------------------------------------------------

loc_127B1:				; CODE XREF: sub_12461+1A7j
					; sub_12461+229j ...
		inc	byte_2CDD0
		jmp	short loc_127EC
; ---------------------------------------------------------------------------

loc_127B7:				; CODE XREF: sub_12461+BCj
		cmp	byte_26719, 0FEh ; 'þ'
		jb	short loc_127EC
		mov	word_2CF28, 7Dh	; '}'
		mov	byte_2CDD0, 11h
		mov	byte_2CDD1, 0FFh
		mov	si, 0BA92h
		xor	di, di
		jmp	short loc_127E1
; ---------------------------------------------------------------------------

loc_127D5:				; CODE XREF: sub_12461+383j
		mov	byte ptr [si+4], 40h ; '@'
		mov	byte ptr [si+5], 10h
		inc	di
		add	si, 6

loc_127E1:				; CODE XREF: sub_12461+372j
		cmp	di, 38h	; '8'
		jl	short loc_127D5
		mov	word_2CF2A, 10h

loc_127EC:				; CODE XREF: sub_12461+B6j
					; sub_12461+D1j ...
		inc	byte_2CDD1
		mov	si, 0BA92h
		xor	di, di
		jmp	short loc_12823
; ---------------------------------------------------------------------------

loc_127F7:				; CODE XREF: sub_12461+3C5j
		push	ss
		lea	ax, [bp+var_6]
		push	ax
		push	ss
		lea	ax, [bp+var_8]
		push	ax
		push	word ptr [si+4]
		mov	al, [si+5]
		mov	ah, 0
		push	ax
		call	sub_13117
		mov	ax, [bp+var_6]
		add	[si], ax
		mov	ax, [bp+var_8]
		add	[si+2],	ax
		push	si
		call	word_2CF2C
		inc	di
		add	si, 6

loc_12823:				; CODE XREF: sub_12461+394j
		cmp	di, 38h	; '8'
		jl	short loc_127F7
		mov	ax, 0A800h
		mov	es, ax
		assume es:nothing
		mov	si, 0BA92h
		xor	di, di
		jmp	short loc_1286D
; ---------------------------------------------------------------------------

loc_12834:				; CODE XREF: sub_12461+40Fj
		mov	ax, word_2CF28
		mov	[bp+var_4], ax
		cmp	byte_2CDD0, 11h
		jb	short loc_1284C
		mov	ax, di
		mov	bx, 3
		cwd
		idiv	bx
		add	[bp+var_4], dx

loc_1284C:				; CODE XREF: sub_12461+3DEj
		mov	ax, [si]
		sar	ax, 4
		add	ax, 18h
		mov	[bp+var_2], ax
		mov	ax, [si+2]
		sar	ax, 4
		add	ax, 8
		mov	cx, [bp+var_2]
		push	[bp+var_4]
		call	sub_C01A
		inc	di
		add	si, 6

loc_1286D:				; CODE XREF: sub_12461+3D1j
		cmp	di, 38h	; '8'
		jl	short loc_12834
		mov	dx, 7Ch	; '|'
		mov	al, 0
		out	dx, al
		pop	di
		pop	si
		leave
		retn
sub_12461	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		db 0
		dw offset loc_251D+5 - offset locret_AAF0
		dw offset loc_251D+5 - offset locret_AAF0
		dw offset loc_251D+5 - offset locret_AAF0
		dw offset loc_251D+5 - offset locret_AAF0
		dw offset loc_25A4+1 - offset locret_AAF0
		dw offset loc_25A4+1 - offset locret_AAF0
		dw offset locret_2609+2	- offset locret_AAF0
		dw offset locret_2609+2	- offset locret_AAF0
		dw offset loc_2690+1 - offset locret_AAF0
		dw offset loc_2690+1 - offset locret_AAF0
		dw offset locret_2609+2	- offset locret_AAF0
		dw offset locret_2609+2	- offset locret_AAF0
		dw offset loc_2690+1 - offset locret_AAF0
		dw offset loc_2690+1 - offset locret_AAF0
		dw offset locret_2721+1	- offset locret_AAF0
		dw offset locret_2721+1	- offset locret_AAF0
		dw offset loc_27B4+3 - offset locret_AAF0
		dw offset loc_2481+3 - offset locret_AAF0
		dw offset loc_2490+2 - offset locret_AAF0
		dw offset loc_2490+2 - offset locret_AAF0
		dw offset loc_2490+2 - offset locret_AAF0
		dw offset loc_2490+2 - offset locret_AAF0
		dw offset loc_2490+2 - offset locret_AAF0
		dw offset loc_248C - offset locret_AAF0
		dw offset loc_2490+2 - offset locret_AAF0
		dw offset loc_2481+3 - offset locret_AAF0
		dw offset loc_2490+2 - offset locret_AAF0
		dw offset loc_248C - offset locret_AAF0
		dw offset loc_2490+2 - offset locret_AAF0
		dw offset loc_2481+3 - offset locret_AAF0
; ---------------------------------------------------------------------------
		enter	2, 0
		push	si
		push	di
		call	sub_C15C
		cmp	byte_26719, 0
		jnz	short loc_12921
		mov	ah, 1
		call	sub_C162
		call	sub_1205A
		mov	dx, 7Ch	; '|'
		mov	al, 0
		out	dx, al
		cmp	word_2671A, 2
		jnz	loc_12975
		mov	si, 0BA92h
		xor	di, di
		jmp	short loc_12904
; ---------------------------------------------------------------------------

loc_128E7:				; CODE XREF: seg001:7E17j
		push	1800h
		call	sub_BC94
		mov	[si], ax
		push	1700h
		call	sub_BC94
		mov	[si+2],	ax
		mov	byte ptr [si+4], 60h ; '`'
		mov	byte ptr [si+5], 10h
		inc	di
		add	si, 6

loc_12904:				; CODE XREF: seg001:7DF5j
		cmp	di, 38h	; '8'
		jl	short loc_128E7
		mov	word_2CF2A, 10h
		mov	word_2CF28, 78h	; 'x'
		mov	byte_2CDD0, 0
		mov	byte_2CDD1, 0
		jmp	short loc_12975
; ---------------------------------------------------------------------------

loc_12921:				; CODE XREF: seg001:7DD7j
		cmp	byte_26719, 1
		jnz	short loc_12958
		mov	ax, word_2671A
		mov	bx, 4
		cwd
		idiv	bx
		mov	[bp-1],	al
		mov	ah, 1
		call	sub_C162
		cmp	byte ptr [bp-1], 8
		jnb	short loc_12944
		call	sub_1205A
		jmp	short loc_12947
; ---------------------------------------------------------------------------

loc_12944:				; CODE XREF: seg001:7E4Dj
		call	sub_12076

loc_12947:				; CODE XREF: seg001:7E52j
		mov	ax, word_2D02E
		mov	word_2CDCE, ax
		mov	al, [bp-1]
		mov	ah, 0
		push	ax
		call	sub_BF16
		jmp	short loc_12975
; ---------------------------------------------------------------------------

loc_12958:				; CODE XREF: seg001:7E36j
		cmp	byte_26719, 0FEh ; 'þ'
		jnb	short loc_12964
		call	sub_12076
		jmp	short loc_12972
; ---------------------------------------------------------------------------

loc_12964:				; CODE XREF: seg001:7E6Dj
		mov	ah, 1
		call	sub_C162
		call	sub_1205A
		mov	dx, 7Ch	; '|'
		mov	al, 0
		out	dx, al

loc_12972:				; CODE XREF: seg001:7E72j
		call	sub_12461

loc_12975:				; CODE XREF: seg001:7DECj seg001:7E2Fj ...
		pop	di
		pop	si
		leave
		retn
; ---------------------------------------------------------------------------
		enter	2, 0
		cmp	byte_26719, 0
		jnz	short loc_12996
		cmp	word_2671A, 2
		jg	short loc_12A05
		mov	word_2566C, 11BEh

loc_12991:				; CODE XREF: seg001:7F0Cj seg001:7F13j
		call	sub_CBB8
		leave
		retn
; ---------------------------------------------------------------------------

loc_12996:				; CODE XREF: seg001:7E92j
		cmp	byte_26719, 1
		jnz	short loc_129E3
		mov	ax, word_2671A
		mov	bx, 4
		cwd
		idiv	bx
		mov	[bp-1],	al
		cmp	byte ptr [bp-1], 8
		jnb	short loc_129B4
		call	sub_CBB8
		jmp	short loc_129D2
; ---------------------------------------------------------------------------

loc_129B4:				; CODE XREF: seg001:7EBDj
		call	sub_C15C
		mov	ah, 1
		call	sub_C162
		call	sub_C148
		mov	dx, 7Ch	; '|'
		mov	al, 0
		out	dx, al
		push	large 200010h
		push	10h
		call	sub_136B4

loc_129D2:				; CODE XREF: seg001:7EC2j
		mov	ax, word_2D02E
		mov	word_2CDCE, ax
		mov	al, [bp-1]
		mov	ah, 0
		push	ax
		call	sub_BF16
		leave
		retn
; ---------------------------------------------------------------------------

loc_129E3:				; CODE XREF: seg001:7EABj
		cmp	byte_26719, 0FEh ; 'þ'
		jnb	short loc_129F7
		push	large 200010h
		push	1
		call	sub_12157
		leave
		retn
; ---------------------------------------------------------------------------

loc_129F7:				; CODE XREF: seg001:7EF8j
		cmp	byte_26719, 0FEh ; 'þ'
		jz	short loc_12991
		cmp	word_2671A, 2
		jle	short loc_12991

loc_12A05:				; CODE XREF: seg001:7E99j
		call	sub_CB58
		leave
		retn

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_12A0A	proc near		; CODE XREF: sub_12AB7:loc_12B19p

var_1		= byte ptr -1

		enter	2, 0
		push	si
		push	di
		mov	[bp+var_1], 0A9h ; '©'
		xor	si, si
		jmp	short loc_12A7E
; ---------------------------------------------------------------------------

loc_12A18:				; CODE XREF: sub_12A0A+77j
		mov	byte_2CFDC, 19h
		xor	di, di
		jmp	short loc_12A2C
; ---------------------------------------------------------------------------

loc_12A21:				; CODE XREF: sub_12A0A+25j
		mov	bx, si
		shl	bx, 3
		mov	byte ptr [bx+di-43B4h],	0A0h ; ' '
		inc	di

loc_12A2C:				; CODE XREF: sub_12A0A+15j
		cmp	di, 8
		jl	short loc_12A21
		or	si, si
		jnz	short loc_12A41
		mov	bx, si
		shl	bx, 3
		mov	byte ptr [bx-43AFh], 0A1h ; '¡'
		jmp	short loc_12A50
; ---------------------------------------------------------------------------

loc_12A41:				; CODE XREF: sub_12A0A+29j
		mov	bx, si
		shl	bx, 3
		mov	al, [bp+var_1]
		mov	[bx-43B0h], al
		dec	[bp+var_1]

loc_12A50:				; CODE XREF: sub_12A0A+35j
		mov	ax, si
		cwd
		sub	ax, dx
		sar	ax, 1
		mov	dl, 0A5h ; '¥'
		sub	dl, al
		mov	[si-4362h], dl
		xor	di, di
		jmp	short loc_12A6E
; ---------------------------------------------------------------------------

loc_12A63:				; CODE XREF: sub_12A0A+67j
		mov	bx, si
		imul	bx, 9
		mov	byte ptr [bx+di-440Eh],	0C4h ; 'Ä'
		inc	di

loc_12A6E:				; CODE XREF: sub_12A0A+57j
		cmp	di, 8
		jl	short loc_12A63
		mov	bx, si
		imul	bx, 9
		mov	byte ptr [bx-4406h], 0
		inc	si

loc_12A7E:				; CODE XREF: sub_12A0A+Cj
		cmp	si, 0Ah
		jl	short loc_12A18
		push	ds
		push	offset aGensou_scr ; "GENSOU.SCR"
		call	sub_E04
		xor	si, si
		jmp	short loc_12AA9
; ---------------------------------------------------------------------------

loc_12A90:				; CODE XREF: sub_12A0A+A2j
		push	0BBEEh
		call	sub_C3EA
		push	ds
		push	offset unk_2CF2E
		push	0C4h ; 'Ä'
		call	sub_FA0
		push	0BBEEh
		call	sub_C3AA
		inc	si

loc_12AA9:				; CODE XREF: sub_12A0A+84j
		cmp	si, 0Ah
		jl	short loc_12A90
		call	sub_DF4
		pop	di
		pop	si
		leave
		retn
sub_12A0A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_12AB7	proc near		; CODE XREF: sub_12CB5+3p sub_12CC7+4p
		push	bp
		mov	bp, sp
		push	ds
		push	offset aGensou_scr_0 ; "GENSOU.SCR"
		call	sub_E44
		or	ax, ax
		jz	short loc_12B19
		push	ds
		push	offset aGensou_scr_1 ; "GENSOU.SCR"
		call	sub_F14
		mov	al, byte_25688
		mov	ah, 0
		imul	ax, 0C4h
		movzx	eax, ax
		push	eax
		push	0
		call	sub_F50
		les	bx, dword_2CDC6
		assume es:nothing
		cmp	byte ptr es:[bx+12h], 31h ; '1'
		jnz	short loc_12AFE
		push	large 3D4h
		push	1
		call	sub_F50

loc_12AFE:				; CODE XREF: sub_12AB7+38j
		push	ds
		push	offset unk_2CF2E
		push	0C4h ; 'Ä'
		call	sub_E60
		call	sub_DF4
		push	0BBEEh
		call	sub_C3AA
		or	al, al
		jz	short loc_12B1C

loc_12B19:				; CODE XREF: sub_12AB7+Ej
		call	sub_12A0A

loc_12B1C:				; CODE XREF: sub_12AB7+60j
		pop	bp
		retn
sub_12AB7	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_12B1E	proc near		; CODE XREF: sub_12B71:loc_12CAFp
		push	bp
		mov	bp, sp
		push	0BBEEh
		call	sub_C3EA
		push	ds
		push	offset aGensou_scr_2 ; "GENSOU.SCR"
		call	sub_D34
		mov	al, byte_25688
		mov	ah, 0
		imul	ax, 0C4h
		movzx	eax, ax
		push	eax
		push	0
		call	sub_F50
		les	bx, dword_2CDC6
		cmp	byte ptr es:[bx+12h], 31h ; '1'
		jnz	short loc_12B5E
		push	large 3D4h
		push	1
		call	sub_F50

loc_12B5E:				; CODE XREF: sub_12B1E+31j
		push	ds
		push	offset unk_2CF2E
		push	0C4h ; 'Ä'
		call	sub_FA0
		call	sub_DF4
		pop	bp
		retn
sub_12B1E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_12B71	proc near		; CODE XREF: sub_12CB5+Dp

var_A		= byte ptr -0Ah
var_2		= word ptr -2

		enter	0Ah, 0
		push	si
		lea	ax, [bp+var_A]
		push	ss
		push	ax
		push	ds
		push	offset unk_23244
		mov	cx, 8
		call	SCOPY@
		mov	[bp+var_2], 9
		jmp	short loc_12BCF
; ---------------------------------------------------------------------------

loc_12B8E:				; CODE XREF: sub_12B71+62j
		mov	si, 7
		jmp	short loc_12BC8
; ---------------------------------------------------------------------------

loc_12B93:				; CODE XREF: sub_12B71+59j
		mov	al, [si+4349h]
		mov	ah, 0
		mov	bx, [bp+var_2]
		shl	bx, 3
		mov	dl, [bx+si-43B4h]
		mov	dh, 0
		add	dx, 0FF60h
		cmp	ax, dx
		jg	short loc_12BCC
		mov	al, [si+4349h]
		mov	ah, 0
		mov	bx, [bp+var_2]
		shl	bx, 3
		mov	dl, [bx+si-43B4h]
		mov	dh, 0
		add	dx, 0FF60h
		cmp	ax, dx
		jl	short loc_12BDC
		dec	si

loc_12BC8:				; CODE XREF: sub_12B71+20j
		or	si, si
		jge	short loc_12B93

loc_12BCC:				; CODE XREF: sub_12B71+3Aj
		dec	[bp+var_2]

loc_12BCF:				; CODE XREF: sub_12B71+1Bj
		cmp	[bp+var_2], 0
		jge	short loc_12B8E
		mov	byte_2CFF2, 0
		jmp	short loc_12BF2
; ---------------------------------------------------------------------------

loc_12BDC:				; CODE XREF: sub_12B71+54j
		cmp	[bp+var_2], 9
		jnz	short loc_12BEA
		mov	byte_2CFF2, 0FFh
		jmp	loc_12CB2
; ---------------------------------------------------------------------------

loc_12BEA:				; CODE XREF: sub_12B71+6Fj
		mov	al, byte ptr [bp+var_2]
		inc	al
		mov	byte_2CFF2, al

loc_12BF2:				; CODE XREF: sub_12B71+69j
		mov	[bp+var_2], 8
		jmp	short loc_12C43
; ---------------------------------------------------------------------------

loc_12BF9:				; CODE XREF: sub_12B71+DAj
		mov	si, 7
		jmp	short loc_12C13
; ---------------------------------------------------------------------------

loc_12BFE:				; CODE XREF: sub_12B71+A4j
		mov	bx, [bp+var_2]
		imul	bx, 9
		mov	al, [bx+si-440Eh]
		mov	bx, [bp+var_2]
		imul	bx, 9
		mov	[bx+si-4405h], al
		dec	si

loc_12C13:				; CODE XREF: sub_12B71+8Bj
		or	si, si
		jge	short loc_12BFE
		mov	si, 7
		jmp	short loc_12C31
; ---------------------------------------------------------------------------

loc_12C1C:				; CODE XREF: sub_12B71+C2j
		mov	bx, [bp+var_2]
		shl	bx, 3
		mov	al, [bx+si-43B4h]
		mov	bx, [bp+var_2]
		shl	bx, 3
		mov	[bx+si-43ACh], al
		dec	si

loc_12C31:				; CODE XREF: sub_12B71+A9j
		or	si, si
		jge	short loc_12C1C
		mov	bx, [bp+var_2]
		mov	al, [bx-4362h]
		mov	[bx-4361h], al
		dec	[bp+var_2]

loc_12C43:				; CODE XREF: sub_12B71+86j
		mov	al, byte_2CFF2
		mov	ah, 0
		cmp	ax, [bp+var_2]
		jle	short loc_12BF9
		mov	si, 7
		jmp	short loc_12C65
; ---------------------------------------------------------------------------

loc_12C52:				; CODE XREF: sub_12B71+F6j
		mov	al, [bp+si+var_A]
		mov	dl, byte_2CFF2
		mov	dh, 0
		imul	dx, 9
		mov	bx, dx
		mov	[bx+si-440Eh], al
		dec	si

loc_12C65:				; CODE XREF: sub_12B71+DFj
		or	si, si
		jge	short loc_12C52
		mov	si, 7
		jmp	short loc_12C84
; ---------------------------------------------------------------------------

loc_12C6E:				; CODE XREF: sub_12B71+115j
		mov	al, [si+4349h]
		add	al, 0A0h ; ' '
		mov	dl, byte_2CFF2
		mov	dh, 0
		shl	dx, 3
		mov	bx, dx
		mov	[bx+si-43B4h], al
		dec	si

loc_12C84:				; CODE XREF: sub_12B71+FBj
		or	si, si
		jge	short loc_12C6E
		cmp	byte_266D4, 6
		jz	short loc_12CA3
		mov	al, byte_2CFF2
		mov	ah, 0
		mov	dl, byte_266D4
		add	dl, 0A1h ; '¡'
		mov	bx, ax
		mov	[bx-4362h], dl
		jmp	short loc_12CAF
; ---------------------------------------------------------------------------

loc_12CA3:				; CODE XREF: sub_12B71+11Cj
		mov	al, byte_2CFF2
		mov	ah, 0
		mov	bx, ax
		mov	byte ptr [bx-4362h], 0A1h ; '¡'

loc_12CAF:				; CODE XREF: sub_12B71+130j
		call	sub_12B1E

loc_12CB2:				; CODE XREF: sub_12B71+76j
		pop	si
		leave
		retn
sub_12B71	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_12CB5	proc near		; CODE XREF: sub_E67A+120p
		push	bp
		mov	bp, sp
		call	sub_12AB7
		cmp	byte_266E0, 0
		jz	short loc_12CC5
		call	sub_12B71

loc_12CC5:				; CODE XREF: sub_12CB5+Bj
		pop	bp
		retn
sub_12CB5	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_12CC7	proc near		; CODE XREF: sub_AD03+FCp
		push	bp
		mov	bp, sp
		push	si
		call	sub_12AB7
		xor	si, si
		jmp	short loc_12CDD
; ---------------------------------------------------------------------------

loc_12CD2:				; CODE XREF: sub_12CC7+19j
		mov	al, [si-43B4h]
		add	al, 60h	; '`'
		mov	[si+4351h], al
		inc	si

loc_12CDD:				; CODE XREF: sub_12CC7+9j
		cmp	si, 8
		jl	short loc_12CD2
		pop	si
		pop	bp
		retn
sub_12CC7	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_12CE5	proc near		; CODE XREF: sub_AB88+A4p

var_2		= word ptr -2

		push	bp
		mov	bp, sp
		sub	sp, 2
		push	si
		push	di
		mov	ax, 0A800h
		mov	es, ax
		assume es:nothing
		mov	si, 86B8h
		xor	di, di
		jmp	loc_12D96
; ---------------------------------------------------------------------------

loc_12CFA:				; CODE XREF: sub_12CE5+B5j
		cmp	byte ptr [si], 1
		jnz	loc_12D92
		cmp	byte ptr [si+12h], 3
		ja	short loc_12D24
		mov	ax, [si+4]
		add	ax, 80h	; ''
		push	ax
		call	sub_BC10
		mov	dx, ax
		mov	ax, [si+2]
		sar	ax, 4
		add	ax, 18h
		push	word ptr [si+18h]
		call	sub_C546
		jmp	short loc_12D92
; ---------------------------------------------------------------------------

loc_12D24:				; CODE XREF: sub_12CE5+20j
		cmp	word ptr [si+4], 0
		jl	short loc_12D92
		cmp	word ptr [si+4], 1700h
		jge	short loc_12D92
		cmp	word ptr [si+2], 0
		jl	short loc_12D92
		cmp	word ptr [si+2], 1800h
		jge	short loc_12D92
		mov	ax, [si+18h]
		cmp	ax, 36h	; '6'
		jz	short loc_12D50
		cmp	ax, 37h	; '7'
		jz	short loc_12D50
		cmp	ax, 39h	; '9'
		jnz	short loc_12D57

loc_12D50:				; CODE XREF: sub_12CE5+5Fj
					; sub_12CE5+64j
		mov	[bp+var_2], 13h
		jmp	short loc_12D5C
; ---------------------------------------------------------------------------

loc_12D57:				; CODE XREF: sub_12CE5+69j
		mov	[bp+var_2], 17h

loc_12D5C:				; CODE XREF: sub_12CE5+70j
		cmp	word ptr [si+18h], 4Ch ; 'L'
		jl	short loc_12D6D
		cmp	word ptr [si+18h], 5Ch ; '\'
		jge	short loc_12D6D
		mov	[bp+var_2], 13h

loc_12D6D:				; CODE XREF: sub_12CE5+7Bj
					; sub_12CE5+81j
		mov	al, [si+12h]
		mov	ah, 0
		mov	bx, 4
		cwd
		idiv	bx
		add	[bp+var_2], ax
		push	word ptr [si+4]
		call	sub_BC10
		mov	dx, ax
		mov	ax, [si+2]
		sar	ax, 4
		add	ax, 10h
		push	[bp+var_2]
		call	sub_C42C

loc_12D92:				; CODE XREF: sub_12CE5+18j
					; sub_12CE5+3Dj ...
		inc	di
		sub	si, 1Ah

loc_12D96:				; CODE XREF: sub_12CE5+12j
		cmp	di, 0C8h ; 'È'
		jl	loc_12CFA
		cmp	byte_2CFF9, 0
		jnz	short loc_12DBE
		cmp	byte_2CFFA, 0
		jnz	short loc_12DBE
		mov	ah, 0Fh
		call	sub_C162
		call	sub_C99C
		mov	ah, 9
		call	sub_C162
		call	sub_CA2E
		jmp	short loc_12DEC
; ---------------------------------------------------------------------------

loc_12DBE:				; CODE XREF: sub_12CE5+BEj
					; sub_12CE5+C5j
		xor	di, di
		jmp	short loc_12DE6
; ---------------------------------------------------------------------------

loc_12DC2:				; CODE XREF: sub_12CE5+105j
		cmp	byte ptr [si], 1
		jnz	short loc_12DE2
		mov	ax, [si+4]
		add	ax, 80h	; ''
		push	ax
		call	sub_BC10
		mov	dx, ax
		mov	ax, [si+2]
		sar	ax, 4
		add	ax, 18h
		push	word ptr [si+18h]
		call	sub_C546

loc_12DE2:				; CODE XREF: sub_12CE5+E0j
		inc	di
		sub	si, 1Ah

loc_12DE6:				; CODE XREF: sub_12CE5+DBj
		cmp	di, 0F0h ; 'ð'
		jl	short loc_12DC2

loc_12DEC:				; CODE XREF: sub_12CE5+D7j
		pop	di
		pop	si
		leave
		retn
sub_12CE5	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_12DF0	proc near		; CODE XREF: sub_AB88+9Ep
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, 0A800h
		mov	es, ax
		call	sub_C17C
		mov	si, 0AF34h
		xor	di, di
		jmp	short loc_12E2E
; ---------------------------------------------------------------------------

loc_12E04:				; CODE XREF: sub_12DF0+41j
		cmp	byte ptr [si], 1
		jnz	short loc_12E2A
		cmp	word ptr [si+4], 0FF80h
		jle	short loc_12E2A
		mov	ax, [si+4]
		add	ax, 80h	; ''
		push	ax
		call	sub_BC10
		mov	dx, ax
		mov	ax, [si+2]
		sar	ax, 4
		add	ax, 18h
		push	word ptr [si+10h]
		call	sub_C546

loc_12E2A:				; CODE XREF: sub_12DF0+17j
					; sub_12DF0+1Dj
		inc	di
		add	si, 14h

loc_12E2E:				; CODE XREF: sub_12DF0+12j
		cmp	di, 20h	; ' '
		jl	short loc_12E04
		pop	di
		pop	si
		pop	bp
		retn
sub_12DF0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_12E37	proc near		; CODE XREF: seg001:loc_12F29p

var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2

		enter	6, 0
		push	si
		push	di
		mov	si, 0B204h
		xor	di, di
		jmp	short loc_12E8A
; ---------------------------------------------------------------------------

loc_12E44:				; CODE XREF: sub_12E37+56j
		cmp	byte ptr [si], 0
		jz	short loc_12E86
		cmp	word ptr [si+4], 0FF00h
		jle	short loc_12E86
		mov	ax, [si+2]
		sar	ax, 4
		add	ax, 10h
		mov	[bp+var_2], ax
		mov	ax, [si+4]
		sar	ax, 4
		mov	[bp+var_4], ax
		mov	al, byte_2D03B
		mov	ah, 0
		mov	dx, word_266CA
		add	dx, di
		and	dx, 7
		shr	dx, 1
		add	ax, dx
		mov	[bp+var_6], ax
		push	[bp+var_2]
		push	[bp+var_4]
		push	ax
		call	sub_2D3E

loc_12E86:				; CODE XREF: sub_12E37+10j
					; sub_12E37+17j
		inc	di
		add	si, 1Ah

loc_12E8A:				; CODE XREF: sub_12E37+Bj
		cmp	di, 20h	; ' '
		jl	short loc_12E44
		pop	di
		pop	si
		leave
		retn
sub_12E37	endp

; ---------------------------------------------------------------------------
		enter	2, 0
		push	si
		push	di
		cmp	byte_26719, 0FEh ; 'þ'
		jnb	loc_12F2E
		cmp	byte_2D03C, 0
		jz	short loc_12ECF
		mov	ax, word ptr dword_2670E
		sar	ax, 4
		mov	si, ax
		mov	ax, word ptr dword_2670E+2
		sar	ax, 4
		add	ax, 0FFF0h
		mov	di, ax
		push	si
		push	ax
		mov	al, byte_26718
		mov	ah, 0
		push	ax
		push	large 0FFC6h
		call	far ptr	loc_2838

loc_12ECF:				; CODE XREF: seg001:83B7j
		mov	ax, word ptr dword_2670A
		sar	ax, 4
		mov	si, ax
		mov	ax, word ptr dword_2670A+2
		sar	ax, 4
		add	ax, 0FFF0h
		mov	di, ax
		cmp	byte_26718, 88h	; ''
		jnz	short loc_12EF9
		mov	al, byte_266CF
		mov	ah, 0
		mov	bx, 4
		cwd
		idiv	bx
		add	ax, 88h	; ''
		jmp	short loc_12EFE
; ---------------------------------------------------------------------------

loc_12EF9:				; CODE XREF: seg001:83F7j
		mov	al, byte_26718
		mov	ah, 0

loc_12EFE:				; CODE XREF: seg001:8407j
		mov	[bp-2],	ax
		cmp	byte_2671C, 0
		jnz	short loc_12F14
		push	si
		push	di
		push	word ptr [bp-2]
		call	sub_2F54
		jmp	short loc_12F29
; ---------------------------------------------------------------------------

loc_12F14:				; CODE XREF: seg001:8416j
		push	si
		push	di
		push	word ptr [bp-2]
		push	large 0FFC0h
		call	far ptr	loc_2838
		mov	byte_2671C, 0

loc_12F29:				; CODE XREF: seg001:8422j
		call	sub_12E37
		jmp	short loc_12F55
; ---------------------------------------------------------------------------

loc_12F2E:				; CODE XREF: seg001:83AEj
		cmp	byte_26719, 0FEh ; 'þ'
		jnz	short loc_12F55
		mov	ax, word ptr dword_2670A
		sar	ax, 4
		mov	si, ax
		mov	ax, word ptr dword_2670A+2
		sar	ax, 4
		add	ax, 0FFF0h
		mov	di, ax
		push	si
		push	ax
		mov	al, byte_26718
		mov	ah, 0
		push	ax
		call	sub_1E2A

loc_12F55:				; CODE XREF: seg001:843Cj seg001:8443j
		call	sub_D88C
		call	sub_D955
		pop	di
		pop	si
		leave
		retn
; ---------------------------------------------------------------------------
		enter	2, 0
		push	si
		push	di
		cmp	byte_26718, 0
		jz	loc_13083
		mov	ax, word ptr dword_2670A
		sar	ax, 4
		add	ax, 0FFF0h
		mov	di, ax
		mov	ax, word ptr dword_2670A+2
		sar	ax, 4
		add	ax, 0FFE0h
		mov	si, ax
		cmp	byte_26719, 0FEh ; 'þ'
		jnb	loc_1306D
		cmp	byte ptr word_237F8, 0
		jz	short loc_12FE7
		push	di
		push	ax
		mov	al, byte_26718
		mov	ah, 0
		push	ax
		mov	al, byte ptr word_237F8
		mov	ah, 0
		mov	dx, 50h	; 'P'
		sub	dx, ax
		push	dx
		push	word_237F8
		mov	al, byte_2671E
		mov	ah, 0
		push	ax
		call	sub_3FD0
		lea	ax, [di+30h]
		push	ax
		push	si
		mov	al, byte_26718
		mov	ah, 0
		inc	ax
		push	ax
		mov	al, byte ptr word_237F8
		mov	ah, 0
		mov	dx, 50h	; 'P'
		sub	dx, ax
		push	dx
		push	word_237F8
		mov	al, byte_2671E
		mov	ah, 0
		push	ax
		call	sub_3FD0
		mov	al, byte_2671E
		add	al, 4
		mov	byte_2671E, al
		jmp	loc_13083
; ---------------------------------------------------------------------------

loc_12FE7:				; CODE XREF: seg001:84A2j
		cmp	byte_2671C, 0
		jnz	short loc_13011
		push	di
		push	si
		mov	al, byte_26718
		mov	ah, 0
		push	ax
		call	sub_2F54
		lea	ax, [di+30h]
		push	ax
		push	si
		mov	al, byte_26718
		mov	ah, 0
		inc	ax
		push	ax
		call	sub_2F54
		call	sub_11647
		jmp	short loc_13083
; ---------------------------------------------------------------------------

loc_13011:				; CODE XREF: seg001:84FCj
		inc	byte_2D058
		test	byte_2D058, 1
		jz	short loc_1303C
		push	di
		push	si
		mov	al, byte_26718
		mov	ah, 0
		push	ax
		call	sub_2F54
		lea	ax, [di+30h]
		push	ax
		push	si
		mov	al, byte_26718
		mov	ah, 0
		inc	ax
		push	ax
		call	sub_2F54
		jmp	short loc_13066
; ---------------------------------------------------------------------------

loc_1303C:				; CODE XREF: seg001:852Aj
		push	di
		push	si
		mov	al, byte_26718
		mov	ah, 0
		push	ax
		push	large 0FFC0h
		call	far ptr	loc_2838
		lea	ax, [di+30h]
		push	ax
		push	si
		mov	al, byte_26718
		mov	ah, 0
		inc	ax
		push	ax
		push	large 0FFC0h
		call	far ptr	loc_2838

loc_13066:				; CODE XREF: seg001:854Aj
		mov	byte_2671C, 0
		jmp	short loc_13083
; ---------------------------------------------------------------------------

loc_1306D:				; CODE XREF: seg001:8499j
		cmp	byte_26719, 0FEh ; 'þ'
		jnz	short loc_13083
		push	di
		push	si
		mov	al, byte_26718
		mov	ah, 0
		push	ax
		push	3
		call	far ptr	loc_31A2

loc_13083:				; CODE XREF: seg001:847Aj seg001:84F4j ...
		call	sub_D88C
		call	sub_D955
		call	sub_E2C3
		cmp	byte_26719, 5
		jnz	short loc_130E9
		cmp	byte_2671D, 1
		jnz	short loc_130E9
		cmp	word_2671A, 20h	; ' '
		jl	short loc_130E9
		cmp	word_2671A, 60h	; '`'
		jge	short loc_130E9
		call	sub_C156
		cmp	byte_266CC, 0
		jz	short loc_130B6
		mov	ah, 9
		jmp	short loc_130B8
; ---------------------------------------------------------------------------

loc_130B6:				; CODE XREF: seg001:85C0j
		mov	ah, 0Fh

loc_130B8:				; CODE XREF: seg001:85C4j
		call	sub_C162
		mov	word ptr [bp-2], 0B204h
		xor	si, si
		jmp	short loc_130E4
; ---------------------------------------------------------------------------

loc_130C4:				; CODE XREF: seg001:85F7j
		mov	bx, [bp-2]
		mov	ax, [bx+2]
		mov	bx, 10h
		cwd
		idiv	bx
		add	ax, 20h	; ' '
		mov	di, ax
		push	ax
		push	bx
		push	17Fh
		call	sub_1774
		inc	si
		add	word ptr [bp-2], 1Ah

loc_130E4:				; CODE XREF: seg001:85D2j
		cmp	si, 10h
		jl	short loc_130C4

loc_130E9:				; CODE XREF: seg001:85A1j seg001:85A8j ...
		pop	di
		pop	si
		leave
		retn
seg001		ends

; ===========================================================================

; Segment type:	Pure code
seg002		segment	byte public 'CODE' use16
		assume cs:seg002
		;org 0Dh
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing
		db    0

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_130EE	proc far		; CODE XREF: sub_13666:loc_13685p
		push	bp
		mov	bp, sp
		mov	dword_24604, 0A8000000h
		mov	dword_24608, 0B0000000h
		mov	dword_2460C, 0B8000000h
		mov	dword_24610, 0E0000000h
		pop	bp
		retf
sub_130EE	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_13117	proc far		; CODE XREF: seg001:33CDP seg001:3448P ...

arg_0		= word ptr  6
arg_2		= byte ptr  8
arg_4		= dword	ptr  0Ah
arg_8		= dword	ptr  0Eh

		push	bp
		mov	bp, sp
		push	si
		mov	dl, [bp+arg_2]
		mov	si, [bp+arg_0]
		movsx	eax, si
		mov	dh, 0
		add	dx, dx
		mov	bx, dx
		movsx	edx, word ptr [bx+566h]
		movsx	ecx, word ptr [bx+4E6h]
		imul	eax, edx
		sar	eax, 8
		les	bx, [bp+arg_8]
		mov	es:[bx], ax
		movsx	eax, si
		imul	eax, ecx
		sar	eax, 8
		les	bx, [bp+arg_4]
		mov	es:[bx], ax
		pop	si
		pop	bp
		retf	0Ch
sub_13117	endp

; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		mov	si, [bp+6]
		mov	ax, [bp+12h]
		sub	ax, [bp+16h]
		push	ax
		mov	ax, [bp+14h]
		sub	ax, [bp+18h]
		push	ax
		call	sub_1DA8
		add	al, [bp+10h]
		mov	dl, al
		movsx	eax, si
		mov	dh, 0
		add	dx, dx
		mov	bx, dx
		movsx	edx, word ptr [bx+566h]
		movsx	ecx, word ptr [bx+4E6h]
		imul	eax, edx
		sar	eax, 8
		les	bx, [bp+0Ch]
		mov	es:[bx], ax
		movsx	eax, si
		imul	eax, ecx
		sar	eax, 8
		les	bx, [bp+8]
		mov	es:[bx], ax
		pop	si
		pop	bp
		retf	14h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_131B7	proc far		; CODE XREF: sub_AB88+CP sub_D098+24P	...

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		mov	word_23DF2, 0

loc_131C0:				; CODE XREF: sub_131B7+Fj
		mov	ax, word_23DF2
		cmp	ax, [bp+arg_0]
		jb	short loc_131C0
		pop	bp
		retf	2
sub_131B7	endp

; ---------------------------------------------------------------------------
		push	di
		xor	ax, ax
		mov	di, 335Ah
		xor	dl, dl
		jmp	short loc_131E1
; ---------------------------------------------------------------------------

loc_131D6:				; CODE XREF: seg002:0106j
		xor	dl, dl
		mov	cx, 8

loc_131DB:				; CODE XREF: seg002:00FFj
		rol	al, 1
		rcr	dl, 1
		loop	loc_131DB

loc_131E1:				; CODE XREF: seg002:00F4j
		mov	[di], dl
		inc	di
		inc	al
		jnz	short loc_131D6
		pop	di
		retf

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_131EA	proc far		; CODE XREF: sub_B8FC+6AP
					; sub_1328E+58p

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		push	si
		mov	ax, [bp+arg_0]
		shl	ax, 6
		add	ax, 345Ah
		mov	si, ax
		cmp	dword ptr [si],	0
		jz	short loc_1320E
		push	word ptr [si+2]
		call	sub_267C
		mov	dword ptr [si],	0

loc_1320E:				; CODE XREF: sub_131EA+13j
		pop	si
		pop	bp
		retf	2
sub_131EA	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_13213	proc far		; CODE XREF: sub_B2CF+4CP
					; sub_D1BC+18CP ...

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	si, [bp+arg_0]
		xor	di, di

loc_1321D:				; CODE XREF: sub_13213+20j
		nop
		push	cs
		call	sub_1379C
		push	1
		nop
		push	cs
		call	near ptr sub_131B7

loc_13229:				; DATA XREF: seg001:4E82o
		nop
		push	cs
		call	near ptr sub_137A4
		cmp	word_24CB4, 0
		jnz	short loc_1321D
		or	si, si
		jnz	short loc_1325F
		mov	si, 270Fh
		jmp	short loc_1325F
; ---------------------------------------------------------------------------

loc_1323E:				; CODE XREF: sub_13213+4Ej
		nop
		push	cs
		call	sub_1379C
		push	1
		nop
		push	cs
		call	near ptr sub_131B7
		nop
		push	cs
		call	near ptr sub_137A4
		cmp	word_24CB4, 0
		jnz	short loc_13263
		inc	di
		cmp	si, 270Fh
		jnz	short loc_1325F
		xor	di, di

loc_1325F:				; CODE XREF: sub_13213+24j
					; sub_13213+29j ...
		cmp	di, si
		jl	short loc_1323E

loc_13263:				; CODE XREF: sub_13213+41j
		pop	di
		pop	si
		pop	bp
		retf	2
sub_13213	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_13269	proc far		; CODE XREF: sub_1328E+52p

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		push	30h ; '0'       ; n
		push	ds
		mov	ax, [bp+arg_0]
		shl	ax, 6
		add	ax, 3460h
		push	ax		; src
		push	ds
		push	offset byte_23DC2 ; dest
		call	_memcpy
		add	sp, 0Ah
		call	far ptr	loc_1F04
		pop	bp
		retf	2
sub_13269	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1328E	proc far		; CODE XREF: sub_B8FC+CP

var_8		= word ptr -8
var_6		= byte ptr -6
var_2		= byte ptr -2
arg_0		= dword	ptr  6
arg_4		= word ptr  0Ah

		enter	8, 0
		push	si
		push	di
		mov	di, [bp+arg_4]
		push	large [bp+arg_0]
		call	sub_F14
		mov	ax, di
		shl	ax, 6
		add	ax, 345Ah
		mov	si, ax
		push	ss
		lea	ax, [bp+var_6]
		push	ax
		push	6
		call	sub_E60
		mov	al, [bp+var_2]
		mov	ah, 0
		mov	[si+4],	ax
		mov	ax, [si+4]
		inc	ax
		shl	ax, 5
		shl	ax, 2
		mov	[bp+var_8], ax
		push	ds
		lea	ax, [si+6]
		push	ax
		push	30h ; '0'
		call	sub_E60
		cmp	byte_21AF2, 0
		jz	short loc_132E3
		push	di
		push	cs
		call	near ptr sub_13269

loc_132E3:				; CODE XREF: sub_1328E+4Ej
		push	di
		nop
		push	cs
		call	near ptr sub_131EA
		push	[bp+var_8]
		call	sub_2578
		mov	[si+2],	ax
		mov	word ptr [si], 0
		cmp	dword ptr [si],	0
		jnz	short loc_13308
		call	sub_DF4
		mov	ax, 0FFFFh
		jmp	short loc_1331A
; ---------------------------------------------------------------------------

loc_13308:				; CODE XREF: sub_1328E+6Ej
		push	large dword ptr	[si]
		push	[bp+var_8]
		call	sub_E60
		call	sub_DF4
		xor	ax, ax

loc_1331A:				; CODE XREF: sub_1328E+78j
		pop	di
		pop	si
		leave
		retf	6
sub_1328E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_13320	proc far		; CODE XREF: sub_D88C+3BP sub_D88C+59P ...

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		movsx	eax, [bp+arg_2]
		movsx	edx, [bp+arg_0]
		imul	eax, edx
		sar	eax, 8
		add	ax, [bp+arg_4]
		pop	bp
		retf	6
sub_13320	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1333C	proc far		; CODE XREF: sub_C17C+2FP seg001:55CCP ...

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch
arg_8		= word ptr  0Eh

		push	bp
		mov	bp, sp
		push	si
		mov	si, [bp+arg_8]
		mov	bx, [bp+arg_0]
		add	bx, bx
		movsx	eax, [bp+arg_2]
		movsx	edx, word ptr [bx+566h]
		imul	eax, edx
		sar	eax, 8
		add	ax, [bp+arg_6]
		mov	[si], ax
		movsx	eax, [bp+arg_2]
		movsx	edx, word ptr [bx+4E6h]
		imul	eax, edx
		sar	eax, 8
		add	ax, [bp+arg_4]
		mov	[si+2],	ax
		pop	si
		pop	bp
		retf	0Ah
sub_1333C	endp


; =============== S U B	R O U T	I N E =======================================


sub_1337E	proc far		; CODE XREF: sub_133FA+Dp
		xor	ax, ax
		mov	byte_2499A, 60h	; '`'
		mov	byte_21C36, al
		mov	byte_21C35, al
		mov	byte_21C34, al
		mov	es, ax
		assume es:seg000
		les	bx, dword ptr es:loc_17E+2
		assume es:nothing
		cmp	byte ptr es:[bx+2], 50h	; 'P'
		jnz	short locret_133AB
		cmp	byte ptr es:[bx+3], 4Dh	; 'M'
		jnz	short locret_133AB
		cmp	byte ptr es:[bx+4], 44h	; 'D'
		jnz	short locret_133AB
		inc	ax

locret_133AB:				; CODE XREF: sub_1337E+1Cj
					; sub_1337E+23j ...
		retf
sub_1337E	endp


; =============== S U B	R O U T	I N E =======================================


sub_133AC	proc far		; CODE XREF: sub_133FA+17p
		xor	ax, ax
		mov	es, ax
		assume es:seg000
		les	bx, dword ptr es:loc_182+2
		assume es:nothing
		cmp	byte ptr es:[bx+2], 4Dh	; 'M'
		jnz	short loc_133D8
		cmp	byte ptr es:[bx+3], 4Dh	; 'M'
		jnz	short loc_133D8
		cmp	byte ptr es:[bx+4], 44h	; 'D'
		jnz	short loc_133D8
		mov	byte_2499A, 61h	; 'a'
		mov	byte_21C36, 1
		mov	ax, 1
		retf
; ---------------------------------------------------------------------------

loc_133D8:				; CODE XREF: sub_133AC+Ej
					; sub_133AC+15j ...
		xor	ax, ax
		retf
sub_133AC	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_133DC	proc far		; CODE XREF: sub_AED0+2D9P
					; sub_B7B9+14P	...

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		cmp	byte_21C35, 0
		jz	short loc_133F6
		mov	ax, [bp+arg_0]
		cmp	byte_21C35, 3
		jz	short loc_133F4
		int	60h
		jmp	short loc_133F6
; ---------------------------------------------------------------------------

loc_133F4:				; CODE XREF: sub_133DC+12j
		int	61h		; reserved for user interrupt

loc_133F6:				; CODE XREF: sub_133DC+8j
					; sub_133DC+16j
		pop	bp
		retf	2
sub_133DC	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_133FA	proc far		; CODE XREF: _main+4EP

arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	si, [bp+arg_2]
		mov	di, [bp+arg_0]
		nop
		push	cs
		call	near ptr sub_1337E
		cmp	si, 3
		jnz	short loc_13414
		nop
		push	cs
		call	near ptr sub_133AC

loc_13414:				; CODE XREF: sub_133FA+13j
		mov	ah, 9
		int	60h
		cmp	al, 0FFh
		jnz	short loc_13423
		mov	byte_21C35, 0
		jmp	short loc_13433
; ---------------------------------------------------------------------------

loc_13423:				; CODE XREF: sub_133FA+20j
		or	al, al
		jnz	short loc_1342E
		mov	byte_21C35, 1
		jmp	short loc_13433
; ---------------------------------------------------------------------------

loc_1342E:				; CODE XREF: sub_133FA+2Bj
		mov	byte_21C35, 2

loc_13433:				; CODE XREF: sub_133FA+27j
					; sub_133FA+32j
		cmp	di, 1
		jnz	short loc_1344B
		cmp	byte_21C35, 0
		jz	short loc_13444
		mov	ax, 1
		jmp	short loc_13446
; ---------------------------------------------------------------------------

loc_13444:				; CODE XREF: sub_133FA+43j
		xor	ax, ax

loc_13446:				; CODE XREF: sub_133FA+48j
		mov	byte_21C34, al
		jmp	short loc_1345C
; ---------------------------------------------------------------------------

loc_1344B:				; CODE XREF: sub_133FA+3Cj
		cmp	di, 2
		jnz	short loc_13457
		mov	byte_21C34, 2
		jmp	short loc_1345C
; ---------------------------------------------------------------------------

loc_13457:				; CODE XREF: sub_133FA+54j
		mov	byte_21C34, 0

loc_1345C:				; CODE XREF: sub_133FA+4Fj
					; sub_133FA+5Bj
		or	si, si
		jnz	short loc_13467
		mov	byte_21C35, 0
		jmp	short loc_1348B
; ---------------------------------------------------------------------------

loc_13467:				; CODE XREF: sub_133FA+64j
		cmp	si, 3
		jnz	short loc_1347A
		cmp	byte_21C36, 0
		jz	short loc_1347A
		mov	byte_21C35, 3
		jmp	short loc_1348B
; ---------------------------------------------------------------------------

loc_1347A:				; CODE XREF: sub_133FA+70j
					; sub_133FA+77j
		cmp	si, 1
		jnz	short loc_1348B
		cmp	byte_21C35, 0
		jz	short loc_1348B
		mov	byte_21C35, 1

loc_1348B:				; CODE XREF: sub_133FA+6Bj
					; sub_133FA+7Ej ...
		mov	al, byte_21C35
		mov	ah, 0
		pop	di
		pop	si
		pop	bp
		retf	4
sub_133FA	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_13496	proc far		; CODE XREF: _main+5AP	sub_AED0+2D2P ...

arg_0		= word ptr  6
arg_2		= dword	ptr  8

		push	bp
		mov	bp, sp
		push	si
		xor	si, si
		jmp	short loc_134AB
; ---------------------------------------------------------------------------

loc_1349E:				; CODE XREF: sub_13496+18j
		les	bx, [bp+arg_2]
		add	bx, si
		mov	al, es:[bx]
		mov	[si+3964h], al
		inc	si

loc_134AB:				; CODE XREF: sub_13496+6j
		cmp	si, 0Dh
		jl	short loc_1349E
		xor	si, si

loc_134B2:				; CODE XREF: sub_13496+22j
		inc	si
		cmp	byte ptr [si+3964h], 0
		jnz	short loc_134B2
		mov	byte ptr [si+3968h], 0
		mov	byte ptr [si+3964h], 2Eh ; '.'
		inc	si
		cmp	[bp+arg_0], 0B00h
		jnz	short loc_134FE
		mov	byte ptr [si+3964h], 65h ; 'e'
		mov	byte ptr [si+3965h], 66h ; 'f'
		cmp	byte_21C34, 0
		jz	loc_1357B
		cmp	byte_21C34, 2
		jnz	short loc_134F7
		mov	byte ptr [si+3966h], 73h ; 's'
		push	ds
		push	offset unk_24CA4
		call	sub_3878
		jmp	loc_1357B
; ---------------------------------------------------------------------------

loc_134F7:				; CODE XREF: sub_13496+4Ej
		mov	byte ptr [si+3966h], 63h ; 'c'
		jmp	short loc_1354E
; ---------------------------------------------------------------------------

loc_134FE:				; CODE XREF: sub_13496+34j
		cmp	byte_21C35, 0
		jz	short loc_1357B
		push	100h
		nop
		push	cs
		call	near ptr sub_133DC
		mov	al, byte_21C35
		mov	ah, 0
		shl	ax, 2
		mov	bx, ax
		les	bx, [bx+8F8h]
		mov	al, es:[bx]
		mov	[si+3964h], al
		mov	al, byte_21C35
		mov	ah, 0
		shl	ax, 2
		mov	bx, ax
		les	bx, [bx+8F8h]
		mov	al, es:[bx+1]
		mov	[si+3965h], al
		mov	al, byte_21C35
		mov	ah, 0
		shl	ax, 2
		mov	bx, ax
		les	bx, [bx+8F8h]
		mov	al, es:[bx+2]
		mov	[si+3966h], al

loc_1354E:				; CODE XREF: sub_13496+66j
		push	ds
		mov	dx, 3964h
		mov	ax, 3D00h
		int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
					; DS:DX	-> ASCIZ filename
					; AL = access mode
					; 0 - read
		mov	bx, ax
		mov	ax, [bp+arg_0]
		cmp	ah, 6
		jnz	short loc_1356C
		cmp	byte_21C35, 3
		jnz	short loc_1356C
		int	61h		; reserved for user interrupt
		jmp	short loc_1356E
; ---------------------------------------------------------------------------

loc_1356C:				; CODE XREF: sub_13496+C9j
					; sub_13496+D0j
		int	60h

loc_1356E:				; CODE XREF: sub_13496+D4j
		mov	ax, 3F00h
		mov	cx, 5000h
		int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
					; BX = file handle, CX = number	of bytes to read
					; DS:DX	-> buffer
		pop	ds
		mov	ah, 3Eh
		int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
					; BX = file handle

loc_1357B:				; CODE XREF: sub_13496+45j
					; sub_13496+5Ej ...
		pop	si
		pop	bp
		retf	6
sub_13496	endp

; ---------------------------------------------------------------------------

loc_13580:				; CODE XREF: sub_D1BC+1EDP
		push	bp
		mov	bp, sp
		push	si
		push	di
		push	ds
		cli
		mov	al, 0C0h ; 'À'
		out	7Ch, al
		mov	dx, 7Eh	; '~'
		xor	al, al
		out	dx, al
		out	dx, al
		out	dx, al
		out	dx, al
		sti
		mov	si, [bp+6]
		shl	si, 4
		add	si, 3978h
		mov	ax, [si+0Eh]
		mov	cs:word_135F8, ax
		jmp	short $+2
		mov	ax, [bp+8]
		mov	bx, ax
		shl	ax, 2
		add	ax, bx
		add	ax, 0A800h
		mov	es, ax
		push	0
		add	ax, 3800h
		push	ax
		sub	ax, 2800h
		push	ax
		sub	ax, 800h
		push	ax
		mov	ax, [bp+0Ah]
		shr	ax, 3
		add	ax, [si+6]
		mov	di, ax
		mov	bx, ax
		mov	ax, [si+8]
		mov	bp, ax
		shl	ax, 2
		add	ax, 50h	; 'P'
		mov	dx, ax
		mov	ax, [si+0Ch]
		mov	ds, ax
		xor	si, si
		cld
		nop

loc_135E8:				; CODE XREF: seg002:050Fj
		mov	cx, bp
		rep movsd
		sub	di, dx
		jns	short loc_135E8
		xor	al, al
		out	7Ch, al
		xor	si, si
; ---------------------------------------------------------------------------
		db 0B8h
word_135F8	dw 1234h		; DATA XREF: seg002:04C2w
; ---------------------------------------------------------------------------
		mov	ds, ax

loc_135FC:				; CODE XREF: seg002:0534j
		mov	di, bx

loc_135FE:				; CODE XREF: seg002:052Dj
		mov	cx, bp

loc_13600:				; CODE XREF: seg002:0529j
		lodsd
		or	es:[di], eax
		add	di, 4
		loop	loc_13600
		sub	di, dx
		jns	short loc_135FE
		pop	ax
		mov	es, ax
		or	ax, ax
		jnz	short loc_135FC
		pop	ds
		pop	di
		pop	si
		pop	bp
		retf	6
; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1361E	proc far		; CODE XREF: sub_E7FD+8AP
		push	bp
		mov	bp, sp
		call	sub_3340
		mov	dx, 0A6h ; '¦'
		mov	al, 1
		out	dx, al		; Interrupt Controller #2, 8259A
		call	sub_1CD0
		mov	dx, 0A6h ; '¦'
		mov	al, 0
		out	dx, al		; Interrupt Controller #2, 8259A
		call	sub_1CD0
		mov	dx, 0A6h ; '¦'
		mov	al, 0
		out	dx, al		; Interrupt Controller #2, 8259A
		mov	dx, 0A4h ; '¤'
		out	dx, al		; Interrupt Controller #2, 8259A
		call	sub_2724
		call	sub_241A
		call	sub_2254
		call	sub_1E14
		call	sub_8F0
		call	sub_3F58
		pop	bp
		retf
sub_1361E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_13666	proc far		; CODE XREF: _main+14P

arg_0		= dword	ptr  6

		push	bp
		mov	bp, sp
		push	word_24CB2
		call	sub_2508
		or	ax, ax
		jz	short loc_1367D
		mov	ax, 1
		pop	bp
		retf	4
; ---------------------------------------------------------------------------

loc_1367D:				; CODE XREF: sub_13666+Ej
		mov	word_2171C, 1000h
		nop
		push	cs

loc_13685:				; DATA XREF: sub_C696+1Ao
		call	near ptr sub_130EE
		call	sub_236C
		call	sub_8F0
		call	sub_1C82
		call	sub_34DC
		push	large [bp+arg_0]
		call	sub_3284
		push	800h
		call	sub_3DB4
		xor	ax, ax
		pop	bp
		retf	4
sub_13666	endp

; ---------------------------------------------------------------------------
		db    0

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_136B4	proc far		; CODE XREF: sub_B616+57P seg001:557AP ...

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		push	si
		push	di
		push	ds
		mov	ax, [bp+arg_2]
		mov	bx, ax
		shl	ax, 2
		add	ax, bx
		add	ax, 0A800h
		mov	es, ax
		add	ax, 3800h
		push	ax
		sub	ax, 2800h
		push	ax
		sub	ax, 800h
		push	ax
		mov	si, [bp+arg_0]
		shl	si, 4
		add	si, 3978h
		mov	bx, [bp+arg_4]
		sar	bx, 3
		add	bx, [si+6]
		mov	ax, [si+8]
		mov	bp, ax
		shl	ax, 2
		add	ax, 50h	; 'P'
		mov	dx, ax
		mov	ax, [si+0Eh]
		mov	ds, ax
		xor	si, si
		mov	al, 4
		cld
		nop

loc_13700:				; CODE XREF: sub_136B4+5Cj
		mov	di, bx

loc_13702:				; CODE XREF: sub_136B4+55j
		mov	cx, bp
		rep movsd
		sub	di, dx
		jns	short loc_13702
		dec	al
		jz	short loc_13712
		pop	es
		jmp	short loc_13700
; ---------------------------------------------------------------------------

loc_13712:				; CODE XREF: sub_136B4+59j
		pop	ds
		pop	di
		pop	si
		pop	bp
		retf	6
sub_136B4	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		nop

loc_1371A:				; CODE XREF: sub_EBEE+5DP
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, [bp+6]
		mov	es, ax
		mov	si, [bp+0Ah]
		shl	si, 4
		add	si, 3978h
		mov	di, [bp+0Eh]
		sar	di, 3
		mov	bx, [si+4]
		mov	ax, [bp+0Ch]
		add	ax, bx
		dec	ax
		shl	ax, 6
		add	di, ax
		shr	ax, 2
		add	di, ax
		mov	ax, [si+8]
		mov	word ptr cs:loc_13778+1, ax
		jmp	short $+2
		shl	ax, 2
		add	ax, 50h	; 'P'
		mov	dx, ax
		push	ds
		mov	ax, [si+0Eh]
		mov	si, [si]
		mov	ds, ax
		mov	cx, [bp+8]
		inc	cx
		mov	ax, si
		neg	si

loc_13768:				; CODE XREF: seg002:068Aj
		add	si, ax
		loop	loc_13768
		cmp	di, 7D00h
		jb	short loc_13776
		sub	di, 7D00h

loc_13776:				; CODE XREF: seg002:0690j
		cld
		nop

loc_13778:				; CODE XREF: seg002:06B3j
					; DATA XREF: seg002:066Aw
		mov	cx, 1234h

loc_1377B:				; CODE XREF: seg002:06A8j
		mov	eax, [si]
		or	es:[di], eax
		add	si, 4
		add	di, 4
		loop	loc_1377B
		sub	di, dx
		jge	short loc_13792
		add	di, 7D00h

loc_13792:				; CODE XREF: seg002:06ACj
		dec	bx
		jnz	short loc_13778
		pop	ds
		pop	di
		pop	si
		pop	bp
		retf	0Ah

; =============== S U B	R O U T	I N E =======================================


sub_1379C	proc near		; CODE XREF: sub_AB88+11P sub_AB88+BBP ...
		xor	ax, ax
		mov	word_24CB4, ax
		mov	word_23DBE, ax
sub_1379C	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


sub_137A4	proc far		; CODE XREF: sub_AB88:loc_AB9EP
					; sub_E67A:loc_E703P ...
		xor	ax, ax
		mov	es, ax
		assume es:seg000
		mov	ah, es:byte_531
		test	ah, 4
		jz	short loc_137B7
		or	word_24CB4, 1

loc_137B7:				; CODE XREF: sub_137A4+Cj
		test	ah, 20h
		jz	short loc_137C1
		or	word_24CB4, 2

loc_137C1:				; CODE XREF: sub_137A4+16j
		test	ah, 8
		jz	short loc_137CB
		or	word_24CB4, 4

loc_137CB:				; CODE XREF: sub_137A4+20j
		test	ah, 10h
		jz	short loc_137D5
		or	word_24CB4, 8

loc_137D5:				; CODE XREF: sub_137A4+2Aj
		mov	ah, es:byte_533
		test	ah, 1
		jz	short loc_137E4
		or	word_24CB4, 8

loc_137E4:				; CODE XREF: sub_137A4+39j
		test	ah, 4
		jz	short loc_137EF
		or	word_24CB4, 400h

loc_137EF:				; CODE XREF: sub_137A4+43j
		test	ah, 8
		jz	short loc_137F9
		or	word_24CB4, 2

loc_137F9:				; CODE XREF: sub_137A4+4Ej
		test	ah, 10h
		jz	short loc_13804
		or	word_24CB4, 800h

loc_13804:				; CODE XREF: sub_137A4+58j
		mov	ah, es:byte_532
		test	ah, 40h
		jz	short loc_13813
		or	word_24CB4, 4

loc_13813:				; CODE XREF: sub_137A4+68j
		test	ah, 4
		jz	short loc_1381E
		or	word_24CB4, 100h

loc_1381E:				; CODE XREF: sub_137A4+72j
		test	ah, 8
		jz	short loc_13828
		or	word_24CB4, 1

loc_13828:				; CODE XREF: sub_137A4+7Dj
		test	ah, 10h
		jz	short loc_13833
		or	word_24CB4, 200h

loc_13833:				; CODE XREF: sub_137A4+87j
		mov	ah, es:byte_52F
		test	ah, 2
		jz	short loc_13842
		or	word_24CB4, 20h

loc_13842:				; CODE XREF: sub_137A4+97j
		test	ah, 4
		jz	short loc_1384C
		or	word_24CB4, 10h

loc_1384C:				; CODE XREF: sub_137A4+A1j
		mov	ah, es:byte_52C
		test	ah, 1
		jz	short loc_1385C
		or	word_24CB4, 4000h

loc_1385C:				; CODE XREF: sub_137A4+B0j
		mov	ah, es:byte_52A
		test	ah, 1
		jz	short loc_1386C
		or	word_24CB4, 1000h

loc_1386C:				; CODE XREF: sub_137A4+C0j
		mov	ah, es:byte_52D
		test	ah, 10h
		jz	short loc_1387C

loc_13876:				; DATA XREF: seg001:4DDAo
		or	word_24CB4, 2000h

loc_1387C:				; CODE XREF: sub_137A4+D0j
		mov	ah, es:byte_530
		test	ah, 10h
		jz	short loc_1388B
		or	word_24CB4, 20h

loc_1388B:				; CODE XREF: sub_137A4+E0j
		mov	ah, 2
		int	18h		; TRANSFER TO ROM BASIC
					; causes transfer to ROM-based BASIC (IBM-PC)
					; often	reboots	a compatible; often has	no effect at all
		and	al, 1
		mov	byte_24CB6, al
		cmp	word_216DA, 0
		jz	short locret_138A4
		call	sub_366A
		or	word_24CB4, ax

locret_138A4:				; CODE XREF: sub_137A4+F5j
		retf
sub_137A4	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_138A6	proc far		; CODE XREF: sub_D1BC+2C7P
		mov	byte_21C55, 0
		mov	byte_21C54, 0FFh
		retf
sub_138A6	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_138B2	proc far		; CODE XREF: sub_D1BC+2CFP
					; sub_EE06+98P	...
		mov	bx, sp
		mov	dx, ss:[bx+4]
		cmp	byte_21C34, 0
		jz	short locret_138E8
		cmp	byte_21C54, 0FFh
		jnz	short loc_138CD
		mov	byte_21C54, dl
		retf	2
; ---------------------------------------------------------------------------

loc_138CD:				; CODE XREF: sub_138B2+12j
		mov	bl, byte_21C54
		xor	bh, bh
		mov	al, [bx+8D2h]
		mov	bx, dx
		cmp	al, [bx+8D2h]
		ja	short locret_138E8
		mov	byte_21C54, dl
		mov	byte_21C55, 0

locret_138E8:				; CODE XREF: sub_138B2+Bj
					; sub_138B2+2Bj
		retf	2
sub_138B2	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_138EC	proc far		; CODE XREF: sub_AB88+10BP
					; sub_D1BC+2D4P
		cmp	byte_21C34, 0
		jz	short locret_13937
		cmp	byte_21C54, 0FFh
		jz	short locret_13937
		cmp	byte_21C55, 0
		jnz	short loc_13919
		mov	al, byte_21C54
		cmp	byte_21C34, 2
		jz	short loc_13911
		mov	ah, 0Ch
		int	60h		; - Banyan VINES, 3com - GET STATION ADDRESS
					; Return: AL = status, 00h successful, ES:SI ->	6-byte station address
					; 02h semaphore	service	is unavailable
		jmp	short loc_13919
; ---------------------------------------------------------------------------

loc_13911:				; CODE XREF: sub_138EC+1Dj
		xor	ah, ah
		push	ax
		call	sub_3CAA

loc_13919:				; CODE XREF: sub_138EC+13j
					; sub_138EC+23j
		inc	byte_21C55
		mov	bl, byte_21C54
		xor	bh, bh
		mov	al, [bx+8E3h]
		cmp	al, byte_21C55
		jnb	short locret_13937
		mov	byte_21C55, 0
		mov	byte_21C54, 0FFh

locret_13937:				; CODE XREF: sub_138EC+5j sub_138EC+Cj ...
		retf
sub_138EC	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_13938	proc far		; CODE XREF: sub_B488+7CP sub_B530+1FP ...

arg_0		= word ptr  6
arg_2		= dword	ptr  8
arg_6		= word ptr  0Ch

		mov	byte_21C56, 1
		nop
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	di, [bp+arg_6]
		push	di
		nop
		push	cs
		call	near ptr sub_13A58
		shl	di, 4
		add	di, 3978h
		push	large [bp+arg_2]
		call	sub_F14
		push	ds
		push	di
		push	10h
		call	sub_E60
		mov	ax, [di]
		mov	dx, ax
		cmp	byte ptr [di+0Bh], 0
		jz	short loc_1397A
		shl	ax, 2
		cmp	byte ptr [di+0Bh], 2
		jz	short loc_1397A
		add	ax, dx

loc_1397A:				; CODE XREF: sub_13938+35j
					; sub_13938+3Ej
		mul	[bp+arg_0]
		movzx	eax, ax
		push	eax
		push	1
		call	sub_F50
		call	sub_1399E
		call	sub_DF4
		mov	byte_21C56, 0
		pop	di
		pop	si
		pop	bp
		retf	8
sub_13938	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_1399E	proc near		; CODE XREF: sub_13938+52p
					; sub_139FC+3Fp
		mov	al, [di+0Bh]
		or	al, al
		jz	short loc_139D3
		cmp	al, 2
		jz	short loc_139B0
		cmp	byte_21C56, 0
		jnz	short loc_139C6

loc_139B0:				; CODE XREF: sub_1399E+9j
		push	word ptr [di]
		call	sub_2578
		mov	[di+0Ch], ax
		push	ax
		push	0
		push	word ptr [di]
		call	sub_E60
		jmp	short loc_139D3
; ---------------------------------------------------------------------------

loc_139C6:				; CODE XREF: sub_1399E+10j
		movzx	eax, word ptr [di]
		push	eax
		push	1
		call	sub_F50

loc_139D3:				; CODE XREF: sub_1399E+5j
					; sub_1399E+26j
		cmp	byte ptr [di+0Bh], 2
		jz	short locret_139F5
		mov	ax, [di]
		shl	ax, 2
		push	ax
		call	sub_2578
		mov	[di+0Eh], ax
		push	ax
		push	0
		mov	ax, [di]
		shl	ax, 2
		push	ax
		call	sub_E60

locret_139F5:				; CODE XREF: sub_1399E+39j
		retn
sub_1399E	endp

; ---------------------------------------------------------------------------
		mov	byte_21C56, 1
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_139FC	proc far		; CODE XREF: sub_AED0+13FP
					; sub_AED0+187P ...

arg_0		= dword	ptr  6
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		push	si
		push	di
		push	large [bp+arg_0]
		call	sub_F14
		mov	di, [bp+arg_4]
		shl	di, 4
		add	di, 3978h
		push	ds
		push	di
		push	10h
		call	sub_E60
		mov	si, di
		mov	bp, [bp+arg_4]
		mov	al, [si+0Ah]
		mov	byte_250B8, al
		push	ds
		pop	es
		assume es:dseg

loc_13A2A:				; CODE XREF: sub_139FC+4Aj
		push	bp
		push	cs
		call	near ptr sub_13A58
		mov	cx, 3
		rep movsd
		sub	si, 0Ch
		sub	di, 0Ch
		call	sub_1399E
		inc	bp
		add	di, 10h
		dec	byte_250B8
		jnz	short loc_13A2A
		call	sub_DF4
		mov	byte_21C56, 0
		pop	di
		pop	si
		pop	bp
		retf	6
sub_139FC	endp


; =============== S U B	R O U T	I N E =======================================


sub_13A58	proc far		; CODE XREF: sub_B29E+23P sub_B488+A1P ...
		mov	bx, sp
		push	di
		mov	di, ss:[bx+4]
		shl	di, 4
		add	di, 3984h
		cmp	word ptr [di], 0
		jz	short loc_13A76
		push	word ptr [di]
		call	sub_267C
		mov	word ptr [di], 0

loc_13A76:				; CODE XREF: sub_13A58+11j
		add	di, 2
		cmp	word ptr [di], 0
		jz	short loc_13A89
		push	word ptr [di]
		call	sub_267C
		mov	word ptr [di], 0

loc_13A89:				; CODE XREF: sub_13A58+24j
		pop	di
		retf	2
sub_13A58	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_13A8E	proc far		; CODE XREF: sub_E7FD+60P
		push	si

loc_13A8F:				; DATA XREF: sub_C696+1Eo sub_C696+2Ao ...
		mov	si, 3Fh	; '?'

loc_13A92:				; CODE XREF: sub_13A8E+Aj
		push	si

loc_13A93:				; DATA XREF: seg001:4E82o
		push	cs		; jumptable 0001F922 case 67
		call	near ptr sub_13A58
		dec	si
		jge	short loc_13A92
		pop	si
		retf
sub_13A8E	endp

seg002		ends

include th04_main_seg3+4.inc

; ===========================================================================

; Segment type:	Pure data
dseg		segment	para public 'DATA' use16
		assume cs:dseg
word_21340	dw 0			; DATA XREF: sub_576+7r sub_4FC2+20r ...
word_21342	dw 0			; DATA XREF: sub_576+1Dw sub_576+32w ...
off_21344	dw offset sub_554E	; DATA XREF: sub_576+20w sub_5033+Cr ...
off_21346	dw offset sub_4C4C	; DATA XREF: sub_576+Br sub_5033+2r ...
off_21348	dw offset sub_4320	; DATA XREF: sub_576+26r sub_4F5F+24r	...
		dw offset sub_4548
off_2134C	dw offset sub_4B43	; DATA XREF: sub_727A+77r sub_727A+A1r ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
aBorlandCCopyri	db 'Borland C++ - Copyright 1993 Borland Intl.',0
aDivideError	db 'Divide error',0Dh,0Ah,0
dword_2139A	dd 0			; DATA XREF: sub_178:loc_17Ew
					; __restorezero+4r ...
dword_2139E	dd 0			; DATA XREF: sub_178+13w
					; __restorezero+Fr ...
dword_213A2	dd 0			; DATA XREF: sub_178+20w
					; __restorezero+1Ar ...
dword_213A6	dd 0			; DATA XREF: sub_178+2Dw
					; __restorezero+25r ...
; int argc
argc		dw 0			; DATA XREF: start+137r
; char **argv
argv		dw 0			; DATA XREF: start+133r
word_213AE	dw 0			; DATA XREF: start+12Fr
; char **envp
envp		dw 0			; DATA XREF: start+12Br seg000:A40Cw
word_213B2	dw 0			; DATA XREF: start+127r seg000:A406w
word_213B4	dw 0			; DATA XREF: start+46w
word_213B6	dw 0			; DATA XREF: start+1Dw	start+28r ...
word_213B8	dw 0			; DATA XREF: start+55w	seg000:A3C1r
; unsigned int segx
segx		dw 0			; DATA XREF: start+19w	start+8Fr ...
word_213BC	dw 0			; DATA XREF: start+16w	start+C7r ...
word_213BE	dw 0			; DATA XREF: __IOERROR:loc_474Ew
					; seg000:56C6w	...
		db 0FFh
		db 0FFh
		db 0B2h	; ²
		db 0BDh	; ½
word_213C4	dw 0			; DATA XREF: __brk+9r __sbrk+45r
word_213C6	dw 0			; DATA XREF: start+87w	__brk+5r ...
word_213C8	dw 0			; DATA XREF: sub_53AE+6Ew __sbrk+12r ...
word_213CA	dw 0			; DATA XREF: start+8Bw	sub_53AE+6Aw ...
word_213CC	dw 0			; DATA XREF: sub_53AE+7Ew __brk+1Cr ...
word_213CE	dw 0			; DATA XREF: start+21w	start+F5w ...
unk_213D0	db 0F0h	; ð		; DATA XREF: sub_B2CF+1Bo
		db 0F1h	; ñ
		db    0
unk_213D3	db 0F2h	; ò		; DATA XREF: sub_B2CF+2Do sub_B2CF+71o ...
		db 0F3h	; ó
		db    0
unk_213D6	db 0F4h	; ô		; DATA XREF: sub_B2CF+3Fo sub_B2CF+83o ...
		db 0F5h	; õ
		db    0
		db    0
off_213DA	dd aEye0_cdg		; DATA XREF: sub_B488:loc_B4AFr
					; sub_B488+75r	...
					; "eye0.cdg"
word_213DE	dw 0			; DATA XREF: sub_AED0+4w
					; sub_AED0:loc_AEF9w ...
off_213E0	dd aSt00		; DATA XREF: sub_AED0:loc_AFD5r
					; sub_AED0+116r ...
					; "ST00"
off_213E4	dd aBb0_cdg_0		; DATA XREF: sub_B530+Er sub_B530+18r
					; "BB0.CDG"
aEye0_cdg	db 'eye0.cdg',0         ; DATA XREF: dseg:off_213DAo
aUmx		db 'û¶z.½',0      ; DATA XREF: _main+11o
aGameft_bft	db 'GAMEFT.bft',0       ; DATA XREF: _main+34o
aMiko		db 'miko',0             ; DATA XREF: _main+54o
; char arg0[]
arg0		db 'op',0               ; DATA XREF: _main+72o
aSt00		db 'ST00',0             ; DATA XREF: dseg:off_213E0o
aEye_rgb	db 'eye.rgb',0          ; DATA XREF: sub_AED0+88o
aMiko_bft	db 'miko.bft',0         ; DATA XREF: sub_AED0+CBo
aMari_bft	db 'mari.bft',0         ; DATA XREF: sub_AED0+D1o
aMikod_bft	db 'mikod.bft',0        ; DATA XREF: sub_AED0+DAo
aMiko32_bft	db 'miko32.bft',0       ; DATA XREF: sub_AED0+E3o
aMiko16_bft	db 'miko16.bft',0       ; DATA XREF: sub_AED0+ECo
aBss0_cd2	db 'BSS0.CD2',0         ; DATA XREF: sub_AED0+13Co
aSt00_bft	db 'st00.bft',0         ; DATA XREF: sub_AED0+155o
aSt00_mpn	db 'st00.mpn',0         ; DATA XREF: sub_AED0+16Eo
aSt10_mpn	db 'st10.mpn',0         ; DATA XREF: sub_AED0+175o
aBss1_cd2	db 'BSS1.CD2',0         ; DATA XREF: sub_AED0+184o
aSt01_bft	db 'st01.bft',0         ; DATA XREF: sub_AED0+18Do
aSt01_mpn	db 'st01.mpn',0         ; DATA XREF: sub_AED0+19Bo
aBss2_cd2	db 'BSS2.CD2',0         ; DATA XREF: sub_AED0+1AAo
aSt02_bft	db 'st02.bft',0         ; DATA XREF: sub_AED0+1B3o
aSt02_mpn	db 'st02.mpn',0         ; DATA XREF: sub_AED0+1C1o
aKao3_cd2	db 'KAO3.CD2',0         ; DATA XREF: sub_AED0+1D7o
aKao2_cd2	db 'KAO2.CD2',0         ; DATA XREF: sub_AED0+1DFo
aSt03_bft	db 'st03.bft',0         ; DATA XREF: sub_AED0+1E8o
aSt03_mpn	db 'st03.mpn',0         ; DATA XREF: sub_AED0+1F6o
aBss4_cd2	db 'BSS4.CD2',0         ; DATA XREF: sub_AED0+20Do
aSt04_bft	db 'st04.bft',0         ; DATA XREF: sub_AED0+216o
aSt04_mpn	db 'st04.mpn',0         ; DATA XREF: sub_AED0+224o
aSt05_bft	db 'st05.bft',0         ; DATA XREF: sub_AED0+230o
aBss5_cd2	db 'BSS5.CD2',0         ; DATA XREF: sub_AED0+23Bo
aSt05_mpn	db 'st05.mpn',0         ; DATA XREF: sub_AED0+249o
aSt06_bft	db 'st06.bft',0         ; DATA XREF: sub_AED0+255o
aBss6_cd2	db 'BSS6.CD2',0         ; DATA XREF: sub_AED0+260o
aSt06_mpn	db 'st06.mpn',0         ; DATA XREF: sub_AED0+26Eo
asc_2151E	db '    ',0             ; DATA XREF: sub_B2CF+EBo
asc_21523	db '    ',0             ; DATA XREF: sub_B2CF+FDo
asc_21528	db '    ',0             ; DATA XREF: sub_B2CF+10Fo
aDemo0_rec	db 'DEMO0.REC',0
aOp_0		db 'op',0               ; DATA XREF: seg001:098Eo
aGensoems	db 'GENSOEMS',0         ; DATA XREF: sub_B488+6Bo
aBb0_cdg_0	db 'BB0.CDG',0          ; DATA XREF: dseg:off_213E4o
aKao0_cd2	db 'KAO0.cd2',0         ; DATA XREF: sub_B530+58o
aKao1_cd2	db 'KAO1.cd2',0         ; DATA XREF: sub_B530+60o
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db    1
		db    1
		db    1
		db    1
		db    1
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    3
		db    3
		db    3
		db    3
		db    3
		db    3
		db    3
		db    4
		db    4
		db    4
		db    4
		db    4
		db    4
		db    5
		db    5
		db    5
		db    5
		db    5
		db    5
		db    6
		db    6
		db    6
		db    6
		db    6
		db    6
		db    6
		db    7
		db    7
		db    7
		db    7
		db    7
		db    7
		db    8
		db    8
		db    8
		db    8
		db    8
		db    8
		db    8
		db    9
		db    9
		db    9
		db    9
		db    9
		db    9
		db  0Ah
		db  0Ah
		db  0Ah
		db  0Ah
		db  0Ah
		db  0Ah
		db  0Ah
		db  0Bh
		db  0Bh
		db  0Bh
		db  0Bh
		db  0Bh
		db  0Bh
		db  0Bh
		db  0Ch
		db  0Ch
		db  0Ch
		db  0Ch
		db  0Ch
		db  0Ch
		db  0Ch
		db  0Dh
		db  0Dh
		db  0Dh
		db  0Dh
		db  0Dh
		db  0Dh
		db  0Dh
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Fh
		db  0Fh
		db  0Fh
		db  0Fh
		db  0Fh
		db  0Fh
		db  0Fh
		db  10h
		db  10h
		db  10h
		db  10h
		db  10h
		db  10h
		db  10h
		db  11h
		db  11h
		db  11h
		db  11h
		db  11h
		db  11h
		db  11h
		db  11h
		db  12h
		db  12h
		db  12h
		db  12h
		db  12h
		db  12h
		db  12h
		db  13h
		db  13h
		db  13h
		db  13h
		db  13h
		db  13h
		db  13h
		db  13h
		db  14h
		db  14h
		db  14h
		db  14h
		db  14h
		db  14h
		db  14h
		db  14h
		db  15h
		db  15h
		db  15h
		db  15h
		db  15h
		db  15h
		db  15h
		db  15h
		db  15h
		db  16h
		db  16h
		db  16h
		db  16h
		db  16h
		db  16h
		db  16h
		db  16h
		db  17h
		db  17h
		db  17h
		db  17h
		db  17h
		db  17h
		db  17h
		db  17h
		db  17h
		db  18h
		db  18h
		db  18h
		db  18h
		db  18h
		db  18h
		db  18h
		db  18h
		db  18h
		db  19h
		db  19h
		db  19h
		db  19h
		db  19h
		db  19h
		db  19h
		db  19h
		db  19h
		db  19h
		db  1Ah
		db  1Ah
		db  1Ah
		db  1Ah
		db  1Ah
		db  1Ah
		db  1Ah
		db  1Ah
		db  1Ah
		db  1Bh
		db  1Bh
		db  1Bh
		db  1Bh
		db  1Bh
		db  1Bh
		db  1Bh
		db  1Bh
		db  1Bh
		db  1Bh
		db  1Ch
		db  1Ch
		db  1Ch
		db  1Ch
		db  1Ch
		db  1Ch
		db  1Ch
		db  1Ch
		db  1Ch
		db  1Ch
		db  1Ch
		db  1Dh
		db  1Dh
		db  1Dh
		db  1Dh
		db  1Dh
		db  1Dh
		db  1Dh
		db  1Dh
		db  1Dh
		db  1Dh
		db  1Dh
		db  1Eh
		db  1Eh
		db  1Eh
		db  1Eh
		db  1Eh
		db  1Eh
		db  1Eh
		db  1Eh
		db  1Eh
		db  1Eh
		db  1Eh
		db  1Fh
		db  1Fh
		db  1Fh
		db  1Fh
		db  1Fh
		db  1Fh
		db  1Fh
		db  1Fh
		db  1Fh
		db  1Fh
		db  1Fh
		db  1Fh
		db  20h
		db  20h
		db  20h
		db  20h
		db  20h
		db  20h
word_2165E	dw 0			; DATA XREF: seg000:048Dr seg000:0493w
word_21660	dw 0			; DATA XREF: seg000:0481r
word_21662	dw 0			; DATA XREF: seg000:0484r
byte_21664	db 0			; DATA XREF: seg000:04B5r
byte_21665	db 0			; DATA XREF: seg000:049Dr
aBfnt		db 'BFNT'
		db  1Ah
		db    0
word_2166C	dw 0			; DATA XREF: sub_79A+Er sub_79A+60r ...
word_2166E	dw 27Fh			; DATA XREF: sub_107C+19r sub_144A+30w ...
word_21670	dw 27Fh			; DATA XREF: sub_79A:loc_7AEr
					; sub_79A:loc_804r ...
word_21672	dw 0			; DATA XREF: sub_107C:loc_10BAr
					; sub_11EC+Cr ...
word_21674	dw 18Fh			; DATA XREF: sub_79A+33r sub_79A+47r ...
word_21676	dw 18Fh			; DATA XREF: sub_144A+6Bw sub_1C82+40w
word_21678	dw 0A800h		; DATA XREF: sub_107C+66r sub_11EC+61r ...
word_2167A	dw 7CB0h		; DATA XREF: sub_144A+74w sub_1C82+46w
		db    0
		db    0
		db  80h	; 
		db    0
		db 0C0h	; À
		db    0
		db 0E0h	; à
		db    0
		db 0F0h	; ð
		db    0
		db 0F8h	; ø
		db    0
		db 0FCh	; ü
		db    0
		db 0FEh	; þ
		db    0
		db 0FFh
		db    0
		db 0FFh
		db  80h	; 
		db 0FFh
		db 0C0h	; À
		db 0FFh
		db 0E0h	; à
		db 0FFh
		db 0F0h	; ð
		db 0FFh
		db 0F8h	; ø
		db 0FFh
		db 0FCh	; ü
		db 0FFh
		db 0FEh	; þ
		db 0FFh
		db 0FFh
word_2169E	dw 0			; DATA XREF: sub_E60+5r sub_E60+26r ...
word_216A0	dw 0FFFFh		; DATA XREF: sub_D88+5Dr sub_DF4+8w ...
byte_216A2	db 0			; DATA XREF: sub_105C+4r
		db 0
		db  0Dh
		db  16h
		db  20h
		db  22h	; "
		db  27h	; '
		db  2Ah	; *
		db  2Eh	; .
		db  36h	; 6
		db  3Fh	; ?
		db    0
aIbmadsp	db '$IBMADSP',0
aIbmafnt	db '$IBMAFNT',0
dword_216C0	dd 0			; DATA XREF: sub_1A1A-8Cr
word_216C4	dw 0			; DATA XREF: sub_1A36+2r sub_1A36+15w	...
		db  10h
		db    0
		db  10h
		db    0
		db    0
		db    0
		db 0FFh
		db    0
word_216CE	dw 0A800h		; DATA XREF: sub_144A+7Er sub_1C82+9w	...
word_216D0	dw 3E80h		; DATA XREF: sub_1C82+Fw sub_1CD0+14r
word_216D2	dw 190h			; DATA XREF: sub_144A+4Fr sub_1C82+3Cw ...
word_216D4	dw 50h			; DATA XREF: sub_144A+19r sub_144A+6Er
word_216D6	dw 0			; DATA XREF: sub_11EC+56r seg000:1367r ...
		db  55h	; U
		db    0
word_216DA	dw 0			; DATA XREF: sub_34DC:loc_3501w
					; sub_137A4+F0r
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_216E2	dw 0			; DATA XREF: sub_1A1A:loc_187Dw
					; sub_1A1A:loc_19D0w ...
word_216E4	dw 64h			; DATA XREF: sub_622+8w
					; sub_622:loc_649w ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db 0FFh
		db 0FFh
		db    0
		db    0
		db 0FFh
		db    0
		db 0FFh
		db    0
		db 0FFh
		db    0
		db    0
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db    0
		db 0FFh
		db 0FFh
		db 0FFh
		db  77h	; w
		db  77h	; w
		db  77h	; w
		db    0
		db    0
		db 0AAh	; ª
		db 0AAh	; ª
		db    0
		db    0
		db 0AAh	; ª
		db    0
		db 0AAh	; ª
		db    0
		db 0AAh	; ª
		db    0
		db    0
		db 0AAh	; ª
		db 0AAh	; ª
		db 0AAh	; ª
		db 0AAh	; ª
		db    0
		db 0AAh	; ª
		db 0AAh	; ª
		db 0AAh	; ª
word_21716	dw 0			; DATA XREF: seg000:1F2Fr
		db    0
		db    0
		db    0
		db    0
word_2171C	dw 200h			; DATA XREF: sub_6A4+9r sub_6A4+2Fr ...
word_2171E	dw 0			; DATA XREF: sub_6A4:loc_6E0w
					; sub_6A4+48w ...
		db    0
		db    0
dword_21722	dd 1			; DATA XREF: sub_2172+Cr sub_2172+15r	...
		db    0
		db    3
		db    6
		db    9
		db  0Ch
		db  0Fh
		db  12h
		db  15h
		db  18h
		db  1Ch
		db  1Fh
		db  22h	; "
		db  25h	; %
		db  28h	; (
		db  2Bh	; +
		db  2Eh	; .
		db  30h	; 0
		db  33h	; 3
		db  36h	; 6
		db  39h	; 9
		db  3Ch	; <
		db  3Fh	; ?
		db  41h	; A
		db  44h	; D
		db  47h	; G
		db  49h	; I
		db  4Ch	; L
		db  4Eh	; N
		db  51h	; Q
		db  53h	; S
		db  55h	; U
		db  58h	; X
		db  5Ah	; Z
		db  5Ch	; \
		db  5Eh	; ^
		db  60h	; `
		db  62h	; b
		db  64h	; d
		db  66h	; f
		db  68h	; h
		db  6Ah	; j
		db  6Ch	; l
		db  6Dh	; m
		db  6Fh	; o
		db  70h	; p
		db  72h	; r
		db  73h	; s
		db  75h	; u
		db  76h	; v
		db  77h	; w
		db  78h	; x
		db  79h	; y
		db  7Ah	; z
		db  7Bh	; {
		db  7Ch	; |
		db  7Ch	; |
		db  7Dh	; }
		db  7Eh	; ~
		db  7Eh	; ~
		db  7Fh	; 
		db  7Fh	; 
		db  7Fh	; 
		db  7Fh	; 
		db  7Fh	; 
		db  7Fh	; 
		db  7Fh	; 
		db  7Fh	; 
		db  7Fh	; 
		db  7Fh	; 
		db  7Fh	; 
		db  7Eh	; ~
		db  7Eh	; ~
		db  7Dh	; }
		db  7Ch	; |
		db  7Ch	; |
		db  7Bh	; {
		db  7Ah	; z
		db  79h	; y
		db  78h	; x
		db  77h	; w
		db  76h	; v
		db  75h	; u
		db  73h	; s
		db  72h	; r
		db  70h	; p
		db  6Fh	; o
		db  6Dh	; m
		db  6Ch	; l
		db  6Ah	; j
		db  68h	; h
		db  66h	; f
		db  64h	; d
		db  62h	; b
		db  60h	; `
		db  5Eh	; ^
		db  5Ch	; \
		db  5Ah	; Z
		db  58h	; X
		db  55h	; U
		db  53h	; S
		db  51h	; Q
		db  4Eh	; N
		db  4Ch	; L
		db  49h	; I
		db  47h	; G
		db  44h	; D
		db  41h	; A
		db  3Fh	; ?
		db  3Ch	; <
		db  39h	; 9
		db  36h	; 6
		db  33h	; 3
		db  30h	; 0
		db  2Eh	; .
		db  2Bh	; +
		db  28h	; (
		db  25h	; %
		db  22h	; "
		db  1Fh
		db  1Ch
		db  18h
		db  15h
		db  12h
		db  0Fh
		db  0Ch
		db    9
		db    6
		db    3
		db    0
		db 0FDh	; ý
		db 0FAh	; ú
		db 0F7h	; ÷
		db 0F4h	; ô
		db 0F1h	; ñ
		db 0EEh	; î
		db 0EBh	; ë
		db 0E8h	; è
		db 0E4h	; ä
		db 0E1h	; á
		db 0DEh	; Þ
		db 0DBh	; Û
		db 0D8h	; Ø
		db 0D5h	; Õ
		db 0D2h	; Ò
		db 0D0h	; Ð
		db 0CDh	; Í
		db 0CAh	; Ê
		db 0C7h	; Ç
		db 0C4h	; Ä
		db 0C1h	; Á
		db 0BFh	; ¿
		db 0BCh	; ¼
		db 0B9h	; ¹
		db 0B7h	; ·
		db 0B4h	; ´
		db 0B2h	; ²
		db 0AFh	; ¯
		db 0ADh	; ­
		db 0ABh	; «
		db 0A8h	; ¨
		db 0A6h	; ¦
		db 0A4h	; ¤
		db 0A2h	; ¢
		db 0A0h	;  
		db  9Eh	; 
		db  9Ch	; 
		db  9Ah	; 
		db  98h	; 
		db  96h	; 
		db  94h	; 
		db  93h	; 
		db  91h	; 
		db  90h	; 
		db  8Eh	; 
		db  8Dh	; 
		db  8Bh	; 
		db  8Ah	; 
		db  89h	; 
		db  88h	; 
		db  87h	; 
		db  86h	; 
		db  85h	; 
		db  84h	; 
		db  84h	; 
		db  83h	; 
		db  82h	; 
		db  82h	; 
		db  81h	; 
		db  81h	; 
		db  81h	; 
		db  81h	; 
		db  81h	; 
		db  81h	; 
		db  81h	; 
		db  81h	; 
		db  81h	; 
		db  81h	; 
		db  81h	; 
		db  82h	; 
		db  82h	; 
		db  83h	; 
		db  84h	; 
		db  84h	; 
		db  85h	; 
		db  86h	; 
		db  87h	; 
		db  88h	; 
		db  89h	; 
		db  8Ah	; 
		db  8Bh	; 
		db  8Dh	; 
		db  8Eh	; 
		db  90h	; 
		db  91h	; 
		db  93h	; 
		db  94h	; 
		db  96h	; 
		db  98h	; 
		db  9Ah	; 
		db  9Ch	; 
		db  9Eh	; 
		db 0A0h	;  
		db 0A2h	; ¢
		db 0A4h	; ¤
		db 0A6h	; ¦
		db 0A8h	; ¨
		db 0ABh	; «
		db 0ADh	; ­
		db 0AFh	; ¯
		db 0B2h	; ²
		db 0B4h	; ´
		db 0B7h	; ·
		db 0B9h	; ¹
		db 0BCh	; ¼
		db 0BFh	; ¿
		db 0C1h	; Á
		db 0C4h	; Ä
		db 0C7h	; Ç
		db 0CAh	; Ê
		db 0CDh	; Í
		db 0D0h	; Ð
		db 0D2h	; Ò
		db 0D5h	; Õ
		db 0D8h	; Ø
		db 0DBh	; Û
		db 0DEh	; Þ
		db 0E1h	; á
		db 0E4h	; ä
		db 0E8h	; è
		db 0EBh	; ë
		db 0EEh	; î
		db 0F1h	; ñ
		db 0F4h	; ô
		db 0F7h	; ÷
		db 0FAh	; ú
		db 0FDh	; ý
		db    0
		db    0
		db    6
		db    0
		db  0Dh
		db    0
		db  13h
		db    0
		db  19h
		db    0
		db  1Fh
		db    0
		db  26h	; &
		db    0
		db  2Ch	; ,
		db    0
		db  32h	; 2
		db    0
		db  38h	; 8
		db    0
		db  3Eh	; >
		db    0
		db  44h	; D
		db    0
		db  4Ah	; J
		db    0
		db  50h	; P
		db    0
		db  56h	; V
		db    0
		db  5Ch	; \
		db    0
		db  62h	; b
		db    0
		db  68h	; h
		db    0
		db  6Dh	; m
		db    0
		db  73h	; s
		db    0
		db  79h	; y
		db    0
		db  7Eh	; ~
		db    0
		db  84h	; 
		db    0
		db  89h	; 
		db    0
		db  8Eh	; 
		db    0
		db  93h	; 
		db    0
		db  98h	; 
		db    0
		db  9Dh	; 
		db    0
		db 0A2h	; ¢
		db    0
		db 0A7h	; §
		db    0
		db 0ACh	; ¬
		db    0
		db 0B1h	; ±
		db    0
		db 0B5h	; µ
		db    0
		db 0B9h	; ¹
		db    0
		db 0BEh	; ¾
		db    0
		db 0C2h	; Â
		db    0
		db 0C6h	; Æ
		db    0
		db 0CAh	; Ê
		db    0
		db 0CEh	; Î
		db    0
		db 0D1h	; Ñ
		db    0
		db 0D5h	; Õ
		db    0
		db 0D8h	; Ø
		db    0
		db 0DCh	; Ü
		db    0
		db 0DFh	; ß
		db    0
		db 0E2h	; â
		db    0
		db 0E5h	; å
		db    0
		db 0E7h	; ç
		db    0
		db 0EAh	; ê
		db    0
		db 0EDh	; í
		db    0
		db 0EFh	; ï
		db    0
		db 0F1h	; ñ
		db    0
		db 0F3h	; ó
		db    0
		db 0F5h	; õ
		db    0
		db 0F7h	; ÷
		db    0
		db 0F8h	; ø
		db    0
		db 0FAh	; ú
		db    0
		db 0FBh	; û
		db    0
		db 0FCh	; ü
		db    0
		db 0FDh	; ý
		db    0
		db 0FEh	; þ
		db    0
		db 0FFh
		db    0
		db 0FFh
		db    0
		db    0
		db    1
		db    0
		db    1
		db    0
		db    1
		db    0
		db    1
		db    0
		db    1
		db 0FFh
		db    0
		db 0FFh
		db    0
		db 0FEh	; þ
		db    0
		db 0FDh	; ý
		db    0
		db 0FCh	; ü
		db    0
		db 0FBh	; û
		db    0
		db 0FAh	; ú
		db    0
		db 0F8h	; ø
		db    0
		db 0F7h	; ÷
		db    0
		db 0F5h	; õ
		db    0
		db 0F3h	; ó
		db    0
		db 0F1h	; ñ
		db    0
		db 0EFh	; ï
		db    0
		db 0EDh	; í
		db    0
		db 0EAh	; ê
		db    0
		db 0E7h	; ç
		db    0
		db 0E5h	; å
		db    0
		db 0E2h	; â
		db    0
		db 0DFh	; ß
		db    0
		db 0DCh	; Ü
		db    0
		db 0D8h	; Ø
		db    0
		db 0D5h	; Õ
		db    0
		db 0D1h	; Ñ
		db    0
		db 0CEh	; Î
		db    0
		db 0CAh	; Ê
		db    0
		db 0C6h	; Æ
		db    0
		db 0C2h	; Â
		db    0
		db 0BEh	; ¾
		db    0
		db 0B9h	; ¹
		db    0
		db 0B5h	; µ
		db    0
		db 0B1h	; ±
		db    0
		db 0ACh	; ¬
		db    0
		db 0A7h	; §
		db    0
		db 0A2h	; ¢
		db    0
		db  9Dh	; 
		db    0
		db  98h	; 
		db    0
		db  93h	; 
		db    0
		db  8Eh	; 
		db    0
		db  89h	; 
		db    0
		db  84h	; 
		db    0
		db  7Eh	; ~
		db    0
		db  79h	; y
		db    0
		db  73h	; s
		db    0
		db  6Dh	; m
		db    0
		db  68h	; h
		db    0
		db  62h	; b
		db    0
		db  5Ch	; \
		db    0
		db  56h	; V
		db    0
		db  50h	; P
		db    0
		db  4Ah	; J
		db    0
		db  44h	; D
		db    0
		db  3Eh	; >
		db    0
		db  38h	; 8
		db    0
		db  32h	; 2
		db    0
		db  2Ch	; ,
		db    0
		db  26h	; &
		db    0
		db  1Fh
		db    0
		db  19h
		db    0
		db  13h
		db    0
		db  0Dh
		db    0
		db    6
		db    0
		db    0
		db    0
		db 0FAh	; ú
		db 0FFh
		db 0F3h	; ó
		db 0FFh
		db 0EDh	; í
		db 0FFh
		db 0E7h	; ç
		db 0FFh
		db 0E1h	; á
		db 0FFh
		db 0DAh	; Ú
		db 0FFh
		db 0D4h	; Ô
		db 0FFh
		db 0CEh	; Î
		db 0FFh
		db 0C8h	; È
		db 0FFh
		db 0C2h	; Â
		db 0FFh
		db 0BCh	; ¼
		db 0FFh
		db 0B6h	; ¶
		db 0FFh
		db 0B0h	; °
		db 0FFh
		db 0AAh	; ª
		db 0FFh
		db 0A4h	; ¤
		db 0FFh
		db  9Eh	; 
		db 0FFh
		db  98h	; 
		db 0FFh
		db  93h	; 
		db 0FFh
		db  8Dh	; 
		db 0FFh
		db  87h	; 
		db 0FFh
		db  82h	; 
		db 0FFh
		db  7Ch	; |
		db 0FFh
		db  77h	; w
		db 0FFh
		db  72h	; r
		db 0FFh
		db  6Dh	; m
		db 0FFh
		db  68h	; h
		db 0FFh
		db  63h	; c
		db 0FFh
		db  5Eh	; ^
		db 0FFh
		db  59h	; Y
		db 0FFh
		db  54h	; T
		db 0FFh
		db  4Fh	; O
		db 0FFh
		db  4Bh	; K
		db 0FFh
		db  47h	; G
		db 0FFh
		db  42h	; B
		db 0FFh
		db  3Eh	; >
		db 0FFh
		db  3Ah	; :
		db 0FFh
		db  36h	; 6
		db 0FFh
		db  32h	; 2
		db 0FFh
		db  2Fh	; /
		db 0FFh
		db  2Bh	; +
		db 0FFh
		db  28h	; (
		db 0FFh
		db  24h	; $
		db 0FFh
		db  21h	; !
		db 0FFh
		db  1Eh
		db 0FFh
		db  1Bh
		db 0FFh
		db  19h
		db 0FFh
		db  16h
		db 0FFh
		db  13h
		db 0FFh
		db  11h
		db 0FFh
		db  0Fh
		db 0FFh
		db  0Dh
		db 0FFh
		db  0Bh
		db 0FFh
		db    9
		db 0FFh
		db    8
		db 0FFh
		db    6
		db 0FFh
		db    5
		db 0FFh
		db    4
		db 0FFh
		db    3
		db 0FFh
		db    2
		db 0FFh
		db    1
		db 0FFh
		db    1
		db 0FFh
		db    0
		db 0FFh
		db    0
		db 0FFh
		db    0
		db 0FFh
		db    0
		db 0FFh
		db    0
		db 0FFh
		db    1
		db 0FFh
		db    1
		db 0FFh
		db    2
		db 0FFh
		db    3
		db 0FFh
		db    4
		db 0FFh
		db    5
		db 0FFh
		db    6
		db 0FFh
		db    8
		db 0FFh
		db    9
		db 0FFh
		db  0Bh
		db 0FFh
		db  0Dh
		db 0FFh
		db  0Fh
		db 0FFh
		db  11h
		db 0FFh
		db  13h
		db 0FFh
		db  16h
		db 0FFh
		db  19h
		db 0FFh
		db  1Bh
		db 0FFh
		db  1Eh
		db 0FFh
		db  21h	; !
		db 0FFh
		db  24h	; $
		db 0FFh
		db  28h	; (
		db 0FFh
		db  2Bh	; +
		db 0FFh
		db  2Fh	; /
		db 0FFh
		db  32h	; 2
		db 0FFh
		db  36h	; 6
		db 0FFh
		db  3Ah	; :
		db 0FFh
		db  3Eh	; >
		db 0FFh
		db  42h	; B
		db 0FFh
		db  47h	; G
		db 0FFh
		db  4Bh	; K
		db 0FFh
		db  4Fh	; O
		db 0FFh
		db  54h	; T
		db 0FFh
		db  59h	; Y
		db 0FFh
		db  5Eh	; ^
		db 0FFh
		db  63h	; c
		db 0FFh
		db  68h	; h
		db 0FFh
		db  6Dh	; m
		db 0FFh
		db  72h	; r
		db 0FFh
		db  77h	; w
		db 0FFh
		db  7Ch	; |
		db 0FFh
		db  82h	; 
		db 0FFh
		db  87h	; 
		db 0FFh
		db  8Dh	; 
		db 0FFh
		db  93h	; 
		db 0FFh
		db  98h	; 
		db 0FFh
		db  9Eh	; 
		db 0FFh
		db 0A4h	; ¤
		db 0FFh
		db 0AAh	; ª
		db 0FFh
		db 0B0h	; °
		db 0FFh
		db 0B6h	; ¶
		db 0FFh
		db 0BCh	; ¼
		db 0FFh
		db 0C2h	; Â
		db 0FFh
		db 0C8h	; È
		db 0FFh
		db 0CEh	; Î
		db 0FFh
		db 0D4h	; Ô
		db 0FFh
		db 0DAh	; Ú
		db 0FFh
		db 0E1h	; á
		db 0FFh
		db 0E7h	; ç
		db 0FFh
		db 0EDh	; í
		db 0FFh
		db 0F3h	; ó
		db 0FFh
		db 0FAh	; ú
		db 0FFh
		db    0
		db    0
		db    6
		db    0
		db  0Dh
		db    0
		db  13h
		db    0
		db  19h
		db    0
		db  1Fh
		db    0
		db  26h	; &
		db    0
		db  2Ch	; ,
		db    0
		db  32h	; 2
		db    0
		db  38h	; 8
		db    0
		db  3Eh	; >
		db    0
		db  44h	; D
		db    0
		db  4Ah	; J
		db    0
		db 50h
		db 0
		db  56h	; V
		db    0
		db  5Ch	; \
		db    0
		db  62h	; b
		db    0
		db  68h	; h
		db    0
		db  6Dh	; m
		db    0
		db  73h	; s
		db    0
		db  79h	; y
		db    0
		db  7Eh	; ~
		db    0
		db  84h	; 
		db    0
		db  89h	; 
		db    0
		db  8Eh	; 
		db    0
		db  93h	; 
		db    0
		db  98h	; 
		db    0
		db  9Dh	; 
		db    0
		db 0A2h	; ¢
		db    0
		db 0A7h	; §
		db    0
		db 0ACh	; ¬
		db    0
		db 0B1h	; ±
		db    0
		db 0B5h	; µ
		db    0
		db 0B9h	; ¹
		db    0
		db 0BEh	; ¾
		db    0
		db 0C2h	; Â
		db    0
		db 0C6h	; Æ
		db    0
		db 0CAh	; Ê
		db    0
		db 0CEh	; Î
		db    0
		db 0D1h	; Ñ
		db    0
		db 0D5h	; Õ
		db    0
		db 0D8h	; Ø
		db    0
		db 0DCh	; Ü
		db    0
		db 0DFh	; ß
		db    0
		db 0E2h	; â
		db    0
		db 0E5h	; å
		db    0
		db 0E7h	; ç
		db    0
		db 0EAh	; ê
		db    0
		db 0EDh	; í
		db    0
		db 0EFh	; ï
		db    0
		db 0F1h	; ñ
		db    0
		db 0F3h	; ó
		db    0
		db 0F5h	; õ
		db    0
		db 0F7h	; ÷
		db    0
		db 0F8h	; ø
		db    0
		db 0FAh	; ú
		db    0
		db 0FBh	; û
		db    0
		db 0FCh	; ü
		db    0
		db 0FDh	; ý
		db    0
		db 0FEh	; þ
		db    0
		db 0FFh
		db    0
		db 0FFh
		db    0
		db    0
		db    1
		db    0
		db    1
		db    0
		db    0
word_21AA8	dw 0A000h		; DATA XREF: sub_1B0C+13r sub_1B50+13r ...
		db  50h	; P
		db    0
word_21AAC	dw 1			; DATA XREF: sub_1CF4+2Er
unk_21AAE	db    0			; DATA XREF: seg000:2406r
		db    0
word_21AB0	dw 0			; DATA XREF: seg000:23F8r
word_21AB2	dw 0			; DATA XREF: sub_236C+Ew sub_236C+16w	...
byte_21AB4	db 0			; DATA XREF: sub_236C+24r sub_236C+4Cw ...
		db  90h	; 
		db 0FFh
		db  7Fh	; 
		db  3Fh	; ?
		db  1Fh
		db  0Fh
		db    7
		db    3
		db    1
word_21ABE	dw 0			; DATA XREF: sub_21F4r	sub_252A+6w ...
word_21AC0	dw 0			; DATA XREF: sub_2508:loc_251Dw
					; sub_252A+1Bw	...
word_21AC2	dw 0			; DATA XREF: sub_6A4+3w sub_258C+76w ...
word_21AC4	dw 100h			; DATA XREF: sub_2550+8r
		db    0
		db    0
		db    0
		db    0
		db    0
byte_21ACB	db 0			; DATA XREF: sub_2A74+24r
					; sub_2A74:loc_2ABAr
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_21AD2	dw 0			; DATA XREF: sub_2A74+6Er
word_21AD4	dw 0			; DATA XREF: sub_2A74+6Br
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_21AE2	dw 0			; DATA XREF: sub_2A74+32r
		db    0
		db    0
word_21AE6	dw 0			; DATA XREF: sub_2748r	sub_2748+7r ...
word_21AE8	dw 0			; DATA XREF: sub_2748:loc_2765r
					; sub_278C+5r ...
word_21AEA	dw 0			; DATA XREF: sub_2748+24r sub_2748+2Br
a_exe		db '.exe',0
		db 0
byte_21AF2	db 1			; DATA XREF: sub_1328E+49r
		db 0
word_21AF4	dw 1			; DATA XREF: seg000:3A73r seg000:3A7Dw ...
		db  48h	; H
		db  57h	; W
		db 0C0h	; À
		db  4Dh	; M
		db 0D8h	; Ø
		db  92h	; 
		db 0D8h	; Ø
		db  82h	; 
		db  88h	; 
		db  74h	; t
		db    8
		db  6Eh	; n
		db 0F8h	; ø
		db  61h	; a
		db  64h	; d
		db    0
		db  68h	; h
		db  52h	; R
		db  64h	; d
		db    0
		db 0A0h	;  
		db  8Ah	; 
		db  78h	; x
		db  7Bh	; {
		db  64h	; d
		db    0
		db 0C8h	; È
		db  67h	; g
		db  68h	; h
		db  5Ch	; \
		db  64h	; d
		db    0
		db  68h	; h
		db  5Ch	; \
		db  68h	; h
		db  52h	; R
		db  64h	; d
		db    0
		db 0A0h	;  
		db  8Ah	; 
		db  78h	; x
		db  7Bh	; {
		db  64h	; d
		db    0
		db 0C8h	; È
		db  67h	; g
		db  64h	; d
		db    0
		db  40h	; @
		db    0
		db  20h
		db    0
		db  20h
		db    0
		db  10h
		db    0
		db  10h
		db    0
		db  10h
		db    0
		db  10h
		db    0
		db    8
		db    0
		db    8
		db    0
		db    8
		db    0
		db    8
		db    0
		db    8
		db    0
		db    8
		db    0
		db    8
		db    0
		db    8
		db    0
		db    4
		db    0
		db    4
		db    0
		db    4
		db    0
		db    4
		db    0
		db    4
		db    0
		db    4
		db    0
		db    4
		db    0
		db    4
		db    0
		db    4
		db    0
		db    4
		db    0
		db    4
		db    0
		db    4
		db    0
		db    4
		db    0
		db    4
		db    0
		db    4
		db    0
		db    4
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    1
		db    0
word_21BA6	dw 0			; DATA XREF: sub_39B8+Cw sub_39B8+31r	...
word_21BA8	dw 0			; DATA XREF: sub_39B8+28r seg000:3A79r ...
word_21BAA	dw 0			; DATA XREF: sub_3D86+12w
word_21BAC	dw 0			; DATA XREF: seg000:3AAAr seg000:3AC4w ...
word_21BAE	dw 0			; DATA XREF: sub_3DB4+ABw
word_21BB0	dw 0			; DATA XREF: sub_3B7C+6r
					; sub_3B7C:loc_3C26r ...
word_21BB2	dw 0			; DATA XREF: sub_3B7C+CAw sub_3B7C+E1r ...
word_21BB4	dw 0			; DATA XREF: seg000:3ABDr sub_3DB4+BDw
word_21BB6	dw 0			; DATA XREF: seg000:3A9Aw seg000:3A9Er ...
word_21BB8	dw 0			; DATA XREF: sub_3DB4+2Ew
					; sub_3DB4+139r
word_21BBA	dw 0			; DATA XREF: sub_3DB4+C9w
word_21BBC	dw 0			; DATA XREF: sub_3DB4+9Fw
word_21BBE	dw 0			; DATA XREF: sub_3A26+6r sub_3DB4+A5w
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_21BE0	dw 0			; DATA XREF: sub_3B7C+FFr
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_21C02	dw 0			; DATA XREF: seg000:3ADEr seg000:3AEDw ...
word_21C04	dw 0			; DATA XREF: sub_3878+64r sub_3878+CCr ...
word_21C06	dw 0			; DATA XREF: sub_3CAA+25w sub_3CF4r ...
word_21C08	dw 0			; DATA XREF: sub_3DB4+EFw
word_21C0A	dw 0			; DATA XREF: sub_3CAA:loc_3CC3r
					; sub_3DB4+F5w
word_21C0C	dw 0			; DATA XREF: sub_3DB4+Dr
					; sub_3DB4:loc_3F49w ...
word_21C0E	dw 0			; DATA XREF: sub_3D86+16r
					; sub_3DB4+126w
word_21C10	dw 0			; DATA XREF: sub_3D86+19r
					; sub_3DB4+122w
		dw 0
		db  20h
		db  10h
		db    2
		db  12h
		db  12h
		db  40h	; @
		db  10h
		db  11h
		db    2
		db  12h
		db  20h
		db  20h
		db  20h
		db  20h
		db    0
		db    0
		db    0
		db  24h	; $
		db  10h
		db    4
		db  10h
		db    8
		db  30h	; 0
		db  50h	; P
		db  11h
		db    4
		db  0Bh
		db  50h	; P
		db  50h	; P
		db  50h	; P
		db  20h
		db    0
byte_21C34	db 0			; DATA XREF: sub_1337E+Dw
					; sub_133FA:loc_13446w	...
byte_21C35	db 0			; DATA XREF: sub_1337E+Aw sub_133DC+3r ...
byte_21C36	db 0			; DATA XREF: sub_1337E+7w
					; sub_133AC+23w ...
		db 0
		dd aM26			; "m26"
		dd aM26			; "m26"
		dd aM86			; "m86"
		dd aMmd			; "mmd"
aM26		db 'm26',0              ; DATA XREF: dseg:08F8o dseg:08FCo
aM86		db 'm86',0              ; DATA XREF: dseg:0900o
aMmd		db 'mmd',0              ; DATA XREF: dseg:0904o
byte_21C54	db 0FFh			; DATA XREF: sub_138A6+5w sub_138B2+Dr ...
byte_21C55	db 0			; DATA XREF: sub_138A6w sub_138B2+31w	...
byte_21C56	db 0			; DATA XREF: sub_13938w sub_13938+5Aw	...
		db 0
word_21C58	dw 0			; DATA XREF: sub_B6D1+46w sub_B6D1+49r ...
off_21C5A	dd aSt00_std		; DATA XREF: sub_B6D1+11r sub_B6D1+19r
					; "ST00.STD"
aSt00_std	db 'ST00.STD',0         ; DATA XREF: dseg:off_21C5Ao
		db 0
; char aMaine[]
aMaine		db 'maine',0            ; DATA XREF: sub_B7B9+21o
; char aMaine_0[]
aMaine_0	db 'maine',0            ; DATA XREF: sub_B7E4+21o
; char aMaine_1[]
aMaine_1	db 'maine',0            ; DATA XREF: sub_B80F+1Co
		dw 0
		db  40h	; @
		db    1
		db  80h	; 
		db    2
		db 0C0h	; À
		db    3
		db    0
		db    5
		db  40h	; @
		db    6
		db  80h	; 
		db    7
		db 0C0h	; À
		db    8
		db    0
		db  0Ah
		db  40h	; @
		db  0Bh
		db  80h	; 
		db  0Ch
		db 0C0h	; À
		db  0Dh
		db    0
		db  0Fh
		db  40h	; @
		db  10h
		db  80h	; 
		db  11h
		db 0C0h	; À
		db  12h
		db    0
		db  14h
		db  40h	; @
		db  15h
		db  80h	; 
		db  16h
		db 0C0h	; À
		db  17h
		db    0
		db  19h
		db  40h	; @
		db  1Ah
		db  80h	; 
		db  1Bh
		db 0C0h	; À
		db  1Ch
		db    0
		db  1Eh
		db  40h	; @
		db  1Fh
		db  80h	; 
		db  20h
		db 0C0h	; À
		db  21h	; !
		db    0
		db  23h	; #
		db  40h	; @
		db  24h	; $
		db  80h	; 
		db  25h	; %
		db 0C0h	; À
		db  26h	; &
off_21CBA	dd aSt00_map		; DATA XREF: sub_B971+Cr sub_B971+14r
					; "ST00.MAP"
aSt00_map	db 'ST00.MAP',0         ; DATA XREF: dseg:off_21CBAo
		db 0
byte_21CC8	db 0			; DATA XREF: sub_13DAA+33r
					; sub_19F6E+16w ...
		db 0
; 0
NUMERALS	db    0,   0, 38h,   0,	44h,   0, 82h,	 0, 82h,   0, 82h,   0,	44h,   0, 38h,	 0
		db    0,   0, 1Ch,   0,	22h,   0, 41h,	 0, 41h,   0, 41h,   0,	22h,   0, 1Ch,	 0
		db    0,   0, 0Eh,   0,	11h,   0, 20h, 80h, 20h, 80h, 20h, 80h,	11h,   0, 0Eh,	 0
		db    0,   0,	7,   0,	  8, 80h, 10h, 40h, 10h, 40h, 10h, 40h,	  8, 80h,   7,	 0
		db    0,   0,	3, 80h,	  4, 40h,   8, 20h,   8, 20h,	8, 20h,	  4, 40h,   3, 80h
		db    0,   0,	1,0C0h,	  2, 20h,   4, 10h,   4, 10h,	4, 10h,	  2, 20h,   1,0C0h
		db    0,   0,	0,0E0h,	  1, 10h,   2,	 8,   2,   8,	2,   8,	  1, 10h,   0,0E0h
		db    0,   0,	0, 70h,	  0, 88h,   1,	 4,   1,   4,	1,   4,	  0, 88h,   0, 70h
; 1
		db    0,   0,	0,   0,	  0,   0,   6,	 0, 7Eh,   0,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   3,	 0, 3Fh,   0,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   1, 80h, 1Fh, 80h,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0,0C0h, 0Fh,0C0h,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0, 60h,   7,0E0h,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0, 30h,   3,0F0h,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0, 18h,   1,0F8h,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0, 0Ch,   0,0FCh,	0,   0,	  0,   0,   0,	 0
; 2
		db    0,   0, 0Ch,   0,	3Ch,   0,   0,	 0,   0,   0,	6,   0,	7Eh,   0,   0,	 0
		db    0,   0,	6,   0,	1Eh,   0,   0,	 0,   0,   0,	3,   0,	3Fh,   0,   0,	 0
		db    0,   0,	3,   0,	0Fh,   0,   0,	 0,   0,   0,	1, 80h,	1Fh, 80h,   0,	 0
		db    0,   0,	1, 80h,	  7, 80h,   0,	 0,   0,   0,	0,0C0h,	0Fh,0C0h,   0,	 0
		db    0,   0,	0,0C0h,	  3,0C0h,   0,	 0,   0,   0,	0, 60h,	  7,0E0h,   0,	 0
		db    0,   0,	0, 60h,	  1,0E0h,   0,	 0,   0,   0,	0, 30h,	  3,0F0h,   0,	 0
		db    0,   0,	0, 30h,	  0,0F0h,   0,	 0,   0,   0,	0, 18h,	  1,0F8h,   0,	 0
		db    0,   0,	0, 18h,	  0, 78h,   0,	 0,   0,   0,	0, 0Ch,	  0,0FCh,   0,	 0
; 3
		db    6,   0, 7Eh,   0,	  0,   0,   6,	 0, 3Ch,   0,	0,   0,	  3,   0,0FFh,	 0
		db    3,   0, 3Fh,   0,	  0,   0,   3,	 0, 1Eh,   0,	0,   0,	  1, 80h, 7Fh, 80h
		db    1, 80h, 1Fh, 80h,	  0,   0,   1, 80h, 0Fh,   0,	0,   0,	  0,0C0h, 3Fh,0C0h
		db    0,0C0h, 0Fh,0C0h,	  0,   0,   0,0C0h,   7, 80h,	0,   0,	  0, 60h, 1Fh,0E0h
		db    0, 60h,	7,0E0h,	  0,   0,   0, 60h,   3,0C0h,	0,   0,	  0, 30h, 0Fh,0F0h
		db    0, 30h,	3,0F0h,	  0,   0,   0, 30h,   1,0E0h,	0,   0,	  0, 18h,   7,0F8h
		db    0, 18h,	1,0F8h,	  0,   0,   0, 18h,   0,0F0h,	0,   0,	  0, 0Ch,   3,0FCh
		db    0, 0Ch,	0,0FCh,	  0,   0,   0, 0Ch,   0, 78h,	0,   0,	  0,   6,   1,0FEh
; 4
		db    0,   0, 7Eh,   0,	5Ah,   0, 7Eh,	 0, 42h,   0, 42h,   0,	7Eh,   0,   0,	 0
		db    0,   0, 3Fh,   0,	2Dh,   0, 3Fh,	 0, 21h,   0, 21h,   0,	3Fh,   0,   0,	 0
		db    0,   0, 1Fh, 80h,	16h, 80h, 1Fh, 80h, 10h, 80h, 10h, 80h,	1Fh, 80h,   0,	 0
		db    0,   0, 0Fh,0C0h,	0Bh, 40h, 0Fh,0C0h,   8, 40h,	8, 40h,	0Fh,0C0h,   0,	 0
		db    0,   0,	7,0E0h,	  5,0A0h,   7,0E0h,   4, 20h,	4, 20h,	  7,0E0h,   0,	 0
		db    0,   0,	3,0F0h,	  2,0D0h,   3,0F0h,   2, 10h,	2, 10h,	  3,0F0h,   0,	 0
		db    0,   0,	1,0F8h,	  1, 68h,   1,0F8h,   1,   8,	1,   8,	  1,0F8h,   0,	 0
		db    0,   0,	0,0FCh,	  0,0B4h,   0,0FCh,   0, 84h,	0, 84h,	  0,0FCh,   0,	 0
; 5
		db    0,   0, 7Eh,   0,	  8,   0, 10h,	 0, 7Ch,   0, 24h,   0,	44h,   0,0FFh,	 0
		db    0,   0, 3Fh,   0,	  4,   0,   8,	 0, 3Eh,   0, 12h,   0,	22h,   0, 7Fh, 80h
		db    0,   0, 1Fh, 80h,	  2,   0,   4,	 0, 1Fh,   0,	9,   0,	11h,   0, 3Fh,0C0h
		db    0,   0, 0Fh,0C0h,	  1,   0,   2,	 0, 0Fh, 80h,	4, 80h,	  8, 80h, 1Fh,0E0h
		db    0,   0,	7,0E0h,	  0, 80h,   1,	 0,   7,0C0h,	2, 40h,	  4, 40h, 0Fh,0F0h
		db    0,   0,	3,0F0h,	  0, 40h,   0, 80h,   3,0E0h,	1, 20h,	  2, 20h,   7,0F8h
		db    0,   0,	1,0F8h,	  0, 20h,   0, 40h,   1,0F0h,	0, 90h,	  1, 10h,   3,0FCh
		db    0,   0,	0,0FCh,	  0, 10h,   0, 20h,   0,0F8h,	0, 48h,	  0, 88h,   1,0FEh
; 6
		db    0,   0, 18h,   0,	7Eh,   0,   0,	 0,   0,   0, 24h,   0,	42h,   0,   0,	 0
		db    0,   0, 0Ch,   0,	3Fh,   0,   0,	 0,   0,   0, 12h,   0,	21h,   0,   0,	 0
		db    0,   0,	6,   0,	1Fh, 80h,   0,	 0,   0,   0,	9,   0,	10h, 80h,   0,	 0
		db    0,   0,	3,   0,	0Fh,0C0h,   0,	 0,   0,   0,	4, 80h,	  8, 40h,   0,	 0
		db    0,   0,	1, 80h,	  7,0E0h,   0,	 0,   0,   0,	2, 40h,	  4, 20h,   0,	 0
		db    0,   0,	0,0C0h,	  3,0F0h,   0,	 0,   0,   0,	1, 20h,	  2, 10h,   0,	 0
		db    0,   0,	0, 60h,	  1,0F8h,   0,	 0,   0,   0,	0, 90h,	  1,   8,   0,	 0
		db    0,   0,	0, 30h,	  0,0FCh,   0,	 0,   0,   0,	0, 48h,	  0, 84h,   0,	 0
; 7
		db    0,   0, 20h,   0,	7Eh,   0, 20h,	 0, 20h,   0, 3Ch,   0,	  0,   0,   0,	 0
		db    0,   0, 10h,   0,	3Fh,   0, 10h,	 0, 10h,   0, 1Eh,   0,	  0,   0,   0,	 0
		db    0,   0,	8,   0,	1Fh, 80h,   8,	 0,   8,   0, 0Fh,   0,	  0,   0,   0,	 0
		db    0,   0,	4,   0,	0Fh,0C0h,   4,	 0,   4,   0,	7, 80h,	  0,   0,   0,	 0
		db    0,   0,	2,   0,	  7,0E0h,   2,	 0,   2,   0,	3,0C0h,	  0,   0,   0,	 0
		db    0,   0,	1,   0,	  3,0F0h,   1,	 0,   1,   0,	1,0E0h,	  0,   0,   0,	 0
		db    0,   0,	0, 80h,	  1,0F8h,   0, 80h,   0, 80h,	0,0F0h,	  0,   0,   0,	 0
		db    0,   0,	0, 40h,	  0,0FCh,   0, 40h,   0, 40h,	0, 78h,	  0,   0,   0,	 0
; 8
		db    0,   0,	4,   0,	24h,   0, 22h,	 0, 42h,   0, 41h,   0,	  0,   0,   0,	 0
		db    0,   0,	2,   0,	12h,   0, 11h,	 0, 21h,   0, 20h, 80h,	  0,   0,   0,	 0
		db    0,   0,	1,   0,	  9,   0,   8, 80h, 10h, 80h, 10h, 40h,	  0,   0,   0,	 0
		db    0,   0,	0, 80h,	  4, 80h,   4, 40h,   8, 40h,	8, 20h,	  0,   0,   0,	 0
		db    0,   0,	0, 40h,	  2, 40h,   2, 20h,   4, 20h,	4, 10h,	  0,   0,   0,	 0
		db    0,   0,	0, 20h,	  1, 20h,   1, 10h,   2, 10h,	2,   8,	  0,   0,   0,	 0
		db    0,   0,	0, 10h,	  0, 90h,   0, 88h,   1,   8,	1,   4,	  0,   0,   0,	 0
		db    0,   0,	0,   8,	  0, 48h,   0, 44h,   0, 84h,	0, 82h,	  0,   0,   0,	 0
; 9
		db    0,   0, 10h,   0,	3Eh,   0, 24h,	 0, 26h,   0, 4Ah,   0,	8Eh,   0,   0,	 0
		db    0,   0,	8,   0,	1Fh,   0, 12h,	 0, 13h,   0, 25h,   0,	47h,   0,   0,	 0
		db    0,   0,	4,   0,	0Fh, 80h,   9,	 0,   9, 80h, 12h, 80h,	23h, 80h,   0,	 0
		db    0,   0,	2,   0,	  7,0C0h,   4, 80h,   4,0C0h,	9, 40h,	11h,0C0h,   0,	 0
		db    0,   0,	1,   0,	  3,0E0h,   2, 40h,   2, 60h,	4,0A0h,	  8,0E0h,   0,	 0
		db    0,   0,	0, 80h,	  1,0F0h,   1, 20h,   1, 30h,	2, 50h,	  4, 70h,   0,	 0
		db    0,   0,	0, 40h,	  0,0F8h,   0, 90h,   0, 98h,	1, 28h,	  2, 38h,   0,	 0
		db    0,   0,	0, 20h,	  0, 7Ch,   0, 48h,   0, 4Ch,	0, 94h,	  1, 1Ch,   0,	 0
; x
		db  81h,   0, 42h,   0,	24h,   0, 18h,	 0, 18h,   0, 24h,   0,	42h,   0, 81h,	 0
		db  40h, 80h, 21h,   0,	12h,   0, 0Ch,	 0, 0Ch,   0, 12h,   0,	21h,   0, 40h, 80h
		db  20h, 40h, 10h, 80h,	  9,   0,   6,	 0,   6,   0,	9,   0,	10h, 80h, 20h, 40h
		db  10h, 20h,	8, 40h,	  4, 80h,   3,	 0,   3,   0,	4, 80h,	  8, 40h, 10h, 20h
		db    8, 10h,	4, 20h,	  2, 40h,   1, 80h,   1, 80h,	2, 40h,	  4, 20h,   8, 10h
		db    4,   8,	2, 10h,	  1, 20h,   0,0C0h,   0,0C0h,	1, 20h,	  2, 10h,   4,	 8
		db    2,   4,	1,   8,	  0, 90h,   0, 60h,   0, 60h,	0, 90h,	  1,   8,   2,	 4
		db    1,   2,	0, 84h,	  0, 48h,   0, 30h,   0, 30h,	0, 48h,	  0, 84h,   1,	 2
; 2 (multiplier)
		db  3Ch,   0, 46h,   0,	46h,   0,   6,	 0, 3Ch,   0, 60h,   0,0C1h,   0,0FFh,	 0
		db  1Eh,   0, 23h,   0,	23h,   0,   3,	 0, 1Eh,   0, 30h,   0,	60h, 80h, 7Fh, 80h
		db  0Fh,   0, 11h, 80h,	11h, 80h,   1, 80h, 0Fh,   0, 18h,   0,	30h, 40h, 3Fh,0C0h
		db    7, 80h,	8,0C0h,	  8,0C0h,   0,0C0h,   7, 80h, 0Ch,   0,	18h, 20h, 1Fh,0E0h
		db    3,0C0h,	4, 60h,	  4, 60h,   0, 60h,   3,0C0h,	6,   0,	0Ch, 10h, 0Fh,0F0h
		db    1,0E0h,	2, 30h,	  2, 30h,   0, 30h,   1,0E0h,	3,   0,	  6,   8,   7,0F8h
		db    0,0F0h,	1, 18h,	  1, 18h,   0, 18h,   0,0F0h,	1, 80h,	  3,   4,   3,0FCh
		db    0, 78h,	0, 8Ch,	  0, 8Ch,   0, 0Ch,   0, 78h,	0,0C0h,	  1, 82h,   1,0FEh

		db  18h
		db  3Ch	; <
		db  7Eh	; ~
		db 0BDh	; ½
		db 0FFh
		db    0
		db  10h
		db    0
		db  10h
		db    0
		db  10h
		db    0
		db  1Fh
		db    0
		db 0F8h	; ø
		db    0
		db    8
		db    0
		db    8
		db    0
		db    8
		db    0
		db  40h	; @
		db    0
		db  21h	; !
		db    0
		db  12h
		db    0
		db  1Ch
		db    0
		db  38h	; 8
		db    0
		db  48h	; H
		db    0
		db  84h	; 
		db    0
		db    2
		db    0
		db    0
		db    0
		db  42h	; B
		db    0
		db  24h	; $
		db    0
		db  18h
		db    0
		db  18h
		db    0
		db  24h	; $
		db    0
		db  42h	; B
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  24h	; $
		db    0
		db  18h
		db    0
		db  18h
		db    0
		db  24h	; $
		db    0
		db    0
		db    0
		db    0
		db    0
		db  40h	; @
		db    0
		db  21h	; !
		db    0
		db  12h
		db    0
		db  1Ch
		db    0
		db  38h	; 8
		db    0
		db  48h	; H
		db    0
		db  84h	; 
		db    0
		db    2
		db    0
		db    0
		db    0
		db  42h	; B
		db    0
		db  24h	; $
		db    0
		db  18h
		db    0
		db  18h
		db    0
		db  24h	; $
		db    0
		db  42h	; B
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  24h	; $
		db    0
		db  18h
		db    0
		db  18h
		db    0
		db  24h	; $
		db    0
		db    0
		db    0
		db    0
		db    0
		db  3Ch	; <
		db    0
		db  42h	; B
		db    0
		db  81h	; 
		db    0
		db  99h	; 
		db    0
		db  99h	; 
		db    0
		db  81h	; 
		db    0
		db  42h	; B
		db    0
		db  3Ch	; <
		db    0
		db    8
		db    0
		db    8
		db    0
		db    8
		db    0
		db  0Fh
		db  80h	; 
		db  7Ch	; |
		db    0
		db    4
		db    0
		db    4
		db    0
		db    4
		db    0
		db  20h
		db    0
		db  10h
		db  80h	; 
		db    9
		db    0
		db  0Eh
		db    0
		db  1Ch
		db    0
		db  24h	; $
		db    0
		db  42h	; B
		db    0
		db    1
		db    0
		db    0
		db    0
		db  21h	; !
		db    0
		db  12h
		db    0
		db  0Ch
		db    0
		db  0Ch
		db    0
		db  12h
		db    0
		db  21h	; !
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  12h
		db    0
		db  0Ch
		db    0
		db  0Ch
		db    0
		db  12h
		db    0
		db    0
		db    0
		db    0
		db    0
		db  20h
		db    0
		db  10h
		db  80h	; 
		db    9
		db    0
		db  0Eh
		db    0
		db  1Ch
		db    0
		db  24h	; $
		db    0
		db  42h	; B
		db    0
		db    1
		db    0
		db    0
		db    0
		db  21h	; !
		db    0
		db  12h
		db    0
		db  0Ch
		db    0
		db  0Ch
		db    0
		db  12h
		db    0
		db  21h	; !
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  12h
		db    0
		db  0Ch
		db    0
		db  0Ch
		db    0
		db  12h
		db    0
		db    0
		db    0
		db    0
		db    0
		db  1Eh
		db    0
		db  21h	; !
		db    0
		db  40h	; @
		db  80h	; 
		db  4Ch	; L
		db  80h	; 
		db  4Ch	; L
		db  80h	; 
		db  40h	; @
		db  80h	; 
		db  21h	; !
		db    0
		db  1Eh
		db    0
		db    4
		db    0
		db    4
		db    0
		db    4
		db    0
		db    7
		db 0C0h	; À
		db  3Eh	; >
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db  10h
		db    0
		db    8
		db  40h	; @
		db    4
		db  80h	; 
		db    7
		db    0
		db  0Eh
		db    0
		db  12h
		db    0
		db  21h	; !
		db    0
		db    0
		db  80h	; 
		db    0
		db    0
		db  10h
		db  80h	; 
		db    9
		db    0
		db    6
		db    0
		db    6
		db    0
		db    9
		db    0
		db  10h
		db  80h	; 
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    9
		db    0
		db    6
		db    0
		db    6
		db    0
		db    9
		db    0
		db    0
		db    0
		db    0
		db    0
		db  10h
		db    0
		db    8
		db  40h	; @
		db    4
		db  80h	; 
		db    7
		db    0
		db  0Eh
		db    0
		db  12h
		db    0
		db  21h	; !
		db    0
		db    0
		db  80h	; 
		db    0
		db    0
		db  10h
		db  80h	; 
		db    9
		db    0
		db    6
		db    0
		db    6
		db    0
		db    9
		db    0
		db  10h
		db  80h	; 
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    9
		db    0
		db    6
		db    0
		db    6
		db    0
		db    9
		db    0
		db    0
		db    0
		db    0
		db    0
		db  0Fh
		db    0
		db  10h
		db  80h	; 
		db  20h
		db  40h	; @
		db  26h	; &
		db  40h	; @
		db  26h	; &
		db  40h	; @
		db  20h
		db  40h	; @
		db  10h
		db  80h	; 
		db  0Fh
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    3
		db 0E0h	; à
		db  1Fh
		db    0
		db    1
		db    0
		db    1
		db    0
		db    1
		db    0
		db    8
		db    0
		db    4
		db  20h
		db    2
		db  40h	; @
		db    3
		db  80h	; 
		db    7
		db    0
		db    9
		db    0
		db  10h
		db  80h	; 
		db    0
		db  40h	; @
		db    0
		db    0
		db    8
		db  40h	; @
		db    4
		db  80h	; 
		db    3
		db    0
		db    3
		db    0
		db    4
		db  80h	; 
		db    8
		db  40h	; @
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    4
		db  80h	; 
		db    3
		db    0
		db    3
		db    0
		db    4
		db  80h	; 
		db    0
		db    0
		db    0
		db    0
		db    8
		db    0
		db    4
		db  20h
		db    2
		db  40h	; @
		db    3
		db  80h	; 
		db    7
		db    0
		db    9
		db    0
		db  10h
		db  80h	; 
		db    0
		db  40h	; @
		db    0
		db    0
		db    8
		db  40h	; @
		db    4
		db  80h	; 
		db    3
		db    0
		db    3
		db    0
		db    4
		db  80h	; 
		db    8
		db  40h	; @
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    4
		db  80h	; 
		db    3
		db    0
		db    3
		db    0
		db    4
		db  80h	; 
		db    0
		db    0
		db    0
		db    0
		db    7
		db  80h	; 
		db    8
		db  40h	; @
		db  10h
		db  20h
		db  13h
		db  20h
		db  13h
		db  20h
		db  10h
		db  20h
		db    8
		db  40h	; @
		db    7
		db  80h	; 
		db    1
		db    0
		db    1
		db    0
		db    1
		db    0
		db    1
		db 0F0h	; ð
		db  0Fh
		db  80h	; 
		db    0
		db  80h	; 
		db    0
		db  80h	; 
		db    0
		db  80h	; 
		db    4
		db    0
		db    2
		db  10h
		db    1
		db  20h
		db    1
		db 0C0h	; À
		db    3
		db  80h	; 
		db    4
		db  80h	; 
		db    8
		db  40h	; @
		db    0
		db  20h
		db    0
		db    0
		db    4
		db  20h
		db    2
		db  40h	; @
		db    1
		db  80h	; 
		db    1
		db  80h	; 
		db    2
		db  40h	; @
		db    4
		db  20h
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    2
		db  40h	; @
		db    1
		db  80h	; 
		db    1
		db  80h	; 
		db    2
		db  40h	; @
		db    0
		db    0
		db    0
		db    0
		db    4
		db    0
		db    2
		db  10h
		db    1
		db  20h
		db    1
		db 0C0h	; À
		db    3
		db  80h	; 
		db    4
		db  80h	; 
		db    8
		db  40h	; @
		db    0
		db  20h
		db    0
		db    0
		db    4
		db  20h
		db    2
		db  40h	; @
		db    1
		db  80h	; 
		db    1
		db  80h	; 
		db    2
		db  40h	; @
		db    4
		db  20h
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    2
		db  40h	; @
		db    1
		db  80h	; 
		db    1
		db  80h	; 
		db    2
		db  40h	; @
		db    0
		db    0
		db    0
		db    0
		db    3
		db 0C0h	; À
		db    4
		db  20h
		db    8
		db  10h
		db    9
		db  90h	; 
		db    9
		db  90h	; 
		db    8
		db  10h
		db    4
		db  20h
		db    3
		db 0C0h	; À
		db    0
		db  80h	; 
		db    0
		db  80h	; 
		db    0
		db  80h	; 
		db    0
		db 0F8h	; ø
		db    7
		db 0C0h	; À
		db    0
		db  40h	; @
		db    0
		db  40h	; @
		db    0
		db  40h	; @
		db    2
		db    0
		db    1
		db    8
		db    0
		db  90h	; 
		db    0
		db 0E0h	; à
		db    1
		db 0C0h	; À
		db    2
		db  40h	; @
		db    4
		db  20h
		db    0
		db  10h
		db    0
		db    0
		db    2
		db  10h
		db    1
		db  20h
		db    0
		db 0C0h	; À
		db    0
		db 0C0h	; À
		db    1
		db  20h
		db    2
		db  10h
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db  20h
		db    0
		db 0C0h	; À
		db    0
		db 0C0h	; À
		db    1
		db  20h
		db    0
		db    0
		db    0
		db    0
		db    2
		db    0
		db    1
		db    8
		db    0
		db  90h	; 
		db    0
		db 0E0h	; à
		db    1
		db 0C0h	; À
		db    2
		db  40h	; @
		db    4
		db  20h
		db    0
		db  10h
		db    0
		db    0
		db    2
		db  10h
		db    1
		db  20h
		db    0
		db 0C0h	; À
		db    0
		db 0C0h	; À
		db    1
		db  20h
		db    2
		db  10h
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db  20h
		db    0
		db 0C0h	; À
		db    0
		db 0C0h	; À
		db    1
		db  20h
		db    0
		db    0
		db    0
		db    0
		db    1
		db 0E0h	; à
		db    2
		db  10h
		db    4
		db    8
		db    4
		db 0C8h	; È
		db    4
		db 0C8h	; È
		db    4
		db    8
		db    2
		db  10h
		db    1
		db 0E0h	; à
		db    0
		db  40h	; @
		db    0
		db  40h	; @
		db    0
		db  40h	; @
		db    0
		db  7Ch	; |
		db    3
		db 0E0h	; à
		db    0
		db  20h
		db    0
		db  20h
		db    0
		db  20h
		db    1
		db    0
		db    0
		db  84h	; 
		db    0
		db  48h	; H
		db    0
		db  70h	; p
		db    0
		db 0E0h	; à
		db    1
		db  20h
		db    2
		db  10h
		db    0
		db    8
		db    0
		db    0
		db    1
		db    8
		db    0
		db  90h	; 
		db    0
		db  60h	; `
		db    0
		db  60h	; `
		db    0
		db  90h	; 
		db    1
		db    8
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  90h	; 
		db    0
		db  60h	; `
		db    0
		db  60h	; `
		db    0
		db  90h	; 
		db    0
		db    0
		db    0
		db    0
		db    1
		db    0
		db    0
		db  84h	; 
		db    0
		db  48h	; H
		db    0
		db  70h	; p
		db    0
		db 0E0h	; à
		db    1
		db  20h
		db    2
		db  10h
		db    0
		db    8
		db    0
		db    0
		db    1
		db    8
		db    0
		db  90h	; 
		db    0
		db  60h	; `
		db    0
		db  60h	; `
		db    0
		db  90h	; 
		db    1
		db    8
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  90h	; 
		db    0
		db  60h	; `
		db    0
		db  60h	; `
		db    0
		db  90h	; 
		db    0
		db    0
		db    0
		db    0
		db    0
		db 0F0h	; ð
		db    1
		db    8
		db    2
		db    4
		db    2
		db  64h	; d
		db    2
		db  64h	; d
		db    2
		db    4
		db    1
		db    8
		db    0
		db 0F0h	; ð
		db    0
		db  20h
		db    0
		db  20h
		db    0
		db  20h
		db    0
		db  3Eh	; >
		db    1
		db 0F0h	; ð
		db    0
		db  10h
		db    0
		db  10h
		db    0
		db  10h
		db    0
		db  80h	; 
		db    0
		db  42h	; B
		db    0
		db  24h	; $
		db    0
		db  38h	; 8
		db    0
		db  70h	; p
		db    0
		db  90h	; 
		db    1
		db    8
		db    0
		db    4
		db    0
		db    0
		db    0
		db  84h	; 
		db    0
		db  48h	; H
		db    0
		db  30h	; 0
		db    0
		db  30h	; 0
		db    0
		db  48h	; H
		db    0
		db  84h	; 
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  48h	; H
		db    0
		db  30h	; 0
		db    0
		db  30h	; 0
		db    0
		db  48h	; H
		db    0
		db    0
		db    0
		db    0
		db    0
		db  80h	; 
		db    0
		db  42h	; B
		db    0
		db  24h	; $
		db    0
		db  38h	; 8
		db    0
		db  70h	; p
		db    0
		db  90h	; 
		db    1
		db    8
		db    0
		db    4
		db    0
		db    0
		db    0
		db  84h	; 
		db    0
		db  48h	; H
		db    0
		db  30h	; 0
		db    0
		db  30h	; 0
		db    0
		db  48h	; H
		db    0
		db  84h	; 
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  48h	; H
		db    0
		db  30h	; 0
		db    0
		db  30h	; 0
		db    0
		db  48h	; H
		db    0
		db    0
		db    0
		db    0
		db    0
		db  78h	; x
		db    0
		db  84h	; 
		db    1
		db    2
		db    1
		db  32h	; 2
		db    1
		db  32h	; 2
		db    1
		db    2
		db    0
		db  84h	; 
		db    0
		db  78h	; x
		db 0C0h	; À
		db    0
		db    0
		db    0
		db 0C0h	; À
		db    0
		db    4
		db    0
		db 0C0h	; À
		db    0
		db    9
		db    0
		db 0BFh	; ¿
		db    0
		db  0Eh
		db    0
		db 0BFh	; ¿
		db    0
		db  12h
		db    0
		db 0BEh	; ¾
		db    0
		db  17h
		db    0
		db 0BDh	; ½
		db    0
		db  1Ch
		db    0
		db 0BDh	; ½
		db    0
		db  21h	; !
		db    0
		db 0BCh	; ¼
		db    0
		db  25h	; %
		db    0
		db 0BBh	; »
		db    0
		db  2Ah	; *
		db    0
		db 0BAh	; º
		db    0
		db  2Eh	; .
		db    0
		db 0B9h	; ¹
		db    0
		db  33h	; 3
		db    0
		db 0B7h	; ·
		db    0
		db  37h	; 7
		db    0
		db 0B6h	; ¶
		db    0
		db  3Ch	; <
		db    0
		db 0B4h	; ´
		db    0
		db  40h	; @
		db    0
		db 0B3h	; ³
		db    0
		db  45h	; E
		db    0
		db 0B1h	; ±
		db    0
		db  49h	; I
		db    0
		db 0AFh	; ¯
		db    0
		db  4Eh	; N
		db    0
		db 0ADh	; ­
		db    0
		db  51h	; Q
		db    0
		db 0ABh	; «
		db    0
		db  56h	; V
		db    0
		db 0A9h	; ©
		db    0
		db  5Ah	; Z
		db    0
		db 0A7h	; §
		db    0
		db  5Eh	; ^
		db    0
		db 0A5h	; ¥
		db    0
		db  63h	; c
		db    0
		db 0A2h	; ¢
		db    0
		db  66h	; f
		db    0
		db  9Fh	; 
		db    0
		db  6Ah	; j
		db    0
		db  9Ch	; 
		db    0
		db  6Eh	; n
		db    0
		db  9Ah	; 
		db    0
		db  72h	; r
		db    0
		db  97h	; 
		db    0
		db  75h	; u
		db    0
		db  94h	; 
		db    0
		db  79h	; y
		db    0
		db  91h	; 
		db    0
		db  7Dh	; }
		db    0
		db  8Eh	; 
		db    0
		db  81h	; 
		db    0
		db  8Ah	; 
		db    0
		db  84h	; 
		db    0
		db  87h	; 
		db    0
		db  87h	; 
		db    0
		db  84h	; 
		db    0
		db  8Ah	; 
		db    0
		db  81h	; 
		db    0
		db  8Eh	; 
		db    0
		db  7Dh	; }
		db    0
		db  91h	; 
		db    0
		db  79h	; y
		db    0
		db  94h	; 
		db    0
		db  75h	; u
		db    0
		db  97h	; 
		db    0
		db  72h	; r
		db    0
		db  9Ah	; 
		db    0
		db  6Eh	; n
		db    0
		db  9Ch	; 
		db    0
		db  6Ah	; j
		db    0
		db  9Fh	; 
		db    0
		db  66h	; f
		db    0
		db 0A2h	; ¢
		db    0
		db  63h	; c
		db    0
		db 0A5h	; ¥
		db    0
		db  5Eh	; ^
		db    0
		db 0A7h	; §
		db    0
		db  5Ah	; Z
		db    0
		db 0A9h	; ©
		db    0
		db  56h	; V
		db    0
		db 0ABh	; «
		db    0
		db  51h	; Q
		db    0
		db 0ADh	; ­
		db    0
		db  4Eh	; N
		db    0
		db 0AFh	; ¯
		db    0
		db  49h	; I
		db    0
		db 0B1h	; ±
		db    0
		db  45h	; E
		db    0
		db 0B3h	; ³
		db    0
		db  40h	; @
		db    0
		db 0B4h	; ´
		db    0
		db  3Ch	; <
		db    0
		db 0B6h	; ¶
		db    0
		db  37h	; 7
		db    0
		db 0B7h	; ·
		db    0
		db  33h	; 3
		db    0
		db 0B9h	; ¹
		db    0
		db  2Eh	; .
		db    0
		db 0BAh	; º
		db    0
		db  2Ah	; *
		db    0
		db 0BBh	; »
		db    0
		db  25h	; %
		db    0
		db 0BCh	; ¼
		db    0
		db  21h	; !
		db    0
		db 0BDh	; ½
		db    0
		db  1Ch
		db    0
		db 0BDh	; ½
		db    0
		db  17h
		db    0
		db 0BEh	; ¾
		db    0
		db  12h
		db    0
		db 0BFh	; ¿
		db    0
		db  0Eh
		db    0
		db 0BFh	; ¿
		db    0
		db    9
		db    0
		db 0C0h	; À
		db    0
		db    4
		db    0
		db 0C0h	; À
		db    0
		db    0
		db    0
		db 0C0h	; À
		db    0
		db 0FBh	; û
		db 0FFh
		db 0C0h	; À
		db    0
		db 0F6h	; ö
		db 0FFh
		db 0C0h	; À
		db    0
		db 0F1h	; ñ
		db 0FFh
		db 0BFh	; ¿
		db    0
		db 0EDh	; í
		db 0FFh
		db 0BFh	; ¿
		db    0
		db 0E8h	; è
		db 0FFh
		db 0BEh	; ¾
		db    0
		db 0E3h	; ã
		db 0FFh
		db 0BDh	; ½
		db    0
		db 0DFh	; ß
		db 0FFh
		db 0BDh	; ½
		db    0
		db 0DAh	; Ú
		db 0FFh
		db 0BCh	; ¼
		db    0
		db 0D6h	; Ö
		db 0FFh
		db 0BBh	; »
		db    0
		db 0D1h	; Ñ
		db 0FFh
		db 0BAh	; º
		db    0
		db 0CDh	; Í
		db 0FFh
		db 0B9h	; ¹
		db    0
		db 0C8h	; È
		db 0FFh
		db 0B7h	; ·
		db    0
		db 0C4h	; Ä
		db 0FFh
		db 0B6h	; ¶
		db    0
		db 0BFh	; ¿
		db 0FFh
		db 0B4h	; ´
		db    0
		db 0BBh	; »
		db 0FFh
		db 0B3h	; ³
		db    0
		db 0B6h	; ¶
		db 0FFh
		db 0B1h	; ±
		db    0
		db 0B2h	; ²
		db 0FFh
		db 0AFh	; ¯
		db    0
		db 0AEh	; ®
		db 0FFh
		db 0ADh	; ­
		db    0
		db 0A9h	; ©
		db 0FFh
		db 0ABh	; «
		db    0
		db 0A5h	; ¥
		db 0FFh
		db 0A9h	; ©
		db    0
		db 0A1h	; ¡
		db 0FFh
		db 0A7h	; §
		db    0
		db  9Dh	; 
		db 0FFh
		db 0A5h	; ¥
		db    0
		db  99h	; 
		db 0FFh
		db 0A2h	; ¢
		db    0
		db  95h	; 
		db 0FFh
		db  9Fh	; 
		db    0
		db  91h	; 
		db 0FFh
		db  9Ch	; 
		db    0
		db  8Eh	; 
		db 0FFh
		db  9Ah	; 
		db    0
		db  8Ah	; 
		db 0FFh
		db  97h	; 
		db    0
		dw 0FF86h
		db  94h	; 
		db    0
		db  82h	; 
		db 0FFh
		db  91h	; 
		db    0
		db  7Fh	; 
		db 0FFh
		db  8Eh	; 
		db    0
		db  7Bh	; {
		db 0FFh
		db  8Ah	; 
		db    0
		db  78h	; x
		db 0FFh
		db  87h	; 
		db    0
		db  75h	; u
		db 0FFh
		db  84h	; 
		db    0
		db  71h	; q
		db 0FFh
		db  81h	; 
		db    0
		db  6Eh	; n
		db 0FFh
		db  7Dh	; }
		db    0
		db  6Bh	; k
		db 0FFh
		db  79h	; y
		db    0
		db  68h	; h
		db 0FFh
		db  75h	; u
		db    0
		db  65h	; e
		db 0FFh
		db  72h	; r
		db    0
		db  63h	; c
		db 0FFh
		db  6Eh	; n
		db    0
		db  60h	; `
		db 0FFh
		db  6Ah	; j
		db    0
		db  5Eh	; ^
		db 0FFh
		db  66h	; f
		db    0
		db  5Bh	; [
		db 0FFh
		db  63h	; c
		db    0
		db  58h	; X
		db 0FFh
		db  5Eh	; ^
		db    0
		db  56h	; V
		db 0FFh
		db  5Ah	; Z
		db    0
		db  54h	; T
		db 0FFh
		db  56h	; V
		db    0
		db  52h	; R
		db 0FFh
		db  51h	; Q
		db    0
		db  50h	; P
		db 0FFh
		db  4Eh	; N
		db    0
		db  4Eh	; N
		db 0FFh
		db  49h	; I
		db    0
		db  4Ch	; L
		db 0FFh
		db  45h	; E
		db    0
		db  4Bh	; K
		db 0FFh
		db  40h	; @
		db    0
		db  49h	; I
		db 0FFh
		db  3Ch	; <
		db    0
		db  48h	; H
		db 0FFh
		db  37h	; 7
		db    0
		db  46h	; F
		db 0FFh
		db  33h	; 3
		db    0
		db  46h	; F
		db 0FFh
		db  2Eh	; .
		db    0
		db  44h	; D
		db 0FFh
		db  2Ah	; *
		db    0
		db  43h	; C
		db 0FFh
		db  25h	; %
		db    0
		db  43h	; C
		db 0FFh
		db  21h	; !
		db    0
		db  42h	; B
		db 0FFh
		db  1Ch
		db    0
		db  41h	; A
		db 0FFh
		db  17h
		db    0
		db  40h	; @
		db 0FFh
		db  12h
		db    0
		db  40h	; @
		db 0FFh
		db  0Eh
		db    0
		db  40h	; @
		db 0FFh
		db    9
		db    0
		db  40h	; @
		db 0FFh
		db    4
		db    0
		db  40h	; @
		db 0FFh
		db    0
		db    0
		db  40h	; @
		db 0FFh
		db 0FBh	; û
		db 0FFh
		db  40h	; @
		db 0FFh
		db 0F6h	; ö
		db 0FFh
		db  40h	; @
		db 0FFh
		db 0F1h	; ñ
		db 0FFh
		db  40h	; @
		db 0FFh
		db 0EDh	; í
		db 0FFh
		db  41h	; A
		db 0FFh
		db 0E8h	; è
		db 0FFh
		db  42h	; B
		db 0FFh
		db 0E3h	; ã
		db 0FFh
		db  43h	; C
		db 0FFh
		db 0DFh	; ß
		db 0FFh
		db  43h	; C
		db 0FFh
		db 0DAh	; Ú
		db 0FFh
		db  44h	; D
		db 0FFh
		db 0D6h	; Ö
		db 0FFh
		db  46h	; F
		db 0FFh
		db 0D1h	; Ñ
		db 0FFh
		db  46h	; F
		db 0FFh
		db 0CDh	; Í
		db 0FFh
		db  48h	; H
		db 0FFh
		db 0C8h	; È
		db 0FFh
		db  49h	; I
		db 0FFh
		db 0C4h	; Ä
		db 0FFh
		db  4Bh	; K
		db 0FFh
		db 0BFh	; ¿
		db 0FFh
		db  4Ch	; L
		db 0FFh
		db 0BBh	; »
		db 0FFh
		db  4Eh	; N
		db 0FFh
		db 0B6h	; ¶
		db 0FFh
		db  50h	; P
		db 0FFh
		db 0B2h	; ²
		db 0FFh
		db  52h	; R
		db 0FFh
		db 0AEh	; ®
		db 0FFh
		db  54h	; T
		db 0FFh
		db 0A9h	; ©
		db 0FFh
		db  56h	; V
		db 0FFh
		db 0A5h	; ¥
		db 0FFh
		db  58h	; X
		db 0FFh
		db 0A1h	; ¡
		db 0FFh
		db  5Bh	; [
		db 0FFh
		db  9Dh	; 
		db 0FFh
		db  5Eh	; ^
		db 0FFh
		db  99h	; 
		db 0FFh
		db  60h	; `
		db 0FFh
		db  95h	; 
		db 0FFh
		db  63h	; c
		db 0FFh
		db  91h	; 
		db 0FFh
		db  65h	; e
		db 0FFh
		db  8Eh	; 
		db 0FFh
		db  68h	; h
		db 0FFh
		db  8Ah	; 
		db 0FFh
		db  6Bh	; k
		db 0FFh
		db  86h	; 
		db 0FFh
		db  6Eh	; n
		db 0FFh
		db  82h	; 
		db 0FFh
		db  71h	; q
		db 0FFh
		db  7Fh	; 
		db 0FFh
		db  75h	; u
		db 0FFh
		db  7Bh	; {
		db 0FFh
		db  78h	; x
		db 0FFh
		db  78h	; x
		db 0FFh
		db  7Bh	; {
		db 0FFh
		db  75h	; u
		db 0FFh
		db  7Fh	; 
		db 0FFh
		db  71h	; q
		db 0FFh
		db  82h	; 
		db 0FFh
		db  6Eh	; n
		db 0FFh
		db  86h	; 
		db 0FFh
		db  6Bh	; k
		db 0FFh
		db  8Ah	; 
		db 0FFh
		db  68h	; h
		db 0FFh
		db  8Eh	; 
		db 0FFh
		db  65h	; e
		db 0FFh
		db  91h	; 
		db 0FFh
		db  63h	; c
		db 0FFh
		db  95h	; 
		db 0FFh
		db  60h	; `
		db 0FFh
		db  99h	; 
		db 0FFh
		db  5Eh	; ^
		db 0FFh
		db  9Dh	; 
		db 0FFh
		db  5Bh	; [
		db 0FFh
		db 0A1h	; ¡
		db 0FFh
		db  58h	; X
		db 0FFh
		db 0A5h	; ¥
		db 0FFh
		db  56h	; V
		db 0FFh
		db 0A9h	; ©
		db 0FFh
		db  54h	; T
		db 0FFh
		db 0AEh	; ®
		db 0FFh
		db  52h	; R
		db 0FFh
		db 0B2h	; ²
		db 0FFh
		db  50h	; P
		db 0FFh
		db 0B6h	; ¶
		db 0FFh
		db  4Eh	; N
		db 0FFh
		db 0BBh	; »
		db 0FFh
		db  4Ch	; L
		db 0FFh
		db 0BFh	; ¿
		db 0FFh
		db  4Bh	; K
		db 0FFh
		db 0C4h	; Ä
		db 0FFh
		db  49h	; I
		db 0FFh
		db 0C8h	; È
		db 0FFh
		db  48h	; H
		db 0FFh
		db 0CDh	; Í
		db 0FFh
		db  46h	; F
		db 0FFh
		db 0D1h	; Ñ
		db 0FFh
		db  46h	; F
		db 0FFh
		db 0D6h	; Ö
		db 0FFh
		db  44h	; D
		db 0FFh
		db 0DAh	; Ú
		db 0FFh
		db  43h	; C
		db 0FFh
		db 0DFh	; ß
		db 0FFh
		db  43h	; C
		db 0FFh
		db 0E3h	; ã
		db 0FFh
		db  42h	; B
		db 0FFh
		db 0E8h	; è
		db 0FFh
		db  41h	; A
		db 0FFh
		db 0EDh	; í
		db 0FFh
		db  40h	; @
		db 0FFh
		db 0F1h	; ñ
		db 0FFh
		db  40h	; @
		db 0FFh
		db 0F6h	; ö
		db 0FFh
		db  40h	; @
		db 0FFh
		db 0FBh	; û
		db 0FFh
		db  40h	; @
		db 0FFh
		db    0
		db    0
		db  40h	; @
		db 0FFh
		db    4
		db    0
		db  40h	; @
		db 0FFh
		db    9
		db    0
		db  40h	; @
		db 0FFh
		db  0Eh
		db    0
		db  40h	; @
		db 0FFh
		db  12h
		db    0
		db  40h	; @
		db 0FFh
		db  17h
		db    0
		db  41h	; A
		db 0FFh
		db  1Ch
		db    0
		db  42h	; B
		db 0FFh
		db  21h	; !
		db    0
		db  43h	; C
		db 0FFh
		db  25h	; %
		db    0
		db  43h	; C
		db 0FFh
		db  2Ah	; *
		db    0
		db  44h	; D
		db 0FFh
		db  2Eh	; .
		db    0
		db  46h	; F
		db 0FFh
		db  33h	; 3
		db    0
		db  46h	; F
		db 0FFh
		db  37h	; 7
		db    0
		db  48h	; H
		db 0FFh
		db  3Ch	; <
		db    0
		db  49h	; I
		db 0FFh
		db  40h	; @
		db    0
		db  4Bh	; K
		db 0FFh
		db  45h	; E
		db    0
		db  4Ch	; L
		db 0FFh
		db  49h	; I
		db    0
		db  4Eh	; N
		db 0FFh
		db  4Eh	; N
		db    0
		db  50h	; P
		db 0FFh
		db  51h	; Q
		db    0
		db  52h	; R
		db 0FFh
		db  56h	; V
		db    0
		db  54h	; T
		db 0FFh
		db  5Ah	; Z
		db    0
		db  56h	; V
		db 0FFh
		db  5Eh	; ^
		db    0
		db  58h	; X
		db 0FFh
		db  63h	; c
		db    0
		db  5Bh	; [
		db 0FFh
		db  66h	; f
		db    0
		db  5Eh	; ^
		db 0FFh
		db  6Ah	; j
		db    0
		db  60h	; `
		db 0FFh
		db  6Eh	; n
		db    0
		db  63h	; c
		db 0FFh
		db  72h	; r
		db    0
		db  65h	; e
		db 0FFh
		db  75h	; u
		db    0
		db  68h	; h
		db 0FFh
		db  79h	; y
		db    0
		db  6Bh	; k
		db 0FFh
		db  7Dh	; }
		db    0
		db  6Eh	; n
		db 0FFh
		db  81h	; 
		db    0
		db  71h	; q
		db 0FFh
		db  84h	; 
		db    0
		db  75h	; u
		db 0FFh
		db  87h	; 
		db    0
		db  78h	; x
		db 0FFh
		db  8Ah	; 
		db    0
		db  7Bh	; {
		db 0FFh
		db  8Eh	; 
		db    0
		db  7Fh	; 
		db 0FFh
		db  91h	; 
		db    0
		db  82h	; 
		db 0FFh
		db  94h	; 
		db    0
		db  86h	; 
		db 0FFh
		db  97h	; 
		db    0
		db  8Ah	; 
		db 0FFh
		db  9Ah	; 
		db    0
		db  8Eh	; 
		db 0FFh
		db  9Ch	; 
		db    0
		db  91h	; 
		db 0FFh
		db  9Fh	; 
		db    0
		db  95h	; 
		db 0FFh
		db 0A2h	; ¢
		db    0
		db  99h	; 
		db 0FFh
		db 0A5h	; ¥
		db    0
		db  9Dh	; 
		db 0FFh
		db 0A7h	; §
		db    0
		db 0A1h	; ¡
		db 0FFh
		db 0A9h	; ©
		db    0
		db 0A5h	; ¥
		db 0FFh
		db 0ABh	; «
		db    0
		db 0A9h	; ©
		db 0FFh
		db 0ADh	; ­
		db    0
		db 0AEh	; ®
		db 0FFh
		db 0AFh	; ¯
		db    0
		db 0B2h	; ²
		db 0FFh
		db 0B1h	; ±
		db    0
		db 0B6h	; ¶
		db 0FFh
		db 0B3h	; ³
		db    0
		db 0BBh	; »
		db 0FFh
		db 0B4h	; ´
		db    0
		db 0BFh	; ¿
		db 0FFh
		db 0B6h	; ¶
		db    0
		db 0C4h	; Ä
		db 0FFh
		db 0B7h	; ·
		db    0
		db 0C8h	; È
		db 0FFh
		db 0B9h	; ¹
		db    0
		db 0CDh	; Í
		db 0FFh
		db 0BAh	; º
		db    0
		db 0D1h	; Ñ
		db 0FFh
		db 0BBh	; »
		db    0
		db 0D6h	; Ö
		db 0FFh
		db 0BCh	; ¼
		db    0
		db 0DAh	; Ú
		db 0FFh
		db 0BDh	; ½
		db    0
		db 0DFh	; ß
		db 0FFh
		db 0BDh	; ½
		db    0
		db 0E3h	; ã
		db 0FFh
		db 0BEh	; ¾
		db    0
		db 0E8h	; è
		db 0FFh
		db 0BFh	; ¿
		db    0
		db 0EDh	; í
		db 0FFh
		db 0BFh	; ¿
		db    0
		db 0F1h	; ñ
		db 0FFh
		db 0C0h	; À
		db    0
		db 0F6h	; ö
		db 0FFh
		db 0C0h	; À
		db    0
		db 0FBh	; û
		db 0FFh
		db  18h
		db  68h	; h
		db  98h	; 
		db 0E8h	; è
		db    0
		db  60h	; `
		db 0A0h	;  
		db  40h	; @
		db 0E0h	; à
		db  80h	; 
		db  20h
		db  60h	; `
		db  3Ch	; <
		db    0
		db  7Eh	; ~
		db    0
		db 0FFh
		db    0
		db 0FFh
		db    0
		db 0FFh
		db    0
		db 0FFh
		db    0
		db  7Eh	; ~
		db    0
		db  3Ch	; <
		db    0
		db  1Eh
		db    0
		db  3Fh	; ?
		db    0
		db  7Fh	; 
		db  80h	; 
		db  7Fh	; 
		db  80h	; 
		db  7Fh	; 
		db  80h	; 
		db  7Fh	; 
		db  80h	; 
		db  3Fh	; ?
		db    0
		db  1Eh
		db    0
		db  0Fh
		db    0
		db  1Fh
		db  80h	; 
		db  3Fh	; ?
		db 0C0h	; À
		db  3Fh	; ?
		db 0C0h	; À
		db  3Fh	; ?
		db 0C0h	; À
		db  3Fh	; ?
		db 0C0h	; À
		db  1Fh
		db  80h	; 
		db  0Fh
		db    0
		db    7
		db  80h	; 
		db  0Fh
		db 0C0h	; À
		db  1Fh
		db 0E0h	; à
		db  1Fh
		db 0E0h	; à
		db  1Fh
		db 0E0h	; à
		db  1Fh
		db 0E0h	; à
		db  0Fh
		db 0C0h	; À
		db    7
		db  80h	; 
		db    3
		db 0C0h	; À
		db    7
		db 0E0h	; à
		db  0Fh
		db 0F0h	; ð
		db  0Fh
		db 0F0h	; ð
		db  0Fh
		db 0F0h	; ð
		db  0Fh
		db 0F0h	; ð
		db    7
		db 0E0h	; à
		db    3
		db 0C0h	; À
		db    1
		db 0E0h	; à
		db    3
		db 0F0h	; ð
		db    7
		db 0F8h	; ø
		db    7
		db 0F8h	; ø
		db    7
		db 0F8h	; ø
		db    7
		db 0F8h	; ø
		db    3
		db 0F0h	; ð
		db    1
		db 0E0h	; à
		db    0
		db 0F0h	; ð
		db    1
		db 0F8h	; ø
		db    3
		db 0FCh	; ü
		db    3
		db 0FCh	; ü
		db    3
		db 0FCh	; ü
		db    3
		db 0FCh	; ü
		db    1
		db 0F8h	; ø
		db    0
		db 0F0h	; ð
		db    0
		db  78h	; x
		db    0
		db 0FCh	; ü
		db    1
		db 0FEh	; þ
		db    1
		db 0FEh	; þ
		db    1
		db 0FEh	; þ
		db    1
		db 0FEh	; þ
		db    0
		db 0FCh	; ü
		db    0
		db  78h	; x
		db    1
		db    0
		db  83h	; 
		db    0
		db  7Eh	; ~
		db    0
		db  3Ch	; <
		db    0
		db    0
		db  80h	; 
		db  41h	; A
		db  80h	; 
		db  3Fh	; ?
		db    0
		db  1Eh
		db    0
		db    0
		db  40h	; @
		db  20h
		db 0C0h	; À
		db  1Fh
		db  80h	; 
		db  0Fh
		db    0
		db    0
		db  20h
		db  10h
		db  60h	; `
		db  0Fh
		db 0C0h	; À
		db    7
		db  80h	; 
		db    0
		db  10h
		db    8
		db  30h	; 0
		db    7
		db 0E0h	; à
		db    3
		db 0C0h	; À
		db    0
		db    8
		db    4
		db  18h
		db    3
		db 0F0h	; ð
		db    1
		db 0E0h	; à
		db    0
		db    4
		db    2
		db  0Ch
		db    1
		db 0F8h	; ø
		db    0
		db 0F0h	; ð
		db    0
		db    2
		db    1
		db    6
		db    0
		db 0FCh	; ü
		db    0
		db  78h	; x
byte_22B9C	db 0			; DATA XREF: seg001:loc_CDA4w
					; seg001:loc_CDE5w ...
		db 0
byte_22B9E	db 1			; DATA XREF: sub_15027:loc_15062w
					; sub_15027+5Cr
		db 0
dword_22BA0	dd 0			; DATA XREF: sub_AB88+D2w sub_E7FD+4Br
dword_22BA4	dd 0			; DATA XREF: sub_AB88+D7w sub_E7FD+54r
word_22BA8	dw 0			; DATA XREF: seg001:loc_CFB6w
					; sub_E7FD+1Ar
off_22BAA	dd a_dm00_txt		; DATA XREF: sub_CED4+Br sub_CED4+1Br	...
					; "_DM00.TXT"
off_22BAE	dd a_dm04b_txt		; DATA XREF: sub_CF01+Br sub_CF01+13r
					; "_DM04B.txt"
		db  88h	; 
		db  88h	; 
		db  44h	; D
		db  44h	; D
		db  22h	; "
		db  22h	; "
		db  11h
		db  11h
		db 0CCh	; Ì
		db 0CCh	; Ì
		db  66h	; f
		db  66h	; f
		db  33h	; 3
		db  33h	; 3
		db  99h	; 
		db  99h	; 
		db 0EEh	; î
		db 0EEh	; î
		db  77h	; w
		db  77h	; w
		db 0BBh	; »
		db 0BBh	; »
		db 0DDh	; Ý
		db 0DDh	; Ý
byte_22BCA	db 0			; DATA XREF: sub_D7EE+2Er sub_D7EE+31w
a_dm00_txt	db '_DM00.TXT',0        ; DATA XREF: dseg:off_22BAAo
a_dm04b_txt	db '_DM04B.txt',0       ; DATA XREF: dseg:off_22BAEo
		db '  ',0
aKao0_cd2_0	db 'KAO0.cd2',0         ; DATA XREF: sub_D729+B1o
aKao1_cd2_0	db 'KAO1.cd2',0         ; DATA XREF: sub_D729+B9o
aBss7_cd2	db 'bss7.cd2',0         ; DATA XREF: sub_D7EE+3Co
aBss8_cd2	db 'bss8.cd2',0         ; DATA XREF: sub_D7EE+44o
aBb0_cdg	db 'bb0.cdg',0          ; DATA XREF: sub_D7EE+88o
aBb1_cdg	db 'bb1.cdg',0          ; DATA XREF: sub_D7EE+90o
		db    0
word_22C18	dw 0			; DATA XREF: sub_D955:loc_D9FFw
					; sub_D955+AEr	...
byte_22C1A	db 0			; DATA XREF: sub_DAA6+2Fw sub_DAA6+3Bw ...
		db    0
aKOO		db '°ª¶®¸¿®»',0         ; DATA XREF: sub_E541+BBo
		db    0
aMO		db '¬¸·½²·¾®',8,0       ; DATA XREF: sub_E67A+2Co
		db    0
aO		db 'Â®¼',0              ; DATA XREF: sub_E67A+3Eo sub_E67A+BEo
asc_22C35	db '·¸',0               ; DATA XREF: sub_E67A+50o sub_E67A+E2o
aMOn		db '¬»®­²½',0           ; DATA XREF: sub_E67A+62o
asc_22C3F	db '  ',0               ; DATA XREF: sub_E541+65o
asc_22C42	db '  ',0               ; DATA XREF: sub_E541+9Fo
; char aMaine_2[]
aMaine_2	db 'maine',0            ; DATA XREF: sub_E541+12Co
		db    0
		db 'H',0
		db 'H',0
		db 'H',0
aJsh		db 'JsH',0
aJsh_0		db 'JsH',0
		db 'H',0
		db 'H',0
		db 'H',0
		db 'H',0
		db 'H',0
		db 'H',0
		db 'H',0
		db 'H',0
		db 'H',0
		db 'H',0
		db 'H',0
aJxh		db 'JxH',0
aJxh_0		db 'JxH',0
		db 'H',0
		db 'H',0
aJ7j2jL		db 'J7J2J-L',0
aJL		db 'J-L',0
		db  4Ah	; J
		db  2Dh	; -
		db  4Ah	; J
		db  2Dh	; -
		db  4Ah	; J
		db  2Dh	; -
		db  4Ah	; J
		db  2Dh	; -
		db  4Ah	; J
		db  2Dh	; -
		db  4Ah	; J
		db  2Dh	; -
		db  4Ah	; J
		db  2Dh	; -
		db  4Ah	; J
		db  2Dh	; -
		db  4Ah	; J
		db  2Dh	; -
		db  4Ah	; J
		db  2Dh	; -
		db  4Ah	; J
		db  2Dh	; -
		db  4Ah	; J
		db  2Dh	; -
		db  4Ch	; L
		db    5
		db  4Ah	; J
		db  2Dh	; -
		db  4Ch	; L
		db    5
		db  4Ah	; J
		db  2Dh	; -
		db  4Ah	; J
		db  32h	; 2
		db  4Ah	; J
		db  37h	; 7
		db  4Ah	; J
		db  46h	; F
		db  4Ah	; J
		db  41h	; A
		db  4Ah	; J
		db  3Ch	; <
		db  4Ch	; L
		db  0Ah
		db  4Ah	; J
		db  3Ch	; <
		db  4Ch	; L
		db  0Ah
		db  4Ah	; J
		db  3Ch	; <
		db  4Ah	; J
		db  3Ch	; <
		db  4Ah	; J
		db  3Ch	; <
		db  4Ah	; J
		db  3Ch	; <
		db  4Ah	; J
		db  3Ch	; <
		db  4Ah	; J
		db  3Ch	; <
		db  4Ah	; J
		db  3Ch	; <
		db  4Ah	; J
		db  3Ch	; <
		db  4Ah	; J
		db  3Ch	; <
		db  4Ah	; J
		db  3Ch	; <
		db  4Ah	; J
		db  3Ch	; <
		db  4Ah	; J
		db  3Ch	; <
		db  4Ch	; L
		db  0Fh
		db  4Ah	; J
		db  3Ch	; <
		db  4Ch	; L
		db  0Fh
		db  4Ah	; J
		db  3Ch	; <
		db  4Ah	; J
		db  41h	; A
		db  4Ah	; J
		db  46h	; F
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    1
		db    1
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    1
		db    1
		db    0
		db    0
		db    1
		db    1
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    1
		db    1
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db    1
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    1
		db    1
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db    1
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    2
		db    0
		db    1
		db    1
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db    1
		db    2
		db    2
		db    2
		db    2
		db    1
		db    1
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db    1
		db    2
		db    1
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
word_22D9C	dw 0			; DATA XREF: sub_EAE4:loc_EB0Fr
					; sub_EAE4+B5r	...
unk_22D9E	db 0DCh	; Ü		; DATA XREF: sub_16C05+Co
		db    0
		db  90h	; 
		db    1
		db  18h
		db    1
		db 0C2h	; Â
		db    1
byte_22DA6	db 0			; DATA XREF: sub_EE06+Ar sub_EE06+67w	...
byte_22DA7	db 0			; DATA XREF: sub_EEB0+30w
					; sub_116C4:loc_116FDr	...
		db 0AEh	; ®
		db 0AAh	; ª
		db 0BCh	; ¼
		db 0C2h	; Â
		db    2
		db    2
		db    2
		db    0
		db 0B7h	; ·
		db 0B8h	; ¸
		db 0BBh	; »
		db 0B6h	; ¶
		db 0AAh	; ª
		db 0B5h	; µ
		db    2
		db    0
		db 0B1h	; ±
		db 0AAh	; ª
		db 0BBh	; »
		db 0ADh	; ­
		db    2
		db    2
		db    2
		db    0
		db 0B5h	; µ
		db 0BEh	; ¾
		db 0B7h	; ·
		db 0AAh	; ª
		db 0BDh	; ½
		db 0B2h	; ²
		db 0ACh	; ¬
		db    0
		db 0AEh	; ®
		db 0C1h	; Á
		db 0BDh	; ½
		db 0BBh	; »
		db 0AAh	; ª
		db    2
		db    2
		db    0
unk_22DD0	db 0D7h	; ×		; DATA XREF: sub_F204+1Co
		db 0D8h	; Ø
		db 0D9h	; Ù
		db    0
		db    0
asc_22DD5	db 'Ö×ØÙ',0             ; DATA XREF: sub_F204+Ao
asc_22DDA	db 'ÚÛ',0               ; DATA XREF: sub_F204+3Co
		db    0
		db    0
asc_22DDF	db 'ÜÝ',0               ; DATA XREF: sub_F204+6Do
		db 0
		db    0
unk_22DE4	db 0DEh	; Þ		; DATA XREF: sub_F204+D5o
		db 0DFh	; ß
		db    0
		db    0
		db    0
aRs		db 'àá',0               ; DATA XREF: sub_F204+48o
		db    0
		db    0
aTu		db 'âã',0               ; DATA XREF: sub_F204+79o
		db    0
		db    0
aFx		db 'äå',0               ; DATA XREF: sub_F204+E1o
		db 0
		db    0
aI		db 'êëì',0              ; DATA XREF: sub_F0DD+45o
		db    0
		db  41h	; A
		db  41h	; A
		db  41h	; A
		db  61h	; a
		db  61h	; a
		db  21h	; !
		db  81h	; 
		db 0A1h	; ¡
		db 0C1h	; Á
		db 0E1h	; á
word_22E07	dw 202h			; DATA XREF: sub_F0DD+Ar
word_22E09	dw 202h			; DATA XREF: sub_F0DD+10r
word_22E0B	dw 202h			; DATA XREF: sub_F0DD+16r
word_22E0D	dw 202h			; DATA XREF: sub_F0DD+1Cr
byte_22E0F	db 0			; DATA XREF: sub_F0DD+22r
word_22E10	dw 6141h		; DATA XREF: sub_F0DD+28r
word_22E12	dw 0C1A1h		; DATA XREF: sub_F0DD+2Er
byte_22E14	db 0E1h			; DATA XREF: sub_F0DD+34r
word_22E15	dw 3130h		; DATA XREF: sub_F177+Br
word_22E17	dw 3332h		; DATA XREF: sub_F177+11r
word_22E19	dw 3534h		; DATA XREF: sub_F177+17r
word_22E1B	dw 3736h		; DATA XREF: sub_F177+1Dr
byte_22E1D	db 0			; DATA XREF: sub_F177+23r
aB@b@bB@b@	db '@@~@@',0       ; DATA XREF: sub_EEE8+66o
aB@b@bB@b@_0	db '@@~@@',0       ; DATA XREF: sub_EFA1+70o
off_22E34	dd aBb0_bb		; DATA XREF: sub_FF34+Br sub_FF34+1Fr
					; "BB0.BB"
off_22E38	dd aBb0_cdg_1		; DATA XREF: sub_FF34+17r sub_FF34+47r
					; "BB0.CDG"
aBb0_bb		db 'BB0.BB',0           ; DATA XREF: dseg:off_22E34o
aBb0_cdg_1	db 'BB0.CDG',0          ; DATA XREF: dseg:off_22E38o
		db    0
		db  7Ch	; |
		db  48h	; H
		db 0A0h	;  
		db  48h	; H
		db 0D3h	; Ó
		db  48h	; H
		db  63h	; c
		db  49h	; I
		db 0F9h	; ù
		db  49h	; I
		db  95h	; 
		db  4Ah	; J
		db  31h	; 1
		db  4Bh	; K
		db 0CDh	; Í
		db  4Bh	; K
		db  9Fh	; 
		db  4Ch	; L
		db  52h	; R
		db  4Dh	; M
		db  7Ch	; |
		db  48h	; H
		db 0A0h	;  
		db  48h	; H
		db  67h	; g
		db  4Eh	; N
		db 0F6h	; ö
		db  4Eh	; N
		db  8Dh	; 
		db  4Fh	; O
		db  32h	; 2
		db  50h	; P
		db    0
		db  51h	; Q
		db 0CEh	; Î
		db  51h	; Q
		db  9Ch	; 
		db  52h	; R
		db  6Ah	; j
		db  53h	; S
		db  5Fh	; _
		db  2Fh	; /
		db  83h	; 
		db  2Fh	; /
		db  5Ah	; Z
		db  30h	; 0
		db  98h	; 
		db  30h	; 0
		db 0DEh	; Þ
		db  30h	; 0
		db  24h	; $
		db  31h	; 1
		db  70h	; p
		db  31h	; 1
		db 0BDh	; ½
		db  31h	; 1
		db  0Ah
		db  32h	; 2
		db  57h	; W
		db  32h	; 2
		db  5Fh	; _
		db  2Fh	; /
		db  83h	; 
		db  2Fh	; /
		db 0A4h	; ¤
		db  32h	; 2
		db    7
		db  33h	; 3
		db  6Ch	; l
		db  33h	; 3
		db 0E6h	; æ
		db  33h	; 3
		db  66h	; f
		db  34h	; 4
		db 0FAh	; ú
		db  34h	; 4
		db  8Eh	; 
		db  35h	; 5
		db  40h	; @
		db  36h	; 6
byte_22E9C	db 0			; DATA XREF: sub_105B9:loc_1067Er
					; sub_1E5D8+4w	...
		db    0
word_22E9E	dw 0			; DATA XREF: sub_E7FD+3Dr
					; sub_1554F:loc_15586w	...
word_22EA0	dw 0			; DATA XREF: sub_E7FD+44r
					; sub_17E59+12Ew
byte_22EA2	db 0			; DATA XREF: seg001:62B9r
					; seg001:loc_10DE5r ...
byte_22EA3	db 0			; DATA XREF: sub_10EED+7r seg001:66A8r ...
byte_22EA4	db 0			; DATA XREF: seg001:67F5r seg001:6822w ...
		db    0
word_22EA6	dw 0			; DATA XREF: sub_C09A+19r sub_11551+Bw ...
unk_22EA8	db 0BCh	; ¼		; DATA XREF: seg001:65AEo
		db 0BDh	; ½
		db 0AAh	; ª
		db 0B0h	; °
		db 0AEh	; ®
		db    2
byte_22EAE	db 0A1h			; DATA XREF: seg001:657Ew
		db    0
unk_22EB0	db 0AFh	; ¯		; DATA XREF: seg001:658Fo
		db 0B2h	; ²
		db 0B7h	; ·
		db 0AAh	; ª
		db 0B5h	; µ
		db    2
		db 0BCh	; ¼
		db 0BDh	; ½
		db 0AAh	; ª
		db 0B0h	; °
		db 0AEh	; ®
		db    0
unk_22EBC	db 0AEh	; ®		; DATA XREF: seg001:65A2o
		db 0C1h	; Á
		db 0BDh	; ½
		db 0BBh	; »
		db 0AAh	; ª
		db    2
		db 0BCh	; ¼
		db 0BDh	; ½
		db 0AAh	; ª
		db 0B0h	; °
		db 0AEh	; ®
		db    0
a@abcdefg	db '@ABCDEFG',0         ; DATA XREF: dseg:1BA6o
aHijkl		db 'HIJKL',0            ; DATA XREF: dseg:1BAAo
aXyz		db 'XYZ[',0             ; DATA XREF: dseg:1BAEo
aPqrstuvw	db 'PQRSTUVW',0         ; DATA XREF: dseg:1BB2o
		db    0
		dd a@abcdefg		; "@ABCDEFG"
		dd aHijkl		; "HIJKL"
		dd aXyz			; "XYZ["
		dd aPqrstuvw		; "PQRSTUVW"
byte_22EF6	db 0			; DATA XREF: sub_10EA5:loc_10ED1r
					; seg001:645Cw	...
		db 0
off_22EF8	dd asc_22F6A		; DATA XREF: seg001:6802r seg001:6815r ...
					; "					  "...
STAGE_TITLE		dd aMCB@bPhantomLa	; "¶ì@` Phantom Land "
		dd aMCsb@bPhantomN	; "¶é@` Phantom Night"
		dd aMKib@bLakeOfBl	; "Í@` Lake of Blood"
		dd aCChb@bDarkness	; "»H@` Darkness "
		dd aCMB@bDreamOfFr	; "²¶@` Dream of Frail Girl"
		dd aMSzb@bPhantasm	; "¶z@` Phantasmagoria "
		dd aTMvb@bRaspberr	; "Ç@` Raspberry Trap "
		dd aVVVcvVvmnvRViv	; "·Îçµ¢NÉÃ©È÷èð@` Puckish "...
BGM_TITLE		dd aWitchingDream	; "Witching Dream"
		dd aSeleneSLight	; "Selene's light"
		dd aSxp			; "üí@` Decoration Battle"
		dd aBreakTheSabbat	; "Break the Sabbath"
		dd aNglLB@bScarlet	; "g¿È@` Scarlet Phoneme"
		dd aBadApple		; "BAD Apple!!"
		dd aCRab@bPerditio	; "ìí@` Perdition crisis "
		dd aGagkgxgGggxgeg	; "AX}GXe"
		dd aRpvKab@bCasket	; "¯Ìí@` Casket of	Star "
		dd aLotusLove		; "Lotus Love"
		dd aCVVslXB@bSleep	; "°êé°|@` Sleeping Terror"
		dd aDreamLand		; "Dream Land"
		dd aChcB@bInanimat	; "H²@` Inanimate Dream "
		dd aLVVVsv		; "Ö¶´éð¦È¢VY	"
		dd aGbgcghmSzb@bIc	; "Ch¶z@` Icemilk Magic	"
		dd aVivavvvvilcvb@	; "©í¢¢«@` Innocence"
		dd aPnpcuyszlB@bCa	; "­ãYzÈ@` Capriccio "
byte_22F60	db 0ADh			; DATA XREF: seg001:62E3o
		db 0AEh	; ®
		db 0B6h	; ¶
		db 0B8h	; ¸
		db    2
		db 0B9h	; ¹
		db 0B5h	; µ
		db 0AAh	; ª
		db 0C2h	; Â
		db    0
asc_22F6A	db '                                                ',0
					; DATA XREF: dseg:off_22EF8o
aMCB@bPhantomLa	db '¶ì@` Phantom Land ',0 ; DATA XREF: dseg:1BBCo
aMCsb@bPhantomN	db '¶é@` Phantom Night',0 ; DATA XREF: dseg:1BC0o
aMKib@bLakeOfBl	db 'Í@` Lake of Blood',0 ; DATA XREF: dseg:1BC4o
aCChb@bDarkness	db '»H@` Darkness ',0 ; DATA XREF: dseg:1BC8o
aCMB@bDreamOfFr	db '²¶@` Dream of Frail Girl',0 ; DATA XREF: dseg:1BCCo
aMSzb@bPhantasm	db '¶z@` Phantasmagoria ',0 ; DATA XREF: dseg:1BD0o
aTMvb@bRaspberr	db 'Ç@` Raspberry Trap ',0 ; DATA XREF: dseg:1BD4o
aVVVcvVvmnvRViv	db '·Îçµ¢NÉÃ©È÷èð@` Puckish Angel',0 ; DATA XREF: dseg:1BD8o
aWitchingDream	db 'Witching Dream',0   ; DATA XREF: dseg:1BDCo
aSeleneSLight	db 'Selene',27h,'s light',0 ; DATA XREF: dseg:1BE0o
aSxp		db 'üí@` Decoration Battle',0 ; DATA XREF: dseg:1BE4o
aBreakTheSabbat	db 'Break the Sabbath',0 ; DATA XREF: dseg:1BE8o
aNglLB@bScarlet	db 'g¿È@` Scarlet Phoneme',0 ; DATA XREF: dseg:1BECo
aBadApple	db 'BAD Apple!!',0      ; DATA XREF: dseg:1BF0o
aCRab@bPerditio	db 'ìí@` Perdition crisis ',0 ; DATA XREF: dseg:1BF4o
aGagkgxgGggxgeg	db 'AX}GXe',0 ; DATA XREF: dseg:1BF8o
aRpvKab@bCasket	db '¯Ìí@` Casket of Star ',0 ; DATA XREF: dseg:1BFCo
aLotusLove	db 'Lotus Love',0       ; DATA XREF: dseg:1C00o
aCVVslXB@bSleep	db '°êé°|@` Sleeping Terror',0 ; DATA XREF: dseg:1C04o
aDreamLand	db 'Dream Land',0       ; DATA XREF: dseg:1C08o
aChcB@bInanimat	db 'H²@` Inanimate Dream ',0 ; DATA XREF: dseg:1C0Co
aLVVVsv		db 'Ö¶´éð¦È¢VY ',0 ; DATA XREF: dseg:1C10o
aGbgcghmSzb@bIc	db 'Ch¶z@` Icemilk Magic ',0 ; DATA XREF: dseg:1C14o
aVivavvvvilcvb@	db '©í¢¢«@` Innocence',0 ; DATA XREF: dseg:1C18o
aPnpcuyszlB@bCa	db '­ãYzÈ@` Capriccio ',0 ; DATA XREF: dseg:1C1Co
aTxt_bb		db 'txt.bb',0           ; DATA XREF: sub_11551+Fo
aTxt2_bb	db 'txt2.bb',0          ; DATA XREF: sub_11551+2Co
		db    0
word_231F2	dw 10h			; DATA XREF: sub_18044+7r seg003:462Ew ...
		db  10h
		db  27h	; '
		db 0E8h	; è
		db    3
		db  64h	; d
		db    0
		db  0Ah
		db    0
		db    1
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
unk_23206	db    0			; DATA XREF: sub_11692+1Co
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_23210	dw 0			; DATA XREF: sub_19F16:loc_19F4Br
					; sub_19F16+3Bw ...
byte_23212	db 0			; DATA XREF: sub_11A9A+1Br
					; sub_11A9A+20w ...
		db    0
		db  60h	; `
		db    0
		db  70h	; p
		db 0E0h	; à
		db  80h	; 
		db  20h
		db  70h	; p
		db  90h	; 
		db 0F0h	; ð
		db  10h
		db    6
		db    0
		db  0Ch
		db    0
		db  10h
		db    0
		db  18h
		db    0
		db  20h
		db    0
		db  30h	; 0
		db    0			; jumptable 0001F922 case 25248
		db  48h	; H
		db    0
		db  60h	; `
		db    0
		db  80h	; 
		db    0
aMiko_cfg	db 'MIKO.CFG',0         ; DATA XREF: sub_11F96+6o
		db    0
word_2323A	dw 0AF30h		; DATA XREF: sub_12076:loc_12086r
					; sub_12076:loc_120F0w	...
word_2323C	dw 4B0h			; DATA XREF: sub_12076+1Ar
					; sub_12076+7Fw ...
word_2323E	dw 9B0h			; DATA XREF: sub_12076+29r
					; sub_12076:loc_12114w	...
word_23240	dw 204h			; DATA XREF: sub_12076+Cr
					; sub_12076+71r ...
byte_23242	db 0			; DATA XREF: sub_12461+7Br
					; sub_12461+A2w
		db    0
unk_23244	db 0ACh	; ¬		; DATA XREF: sub_12B71+Bo
		db 0B8h	; ¸
		db 0B7h	; ·
		db 0BDh	; ½
		db 0B2h	; ²
		db 0B7h	; ·
		db 0BEh	; ¾
		db 0AEh	; ®
aGensou_scr	db 'GENSOU.SCR',0       ; DATA XREF: sub_12A0A+7Ao
aGensou_scr_0	db 'GENSOU.SCR',0       ; DATA XREF: sub_12AB7+4o
aGensou_scr_1	db 'GENSOU.SCR',0       ; DATA XREF: sub_12AB7+11o
aGensou_scr_2	db 'GENSOU.SCR',0       ; DATA XREF: sub_12B1E+Ao
byte_23278	db 0			; DATA XREF: sub_1CFA2+3w sub_1CFA2+Cw ...
		db 0
		dd aIlcGGxsOboFsbi	; "«ì{XÞ¡¸sII@@@@@@@~@"...
		dd aGvgmgcgdbRfgyg	; "vC[yieBiúUlj~@"...
		dd aGvgmgcgdbRfg_0	; "vC[yieBiúTlj~@"...
		dd aGvgmgcgdbRfg_1	; "vC[yieBiúSlj~@"...
		dd aGrgugegbgjgebG	; "ReBj[yieBiPñj@~@"...
		dd aGrgugegbgjge_0	; "ReBj[yieBiQñj@~@"...
		dd aGrgugegbgjge_1	; "ReBj[yieBiRñj@~@"...
		dd aUqiUxgBGigxbiv	; "ïÕx{[iXidj@@@@~@"...
		dd aUqiUxgBGigxb_0	; "ïÕx{[iXimj@@~@"...
		dd aUqiUxgBGigxb_1	; "ïÕx{[iXigj@@@@~@"...
		dd aUqiUxgBGigxb_2	; "ïÕx{[iXikj@~@"...
unk_232A6	db  4Dh	; M		; DATA XREF: sub_1D6C1+17o
		db  4Eh	; N
		db  4Fh	; O
		db    2
		db  58h	; X
		db  59h	; Y
		db  5Ah	; Z
		db  5Bh	; [
		db    0
a_Abcd		db '\]^_`abcd',0        ; DATA XREF: sub_1D896+1Co
aIlcGGxsOboFsbi	db '«ì{XÞ¡¸sII@@@@@@@~@ODO',0 ; DATA XREF: dseg:1F3Ao
aGvgmgcgdbRfgyg	db 'vC[yieBiúUlj~@ODR',0 ; DATA XREF: dseg:1F3Eo
aGvgmgcgdbRfg_0	db 'vC[yieBiúTlj~@ODT',0 ; DATA XREF: dseg:1F42o
aGvgmgcgdbRfg_1	db 'vC[yieBiúSlj~@ODV',0 ; DATA XREF: dseg:1F46o
aGrgugegbgjgebG	db 'ReBj[yieBiPñj@~@ODW',0 ; DATA XREF: dseg:1F4Ao
aGrgugegbgjge_0	db 'ReBj[yieBiQñj@~@ODU',0 ; DATA XREF: dseg:1F4Eo
aGrgugegbgjge_1	db 'ReBj[yieBiRñj@~@ODS',0 ; DATA XREF: dseg:1F52o
aUqiUxgBGigxbiv	db 'ïÕx{[iXidj@@@@~@ODT',0 ; DATA XREF: dseg:1F56o
aUqiUxgBGigxb_0	db 'ïÕx{[iXimj@@~@PDO',0 ; DATA XREF: dseg:1F5Ao
aUqiUxgBGigxb_1	db 'ïÕx{[iXigj@@@@~@PDQ',0 ; DATA XREF: dseg:1F5Eo
aUqiUxgBGigxb_2	db 'ïÕx{[iXikj@~@PDS',0 ; DATA XREF: dseg:1F62o
aVrvsvVfvdb@vav	db 'rs`fd@a',0 ; DATA XREF: sub_1D6C1+29o
aVovnvvvdvqb@bB	db 'onvdq@~@@TO',0 ; DATA XREF: sub_1D6C1+3Bo
aVcvqvdvVlb@vav	db 'cqd`l@a',0 ; DATA XREF: sub_1D6C1+4Do
aGjgxgkterfb@bB	db 'JXe@~@@TO',0 ; DATA XREF: sub_1D6C1+5Fo
aVovnvhvmvsb@va	db 'onhms@a@@@@@@~',0 ; DATA XREF: sub_1D6C1+71o
aB@b@b@vsvnvsvV	db '@@@sns`k',0 ; DATA XREF: sub_1D6C1+83o
aB@b@b@b@b@vavp	db '@@@@@a@dII',0 ; DATA XREF: sub_1D6C1+95o
aVVkvkb@vbvmvev	db '`kk@b@@',0 ; DATA XREF: sub_1D896+2Eo
aVovnvvvdvqb@_0	db 'onvdq@~@@TO',0 ; DATA XREF: sub_1D896+40o
aVcvqvdvVlb@v_0	db 'cqd`l@a',0 ; DATA XREF: sub_1D896+52o
aGjgxgkterfb@_0	db 'JXe@~@@TO',0 ; DATA XREF: sub_1D896+64o
aOcvsrlrfb@bVpv	db 'cèl@~POOOO',0 ; DATA XREF: sub_1D896+7Do
aOcvsrlrfb@bVrv	db 'cèl@~ROOOO',0 ; DATA XREF: sub_1D896+89o
aVovnvhvmvsb@_0	db 'onhms@a@@@@@@~',0 ; DATA XREF: sub_1D896+9Bo
aB@b@b@vsvnvs_0	db '@@@sns`k',0 ; DATA XREF: sub_1D896+ADo
		db    0
		db    0
		db    1
		db    0
		db    0
		db    1
		db    1
		db    0
		db    1
		db    0
		db    1
		db    1
		db    1
		db    0
		db    0
		db    0
		db    2
		db    1
		db    0
		db    1
		db    1
		db    0
		db    0
		db    1
		db    0
		db    1
		db    0
		db    0
		db    0
		db    1
		db    1
		db    1
		db    2
		db    0
		db    1
		db    0
		db    0
		db    1
		db    1
		db    0
		db    1
		db    0
		db    1
		db    1
		db    1
		db    0
		db    0
		db    0
		db    2
		db    1
		db    0
		db    1
		db    1
		db    0
		db    0
		db    1
		db    0
		db    1
		db    0
		db    0
		db    0
		db    1
		db    1
		db    1
		db    3
byte_23660	db 0			; DATA XREF: sub_1DBAE+7Ew
					; sub_1DBAE+8Fr ...
byte_23661	db 0			; DATA XREF: sub_1DDF7:loc_1DE11w
					; sub_1DDF7:loc_1DE17r	...
		db  2Ch	; ,
		db    0
		db  2Dh	; -
		db    0
		db  2Eh	; .
		db    0
		db  2Fh	; /
		db    0
		db  30h	; 0
		db    0
		db  31h	; 1
		db    0
		db  32h	; 2
		db    0
		db    1
		db    0
		db    1
		db    0
		db    2
		db    0
		db    3
		db    0
		db    4
		db    0
		db    5
		db    0
		db    6
		db    0
		db    7
		db    0
		db    8
		db    0
		db    9
		db    0
		db  0Ah
		db    0
		db  14h
		db    0			; jumptable 0001C46F cases 32823,35584
		db  1Eh
		db    0
		db  28h	; (
		db    0
		db  32h	; 2
		db    0
		db  3Ch	; <
		db    0
		db  46h	; F
		db    0
		db  50h	; P
		db    0
		db  5Ah	; Z
		db    0
		db  64h	; d
		db    0
		db  96h	; 
		db    0
		db 0C8h	; È
		db    0
		db 0FAh	; ú
		db    0
		db  2Ch	; ,
		db    1
		db  5Eh	; ^
		db    1
		db  90h	; 
		db    1
		db 0C2h	; Â
		db    1
		db 0F4h	; ô
		db    1
		db  26h	; &
		db    2
		db  58h	; X
		db    2
		db  8Ah	; 
		db    2
		db 0BCh	; ¼
		db    2
		db 0EEh	; î
		db    2
		db  20h
		db    3
		db  52h	; R
		db    3
		db  84h	; 
		db    3
		db 0B6h	; ¶
		db    3
		db 0E8h	; è
		db    3
		db  1Ah
		db    4
		db  4Ch	; L
		db    4
		db 0B0h	; °
		db    4
		db 0E2h	; â
		db    4
		db    0
		db    5
		db    0
		db    0
		db  64h	; d
		db    0
		db 0C8h	; È
		db    0
		db  90h	; 
		db    1
		db  58h	; X
		db    2
		db  20h
		db    3
		db 0E8h	; è
		db    3
		db    0
		db    5
word_236D6	dw 0			; DATA XREF: sub_10988+26w
					; sub_1DBAE:loc_1DC04w	...
word_236D8	dw 0			; DATA XREF: sub_E7FD+21r
					; sub_1DA38+81w ...
word_236DA	dw 0			; DATA XREF: sub_E7FD+28r
					; sub_1DBAE:loc_1DDDFw
word_236DC	dw 0			; DATA XREF: sub_E7FD+2Fr
					; sub_1DBAE:loc_1DC7Bw
word_236DE	dw 0			; DATA XREF: sub_E7FD+36r
					; sub_1DBAE+97w
byte_236E0	db 0			; DATA XREF: seg001:552Bw
					; sub_1020A+97w ...
		db 0
		db 0D0h	; Ð
		db 0FFh
		db 0C8h	; È
		db 0FFh
		db 0C0h	; À
		db 0FFh
		db 0B8h	; ¸
		db 0FFh
		db 0B0h	; °
		db 0FFh
		db    0
		db    0
		db  0Ch
		db    0
		db  18h
		db    0
		db  24h	; $
		db    0
		db  30h	; 0
		db    0
		db 0D0h	; Ð
		db 0FFh
		db 0C8h	; È
		db 0FFh
		db 0C0h	; À
		db 0FFh
		db 0C8h	; È
		db 0FFh
		db 0D0h	; Ð
		db 0FFh
		db 0E8h	; è
		db 0FFh
		db 0F4h	; ô
		db 0FFh
		db    0
		db    0
		db  0Ch
		db    0
		db  18h
		db    0
		db 0D0h	; Ð
		db 0FFh
		db 0C8h	; È
		db 0FFh
		db 0C0h	; À
		db 0FFh
		db 0B8h	; ¸
		db 0FFh
		db 0B0h	; °
		db 0FFh
		db    0
		db    0
		db 0F4h	; ô
		db 0FFh
		db 0E8h	; è
		db 0FFh
		db 0DCh	; Ü
		db 0FFh
		db 0D0h	; Ð
		db 0FFh
		db    0
		db    0
		db    3
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db    1
		db    1
		db    1
		db    1
byte_2372D	db 0			; DATA XREF: sub_19FD8+64w
					; sub_1DF61+40w ...
aSt00_bmt	db 'st00.bmt',0         ; DATA XREF: sub_1DFEF+90o
aSt00bk_cdg	db 'st00bk.cdg',0       ; DATA XREF: sub_1DFEF+9Bo
aSt00_bb	db 'st00.bb',0          ; DATA XREF: sub_1DFEF+A6o
aSt01_bmt	db 'st01.bmt',0         ; DATA XREF: sub_1E0B3+95o
aSt01bk_cdg	db 'st01bk.cdg',0       ; DATA XREF: sub_1E0B3+A0o
aSt01_bb	db 'st01.bb',0          ; DATA XREF: sub_1E0B3+ABo
aSt02_bmt	db 'st02.bmt',0         ; DATA XREF: sub_1E186+95o
aSt02bk_cdg	db 'st02bk.cdg',0       ; DATA XREF: sub_1E186+A0o
aSt02_bb	db 'st02.bb',0          ; DATA XREF: sub_1E186+ABo
aSt03_bmt	db 'st03.bmt',0         ; DATA XREF: sub_1E245+144o
aSt03bk_cdg	db 'st03bk.cdg',0       ; DATA XREF: sub_1E245+156o
aSt03bk2_cdg	db 'st03bk2.cdg',0      ; DATA XREF: sub_1E245+15Eo
aSt03_bb	db 'st03.bb',0          ; DATA XREF: sub_1E245+169o
aSt04bk_cdg	db 'st04bk.cdg',0       ; DATA XREF: sub_1E3C2+68o
aSt04_bb	db 'st04.bb',0          ; DATA XREF: sub_1E3C2+73o
aSt04_cdg	db 'st04.cdg',0         ; DATA XREF: sub_1E3C2+7Co
aSt05_bb	db 'st05.bb',0          ; DATA XREF: sub_1E47C+60o
aSt06bk_cdg	db 'st06bk.cdg',0       ; DATA XREF: sub_1E518+A1o
aSt06_bb	db 'st06.bb',0          ; DATA XREF: sub_1E518+ACo
aSt06bk2_cdg	db 'st06bk2.cdg',0      ; DATA XREF: sub_1E743+140o
aSt06b_bb	db 'st06b.bb',0         ; DATA XREF: sub_1E743+14Bo
byte_237F6	db 0			; DATA XREF: sub_1F22A+29r
					; sub_1F22A:loc_1F260w	...
byte_237F7	db 0			; DATA XREF: sub_1F378+3r
					; sub_1F378+15w ...
word_237F8	dw 0			; DATA XREF: seg001:849Dr seg001:84ACr ...
aAbnormalProgra	db 'Abnormal program termination',0Dh,0Ah,0
		db 0
word_2381A	dw 0			; DATA XREF: _atexit+5r
					; _atexit:loc_42EDr ...
off_2381C	dd sub_4500		; DATA XREF: sub_4505+29r _setvbuf+C0w ...
off_23820	dd sub_4500		; DATA XREF: sub_4548r
off_23824	dd sub_4500		; DATA XREF: sub_4548+4r
		db    0
		db    0
word_2382A	dw 209h			; DATA XREF: seg000:4B19w seg000:4B23r
byte_2382C	db 0			; DATA XREF: seg000:4B0Ar
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db 0E8h	; è
		db  24h	; $
		db    0
		db    0
word_2383E	dw 20Ah			; DATA XREF: sub_4B43+Fw sub_4B43+19r
byte_23840	db 1			; DATA XREF: sub_4B43r
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db 0FCh	; ü
		db  24h	; $
		db    0
		db    0
		db    2
		db    2
byte_23854	db 2			; DATA XREF: ___ErrorMessage+19r
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  10h
		db  25h	; %
		db    0
		db    0
		db  43h	; C
		db    2
		db    3
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  24h	; $
		db  25h	; %
		db    0			; jumptable 0001F539 case 65094
		db    0
		db  42h	; B
		db    2
		db    4
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  38h	; 8
		db  25h	; %
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_239B8	dw 14h			; DATA XREF: start+C0r	start+E3r ...
		db    1
		db  60h	; `
		db    2
		db  60h	; `
		db    2
		db  60h	; `
		db    4
		db 0A0h	;  
		db    2
		db 0A0h	;  
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_239E2	dw 0			; DATA XREF: __IOERROR:loc_4731w
					; __IOERROR+2Bw
		db    0
		db  13h
		db    2
		db    2
		db    4
		db    5
		db    6
		db    8
		db    8
		db    8
		db  14h
		db  15h
		db    5
		db  13h
		db  0Eh
		db    5
		db    5
		db  11h
		db    2
		db  1Eh
		db  29h	; )
		db  2Ch	; ,
		db  28h	; (
		db  28h	; (
		db  28h	; (
		db  28h	; (
		db  28h	; (
		db  29h	; )
		db  2Ch	; ,
		db  28h	; (
		db  28h	; (
		db  28h	; (
		db    5
		db    5
		db  29h	; )
		db  17h
		db  17h
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Fh
		db  2Ch	; ,
		db  23h	; #
		db    2
		db  2Ch	; ,
		db  0Fh
		db  2Ah	; *
		db  28h	; (
		db  28h	; (
		db  28h	; (
		db  13h
		db  1Bh
		db  1Ch
		db    2
		db    2
		db    5
		db  0Fh
		db    2
		db  17h
		db  28h	; (
		db  2Ah	; *
		db  13h
		db  2Ah	; *
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Eh
		db  23h	; #
		db  0Eh
		db  1Ch
		db  28h	; (
		db  17h
		db  23h	; #
		db  25h	; %
		db  13h
		db  28h	; (
		db    0
unk_23A3E	db    0			; DATA XREF: seg000:4900o
		db    0
		db    0
		db    0
word_23A42	dw 0			; DATA XREF: seg000:4808r
word_23A44	dw 47CDh		; DATA XREF: set_new_handler(void (*)(void))+Cr
					; set_new_handler(void (*)(void))+1Fw ...
seg_23A46	dw seg seg000		; DATA XREF: set_new_handler(void (*)(void))+8r
					; set_new_handler(void (*)(void))+1Bw ...
aOutOfMemory	db 'Out of memory',0
word_23A56	dw 1000h		; DATA XREF: start+62r	start+70w ...
		public __ctype
; unsigned __int8 _ctype[257]
__ctype		db    0, 20h, 20h, 20h,	20h, 20h, 20h, 20h ; DATA XREF:	_tolower+18r
		db  20h, 20h, 21h, 21h,	21h, 21h, 21h, 20h
		db  20h, 20h, 20h, 20h,	20h, 20h, 20h, 20h
		db  20h, 20h, 20h, 20h,	20h, 20h, 20h, 20h
		db  20h, 81h, 40h, 40h,	40h, 40h, 40h, 40h
		db  40h, 40h, 40h, 40h,	40h, 40h, 40h, 40h
		db  40h, 12h, 12h, 12h,	12h, 12h, 12h, 12h
		db  12h, 12h, 12h, 40h,	40h, 40h, 40h, 40h
		db  40h, 40h, 14h, 14h,	14h, 14h, 14h, 14h
		db    4,   4,	4,   4,	  4,   4,   4,	 4
		db    4,   4,	4,   4,	  4,   4,   4,	 4
		db    4,   4,	4,   4,	40h, 40h, 40h, 40h
		db  40h, 40h, 18h, 18h,	18h, 18h, 18h, 18h
		db    8,   8,	8,   8,	  8,   8,   8,	 8
		db    8,   8,	8,   8,	  8,   8,   8,	 8
		db    8,   8,	8,   8,	40h, 40h, 40h, 40h
		db  20h,   0,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0,	 0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		dd @terminate$qv	; terminate(void)
		dd @unexpected$qv	; unexpected(void)
word_23B6C	dw 0			; DATA XREF: __ExceptInit+28w
word_23B6E	dw 0			; DATA XREF: __ExceptInit+25w
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_23C82	dw 0			; DATA XREF: seg000:4F08w seg000:4F1Bw ...
word_23C84	dw 0			; DATA XREF: sub_53AE+22r sub_53AE+61w
byte_23C86	db 0			; DATA XREF: seg000:5703r seg000:571Bw
byte_23C87	db 0			; DATA XREF: seg000:569Er seg000:56B1w
word_23C88	dw 0			; DATA XREF: seg000:560Br seg000:5641w
word_23C8A	dw 0			; DATA XREF: seg000:5607r
					; seg000:loc_563Bw
		dw 0
		dw 0
word_23C90	dw 0			; DATA XREF: seg000:5525r seg000:555Bw ...
word_23C92	dw 0			; DATA XREF: seg000:5521r
					; seg000:loc_5555w ...
		dw 0
		dw 0
		dw 0
		dw 0
		dw 0
		dw 0
		db    2
		db    4
		db    8
		db  0Bh
		db  0Fh
		db  16h
		db    0
		db  15h
		db  8Ch	; 
		db  0Bh
		db    0
		db    0
dword_23CAC	dd 0			; DATA XREF: seg000:587Fw sub_5893+Ar	...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  5Ch	; \
		db    0
word_23CC0	dw 0			; DATA XREF: _setvbuf:loc_6364r
					; _setvbuf+4Bw
word_23CC2	dw 0			; DATA XREF: _setvbuf:loc_634Er
					; _setvbuf+35w
word_23CC4	dw 30h			; DATA XREF: __IOERROR+25r
aNotype		db '<notype>',0
aBccxh1		db '**BCCxh1',0
dword_23CD8	dd 0			; DATA XREF: _getenv+21r seg000:A3CEw	...
word_23CDC	dw 1			; DATA XREF: seg004:0A51r seg004:0A5Aw
word_23CDE	dw 0			; DATA XREF: seg004:0A6Er seg004:0A77w
word_23CE0	dw 1			; DATA XREF: seg004:0A8Br seg004:0A94w
word_23CE2	dw 3Fh			; DATA XREF: sub_20F2C+13r
					; seg004:0AA8r	...
word_23CE4	dw 40h			; DATA XREF: sub_20F2C+19r
					; seg004:0AC5r	...
word_23CE6	dw 3Fh			; DATA XREF: seg004:0747r seg004:07AFr ...
aStringReferenc	db 'String reference out of range',0
aStringRefere_0	db 'String reference out of range',0
aStringRefere_1	db 'String reference out of range',0
aPath		db 'PATH',0
		db '/\',0
		db    0
a_bat		db '.BAT',0
a_com		db '.COM',0
a_exe_0		db '.EXE',0
a_bat_0		db '.BAT',0
aComspec	db 'COMSPEC',0
		db  2Fh	; /
		db  63h	; c
		db    0
		db    1
		db  20h
		dd @string@contains$xqnxc ; string::contains(char *)
		db    0
		db    2
		db 0DBh	; Û
		db  4Ah	; J
		db    0
		db    0
		db    0
		db  10h
		db 0F7h	; ÷
		db  4Eh	; N
		db    0
		db    0
		db    0
		db  0Fh
		db  4Ah	; J
		db  58h	; X
		db    0
		db    0
		db    0
		db  10h
		db 0B8h	; ¸
		db 0A3h	; £
		db    0
		db    0
		db    1
		db  20h
		dd loc_497B
		dw 0
word_23D90	dw 0			; DATA XREF: sub_AB88+1Br sub_AED0+3Aw ...
dword_23D92	dd 0			; DATA XREF: sub_B3EE+Fw sub_B3EE+37r	...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
dword_23DAA	dd 0			; DATA XREF: sub_E60+2Er sub_E60+69r ...
word_23DAE	dw 0			; DATA XREF: sub_D88+22w sub_D88+4Ar ...
word_23DB0	dw 0			; DATA XREF: sub_D88+26w sub_D88+56r ...
word_23DB2	dw 0			; DATA XREF: sub_D88+2Br
					; sub_D88:loc_DBFw ...
word_23DB4	dw 0			; DATA XREF: sub_D88:loc_DC6r
					; sub_D88+4Ew ...
word_23DB6	dw 0			; DATA XREF: sub_E04+2Dw
					; sub_E60:loc_F03w ...
word_23DB8	dw 0			; DATA XREF: sub_D88:loc_DB9w
					; sub_E04+30w ...
word_23DBA	dw 0			; DATA XREF: sub_11EC+67w seg000:130Cr ...
word_23DBC	dw 0			; DATA XREF: sub_11EC+6Aw
					; seg000:loc_1286r
word_23DBE	dw 0			; DATA XREF: sub_1379C+5w
		db    0
		db    0
byte_23DC2	db 0			; DATA XREF: sub_12461+5Fw
					; sub_12461+82w ...
byte_23DC3	db 0			; DATA XREF: sub_12461+87w
					; seg003:2C01w	...
byte_23DC4	db 0			; DATA XREF: sub_12461:loc_124D2w
					; sub_12461+99w ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
byte_23DEC	db 0			; DATA XREF: sub_1020A+54r
					; sub_1020A+66w ...
byte_23DED	db 0			; DATA XREF: sub_1020A+5Ar
					; sub_1020A+6Bw ...
byte_23DEE	db 0			; DATA XREF: sub_1020A+60r
					; sub_1020A+70w ...
		db    0
		db    0
		db    0
word_23DF2	dw 0			; DATA XREF: sub_236C+1Ew seg000:23F0w ...
word_23DF4	dw 0			; DATA XREF: sub_236C+21w seg000:23F4w ...
word_23DF6	dw 0			; DATA XREF: sub_236C+37w sub_241A+2Br
word_23DF8	dw 0			; DATA XREF: sub_236C+3Aw sub_241A+27r
word_23DFA	dw 0			; DATA XREF: seg000:23EAw
word_23DFC	dw 0			; DATA XREF: sub_252A+Fw
					; sub_258C:loc_25A4r ...
word_23DFE	dw 0			; DATA XREF: sub_21F4+20r sub_252A+12w ...
word_23E00	dw 0			; DATA XREF: sub_252A+15w sub_258C+24r ...
word_23E02	dw 0			; DATA XREF: sub_21DE+7w sub_21F4+19r	...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
dword_24604	dd 0			; DATA XREF: sub_130EE+3w
dword_24608	dd 0			; DATA XREF: sub_130EE+Cw
dword_2460C	dd 0			; DATA XREF: sub_130EE+15w
dword_24610	dd 0			; DATA XREF: sub_130EE+1Ew
unk_24614	db    0			; DATA XREF: seg000:33EFo
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_24694	dw 0			; DATA XREF: sub_3284+7Bw sub_3340+21r ...
word_24696	dw 0			; DATA XREF: sub_3284+81w seg000:33A8r ...
word_24698	dw 0			; DATA XREF: sub_3284+47w sub_3284+58r ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
byte_2499A	db 0			; DATA XREF: sub_1337E+2w
					; sub_133AC+1Ew
		db 0
word_2499C	dw 0			; DATA XREF: sub_39B8+21w sub_39FC+Fr
word_2499E	dw 0			; DATA XREF: sub_39B8+1Dw sub_39FC+Br
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
word_24C93	dw ?			; DATA XREF: sub_1CCB8-53A1w
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
byte_24CA2	db ?			; DATA XREF: sub_3FD0+13w sub_3FD0+5Ar ...
		db ?
unk_24CA4	db    ?	;		; DATA XREF: sub_13496+56o
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
word_24CB2	dw ?			; DATA XREF: _main+Aw sub_13666+3r
word_24CB4	dw ?			; DATA XREF: sub_B2CF:loc_B2DCr
					; sub_B2CF+51r	...
byte_24CB6	db ?			; DATA XREF: seg001:0972w
					; sub_10ABF:loc_10B58r	...
		db ?
word_24CB8	dw ?			; DATA XREF: sub_B530+3Dr sub_D7EE+53r
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
word_24CC6	dw ?			; DATA XREF: sub_B530+37r sub_D7EE+61w
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
word_24CD8	dw ?			; DATA XREF: sub_B530+73r sub_D729+1Er
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db ?
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
word_24EA8	dw ?			; DATA XREF: sub_B488+8Er sub_B616+Ar	...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
word_24EB6	dw ?			; DATA XREF: sub_B488+88r sub_B616+16w
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
byte_250B8	db ?			; DATA XREF: sub_139FC+29w
					; sub_139FC+46w
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_250FA	dd ?			; DATA XREF: sub_B6D1+B9w seg003:4345r ...
byte_250FE	db ?			; DATA XREF: sub_B1D0+33w sub_B835+Dr	...
		db ?
word_25100	dw ?			; DATA XREF: sub_B1D0+17w sub_B835+25r ...
word_25102	dw ?			; DATA XREF: sub_B9D6:loc_BA06w
					; sub_B9D6+91r
byte_25104	db ?			; DATA XREF: sub_B1D0+2Ew sub_B835+6r	...
word_25105	dw ?			; DATA XREF: sub_BAEE+3Dw sub_BAEE+67r
word_25107	dw ?			; DATA XREF: sub_BAEE+1Bw
					; sub_BAEE:loc_BB51r ...
word_25109	dw ?			; DATA XREF: sub_BAEE+5Fw
					; sub_BAEE:loc_BB8Fr
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
word_2520C	dw ?			; DATA XREF: sub_BC58+10w seg001:1180r ...
byte_2520E	db ?			; DATA XREF: sub_BCB2w	sub_13DAAr ...
byte_2520F	db ?			; DATA XREF: sub_BCB2+5w sub_13D90r ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
word_25532	dw ?			; DATA XREF: sub_BCF4+2w sub_BCF4+55r	...
word_25534	dw ?			; DATA XREF: sub_C314+16w
					; sub_13E2A:loc_13E40r	...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
byte_25590	db ?			; DATA XREF: sub_13F16+12w
					; sub_13F30+4r	...
		db ?
byte_25592	db ?			; DATA XREF: sub_C718+5r seg001:5586w	...
		db ?
byte_25594	db ?			; DATA XREF: sub_13FB2+15w
					; sub_13FB2+30r ...
		db ?
word_25596	dw ?			; DATA XREF: seg003:0671w seg003:06EFw
byte_25598	db ?			; DATA XREF: seg003:08E6w seg003:08FDw ...
		db ?
		db ?
		db ?
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
word_255A0	dw ?			; DATA XREF: sub_B1D0+1Dw
word_255A2	dw ?			; DATA XREF: sub_B1D0+23w
dword_255A4	dd ?			; DATA XREF: sub_B9D6+2r
					; sub_B9D6:loc_B9F8r ...
word_255A8	dw ?			; DATA XREF: sub_AB88+46r seg001:20A1w ...
word_255AA	dw ?			; DATA XREF: sub_AB88:loc_ABD4r
					; sub_FFA4+8w ...
word_255AC	dw ?			; DATA XREF: sub_B1D0+C3w seg001:5519r ...
		dw ?
byte_255B0	db ?			; DATA XREF: seg001:2096w seg001:209Ar ...
		db ?
byte_255B2	db ?			; DATA XREF: sub_14AF2+7Cw
					; sub_14B76+4Fw ...
byte_255B3	db ?			; DATA XREF: sub_14AF2+1Br
					; sub_14B76+1Br ...
byte_255B4	db ?			; DATA XREF: seg003:12C5w
					; seg003:loc_14E0Aw ...
		db ?
byte_255B6	db ?			; DATA XREF: sub_B1D0+29w sub_CCD6+2Er ...
byte_255B7	db ?			; DATA XREF: sub_B6D1+83w
					; sub_B835:loc_B84Br ...
word_255B8	dw ?			; DATA XREF: sub_B1D0+11w sub_B835+1Fr ...
word_255BA	dw ?			; DATA XREF: sub_CCD6:loc_CCFEw
					; sub_CCD6+58w	...
byte_255BC	db ?			; DATA XREF: sub_B1D0+98w sub_B682+13r ...
		db ?
word_255BE	dw ?			; DATA XREF: sub_B1D0+38w
					; seg001:loc_CD4Fw ...
word_255C0	dw ?			; DATA XREF: sub_B1D0+3Ew
					; seg001:loc_CD61w ...
word_255C2	dw ?			; DATA XREF: seg001:2249r seg001:2274w ...
		db    ?	;
		db    ?	;
byte_255C6	db ?			; DATA XREF: sub_14F78+A8w
					; sub_15027+EFw ...
byte_255C7	db ?			; DATA XREF: seg003:187Cw
					; seg003:loc_1538Cr ...
byte_255C8	db ?			; DATA XREF: seg003:1872w
		db ?
word_255CA	dw ?			; DATA XREF: sub_AB88:loc_ABBAr
					; sub_B1D0+92w	...
dword_255CC	dd ?			; DATA XREF: sub_CE93+26w sub_CE93+2Dr ...
word_255D0	dw ?			; DATA XREF: sub_D1BC:loc_D204w
					; sub_D1BC+154r ...
word_255D2	dw ?			; DATA XREF: sub_D1BC:loc_D1F0w
					; sub_D1BC+15Er ...
word_255D4	dw ?			; DATA XREF: sub_D1BC+39r
					; sub_D1BC+1A9r ...
word_255D6	dw ?			; DATA XREF: sub_D0CA+3Br sub_D193+1Fr ...
byte_255D8	db ?			; DATA XREF: sub_15C6D+3w
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
byte_255E8	db ?			; DATA XREF: sub_15C6D+8w
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
word_25608	dw ?			; DATA XREF: sub_DAA6+4r sub_DAA6+Ew ...
byte_2560A	db ?			; DATA XREF: sub_DAA6+14w sub_E1F4+Er	...
		db ?
dword_2560C	dd ?			; DATA XREF: sub_DAA6+1Aw sub_E1F4+98r ...
dword_25610	dd ?			; DATA XREF: sub_DAA6+26w
					; sub_10444+51r ...
		dd ?
byte_25618	db ?			; DATA XREF: sub_15D74+1Dw
		db ?
word_2561A	dw ?			; DATA XREF: sub_16389+83w
					; sub_1AE8F+F6w ...
word_2561C	dw ?			; DATA XREF: sub_16389+89w
					; sub_1AE8F+FFw ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
word_25622	dw ?			; DATA XREF: sub_15D74+17w
word_25624	dw ?			; DATA XREF: sub_16389+9Aw
					; sub_1AE8F+E2w ...
word_25626	dw ?			; DATA XREF: sub_16389+A0w
					; sub_1AE8F+E8w ...
byte_25628	db ?			; DATA XREF: sub_16389+A6w
					; sub_1AE8F+EEw ...
		db ?
word_2562A	dw ?			; DATA XREF: sub_16389+91w
					; sub_1AE8F+D9w ...
word_2562C	dw ?			; DATA XREF: sub_15D74+22w
word_2562E	dw ?			; DATA XREF: sub_15D74+28w
					; sub_16389+94w ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
byte_25660	db ?			; DATA XREF: sub_E461+6r
					; sub_E461:loc_E47Br ...
		db ?
word_25662	dw ?			; DATA XREF: sub_15F97+10w
					; sub_15F97+4Ew ...
byte_25664	db ?			; DATA XREF: sub_160A5+2Bw
					; sub_160A5+93w ...
byte_25665	db ?			; DATA XREF: sub_160A5+30w
					; sub_160A5+3Fr ...
byte_25666	db ?			; DATA XREF: sub_16389+38w
					; sub_16389+C0r ...
byte_25667	db ?			; DATA XREF: sub_E8A3+83r
					; sub_E8A3:loc_E98Er ...
byte_25668	db ?			; DATA XREF: sub_EAE4+39r sub_EAE4+9Fw ...
		db ?
word_2566A	dw ?			; DATA XREF: sub_CB58+1Fr
					; sub_1DFEF+BCw ...
word_2566C	dw ?			; DATA XREF: sub_AB88+7Br
					; sub_AED0+1FCw ...
byte_2566E	db ?			; DATA XREF: seg003:401Fw seg003:40DBr ...
byte_2566F	db ?			; DATA XREF: seg003:4024w seg003:40A1r ...
byte_25670	db ?			; DATA XREF: seg003:3FDDw seg003:412Ar ...
byte_25671	db ?			; DATA XREF: sub_16C05+27r
					; sub_16E9D+57r ...
byte_25672	db ?			; DATA XREF: sub_EC8E:loc_ECC7r
					; sub_EC8E+42r	...
byte_25673	db ?			; DATA XREF: seg003:4015w seg003:40AFw ...
byte_25674	db ?			; DATA XREF: sub_17335+61r
					; seg003:401Aw	...
		db ?
word_25676	dw ?			; DATA XREF: sub_16DD7+17r
					; sub_16F61+2Fw ...
word_25678	dw ?			; DATA XREF: sub_EC8E+59r
		dw ?
		dw ?
		dw ?
word_25680	dw ?			; DATA XREF: sub_EC8E+5Dr
		dw ?
		dw ?
		dw ?
byte_25688	db ?			; DATA XREF: sub_AD03+C8w sub_AD03+E0w ...
byte_25689	db ?			; DATA XREF: sub_E67A+16r
					; sub_E67A+150w ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
byte_2568F	db ?			; DATA XREF: sub_EE06:loc_EE23r
					; sub_EE06:loc_EE2Cr ...
byte_25690	db ?			; DATA XREF: sub_EE06:loc_EE35r
					; sub_EE06:loc_EE45r ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
byte_25699	db ?			; DATA XREF: sub_EEB0+26w
					; sub_116C4+60w
dword_2569A	dd ?			; DATA XREF: sub_EEB0+14w
					; sub_105B9+14Fw ...
dword_2569E	dd ?			; DATA XREF: sub_EEB0+1Dw sub_116C4+9r ...
byte_256A2	db ?			; DATA XREF: seg001:48E2w
					; seg001:loc_F3D7r ...
		db ?
word_256A4	dw ?			; DATA XREF: seg001:2F63w seg001:2F87w ...
byte_256A6	db ?			; DATA XREF: seg001:2F69w seg001:2F8Dw ...
		db ?
byte_256A8	db ?			; DATA XREF: sub_AB88+3Fr sub_FFA4+3w	...
byte_256A9	db ?			; DATA XREF: seg001:550Fw seg001:557Fr ...
word_256AA	dw ?			; DATA XREF: sub_AD03:loc_AD82w
					; sub_AD03:loc_ADAFw ...
word_256AC	dw ?			; DATA XREF: sub_AD03+85w sub_AD03+B2w ...
word_256AE	dw ?			; DATA XREF: sub_FF34+31w sub_FF89+3r	...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
byte_257D6	db ?			; DATA XREF: sub_1020A+57w
					; sub_1020A:loc_102AFr
byte_257D7	db ?			; DATA XREF: sub_1020A+5Dw
					; sub_1020A+ABr
byte_257D8	db ?			; DATA XREF: sub_1020A+63w
					; sub_1020A+B1r
		db ?
word_257DA	dw ?			; DATA XREF: sub_10ABF:loc_10BB0r
					; sub_11DE6+23w
word_257DC	dw ?			; DATA XREF: sub_AD03+71w
					; sub_AD03:loc_AD7Cw ...
dword_257DE	dd ?			; DATA XREF: sub_105B9+6r seg003:0719w ...
word_257E2	dw ?			; DATA XREF: sub_105B9+9r
					; sub_105B9+1Ar ...
word_257E4	dw ?			; DATA XREF: sub_105B9+13r
					; sub_105B9+22r ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
word_2597E	dw ?			; DATA XREF: sub_104B6+6w
					; sub_104B6+6Aw ...
byte_25980	db ?			; DATA XREF: sub_105B9+88w
					; sub_105B9+8Cr ...
		db ?
word_25982	dw ?			; DATA XREF: sub_F33C+Fr seg003:06A1w	...
word_25984	dw ?			; DATA XREF: sub_F33C+7r
					; seg001:loc_F426r ...
dword_25986	dd ?			; DATA XREF: sub_AB88+3Br sub_B6D1+C3w ...
word_2598A	dw ?			; DATA XREF: sub_1554F+5r sub_15592+4r ...
word_2598C	dw ?			; DATA XREF: sub_10ABF+86r
					; sub_10ABF+8Cr ...
dword_2598E	dd ?			; DATA XREF: sub_B1D0+44w
					; sub_107E2+43r ...
dword_25992	dd ?			; DATA XREF: sub_B1D0+50w
					; sub_107E2+96r ...
word_25996	dw ?			; DATA XREF: sub_10898:loc_108C1w
					; sub_10898:loc_108C9w	...
word_25998	dw ?			; DATA XREF: sub_10898+37w
					; sub_10898:loc_108D7w	...
word_2599A	dw ?			; DATA XREF: sub_B1D0+5Cw
word_2599C	dw ?			; DATA XREF: sub_B1D0+62w
word_2599E	dw ?			; DATA XREF: sub_B1D0+68w
word_259A0	dw ?			; DATA XREF: sub_B1D0+6Ew
byte_259A2	db ?			; DATA XREF: sub_B1D0+83w seg001:5514w ...
byte_259A3	db ?			; DATA XREF: sub_B1D0+74w seg001:54F8w ...
byte_259A4	db ?			; DATA XREF: sub_AD03+3Dw sub_AED0+60w ...
byte_259A5	db ?			; DATA XREF: sub_F0A5+1Dr
					; sub_10BFD:loc_10C6Fr	...
byte_259A6	db ?			; DATA XREF: seg001:48DBr seg001:496Br ...
byte_259A7	db ?			; DATA XREF: sub_1042A+13w
		db    ?	;
byte_259A9	db ?			; DATA XREF: sub_B1D0+7Ew seg001:54F3w ...
byte_259AA	db ?			; DATA XREF: sub_B1D0+79w seg001:54E0r ...
byte_259AB	db ?			; DATA XREF: sub_B1D0+88w sub_F064+9r	...
dword_259AC	dd ?			; DATA XREF: sub_DAA6+17r sub_DAA6+23r ...
dword_259B0	dd ?			; DATA XREF: sub_107E2+AAr
					; sub_10ABF+10Cw
word_259B4	dw ?			; DATA XREF: sub_AD03+60w
					; sub_AD03:loc_AD90w ...
byte_259B6	db ?			; DATA XREF: sub_B1D0+8Dw
					; sub_E67A+128w ...
		db    ?	;
		db    ?	;
byte_259B9	db ?			; DATA XREF: sub_107E2+23r
					; sub_10988+A2r ...
word_259BA	dw ?			; DATA XREF: sub_107E2+19r
					; sub_10988+2Cw ...
		dw ?
		dw ?
stage_title_len	dw ?			; DATA XREF: seg001:64DCr seg001:64EDr ...
bgm_title_len	dw ?			; DATA XREF: seg001:64B7r seg001:64CDr ...
stage_title_id	db ?			; DATA XREF: seg001:650Ew seg001:6529w ...
		db ?
word_259C6	dw ?			; DATA XREF: seg001:66F3r seg001:6709r ...
word_259C8	dw ?			; DATA XREF: seg001:6866w seg001:6869r ...
byte_259CA	db ?			; DATA XREF: seg001:67EFr seg001:6831w ...
byte_259CB	db ?			; DATA XREF: seg001:loc_11386w
					; seg001:loc_11474r ...
unk_259CC	db    ?	;		; DATA XREF: seg001:6926o
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
word_259D6	dw ?			; DATA XREF: seg001:6879w seg001:691Fr ...
word_259D8	dw ?			; DATA XREF: seg001:688Bw
					; seg001:loc_11380w ...
bgm_title_id	db ?			; DATA XREF: seg001:24A6w seg001:24B7w ...
byte_259DB	db ?			; DATA XREF: sub_EE06+8Bw seg001:67ECr ...
word_259DC	dw ?			; DATA XREF: sub_AB88+B0r
					; sub_AED0+2E3w ...
word_259DE	dw ?			; DATA XREF: sub_AB88+B4r
					; sub_AED0+2E9w ...
byte_259E0	db ?			; DATA XREF: seg001:loc_10DDEw
					; sub_10EED+4r	...
		db ?
dword_259E2	dd ?			; DATA XREF: seg001:69C7r
					; sub_1C8C8:loc_1CB84w	...
byte_259E6	db ?			; DATA XREF: seg001:loc_115F5w
					; seg001:6B09r
		db ?
word_259E8	dw ?			; DATA XREF: sub_18314+3r sub_1838A+4r ...
word_259EA	dw ?			; DATA XREF: sub_18044+36r
					; seg003:46BEr	...
word_259EC	dw ?			; DATA XREF: sub_18044+2Dr
					; seg003:46C4r	...
byte_259EE	db ?			; DATA XREF: sub_18684+2Cw
					; seg003:4D2Dw	...
byte_259EF	db ?			; DATA XREF: sub_11647+5r sub_11647+Cr ...
byte_259F0	db ?			; DATA XREF: sub_18DB6+58r
					; sub_18DB6+87w
byte_259F1	db ?			; DATA XREF: sub_1CD6E-3B5Aw
byte_259F2	db ?			; DATA XREF: seg003:loc_17DF5r
					; sub_19EBC+1Bw ...
		db ?
word_259F4	dw ?			; DATA XREF: sub_CB58+1Br sub_19EBC+3w ...
dword_259F6	dd ?			; DATA XREF: sub_AB88+69r
					; sub_19EBC+15w ...
word_259FA	dw ?			; DATA XREF: sub_AB88+86r sub_19EBC+9w ...
dword_259FC	dd ?			; DATA XREF: seg003:1A5Aw
					; sub_19EE4+18r ...
word_25A00	dw ?			; DATA XREF: seg003:1A60w
					; sub_19EE4+12r ...
byte_25A02	db ?			; DATA XREF: seg003:7A48w seg003:7C34w ...
byte_25A03	db ?			; DATA XREF: seg001:719Ar
					; seg001:loc_11CE9r ...
byte_25A04	db ?			; DATA XREF: seg001:722Br
					; seg001:loc_11D7Ar ...
		db ?
byte_25A06	db ?			; DATA XREF: sub_1A439+12r
					; sub_1A439:loc_1A457r	...
byte_25A07	db ?			; DATA XREF: sub_1A3C3+25r
					; seg003:7A9Dw
byte_25A08	db ?			; DATA XREF: seg001:loc_11C57r
					; sub_1A503:loc_1A512w	...
		db ?
word_25A0A	dw ?			; DATA XREF: sub_1A53D+9w sub_1A53D+Dr ...
word_25A0C	dw ?			; DATA XREF: seg001:720Er
					; sub_1A439+50w ...
word_25A0E	dw ?			; DATA XREF: seg001:7219r
					; sub_1A439+53w ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
byte_25A1B	db ?			; DATA XREF: seg001:7205r
					; sub_1A439+3Fr ...
		db    ?	;
		db    ?	;
byte_25A1E	db ?			; DATA XREF: seg001:7224r
					; seg001:loc_11D6Cr ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
byte_25A24	db ?			; DATA XREF: seg003:89ADw
		db ?
byte_25A26	db ?			; DATA XREF: sub_1B95C:loc_1B96Cr
					; sub_1B95C+80w ...
byte_25A27	db ?			; DATA XREF: seg001:loc_11E71r
					; sub_12247+17r ...
word_25A28	dw ?			; DATA XREF: seg001:7388r seg001:738Fr ...
word_25A2A	dw ?			; DATA XREF: seg001:7397r seg001:739Er ...
dword_25A2C	dd ?			; DATA XREF: sub_12247+1Er
unk_25A30	db    ?	;		; DATA XREF: sub_1B95C+254o
		db    ?	;
word_25A32	dw ?			; DATA XREF: sub_1B95C+258o
					; sub_1B95C+289r ...
word_25A34	dw ?			; DATA XREF: sub_1B95C+26r
					; sub_1B95C+2Dr ...
word_25A36	dw ?			; DATA XREF: sub_1B95C+A4r
					; sub_1B95C+E7w ...
byte_25A38	db ?			; DATA XREF: sub_1B95C+B6w
					; sub_1B95C+C9w ...
		db ?
word_25A3A	dw ?			; DATA XREF: sub_1BC73+3r
					; sub_1BC73:loc_1BC8Ar	...
byte_25A3C	db ?			; DATA XREF: sub_AB88+FFr
					; sub_AB88+106w ...
byte_25A3D	db ?			; DATA XREF: sub_AB88+F8r
					; sub_AB88+103w ...
word_25A3E	dw ?			; DATA XREF: sub_B835+8Er sub_B971+35w ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
word_266C0	dw ?			; DATA XREF: sub_B6D1+62w sub_B835+3Fw ...
byte_266C2	db ?			; DATA XREF: sub_B6D1+68w sub_B835+34w ...
		db ?
word_266C4	dw ?			; DATA XREF: sub_B6D1+7Dw sub_B835+43w ...
dword_266C6	dd ?			; DATA XREF: sub_AB88+110w
					; sub_11ECB+3w
word_266CA	dw ?			; DATA XREF: sub_AB88+115r
					; sub_AB88+11Bw ...
byte_266CC	db ?			; DATA XREF: sub_AB88+130w
					; seg001:2250r	...
byte_266CD	db ?			; DATA XREF: sub_AB88+12Bw
					; seg001:2262r	...
byte_266CE	db ?			; DATA XREF: sub_AB88+126w
					; sub_CC3A+49r	...
byte_266CF	db ?			; DATA XREF: sub_AB88+121w
					; seg001:1E8Cr	...
word_266D0	dw ?			; DATA XREF: sub_AAF2+6r sub_AAF2+12w	...
byte_266D2	db ?			; DATA XREF: _main+65r	sub_AB88+2Dw ...
byte_266D3	db ?			; DATA XREF: sub_AB88+DFr sub_AB88+EBw ...
byte_266D4	db ?			; DATA XREF: sub_AD03+D9r sub_AED0+18w ...
byte_266D5	db ?			; DATA XREF: sub_AD03+C3w
					; sub_AD03:loc_ADD7w ...
byte_266D6	db ?			; DATA XREF: sub_AD03+11Fw
					; sub_AD03+144w ...
byte_266D7	db ?			; DATA XREF: sub_AD03+11Aw
					; sub_AD03+13Fw ...
byte_266D8	db ?			; DATA XREF: sub_AD03:loc_AD2Ew
					; sub_AD03+59r	...
		db ?
word_266DA	dw ?			; DATA XREF: sub_C17C+43r sub_C17C+4Ar ...
word_266DC	dw ?			; DATA XREF: sub_C17C+34r sub_C17C+3Br ...
word_266DE	dw ?			; DATA XREF: sub_B488+34w sub_B488+5Fw ...
byte_266E0	db ?			; DATA XREF: sub_AD03:loc_ADD0w
					; sub_AD03+F6w	...
		db ?
byte_266E2	db ?			; DATA XREF: sub_13FB2+26w
					; seg003:07E2w	...
byte_266E3	db ?			; DATA XREF: sub_13FB2+2Bw
					; seg003:0888w	...
dword_266E4	dd ?			; DATA XREF: sub_13BCE+4Aw
					; seg003:07EAw	...
dword_266E8	dd ?			; DATA XREF: sub_1D294:loc_1D391r
					; sub_1D3BF:loc_1D460r
byte_266EC	db ?			; DATA XREF: sub_13FB2+3Bw
					; seg003:088Dw	...
byte_266ED	db ?			; DATA XREF: sub_13FB2+33w
					; sub_13FB2+53w ...
byte_266EE	db ?			; DATA XREF: sub_13FB2+36w
					; seg003:0897w	...
byte_266EF	db ?			; DATA XREF: seg003:0892w seg003:08BBw ...
byte_266F0	db ?			; DATA XREF: seg003:08C0w seg003:095Dw ...
		db ?
byte_266F2	db ?			; DATA XREF: sub_13FB2+40w
					; sub_147DB+Fw	...
		db ?
dword_266F4	dd ?			; DATA XREF: sub_C778+Cr sub_C778+30r	...
dword_266F8	dd ?			; DATA XREF: seg001:764Ar sub_146AF+6w ...
word_266FC	dw ?			; DATA XREF: sub_14700+16w
					; sub_14700:loc_14721r	...
word_266FE	dw ?			; DATA XREF: seg003:0594w seg003:0605w ...
word_26700	dw ?			; DATA XREF: seg003:19DCr seg003:1A46r ...
word_26702	dw ?			; DATA XREF: seg003:07FDw seg003:0801r ...
byte_26704	db ?			; DATA XREF: sub_C778+22r sub_C778+46r ...
byte_26705	db ?			; DATA XREF: sub_C778+5r
					; sub_C778:loc_C7A1r ...
word_26706	dw ?			; DATA XREF: sub_C885+5Er sub_C885+6Cr ...
byte_26708	db ?			; DATA XREF: sub_C778+8Br sub_C778+F8w ...
byte_26709	db ?			; DATA XREF: seg003:0880w seg003:08CAr ...
dword_2670A	dd ?			; DATA XREF: sub_E8A3+6r sub_E8A3+3Cr	...
dword_2670E	dd ?			; DATA XREF: sub_12247+Fr seg001:83B9r ...
word_26712	dw ?			; DATA XREF: sub_15ECE+67w
					; seg003:2C1Dw	...
word_26714	dw ?			; DATA XREF: sub_15ECE+73w
					; sub_16AE9+4Dw ...
word_26716	dw ?			; DATA XREF: seg003:2C2Dw seg003:2CCAw ...
byte_26718	db ?			; DATA XREF: sub_E8A3+25r sub_ED71+28r ...
byte_26719	db ?			; DATA XREF: sub_E8A3+1Cr
					; sub_E8A3:loc_E8D8r ...
word_2671A	dw ?			; DATA XREF: sub_E8A3+10Dr
					; sub_E8A3+18Cr ...
byte_2671C	db ?			; DATA XREF: sub_E8A3+4Fr sub_E8A3+72w ...
byte_2671D	db ?			; DATA XREF: seg001:85A3r
					; sub_15ECE+B2w ...
byte_2671E	db ?			; DATA XREF: seg001:84BBr seg001:84E1r ...
byte_2671F	db ?			; DATA XREF: seg003:2C23w seg003:2C79w ...
word_26720	dw ?			; DATA XREF: seg003:2C33w seg003:2CC7r ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
word_27628	dw ?			; DATA XREF: seg000:0277r
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
byte_2A16E	db ?			; DATA XREF: seg000:0271w
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_2A8C6	dd ?			; DATA XREF: sub_13AB7+18r
					; sub_13B21+17r ...
dword_2A8CA	dd ?			; DATA XREF: sub_11ECB+BDw
					; sub_13AB7+2Dr ...
word_2A8CE	dw ?			; DATA XREF: sub_11ECB+B2w
					; sub_13AB7+24r ...
word_2A8D0	dw ?			; DATA XREF: sub_11ECB+A7w
					; sub_13AB7+49r ...
byte_2A8D2	db ?			; DATA XREF: sub_11ECB+ADw
					; sub_13AB7+43r ...
byte_2A8D3	db ?			; DATA XREF: sub_11ECB+B8w
					; sub_13AB7+3Dr ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_2CDC6	dd ?			; DATA XREF: _main+19r	_main+3Cr ...
byte_2CDCA	db ?			; DATA XREF: sub_BF16+8r
					; sub_1002A:loc_1003Aw	...
		db ?
word_2CDCC	dw ?			; DATA XREF: sub_12157+19r
					; sub_1DFEF+89w ...
word_2CDCE	dw ?			; DATA XREF: sub_BF16+13r
					; sub_1002A+16w ...
byte_2CDD0	db ?			; DATA XREF: sub_12461+10r
					; sub_12461+49r ...
byte_2CDD1	db ?			; DATA XREF: sub_12461+6r
					; sub_12461+34r ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
word_2CF28	dw ?			; DATA XREF: sub_12461+D5w
					; sub_12461+10Fw ...
word_2CF2A	dw ?			; DATA XREF: seg001:792Cr
					; sub_12461+FDw ...
word_2CF2C	dw ?			; DATA XREF: sub_12461:loc_12484w
					; sub_12461:loc_1248Cw	...
unk_2CF2E	db    ?	;		; DATA XREF: sub_12A0A+8Do
					; sub_12AB7+48o ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
byte_2CFDC	db ?			; DATA XREF: sub_12A0A:loc_12A18w
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
byte_2CFF2	db ?			; DATA XREF: sub_12B71+64w
					; sub_12B71+71w ...
		db ?
word_2CFF4	dw ?			; DATA XREF: sub_AED0:loc_B003w
					; sub_AED0:loc_B04Bw ...
byte_2CFF6	db ?			; DATA XREF: sub_1CFC8+98w
					; sub_1CFC8+ADw ...
byte_2CFF7	db ?			; DATA XREF: sub_147DB+3Bw
					; sub_160A5+70w ...
byte_2CFF8	db ?			; DATA XREF: sub_17491+63w
					; sub_17491+9Bw ...
byte_2CFF9	db ?			; DATA XREF: sub_CA98+8r sub_11ECB+36w ...
byte_2CFFA	db ?			; DATA XREF: sub_CA98+Fr sub_EE06+7Ar	...
		db ?
word_2CFFC	dw ?			; DATA XREF: sub_F091+9r sub_11ECB+3Bw ...
word_2CFFE	dw ?			; DATA XREF: sub_AD03:loc_AE17w
					; sub_AD03:loc_AE3Cw ...
word_2D000	dw ?			; DATA XREF: sub_AD03+124w
					; sub_AD03+160w ...
word_2D002	dw ?			; DATA XREF: sub_AD03+12Aw
					; sub_AD03+166w ...
word_2D004	dw ?			; DATA XREF: sub_AD03+130w
					; sub_AD03+16Cw ...
word_2D006	dw ?			; DATA XREF: sub_C99Cr	sub_CA2Er ...
word_2D008	dw ?			; DATA XREF: sub_1CFC8+1F8w
					; sub_1D294+F1r ...
byte_2D00A	db ?			; DATA XREF: sub_B1D0+Cw seg001:54D9r	...
		db ?
word_2D00C	dw ?			; DATA XREF: sub_F07A+9r sub_10988+6Ew ...
byte_2D00E	db ?			; DATA XREF: sub_1DA1B+Aw sub_1DA38+Bw ...
		db ?
dword_2D010	dd ?			; DATA XREF: sub_AB88+6Dr seg001:2495w ...
word_2D014	dw ?			; DATA XREF: sub_AB88+82r seg001:249Cw ...
word_2D016	dw ?			; DATA XREF: seg001:248Br
					; sub_1DFEF+60w ...
dword_2D018	dd ?			; DATA XREF: seg001:2491r
					; sub_1DFEF+6Cw ...
word_2D01C	dw ?			; DATA XREF: seg001:2499r
					; sub_1DFEF+72w ...
byte_2D01E	db ?			; DATA XREF: sub_16389+8Cr
					; sub_1905A+C0r ...
byte_2D01F	db ?			; DATA XREF: sub_1ABE5+39r
					; sub_1E245+ABw ...
byte_2D020	db ?			; DATA XREF: sub_1E245+BFw
					; sub_1EDBC+29r
byte_2D021	db ?			; DATA XREF: sub_1E245+D3w
					; sub_1EF87+3Ar
byte_2D022	db ?			; DATA XREF: sub_1E245+E7w
					; sub_1EF87+40r
byte_2D023	db ?			; DATA XREF: sub_1E245+FBw
					; sub_1ED15+41r
byte_2D024	db ?			; DATA XREF: sub_1E245+10Fw
					; sub_1F2F3+1Br
		db ?
		db    ?	;
		db    ?	;
byte_2D028	db ?			; DATA XREF: seg003:BA84w
		db    ?	;
		db    ?	;
byte_2D02B	db ?			; DATA XREF: sub_16B85+7r
					; sub_16B85:loc_16BC5w	...
byte_2D02C	db ?			; DATA XREF: seg003:3E10w
					; sub_1CCB8-539Er ...
byte_2D02D	db ?			; DATA XREF: sub_1653D+21w
					; sub_1653D+A5r ...
word_2D02E	dw ?			; DATA XREF: sub_BF94+Er seg001:76BBr	...
word_2D030	dw ?			; DATA XREF: sub_1DFEF+7Dw
					; sub_1E0B3+82w ...
word_2D032	dw ?			; DATA XREF: sub_1DFEF+83w
					; sub_1E0B3+88w ...
word_2D034	dw ?			; DATA XREF: sub_1E3C2+86w
word_2D036	dw ?			; DATA XREF: sub_1E3C2+8Cw
word_2D038	dw ?			; DATA XREF: sub_1E3C2+92w
byte_2D03A	db ?			; DATA XREF: sub_1ED15:loc_1ED6Ew
					; sub_1ED15+87r
byte_2D03B	db ?			; DATA XREF: sub_12E37+2Er
					; seg003:BA7Fw	...
byte_2D03C	db ?			; DATA XREF: seg001:83B2r sub_1E917+Bw ...
		db    ?	;
		db    ?	;
word_2D03F	dw ?			; DATA XREF: sub_1EB31+30r
					; sub_1EB31+3Fr ...
		db ?
word_2D042	dw ?			; DATA XREF: sub_1F111+22w
dword_2D044	dd ?			; DATA XREF: sub_1EB31+1Cr
					; sub_1EB8C+24r ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
word_2D04C	dw ?			; DATA XREF: sub_1EB8C+16r
					; seg003:B3A0w
		dw ?
word_2D050	dw ?			; DATA XREF: sub_1EB31+24r
					; sub_1EB8C+2Cr
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
byte_2D056	db ?			; DATA XREF: sub_1EB31+2Ar
					; sub_1EB31+43r ...
byte_2D057	db ?			; DATA XREF: sub_1EB8C+4Cr
					; seg003:B3D9r	...
byte_2D058	db ?			; DATA XREF: seg001:loc_13011w
					; seg001:8525r
		db ?
word_2D05A	dw ?			; DATA XREF: sub_1F97A+Ar seg003:C8B1w ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
word_2D0DC	dw ?			; DATA XREF: seg000:56ABw
word_2D0DE	dw ?			; DATA XREF: seg000:56A5w
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
word_2D0E4	dw ?			; DATA XREF: seg000:564Br seg000:5718w ...
word_2D0E6	dw ?			; DATA XREF: seg000:5647r seg000:5714w ...
dword_2D0E8	dd ?			; DATA XREF: sub_87F1+ACw sub_87F1+C2r ...
dword_2D0EC	dd ?			; DATA XREF: __ExceptionHandler+2BEw
					; __ExceptionHandler+2D1r ...
		dd ?
		dd ?
		dd ?
		dd ?
dseg		ends

; ===========================================================================

; Segment type:	Uninitialized
seg006		segment	byte stack 'STACK' use16
		assume cs:seg006
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing
		db 80h dup(?)
seg006		ends


		end start
