;
; +-------------------------------------------------------------------------+
; |   This file has been generated by The Interactive Disassembler (IDA)    |
; |        Copyright (c) 2009 by Hex-Rays, <support@hex-rays.com>           |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	50C37C4BDDEC04B753524F5D3B030A96

; File Name   :	th04/MAINE.EXE
; Format      :	MS-DOS executable (EXE)
; Base Address:	0h Range: 0h-126D0h Loaded length: 10062h
; Entry	Point :	0:0
; OS type	  :  MS	DOS
; Application type:  Executable	16bit

		.386
		.model large
		locals

include libs/BorlandC/RULES.ASI

; ===========================================================================

; Segment type:	Pure code
seg000		segment	byte public 'CODE' use16
		assume cs:seg000
		assume es:nothing, ss:seg005, ds:nothing, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function noreturn

		public start
start		proc far
		mov	dx, seg	dseg
		mov	cs:DGROUP@, dx
		mov	ah, 30h
		int	21h		; DOS -	GET DOS	VERSION
					; Return: AL = major version number (00h for DOS 1.x)
		mov	bp, ds:2
		mov	bx, ds:2Ch
		mov	ds, dx
		assume ds:dseg
		mov	word_E5AC, ax
		mov	segx, es
		mov	word_E5A6, bx
		mov	word_E5BE, bp
		call	sub_178
		mov	ax, word_E5A6
		mov	es, ax
		xor	ax, ax
		mov	bx, ax
		mov	di, ax
		mov	cx, 7FFFh
		cld

loc_37:
		repne scasb
		jcxz	short loc_7E
		inc	bx
		cmp	es:[di], al
		jnz	short loc_37
		or	ch, 80h
		neg	cx
		mov	word_E5A4, cx
		mov	cx, 2
		shl	bx, cl
		add	bx, 10h
		and	bx, 0FFF0h
		mov	word_E5A8, bx
		mov	dx, ss
		sub	bp, dx
		mov	di, seg	dseg
		mov	es, di
		assume es:dseg
		mov	di, es:word_F096
		cmp	di, 200h
		jnb	short loc_75
		mov	di, 200h
		mov	es:word_F096, di

loc_75:
		mov	cl, 4
		shr	di, cl
		inc	di
		cmp	bp, di
		jnb	short loc_83

loc_7E:
		nop
		push	cs
		call	near ptr __abort
; ---------------------------------------------------------------------------

loc_83:
		mov	bx, di
		add	bx, dx
		mov	word_E5B6, bx
		mov	word_E5BA, bx
		mov	ax, segx
		sub	bx, ax
		mov	es, ax
		assume es:nothing
		mov	ah, 4Ah	; 'J'
		push	di
		int	21h		; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
					; ES = segment address of block	to change
					; BX = new size	in paragraphs
		pop	di
		shl	di, cl
		cli
		mov	ss, dx
		assume ss:nothing
		mov	sp, di
		sti
		mov	ax, seg	dseg
		mov	es, ax
		assume es:dseg
		mov	es:word_F096, di
		xor	ax, ax
		mov	es, cs:DGROUP@
		assume es:nothing
		mov	di, 0E9Eh
		mov	cx, 4120h
		sub	cx, di
		cld
		rep stosb
		cmp	word_EFF8, 14h
		jbe	short loc_110
		cmp	byte ptr word_E5AC, 3
		jb	short loc_110
		ja	short loc_D7
		cmp	byte ptr word_E5AC+1, 1Eh
		jb	short loc_110

loc_D7:
		mov	ax, 5801h
		mov	bx, 2
		int	21h		; DOS -	3+ - GET/SET MEMORY ALLOCATION STRATEGY
					; AL = function	code: set allocation strategy
		jb	short loc_10B
		mov	ah, 67h	; 'g'
		mov	bx, word_EFF8
		int	21h		; DOS -	3.3+ - SET HANDLE COUNT
					; BX = desired number of handles (max 255)
		jb	short loc_10B
		mov	ah, 48h	; 'H'
		mov	bx, 1
		int	21h		; DOS -	2+ - ALLOCATE MEMORY
					; BX = number of 16-byte paragraphs desired
		jb	short loc_10B
		inc	ax
		mov	word_E5BE, ax
		dec	ax
		mov	es, ax
		assume es:nothing
		mov	ah, 49h
		int	21h		; DOS -	2+ - FREE MEMORY
					; ES = segment address of area to be freed
		jb	short loc_10B
		mov	ax, 5801h
		mov	bx, 0
		int	21h		; DOS -	3+ - GET/SET MEMORY ALLOCATION STRATEGY
					; AL = function	code: set allocation strategy
		jnb	short loc_110

loc_10B:
		nop
		push	cs
		call	near ptr __abort
; ---------------------------------------------------------------------------

loc_110:
		xor	bp, bp
		push	bp
		nop
		push	cs
		call	near ptr __ExceptInit
		pop	ax
		mov	es, cs:DGROUP@
		assume es:nothing
		mov	si, 0E7Ah
		mov	di, 0E98h
		call	sub_1E8
		push	word_E5A2
		push	envp		; envp
		push	word_E59E
		push	argv		; argv
		push	argc		; argc
		call	_main
		push	ax		; status
		nop
		push	cs
		call	near ptr _exit
; ---------------------------------------------------------------------------

__cleanup:
		mov	es, cs:DGROUP@
		push	si
		push	di
		mov	si, 0E98h
		mov	di, 0E9Eh
		call	sub_22C
		pop	di
		pop	si
		retf
start		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

__checknull	proc far
		retf
__checknull	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function noreturn	bp-based frame

__terminate	proc near

arg_2		= byte ptr  4

		mov	bp, sp
		mov	ah, 4Ch	; 'L'
		mov	al, [bp+arg_2]
		int	21h		; DOS -	2+ - QUIT WITH EXIT CODE (EXIT)
__terminate	endp			; AL = exit code

; ---------------------------------------------------------------------------
		mov	dx, 4Bh	; 'K'
		push	ds
		push	dx
		nop
		push	cs
		call	near ptr ___ErrorMessage
		pop	dx
		pop	ds
		mov	ax, 3
		push	ax
		nop
		push	cs
		call	near ptr __exit

; =============== S U B	R O U T	I N E =======================================


sub_178		proc near
		push	ds
		mov	ax, 3500h
		int	21h		; DOS -	2+ - GET INTERRUPT VECTOR
					; AL = interrupt number
					; Return: ES:BX	= value	of interrupt vector

loc_17E:
		mov	word ptr dword_E58A, bx

loc_182:
		mov	word ptr dword_E58A+2, es
		mov	ax, 3504h
		int	21h		; DOS -	2+ - GET INTERRUPT VECTOR
					; AL = interrupt number
					; Return: ES:BX	= value	of interrupt vector
		mov	word ptr dword_E58E, bx
		mov	word ptr dword_E58E+2, es
		mov	ax, 3505h
		int	21h		; DOS -	2+ - GET INTERRUPT VECTOR
					; AL = interrupt number
					; Return: ES:BX	= value	of interrupt vector
		mov	word ptr dword_E592, bx
		mov	word ptr dword_E592+2, es
		mov	ax, 3506h
		int	21h		; DOS -	2+ - GET INTERRUPT VECTOR
					; AL = interrupt number
					; Return: ES:BX	= value	of interrupt vector
		mov	word ptr dword_E596, bx
		mov	word ptr dword_E596+2, es
		mov	ax, 2500h
		mov	dx, cs
		mov	ds, dx
		assume ds:seg000
		mov	dx, 163h
		int	21h		; DOS -	SET INTERRUPT VECTOR
					; AL = interrupt number
					; DS:DX	= new vector to	be used	for specified interrupt
		pop	ds
		assume ds:dseg
		retn
sub_178		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

__restorezero	proc far
		push	ds
		mov	ax, 2500h
		lds	dx, dword_E58A
		int	21h		; DOS -	SET INTERRUPT VECTOR
					; AL = interrupt number
					; DS:DX	= new vector to	be used	for specified interrupt
		pop	ds
		push	ds
		mov	ax, 2504h
		lds	dx, dword_E58E
		int	21h		; DOS -	SET INTERRUPT VECTOR
					; AL = interrupt number
					; DS:DX	= new vector to	be used	for specified interrupt
		pop	ds
		push	ds
		mov	ax, 2505h
		lds	dx, dword_E592
		int	21h		; DOS -	SET INTERRUPT VECTOR
					; AL = interrupt number
					; DS:DX	= new vector to	be used	for specified interrupt
		pop	ds
		push	ds
		mov	ax, 2506h
		lds	dx, dword_E596
		int	21h		; DOS -	SET INTERRUPT VECTOR
					; AL = interrupt number
					; DS:DX	= new vector to	be used	for specified interrupt
		pop	ds
		retf
__restorezero	endp


; =============== S U B	R O U T	I N E =======================================


sub_1E8		proc near
		mov	ax, 100h
		mov	dx, di
		mov	bx, si

loc_1EF:
		cmp	bx, di
		jz	short loc_20C

loc_1F3:
		cmp	byte ptr es:[bx], 0FFh
		jz	short loc_207
		mov	cl, es:[bx+1]
		xor	ch, ch
		cmp	cx, ax
		jnb	short loc_207
		mov	ax, cx
		mov	dx, bx

loc_207:
		add	bx, 6
		jmp	short loc_1EF
; ---------------------------------------------------------------------------

loc_20C:
		cmp	dx, di
		jz	short locret_22B
		mov	bx, dx
		cmp	byte ptr es:[bx], 0
		mov	byte ptr es:[bx], 0FFh
		push	es
		jz	short loc_224
		call	dword ptr es:[bx+2]
		pop	es
		jmp	short sub_1E8
; ---------------------------------------------------------------------------

loc_224:
		call	word ptr es:[bx+2]
		pop	es
		jmp	short sub_1E8
; ---------------------------------------------------------------------------

locret_22B:
		retn
sub_1E8		endp


; =============== S U B	R O U T	I N E =======================================


sub_22C		proc near
		mov	ah, 0
		mov	dx, di
		mov	bx, si

loc_232:
		cmp	bx, di
		jz	short loc_24D
		cmp	byte ptr es:[bx], 0FFh
		jz	short loc_248
		cmp	es:[bx+1], ah
		jb	short loc_248
		mov	ah, es:[bx+1]
		mov	dx, bx

loc_248:
		add	bx, 6
		jmp	short loc_232
; ---------------------------------------------------------------------------

loc_24D:
		cmp	dx, di
		jz	short locret_26C
		mov	bx, dx
		cmp	byte ptr es:[bx], 0
		mov	byte ptr es:[bx], 0FFh
		push	es
		jz	short loc_265
		call	dword ptr es:[bx+2]
		pop	es
		jmp	short sub_22C
; ---------------------------------------------------------------------------

loc_265:
		call	word ptr es:[bx+2]
		pop	es
		jmp	short sub_22C
; ---------------------------------------------------------------------------

locret_26C:
		retn
sub_22C		endp

; ---------------------------------------------------------------------------
DGROUP@		dw 0
; ---------------------------------------------------------------------------

__MMODEL:
		add	al, 0C0h ; 'À'
		add	ds:8E2Eh, bl
		push	ds
		pop	di
		add	cx, word ptr aGxgnbGvbGhvV_1+17h
		push	ds
		mov	ax, 0FFF3h

loc_27F:
		pop	si
		pop	di
		pop	ds
		pop	bp
		retf	8
; ---------------------------------------------------------------------------

loc_286:
		push	bp
		mov	bp, sp
		push	ds
		push	si
		push	di
		mov	ax, [bp+6]
		mov	cs:word_36D, ax
		mov	cs:word_35F, ds
		mov	ax, [bp+0Ch]
		mov	cs:word_2ED, ax
		push	ds
		lds	bx, [bp+8]
		mov	ax, [bx+8]
		mov	cx, [bx+0Ah]
		mov	bp, [bx+0Eh]
		sub	bp, [bx+0Ch]
		inc	bp
		pop	ds
		shr	ax, 3
		mov	cs:byte_309, al
		mov	dh, al
		mov	dl, cl
		mov	cs:word_364, dx
		mov	cs:byte_307, cl
		mul	cx
		mov	cs:word_302, ax
		shl	ax, 2
		mov	cs:word_2E8, ax
		xchg	ax, bx
		push	bx
		push	cs
		call	near ptr sub_209A
		jb	short loc_27F
		xchg	ax, cx
		push	bx
		push	cs
		call	near ptr sub_209A
		jb	short loc_27F
		mov	es, ax
		mov	ds, cx
; ---------------------------------------------------------------------------
		db 0B9h
word_2E8	dw 1234h
		db 33h,	0D2h, 0BBh
word_2ED	dw 1234h
		db 0B4h, 3Fh, 0CDh, 21h, 73h, 3, 0E9h, 7Ah, 0FFh, 3Bh
		db 0C1h, 74h, 3, 0E9h, 73h, 0FFh, 33h, 0F6h, 0BAh
word_302	dw 1234h
		db 33h,	0DBh, 0B5h
byte_307	db 11h
		db 0B1h
byte_309	db 11h
		db 51h,	52h, 53h, 0ADh,	8Bh, 0D8h, 0ADh, 8Bh, 0D0h, 0BFh
		db 4, 0, 0D0h, 0C3h, 0D0h, 0D5h, 0D0h, 0C3h, 0D0h, 0D1h
		db 0D0h, 0C3h, 0D0h, 0D4h, 0D0h, 0C3h, 3 dup(0D0h), 0C3h
		db 0D0h, 0D5h, 0D0h, 0C3h, 0D0h, 0D1h, 0D0h, 0C3h, 0D0h
		db 0D4h, 0D0h, 0C3h, 2 dup(0D0h), 8Ah, 0DFh, 8Ah, 0FAh
		db 8Ah,	0D6h, 4Fh, 75h,	0D7h, 5Bh, 5Ah,	26h, 88h, 1, 3
		db 0FAh, 26h, 88h, 21h,	3, 0FAh, 26h, 88h, 9, 3, 0FAh
		db 26h,	88h, 29h, 59h, 43h, 0FEh, 0C9h,	75h, 0B1h, 0FEh
		db 0CDh, 75h, 0ABh, 1Eh, 0B8h
word_35F	dw 1234h
		db 8Eh,	0D8h, 0B8h
word_364	dw 1234h
		db 6, 50h, 6, 33h, 0C0h, 50h, 0B8h
word_36D	dw 1234h
		db 50h,	0Eh, 0E8h, 0F0h, 21h, 7, 1Fh, 72h, 6, 4Dh, 74h
		db 1Fh,	0E9h, 69h, 0FFh, 1Eh, 2Eh, 8Eh,	1Eh, 5Fh, 3, 8Bh
		db 0C8h, 6, 0Eh, 0E8h, 0F9h, 1Ch, 0Eh, 0E8h, 0F5h, 1Ch
		db 8Bh,	0C1h, 0F9h, 5Eh, 5Fh, 1Fh, 5Dh,	0CAh, 8, 0, 90h
		db 1Eh,	2Eh, 8Eh, 1Eh, 5Fh, 3, 6, 0Eh, 0E8h, 0DFh, 1Ch
		db 0Eh,	0E8h, 0DBh, 1Ch, 0B8h, 2 dup(0), 0F8h, 5Eh, 5Fh
		db 1Fh,	5Dh, 0CAh, 8, 0

; =============== S U B	R O U T	I N E =======================================


sub_3B4		proc far
		mov	bx, sp
		mov	cx, ss:[bx+8]
		les	bx, ss:[bx+4]
		mov	dx, es:[bx+1Ch]
		mov	ax, 4201h
		mov	bx, cx
		xor	cx, cx
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method: offset from present location
		mov	ax, 0FFF3h
		jb	short locret_3D3
		mov	ax, 0

locret_3D3:
		retf	6
sub_3B4		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_3D6		proc far

arg_0		= dword	ptr  6
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		push	ds
		lds	dx, [bp+arg_0]
		mov	bx, [bp+arg_4]
		mov	ah, 3Fh	; '?'
		mov	cx, 20h	; ' '
		int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
					; BX = file handle, CX = number	of bytes to read
					; DS:DX	-> buffer
		push	ds
		pop	es
		assume es:dseg
		pop	ds
		sbb	cx, cx
		xor	ax, cx
		sub	ax, cx
		jb	short loc_40D
		push	si
		push	di
		mov	si, 0D6h ; 'Ö'
		mov	di, dx
		mov	cx, 5
		repe cmpsb
		pop	di
		pop	si

loc_400:
		jnz	short loc_409
		mov	ax, 0
		pop	bp
		retf	6
; ---------------------------------------------------------------------------

loc_409:
		mov	ax, 0FFF3h
		stc

loc_40D:
		pop	bp
		retf	6
sub_3D6		endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_412		proc far

arg_0		= dword	ptr  6
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		push	si
		cld
		push	ds
		lds	bx, [bp+arg_0]
		mov	cx, [bx+1Ch]
		mov	si, [bx+1Eh]
		pop	ds
		mov	ax, 0
		jcxz	short loc_46C
		push	cx
		push	cs
		call	near ptr sub_209A
		jb	short loc_46C
		push	ds
		mov	ds, ax
		xor	dx, dx
		mov	bx, [bp+arg_4]
		mov	ah, 3Fh
		int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
					; BX = file handle, CX = number	of bytes to read
					; DS:DX	-> buffer
		mov	ax, 0FFF3h
		jb	short loc_464
		mov	dx, si
		xor	si, si
		nop

loc_444:
		lodsb
		cmp	al, 10h
		jz	short loc_45E
		add	si, dx
		sub	si, 3
		lodsw
		or	ax, ax
		jz	short loc_459
		sub	cx, dx
		mov	dx, ax
		ja	short loc_444

loc_459:
		xor	ax, ax

loc_45B:
					; sub_1218+4r
		jmp	short loc_464
; ---------------------------------------------------------------------------
		nop

loc_45E:
		lodsw
		lodsb
		and	ax, 0Fh
		nop

loc_464:
					; sub_412:loc_45Bj
		mov	bx, ds
		pop	ds
		push	bx
		push	cs
		call	near ptr sub_2084

loc_46C:
		pop	si
		pop	bp
		retf	6
sub_412		endp

; ---------------------------------------------------------------------------
		nop
; ---------------------------------------------------------------------------
word_472	dw 0
word_474	dw 0
; ---------------------------------------------------------------------------

loc_476:
		cmp	bx, 2
		jnb	short locret_4BC
		shl	bx, 1
		mov	[bx+0D0h], ax
		mov	ax, word_E600
		or	ax, word_E602
		add	ax, 0FFFFh
		sbb	ax, ax
		cmp	ax, word_E5FE
		jz	short locret_4BC
		mov	word_E5FE, ax
		ja	short loc_4BE
		cli
		mov	al, 0Bh
		out	70h, al		; CMOS Memory:
					; used by real-time clock
		mov	al, byte_E605
		out	71h, al		; CMOS Memory:
					; used by real-time clock
		push	70h ; 'p'
		push	cs:word_474
		push	cs:word_472
		nop
		push	cs
		call	near ptr sub_826
		in	al, 0A1h	; Interrupt Controller #2, 8259A
		or	al, byte_E604
		out	0A1h, al	; Interrupt Controller #2, 8259A
		sti

locret_4BC:
		retn
; ---------------------------------------------------------------------------
		nop

loc_4BE:
		cli
		push	70h ; 'p'
		push	cs
		push	offset byte_51A
		nop
		push	cs
		call	near ptr sub_826
		mov	cs:word_474, dx
; ---------------------------------------------------------------------------
		db 2Eh
byte_4D0	db 0A3h
		db 72h,	4, 0B4h, 0Ah, 0BBh, 4, 0F0h, 0E8h, 2Ch,	0, 0B0h
		db 0Bh,	0E6h, 70h, 0E4h, 71h, 0A2h, 0D5h, 0, 0Ch, 40h
		db 8Ah,	0E0h, 0B0h, 0Bh, 0E6h, 70h, 8Ah, 0C4h, 0E6h, 71h
		db 0E4h, 0A1h, 8Ah, 0E0h, 24h, 0FEh, 0E6h, 0A1h, 32h, 0C4h
		db 0A2h, 0D4h, 0, 0FBh,	0FAh, 0B0h, 0Ch
byte_501	db 0E6h
		db 70h,	0E4h, 71h, 0FBh, 0C3h, 8Ah, 0C4h, 0E6h,	70h, 0E4h
		db 71h,	22h, 0C7h, 0Ah,	0C3h, 86h, 0E0h, 0E6h, 70h, 86h
		db 0E0h, 0E6h, 71h, 0C3h
byte_51A	db 50h,	1Eh, 0B8h
		dw seg dseg
		db 8Eh,	0D8h, 0FCh, 68h, 3Ch, 5, 83h, 3Eh, 0D0h, 2 dup(0)
byte_52A	db 74h
		db 4
byte_52C	db 0FFh
byte_52D	db 36h
		db 0D0h
byte_52F	db 0
byte_530	db 83h
byte_531	db 3Eh
byte_532	db 0D2h
byte_533	db 0
		db 0, 74h, 4, 0FFh, 36h, 0D2h, 0, 0C3h,	80h, 3Eh, 0D4h
		db 2 dup(0), 1Fh, 75h, 6, 58h, 2Eh, 0FFh, 2Eh, 72h, 4
		db 0B0h, 20h, 0E6h
byte_54D	db 0A0h
; ---------------------------------------------------------------------------
		out	20h, al		; Interrupt controller,	8259A.
		mov	al, 0Ch
		out	70h, al		; CMOS Memory:
					; used by real-time clock
		in	al, 71h		; CMOS Memory
		mov	al, 0Ch
		out	70h, al		; CMOS Memory:
					; used by real-time clock
		in	al, 71h		; CMOS Memory
		pop	ax
		iret

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_55E		proc far

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		mov	es, [bp+arg_0]
		assume es:nothing
		mov	bx, es:0
		mov	ah, 3Eh
		int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
					; BX = file handle
		push	es
		push	cs
		call	near ptr sub_2454
		pop	bp
		retf	2
sub_55E		endp

include libs/master.lib/bfill.asm

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_5B2		proc far

arg_0		= dword	ptr  6
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		push	ds
		lds	bx, [bp+arg_0]
		test	byte ptr [bx+5], 80h
		pop	ds
		jz	short loc_5EA
		mov	ah, 3Fh	; '?'
		mov	bx, [bp+arg_4]
		mov	cx, 30h	; '0'
		mov	dx, 0ECAh
		int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
					; BX = file handle, CX = number	of bytes to read
					; DS:DX	-> buffer
		jb	short loc_5EA
		mov	bx, dx
		mov	cx, 1004h

loc_5D4:
		mov	dl, [bx]
		mov	ax, [bx+1]
		mov	[bx], ax
		mov	[bx+2],	dl
		add	bx, 3
		dec	ch
		jnz	short loc_5D4
		mov	ax, 0
		jmp	short loc_5EE
; ---------------------------------------------------------------------------

loc_5EA:
		stc
		mov	ax, 0FFF3h

loc_5EE:
		pop	bp
		retf	6
sub_5B2		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_5F2		proc far

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		mov	es, [bp+arg_0]
		cmp	word ptr es:2, 0
		jz	short loc_619
		dec	word ptr es:2
		mov	bx, es:4
		inc	word ptr es:4
		mov	al, es:[bx+8]
		xor	ah, ah
		pop	bp
		retf	2
; ---------------------------------------------------------------------------

loc_619:
		push	es
		push	cs
		call	near ptr bfill
		pop	bp
		retf	2
sub_5F2		endp


; =============== S U B	R O U T	I N E =======================================


sub_622		proc far
		mov	bx, sp
		push	si
		push	di
		mov	si, ss:[bx+4]
		mov	word_E662, 0
		nop
		push	cs
		call	near ptr sub_2206

loc_635:
		nop
		push	cs
		call	loc_19EC
		mov	di, si
		cmp	di, 0
		jle	short loc_649

loc_641:
		nop
		push	cs
		call	near ptr sub_2206
		dec	di
		jnz	short loc_641

loc_649:
		add	word_E662, 6
		cmp	word_E662, 64h ; 'd'
		jl	short loc_635
		mov	word_E662, 64h ; 'd'
		nop
		push	cs
		call	loc_19EC
		pop	di
		pop	si
		retf	2
sub_622		endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_666		proc far
		mov	bx, sp
		push	si
		push	di
		mov	si, ss:[bx+4]
		mov	word_E662, 64h ; 'd'
		nop
		push	cs
		call	near ptr sub_2206

loc_679:
		nop
		push	cs
		call	loc_19EC
		mov	di, si
		cmp	di, 0
		jle	short loc_68D

loc_685:
		nop
		push	cs
		call	near ptr sub_2206
		dec	di
		jnz	short loc_685

loc_68D:
		sub	word_E662, 6
		jg	short loc_679
		mov	word_E662, 0
		nop
		push	cs
		call	loc_19EC
		pop	di
		pop	si
		retf	2
sub_666		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6A4		proc far

arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		mov	word_E940, 6
		mov	ax, word_E69A
		add	ax, 9
		push	ax
		push	cs
		call	near ptr sub_2350
		jb	short loc_6E0
		mov	es, ax
		push	[bp+arg_2]
		push	[bp+arg_0]
		push	cs
		call	near ptr sub_BD0
		jb	short loc_6E7
		mov	es:0, ax
		mov	word ptr es:2, 0
		mov	ax, word_E69A
		mov	es:6, ax
		mov	ax, es
		pop	bp
		retf	4
; ---------------------------------------------------------------------------

loc_6E0:
		mov	byte ptr word_E69C, 3
		jmp	short loc_6F1
; ---------------------------------------------------------------------------

loc_6E7:
		push	es
		push	cs
		call	near ptr sub_2454
		mov	byte ptr word_E69C, 1

loc_6F1:
		xor	ax, ax
		pop	bp
		retf	4
sub_6A4		endp

; ---------------------------------------------------------------------------
		nop
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	di, [bp+0Ah]
		mov	si, [bp+8]
		cmp	si, 0
		jle	short loc_71D

loc_708:
		push	word ptr [bp+6]
		push	cs
		call	near ptr sub_5F2
		inc	ah

loc_711:
		jz	short loc_71D
		mov	es, word ptr [bp+0Ch]
		mov	es:[di], al
		inc	di
		dec	si
		jnz	short loc_708

loc_71D:
					; seg000:loc_711j
		mov	ax, di
		sub	ax, [bp+0Ah]
		pop	di
		pop	si
		pop	bp
		retf	8
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		mov	es, word ptr [bp+0Ah]
		mov	ax, es:2
		mov	dx, [bp+6]
		mov	cx, [bp+8]
		or	cx, cx
		jnz	short loc_750
		cmp	dx, ax
		ja	short loc_750
		sub	es:2, dx
		add	es:4, dx
		xor	ax, ax
		pop	bp
		retf	6
; ---------------------------------------------------------------------------

loc_750:
		mov	bx, es:0
		sub	dx, ax
		sbb	cx, 0
		mov	ax, 4201h
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method: offset from present location
		sbb	ax, ax
		mov	es:2, ax
		pop	bp
		retf	6
; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_76A		proc far

arg_0		= byte ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

		push	bp
		mov	bp, sp
		mov	es, [bp+arg_6]
		mov	bx, 0
		xchg	bx, es:2
		mov	al, [bp+arg_0]
		mov	dx, [bp+arg_2]
		mov	cx, [bp+arg_4]
		cmp	al, 1
		jnz	short loc_78A
		sub	dx, bx
		sbb	cx, 0

loc_78A:
		mov	bx, es:0
		mov	ah, 42h
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method:
					; 0-from beginnig,1-from current,2-from	end
		sbb	ax, ax
		pop	bp
		retf	8
sub_76A		endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_79A		proc far

arg_0		= dword	ptr  6
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		push	ds
		lds	dx, [bp+arg_0]
		mov	ax, [bp+arg_4]
		int	21h		; DOS -
		pop	ds
		sbb	dx, dx
		xor	ax, dx
		sub	ax, dx
		pop	bp
		retf	6
sub_79A		endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_7B2		proc far
		mov	bx, sp
		mov	bx, ss:[bx+4]
		mov	ax, 4201h
		xor	cx, cx
		mov	dx, cx
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method: offset from present location
		jb	short loc_7E2
		push	si
		push	di
		push	ax
		push	dx
		xor	dx, dx
		mov	ax, 4202h
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method: offset from end of file
		mov	si, ax
		mov	di, dx
		pop	cx
		pop	dx
		mov	ax, 4200h
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method: offset from beginning of	file
		mov	ax, si
		mov	dx, di
		pop	di
		pop	si
		retf	2
; ---------------------------------------------------------------------------

loc_7E2:
		neg	ax
		sbb	dx, dx
		retf	2
sub_7B2		endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_7EA		proc far
		mov	ax, 0C00h
		int	21h		; DOS -	CLEAR KEYBOARD BUFFER
					; AL must be 01h, 06h, 07h, 08h, or 0Ah.
		retf
sub_7EA		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_7F0		proc far

arg_0		= word ptr  6
arg_2		= dword	ptr  8
arg_6		= word ptr  0Ch

		push	bp
		mov	bp, sp
		push	ds
		mov	bx, [bp+arg_6]
		lds	dx, [bp+arg_2]
		mov	cx, [bp+arg_0]
		mov	ah, 3Fh
		int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
					; BX = file handle, CX = number	of bytes to read
					; DS:DX	-> buffer
		pop	ds
		jnb	short loc_806
		neg	ax

loc_806:
		pop	bp
		retf	8
sub_7F0		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_80A		proc far

arg_0		= byte ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

		push	bp
		mov	bp, sp
		mov	bx, [bp+arg_6]
		mov	dx, [bp+arg_2]
		mov	cx, [bp+arg_4]
		mov	al, [bp+arg_0]
		mov	ah, 42h
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method:
					; 0-from beginnig,1-from current,2-from	end
		jnb	short loc_822
		neg	ax
		cwd

loc_822:
		pop	bp
		retf	8
sub_80A		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_826		proc far

arg_0		= dword	ptr  6
arg_4		= byte ptr  0Ah

		push	bp
		mov	bp, sp
		push	ds
		push	bx
		push	es
		mov	al, [bp+arg_4]
		lds	dx, [bp+arg_0]
		mov	ah, 35h
		int	21h		; DOS -	2+ - GET INTERRUPT VECTOR
					; AL = interrupt number
					; Return: ES:BX	= value	of interrupt vector
		mov	ah, 25h
		int	21h		; DOS -	SET INTERRUPT VECTOR
					; AL = interrupt number
					; DS:DX	= new vector to	be used	for specified interrupt
		mov	ax, bx
		mov	dx, es
		pop	es
		pop	bx
		pop	ds
		pop	bp
		retf	6
sub_826		endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_846		proc far
		mov	al, 0
		out	7Ch, al
		mov	al, 7
		out	6Ah, al		; PC-98	GDC (6a):
					;
		mov	al, 5
		out	6Ah, al		; PC-98	GDC (6a):
					;
		mov	al, 80h	; ''
		out	7Ch, al
		mov	al, 6
		out	6Ah, al		; PC-98	GDC (6a):
					;
		retf
sub_846		endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_85C		proc far
		mov	ax, 0FFF0h
		mov	dx, 4A0h
		out	dx, ax
		mov	ax, 0FFFFh
		mov	dx, 4A8h
		out	dx, ax
		mov	al, 7
		out	6Ah, al		; PC-98	GDC (6a):
					;
		mov	al, 4
		out	6Ah, al		; PC-98	GDC (6a):
					;
		mov	al, 0
		out	7Ch, al
		mov	al, 6
		out	6Ah, al		; PC-98	GDC (6a):
					;
		retf
sub_85C		endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_87C		proc far
		push	cs
		call	near ptr sub_846
		mov	dx, 4A0h
		mov	ax, 0FFF0h
		out	dx, ax
		mov	dx, 4A2h
		mov	ax, 0FFh
		out	dx, ax
		mov	dx, 4A8h
		mov	ax, 0FFFFh
		out	dx, ax
		mov	dx, 4ACh
		xor	ax, ax
		out	dx, ax
		mov	dx, 4AEh
		mov	ax, 0Fh
		out	dx, ax
		push	cs
		call	near ptr sub_85C
		retf
sub_87C		endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_8A8		proc far

arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		mov	ax, 0
		mov	bx, word_E61E
		cmp	bx, 0FFFFh
		jnz	short loc_8F8
		mov	ax, 3D02h
		push	ax
		push	[bp+arg_2]
		push	[bp+arg_0]
		push	cs
		call	near ptr sub_79A
		or	ax, dx
		mov	word_E61E, ax
		mov	cx, ax
		xor	ax, ax
		mov	word_F3F0, ax
		mov	word_F3EE, ax
		mov	word_F3F2, ax
		mov	word_F3F4, ax
		mov	word_F3EA, ax
		mov	word_F3EC, ax
		inc	dx
		jz	short loc_8F8
		mov	bx, cx
		xor	cx, cx
		mov	dx, cx
		mov	ax, 4202h
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method: offset from end of file
		mov	word_F3EA, ax
		mov	word_F3EC, dx
		mov	ax, 1

loc_8F8:
		pop	bp
		retf	4
sub_8A8		endp


; =============== S U B	R O U T	I N E =======================================


sub_8FC		proc far
		mov	bx, word_E61E
		cmp	bx, 0FFFFh
		jz	short locret_966
		mov	ax, word_F3EE
		cmp	word_F3F0, ax
		jnb	short loc_93A
		push	ds
		mov	cx, word_F3EE
		lds	dx, dword_F3E6
		mov	ah, 40h
		int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
					; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer
		pop	ds
		jb	short loc_92D
		add	word_F3EA, ax
		adc	word_F3EC, 0
		cmp	word_F3EE, ax
		jz	short loc_933

loc_92D:
		mov	word_F3F4, 1

loc_933:
		mov	word_F3EE, 0
		retf
; ---------------------------------------------------------------------------

loc_93A:
		cmp	word_F3F0, 0
		jz	short locret_966
		mov	dx, ax
		mov	cx, 0
		add	dx, word_F3EA
		mov	word_F3F0, cx
		mov	word_F3EE, cx
		adc	cx, word_F3EC
		mov	ax, 4200h
		mov	bx, word_E61E
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method: offset from beginning of	file
		mov	word_F3EA, ax
		mov	word_F3EC, dx

locret_966:
		retf
sub_8FC		endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_968		proc far
		push	cs
		call	near ptr sub_8FC
		mov	ah, 3Eh
		int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
					; BX = file handle
		mov	word_E61E, 0FFFFh
		retf
sub_968		endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_978		proc far

arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		mov	ax, 0
		mov	bx, word_E61E
		cmp	bx, 0FFFFh
		jnz	short loc_9B4
		mov	cx, 20h	; ' '
		mov	ah, 3Ch	; '<'
		push	ax
		push	[bp+arg_2]
		push	[bp+arg_0]
		nop
		push	cs
		call	near ptr sub_79A
		or	ax, dx
		mov	word_E61E, ax
		xor	ax, ax
		mov	word_F3F0, ax
		mov	word_F3EE, ax
		mov	word_F3F2, ax
		mov	word_F3F4, ax
		mov	word_F3EA, ax
		mov	word_F3EC, ax
		mov	ax, dx
		inc	ax

loc_9B4:
		pop	bp
		retf	4
sub_978		endp


; =============== S U B	R O U T	I N E =======================================


sub_9B8		proc far
		mov	bx, sp
		push	word ptr ss:[bx+6]
		push	word ptr ss:[bx+4]
		nop
		push	cs
		call	near ptr sub_BD0
		jb	short loc_9CE
		xchg	ax, bx
		mov	ah, 3Eh
		int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
					; BX = file handle

loc_9CE:
		sbb	ax, ax
		inc	ax
		retf	4
sub_9B8		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_9D4		proc far

arg_0		= word ptr  6
arg_2		= dword	ptr  8

		push	bp
		mov	bp, sp
		push	si
		push	di
		cmp	word_E61C, 0
		jz	short loc_A58
		mov	bx, [bp+arg_0]
		les	di, [bp+arg_2]

loc_9E6:
		mov	ax, word_F3F0
		cmp	word_F3EE, ax
		jb	short loc_A1C
		add	word_F3EA, ax
		adc	word_F3EC, 0
		push	bx
		push	ds
		mov	cx, word_E61C
		mov	bx, word_E61E
		lds	dx, dword_F3E6
		mov	ah, 3Fh
		int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
					; BX = file handle, CX = number	of bytes to read
					; DS:DX	-> buffer
		pop	ds
		pop	bx
		cmc
		sbb	dx, dx
		and	ax, dx
		mov	word_F3F0, ax
		jz	short loc_A77
		mov	word_F3EE, 0

loc_A1C:
		mov	si, word_F3F0
		sub	si, word_F3EE
		sub	si, bx
		sbb	ax, ax
		and	si, ax
		add	si, bx
		mov	ax, es
		or	ax, di
		jz	short loc_A4D
		or	si, si
		jz	short loc_A4D
		push	si
		push	ds
		mov	cx, si
		mov	ax, word_F3EE
		lds	si, dword_F3E6
		add	si, ax
		shr	cx, 1
		rep movsw
		adc	cx, cx
		rep movsb
		pop	ds
		pop	si

loc_A4D:
		add	word_F3EE, si
		sub	bx, si
		jnz	short loc_9E6
		jmp	short loc_A7D
; ---------------------------------------------------------------------------
		nop

loc_A58:
		push	ds
		mov	cx, [bp+arg_0]
		mov	bx, word_E61E
		lds	dx, [bp+arg_2]
		mov	ah, 3Fh
		int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
					; BX = file handle, CX = number	of bytes to read
					; DS:DX	-> buffer
		pop	ds
		add	word_F3EA, ax
		adc	word_F3EC, 0
		mov	bx, cx
		sub	bx, ax
		jz	short loc_A7D

loc_A77:
		mov	word_F3F2, 1

loc_A7D:
		mov	ax, [bp+arg_0]
		sub	ax, bx
		pop	di
		pop	si
		pop	bp
		retf	6
sub_9D4		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_A88		proc far

arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		xor	ax, ax
		mov	bx, word_E61E
		cmp	bx, 0FFFFh
		jnz	short loc_ABF
		push	[bp+arg_2]
		push	[bp+arg_0]
		nop
		push	cs
		call	near ptr sub_BD0
		sbb	bx, bx
		or	ax, bx
		mov	word_E61E, ax
		xor	ax, ax
		mov	word_F3F0, ax
		mov	word_F3EA, ax
		mov	word_F3EC, ax
		mov	word_F3EE, ax
		mov	word_F3F2, ax
		mov	word_F3F4, ax
		lea	ax, [bx+1]

loc_ABF:
		pop	bp
		retf	4
sub_A88		endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_AC4		proc far
					; sub_C2AD+2AP	...
		push	cs
		call	near ptr sub_8FC
		cmp	bx, 0FFFFh
		jz	short locret_AF5
		push	bp
		mov	bp, sp
		mov	al, [bp+6]
		mov	ah, 42h	; 'B'
		mov	dx, [bp+8]
		mov	cx, [bp+0Ah]
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method:
					; 0-from beginnig,1-from current,2-from	end
		pop	bp
		mov	ax, 4201h
		mov	dx, 0
		mov	cx, dx
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method: offset from present location
		mov	word_F3F2, 0
		mov	word_F3EA, ax
		mov	word_F3EC, dx

locret_AF5:
		retf	6
sub_AC4		endp

; ---------------------------------------------------------------------------
		mov	ax, word_F3EE
		xor	dx, dx
		add	ax, word_F3EA
		adc	dx, word_F3EC
		retf

; =============== S U B	R O U T	I N E =======================================


sub_B06		proc far
		push	word_E61E
		push	cs
		call	near ptr sub_7B2
		jb	short loc_B11
		retf
; ---------------------------------------------------------------------------

loc_B11:
		mov	ax, dx
		retf
sub_B06		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_B14		proc far

arg_0		= word ptr  6
arg_2		= dword	ptr  8

		push	bp
		mov	bp, sp
		push	si
		push	di
		cmp	word_E61C, 0
		jz	short loc_B8A
		mov	bx, [bp+arg_0]
		mov	si, word ptr [bp+arg_2]

loc_B26:
		mov	cx, word_E61C
		sub	cx, word_F3EE
		sub	cx, bx
		sbb	ax, ax
		and	cx, ax
		add	cx, bx
		les	di, dword_F3E6
		add	di, word_F3EE
		sub	bx, cx
		add	word_F3EE, cx
		push	ds
		mov	ds, word ptr [bp+arg_2+2]
		shr	cx, 1
		rep movsw
		adc	cx, cx
		rep movsb
		pop	ds
		or	ax, ax
		jns	short loc_B80
		push	ds
		push	bx
		mov	cx, word_E61C
		mov	bx, word_E61E
		lds	dx, dword_F3E6
		mov	ah, 40h
		int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
					; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer
		pop	bx
		pop	ds
		jb	short loc_B9C
		cmp	word_E61C, ax
		jnz	short loc_B9C
		mov	word_F3EE, 0
		add	word_F3EA, ax
		adc	word_F3EC, 0

loc_B80:
		or	bx, bx
		jnz	short loc_B26
		mov	ax, 1
		jmp	short loc_BB2
; ---------------------------------------------------------------------------
		nop

loc_B8A:
		push	ds
		mov	cx, [bp+arg_0]
		mov	bx, word_E61E
		lds	dx, [bp+arg_2]
		mov	ah, 40h
		int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
					; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer
		pop	ds
		jnb	short loc_BA4

loc_B9C:
		mov	word_F3F4, 1
		xor	ax, ax

loc_BA4:
		add	word_F3EA, ax
		adc	word_F3EC, 0
		add	ax, 0FFFFh
		sbb	ax, ax

loc_BB2:
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf	6
sub_B14		endp


; =============== S U B	R O U T	I N E =======================================


sub_BBA		proc far
		mov	bx, sp
		mov	ah, 3Eh	; '>'
		mov	bx, ss:[bx+4]
		int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
					; BX = file handle
		mov	ax, 0
		jnb	short locret_BCC
		mov	ax, 0FFF3h

locret_BCC:
		retf	2
sub_BBA		endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_BD0		proc far
		mov	bx, sp
		mov	ah, 3Dh	; '='
		mov	al, byte_E620
		push	ds
		lds	dx, ss:[bx+4]
		int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
					; DS:DX	-> ASCIZ filename
					; AL = access mode
					; 0 - read
		pop	ds
		jb	short loc_BE4
		retf	4
; ---------------------------------------------------------------------------

loc_BE4:
		mov	ax, 0FFFEh
		retf	4
sub_BD0		endp


; =============== S U B	R O U T	I N E =======================================


sub_BEA		proc far
		push	di
		mov	di, sp
		mov	ax, word_E612
		mov	cx, ax
		mov	bx, ss:[di+0Ah]
		sub	bx, ax
		jg	short loc_BFC
		xor	bx, bx

loc_BFC:
		mov	ax, bx
		shl	ax, 2
		add	ax, bx
		add	ax, word_E618
		mov	es, ax
		mov	ax, word_E614
		mov	dx, ss:[di+6]
		sub	dx, cx
		cmp	dx, ax
		jl	short loc_C18
		mov	dx, ax

loc_C18:
		sub	dx, bx
		jl	short loc_C4E
		mov	ax, ss:[di+0Ch]
		mov	bx, ss:[di+8]
		sub	bx, ax
		jl	short loc_C4E
		inc	bx
		mov	di, dx
		shl	di, 2
		add	di, dx
		shl	di, 4
		add	di, ax
		lea	dx, [bx+50h]
		mov	ax, 0FFFFh
		test	di, 1
		jnz	short loc_C60
		shr	bx, 1
		jb	short loc_C52
		nop

loc_C46:
		mov	cx, bx
		rep stosw
		sub	di, dx
		jnb	short loc_C46

loc_C4E:
		pop	di
		retf	8
; ---------------------------------------------------------------------------

loc_C52:
		mov	cx, bx
		rep stosw
		stosb
		sub	di, dx
		jnb	short loc_C52
		pop	di
		retf	8
; ---------------------------------------------------------------------------
		nop

loc_C60:
		shr	bx, 1
		jb	short loc_C74
		dec	bx
		nop

loc_C66:
		mov	cx, bx
		stosb
		rep stosw
		stosb
		sub	di, dx
		jnb	short loc_C66
		pop	di
		retf	8
; ---------------------------------------------------------------------------

loc_C74:
		mov	cx, bx
		stosb
		rep stosw
		sub	di, dx
		jnb	short loc_C74
		pop	di
		retf	8
sub_BEA		endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_C82		proc far
					; seg001:0EA7P	...
		mov	bx, sp
		mov	al, ss:[bx+6]
		mov	ah, ss:[bx+4]
		mov	dx, 7Eh	; '~'
		pushf
		cli
		out	7Ch, al
		shr	ah, 1
		sbb	al, al
		out	dx, al
		shr	ah, 1
		sbb	al, al
		out	dx, al
		shr	ah, 1
		sbb	al, al
		out	dx, al
		shr	ah, 1
		sbb	al, al
		out	dx, al
		popf
		retf	4
sub_C82		endp

; ---------------------------------------------------------------------------
		nop
		xor	al, al
		out	7Ch, al
		retf
; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_CB2		proc near
		out	0A0h, al	; PIC 2	 same as 0020 for PIC 1
		mov	al, ah
		jmp	short $+2
		jmp	short $+2
		out	0A0h, al	; PIC 2	 same as 0020 for PIC 1
		retn
sub_CB2		endp

; ---------------------------------------------------------------------------
		db    0
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_ED2

loc_CBE:
		push	cs
		call	near ptr sub_EC4
		jnz	short loc_CC9
		mov	ax, 40h	; '@'
		jmp	short loc_D35
; ---------------------------------------------------------------------------

loc_CC9:
		xor	al, al
		mov	dx, 0FFF7h
		mov	es, dx
		assume es:nothing
		mov	dx, 1827h
		cmp	dx, es:0
		jnz	short loc_CDE
		or	al, 2Ah
		jmp	short loc_D1F
; ---------------------------------------------------------------------------

loc_CDE:
		mov	dx, 0FD80h
		mov	es, dx
		assume es:nothing
		mov	dx, 2A27h
		cmp	dx, es:2
		jnz	short loc_D06
		mov	ah, es:4
		mov	bx, 0F2h ; 'ò'
		or	al, 22h

loc_CF7:
		mov	dl, [bx]
		or	dl, dl
		jz	short loc_D1F
		inc	bx
		cmp	ah, dl
		jnz	short loc_CF7
		or	al, 21h
		jmp	short loc_D1F
; ---------------------------------------------------------------------------

loc_D06:
		xor	bx, bx
		mov	es, bx
		assume es:seg000
		or	al, es:byte_501
		and	al, 8
		or	al, 20h
		mov	dh, byte ptr es:loc_400
		and	dh, 80h
		rol	dh, 1
		or	al, dh

loc_D1F:
		mov	dh, byte ptr es:loc_45B+1
		and	dh, 40h
		ror	dh, 1
		ror	dh, 1
		ror	dh, 1
		ror	dh, 1
		or	al, dh
		xor	ah, ah
		xor	al, 1

loc_D35:
		mov	word_E660, ax
		jmp	loc_E92
; END OF FUNCTION CHUNK	FOR sub_ED2
; ---------------------------------------------------------------------------
		nop
; START	OF FUNCTION CHUNK FOR sub_ED2

loc_D3C:
		push	cs
		call	near ptr sub_EC4
		jnz	short loc_D48
		mov	ax, 80h	; ''
		jmp	loc_E71
; ---------------------------------------------------------------------------

loc_D48:
		xor	bx, bx
		mov	ax, 4F01h
		int	2Fh
		or	bx, bx
		jz	short loc_D79
		push	ds
		mov	ax, 0F000h
		mov	ds, ax
		assume ds:nothing
		mov	al, ds:0E010h
		cmp	al, 54h	; 'T'
		jnz	short loc_D73
		xor	ax, ax
		mov	ds, ax
		assume ds:seg000
		mov	al, byte_4D0
		not	al
		and	al, 1
		or	al, 16h
		xor	ah, ah
		pop	ds
		assume ds:dseg
		jmp	loc_E71
; ---------------------------------------------------------------------------

loc_D73:
		pop	ds

loc_D74:
		mov	bx, 1Ah
		jmp	short loc_DC4
; ---------------------------------------------------------------------------

loc_D79:
		xor	bx, bx
		mov	ax, 5001h
		int	10h		; - VIDEO - SCROLOCK.COM - INSTALLATION	CHECK
					; Return: BX = 1954h if	installed
					; AL = 00 if inactive, nonzero if active
		or	bl, bl
		jz	short loc_D94
		mov	ax, 14h
		cmp	bx, 51h	; 'Q'
		jnz	short loc_D8F
		jmp	loc_E71
; ---------------------------------------------------------------------------

loc_D8F:
		or	ax, bx
		jmp	loc_E71
; ---------------------------------------------------------------------------

loc_D94:
		mov	ax, 3000h
		int	21h		; DOS -	GET DOS	VERSION
					; Return: AL = major version number (00h for DOS 1.x)
		cmp	bh, 0FFh
		jz	short loc_D74
		and	bh, 0FEh
		cmp	bh, 0EEh ; 'î'
		jnz	short loc_DAA
		mov	dl, 18h
		jmp	short loc_DC4
; ---------------------------------------------------------------------------

loc_DAA:
		mov	ax, 4900h
		pushf
		int	15h
		sbb	ax, ax
		popf
		test	ax, ax
		jz	short loc_DBA
		jmp	loc_E5C
; ---------------------------------------------------------------------------

loc_DBA:
		or	bl, bl
		jz	short loc_DC1
		jmp	loc_E5C
; ---------------------------------------------------------------------------

loc_DC1:
		mov	bx, 12h

loc_DC4:
		push	ds
		push	si
		xor	ax, ax
		mov	ds, ax
		assume ds:seg000
		mov	ax, 6300h
		int	21h		; DOS -	3.2+ only - GET	DOUBLE BYTE CHARACTER SET LEAD TABLE
		mov	ax, [si]
		not	ax
		and	ax, 1
		or	bx, ax
		pop	si
		pop	ds
		assume ds:dseg
		pushf
		push	bx
		mov	ax, 5010h
		int	15h
		cmp	ah, 86h	; ''
		jnz	short loc_DEA
		xor	ax, ax
		jmp	short loc_DF1
; ---------------------------------------------------------------------------

loc_DEA:
		mov	ax, es:[bx+2]
		and	ax, 1

loc_DF1:
		pop	bx
		popf
		jb	short loc_E1F
		ror	al, 1
		ror	al, 1
		or	ax, bx
		test	ax, 40h
		jz	short loc_E1F
		mov	bx, ax
		mov	dx, 0FCh ; 'ü'
		mov	ax, 3D00h
		int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
					; DS:DX	-> ASCIZ filename
					; AL = access mode
					; 0 - read
		jnb	short loc_E13
		xor	bx, 40h
		mov	ax, bx
		jmp	short loc_E71
; ---------------------------------------------------------------------------

loc_E13:
		push	bx
		mov	bx, ax
		mov	ah, 3Eh
		int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
					; BX = file handle
		pop	bx
		mov	ax, bx
		jmp	short loc_E71
; ---------------------------------------------------------------------------

loc_E1F:
		push	bx
		mov	dx, 105h
		mov	ax, 3D00h
		int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
					; DS:DX	-> ASCIZ filename
					; AL = access mode
					; 0 - read
		jb	short loc_E57
		push	ax
		mov	dx, 10Eh
		mov	cx, 4
		mov	bx, ax
		mov	ax, 4402h
		int	21h		; DOS -	2+ - IOCTL - READ CHARACTER DEVICE CONTROL STRING
					; BX = device handle, CX = number of bytes to read DS:DX -> buffer
		pop	ax
		pushf
		mov	bx, ax
		mov	ah, 3Eh
		int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
					; BX = file handle
		popf
		jb	short loc_E57
		mov	ax, 50F1h
		call	dword_E63E
		or	ah, ah
		jnz	short loc_E57
		pop	bx
		or	bx, 200h
		mov	ax, bx
		jmp	short loc_E71
; ---------------------------------------------------------------------------

loc_E57:
		pop	bx
		mov	ax, bx
		jmp	short loc_E71
; ---------------------------------------------------------------------------

loc_E5C:
		push	ds
		xor	ax, ax
		mov	ds, ax
		assume ds:seg000
		mov	ax, word ptr loc_1F3+1
		or	ax, word ptr loc_1F3+3
		pop	ds
		assume ds:dseg
		mov	ax, 10h
		jnz	short loc_E71
		mov	ax, 11h

loc_E71:
		mov	dx, ax
		mov	ax, 1A00h
		xor	bx, bx
		xor	cx, cx
		int	2Fh		; - Multiplex -	DOS 4+ ANSI.SYS	internal - INSTALLATION	CHECK
					; Return: AL = FFh if installed
		mov	ah, al
		cmp	ax, 0FFFFh
		jnz	short loc_E88
		and	ax, 110h
		or	dx, ax

loc_E88:
		mov	word_E660, dx
		mov	ax, dx
		; Hack
		db 0e9h
		db 001h
		db 000h
; END OF FUNCTION CHUNK	FOR sub_ED2
; ---------------------------------------------------------------------------
		nop
; START	OF FUNCTION CHUNK FOR sub_ED2

loc_E92:
		mov	ax, 3306h
		int	21h		; DOS -	5+ Get TRUE Version Number (BL major, BH minor,	DL revision, DH	flags)
		cmp	al, 0FFh
		jz	short loc_EB0
		cmp	bx, 3205h
		jz	short loc_EB9
		cmp	bl, 0Ah
		jz	short loc_EB9
		cmp	bl, 14h
		jz	short loc_EB9
		cmp	bl, 1Eh
		jz	short loc_EB9

loc_EB0:
		mov	ax, 1600h
		int	2Fh		; - Multiplex -	MS WINDOWS - ENHANCED WINDOWS INSTALLATION CHECK
					; Return: AL = anything	else
					; AL = Windows major version number >= 3
					; AH = Windows minor version number
		and	al, 7Fh
		jz	short loc_EBF

loc_EB9:
		or	word_E660, 8000h

loc_EBF:
		mov	ax, word_E660
		retf
; END OF FUNCTION CHUNK	FOR sub_ED2
; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_EC4		proc far
		mov	ax, 0FFFFh
		mov	es, ax
		assume es:nothing
		mov	ax, 0FC00h
		sub	ax, es:3
		retf
sub_EC4		endp


; =============== S U B	R O U T	I N E =======================================


sub_ED2		proc far

; FUNCTION CHUNK AT 0CBE SIZE 0000007D BYTES
; FUNCTION CHUNK AT 0D3C SIZE 00000155 BYTES
; FUNCTION CHUNK AT 0E92 SIZE 00000031 BYTES

		push	cs
		call	near ptr sub_EC4
		jz	short loc_EE9
		mov	ah, 0Fh
		int	10h		; - VIDEO - GET	CURRENT	VIDEO MODE
					; Return: AH = number of columns on screen
					; AL = current video mode
					; BH = current active display page
		cmp	ah, 0Fh
		jnz	short loc_EE6
		nop
		nop
		jmp	loc_CBE
; ---------------------------------------------------------------------------

loc_EE6:
		jmp	loc_D3C
; ---------------------------------------------------------------------------

loc_EE9:
		mov	ax, 40h	; '@'
		retf
sub_ED2		endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_EEE		proc far
		xor	ax, ax
		cmp	word_E642, ax
		jnz	short locret_F11
		mov	ax, 200h
		push	ax
		nop
		push	cs
		call	near ptr sub_2364
		or	ax, ax
		jz	short locret_F11
		mov	word_E642, ax
		push	ax
		xor	ax, ax
		push	ax
		push	cs
		call	near ptr sub_10A6
		mov	ax, 1

locret_F11:
		retf
sub_EEE		endp


; =============== S U B	R O U T	I N E =======================================


sub_F12		proc far
		mov	ax, word_E642
		test	ax, ax
		jz	short locret_F2D
		push	ax
		push	ax
		xor	ax, ax
		mov	word_E642, ax
		push	ax
		push	cs
		call	near ptr sub_1114
		nop
		push	cs
		call	near ptr sub_2454
		mov	ax, 1

locret_F2D:
		retf
sub_F12		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_F2E		proc far

arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		push	si
		push	di
		sub	sp, 20h
		push	[bp+arg_2]
		push	[bp+arg_0]
		nop
		push	cs
		call	near ptr sub_BD0
		mov	bp, ax
		mov	ax, 0
		jb	short loc_FBB
		mov	ax, 2000h
		push	ax
		nop
		push	cs
		call	near ptr sub_209A
		mov	si, ax
		mov	ax, 0
		jb	short loc_FB3
		mov	ax, sp
		push	bp
		push	ss
		push	ax
		nop
		push	cs
		call	near ptr sub_3D6
		jb	short loc_FA9
		mov	di, sp
		push	ss
		pop	es
		assume es:nothing
		cmp	byte ptr es:[di+5], 0
		jnz	short loc_FA9
		add	di, 8
		push	si
		mov	si, 114h
		mov	cx, 4
		repe cmpsw
		pop	si
		jnz	short loc_FA9
		mov	ax, sp
		push	bp
		push	ss
		push	ax
		nop
		push	cs
		call	near ptr sub_3B4
		push	ds
		mov	ds, si
		mov	bx, bp
		xor	dx, dx
		mov	cx, 2000h
		mov	ah, 3Fh
		int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
					; BX = file handle, CX = number	of bytes to read
					; DS:DX	-> buffer
		pop	ds
		cmp	ax, 2000h
		jnz	short loc_FA9
		push	si
		xor	ax, ax
		push	ax
		push	cs
		call	near ptr sub_1114
		mov	ax, 1
		jmp	short loc_FAB
; ---------------------------------------------------------------------------

loc_FA9:
		xor	ax, ax

loc_FAB:
		push	ax
		push	si
		nop
		push	cs
		call	near ptr sub_2084
		pop	ax

loc_FB3:
		push	ax
		mov	bx, bp
		mov	ah, 3Eh
		int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
					; BX = file handle
		pop	ax

loc_FBB:
		add	sp, 20h
		pop	di
		pop	si
		pop	bp
		retf	4
sub_F2E		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_FC4		proc far

arg_0		= word ptr  4
arg_2		= byte ptr  6
arg_4		= word ptr  8
arg_6		= word ptr  0Ah

		mov	dx, bp
		mov	bp, sp
		mov	cx, di
		mov	ax, [bp+arg_4]
		mov	di, ax
		shl	ax, 1
		shl	ax, 1
		add	di, ax
		shl	di, 1
		add	di, word_E926
		mov	es, di
		mov	di, [bp+arg_6]
		shl	di, 1
		mov	ah, [bp+arg_2]
		mov	al, 0
		rol	ax, 1
		shr	ax, 1
		adc	ax, 56h	; 'V'
		mov	bx, [bp+arg_0]
		mov	bp, dx
		mov	es:[di+2000h], bx
		stosw
		or	ah, 80h
		mov	es:[di+2000h], bx
		stosw
		mov	di, cx
		retf	8
sub_FC4		endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1008	proc far

arg_0		= word ptr  4
arg_2		= dword	ptr  6
arg_6		= word ptr  0Ah
arg_8		= word ptr  0Ch

		mov	dx, bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, [bp+arg_6]
		mov	di, ax
		shl	ax, 1
		shl	ax, 1
		add	di, ax
		shl	di, 1
		add	di, word_E926
		mov	es, di
		mov	di, [bp+arg_8]
		shl	di, 1
		push	ds
		lds	si, [bp+arg_2]
		mov	cx, di
		mov	bx, [bp+arg_0]
		mov	bp, dx
		lodsb
		or	al, al
		jz	short loc_104A

loc_1036:
		mov	ah, al
		mov	al, 0
		rol	ax, 1
		shr	ax, 1
		adc	al, 56h	; 'V'
		stosw
		or	ah, 80h
		stosw
		lodsb
		or	al, al
		jnz	short loc_1036

loc_104A:
		xchg	cx, di
		sub	cx, di
		shr	cx, 1
		mov	ax, bx
		add	di, 2000h
		rep stosw
		pop	ds
		pop	di
		pop	si
		retf	0Ah
sub_1008	endp


; =============== S U B	R O U T	I N E =======================================


sub_105E	proc near
		out	0A1h, al	; Interrupt Controller #2, 8259A
		mov	al, ah
		out	0A3h, al	; Interrupt Controller #2, 8259A
		mov	cx, 10h
		mov	bx, 0

loc_106A:
		mov	al, bl
		out	0A5h, al	; Interrupt Controller #2, 8259A
		in	al, 0A9h	; Interrupt Controller #2, 8259A
		mov	ah, al
		mov	al, bl
		or	al, 20h
		out	0A5h, al	; Interrupt Controller #2, 8259A
		in	al, 0A9h	; Interrupt Controller #2, 8259A
		stosw
		inc	bx
		loop	loc_106A
		retn
sub_105E	endp

; ---------------------------------------------------------------------------
		nop
		push	di
		mov	dx, sp
		cli
		add	sp, 6
		pop	di
		pop	es
		pop	ax
		mov	sp, dx
		sti
		mov	ah, 0
		add	ax, 5680h
		and	al, 7Fh
		push	ax
		mov	al, 0Bh
		out	68h, al
		pop	ax
		call	sub_105E
		mov	al, 0Ah
		out	68h, al
		pop	di
		retf	6
; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_10A6	proc far
		push	di
		mov	di, sp
		les	di, ss:[di+6]
		mov	al, 0Bh
		out	68h, al
		mov	dx, 0

loc_10B4:
		mov	ax, dx
		adc	ax, 5680h
		and	al, 7Fh
		call	sub_105E
		inc	dl
		jnz	short loc_10B4
		mov	al, 0Ah
		out	68h, al
		pop	di
		retf	4
sub_10A6	endp


; =============== S U B	R O U T	I N E =======================================


sub_10CA	proc near
		out	0A1h, al	; Interrupt Controller #2, 8259A
		mov	al, ah
		out	0A3h, al	; Interrupt Controller #2, 8259A
		mov	cx, 10h
		mov	bx, 0

loc_10D6:
		mov	al, bl
		or	al, 20h
		out	0A5h, al	; Interrupt Controller #2, 8259A
		lodsw
		out	0A9h, al	; Interrupt Controller #2, 8259A
		mov	al, bl
		out	0A5h, al	; Interrupt Controller #2, 8259A
		mov	al, ah
		out	0A9h, al	; Interrupt Controller #2, 8259A
		inc	bx
		loop	loc_10D6
		retn
sub_10CA	endp

; ---------------------------------------------------------------------------
		nop
		push	ds
		push	si
		mov	dx, sp
		cli
		add	sp, 8
		pop	si
		pop	ds
		pop	ax
		mov	sp, dx
		sti
		mov	ah, 0
		add	ax, 5680h
		and	al, 7Fh
		push	ax
		mov	al, 0Bh
		out	68h, al
		pop	ax
		call	sub_10CA
		mov	al, 0Ah
		out	68h, al
		pop	si
		pop	ds
		retf	6
; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_1114	proc far
		push	ds
		push	si
		mov	si, sp
		lds	si, ss:[si+8]
		mov	al, 0Bh
		out	68h, al
		mov	dx, 0

loc_1123:
		mov	ax, dx
		adc	ax, 5680h
		and	al, 7Fh
		call	sub_10CA
		inc	dl
		jnz	short loc_1123
		mov	al, 0Ah
		out	68h, al
		pop	si
		pop	ds
		retf	4
sub_1114	endp


; =============== S U B	R O U T	I N E =======================================


sub_113A	proc far
		mov	ah, 42h	; 'B'
		mov	ch, 0C0h ; 'À'
		int	18h		; TRANSFER TO ROM BASIC
					; causes transfer to ROM-based BASIC (IBM-PC)
					; often	reboots	a compatible; often has	no effect at all
		mov	ax, 0A800h
		mov	word_E64C, ax
		mov	word_E618, ax
		mov	word_E64E, 3E80h
		xor	ax, ax
		mov	word_E60C, ax
		mov	word_E612, ax
		mov	es, ax
		assume es:seg000
		mov	ah, es:byte_54D
		and	ah, 4
		add	ah, 3Fh	; '?'
		and	ah, 40h
		mov	word_E654, ax
		mov	ax, 27Fh
		mov	word_E610, ax
		mov	word_E60E, ax
		mov	ax, 190h
		mov	word_E650, ax
		dec	ax
		mov	word_E616, ax
		mov	word_E614, ax
		mov	word_E61A, 7CB0h
		retf
sub_113A	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_1188	proc far
					; sub_A847+312P ...
		mov	al, 80h	; ''
		pushf
		cli
		out	7Ch, al
		popf
		xor	ax, ax
		mov	dx, 7Eh	; '~'
		out	dx, al
		out	dx, al
		out	dx, al
		out	dx, al
		mov	bx, di
		xor	di, di
		mov	cx, word_E64E
		mov	es, word_E64C
		assume es:nothing
		rep stosw
		mov	di, bx
		out	7Ch, al
		retf
sub_1188	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_11AC	proc near
		xor	al, 1
		out	0A6h, al	; Interrupt Controller #2, 8259A
		mov	ds, bx
		mov	es, dx
		xor	di, di
		mov	si, di
		rep movsw
		mov	cx, di
		shr	cx, 1
		xchg	bx, dx
		retn
sub_11AC	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_11C2	proc far
		xor	dx, dx
		mov	cx, word_E64E
		mov	bx, cx
		shl	bx, 1
		push	bx
		nop
		push	cs
		call	near ptr sub_209A
		xchg	ax, dx
		jb	short locret_1214
		xor	al, al
		out	7Ch, al
		mov	bx, sp
		mov	ax, ss:[bx+4]
		and	al, 1
		push	si
		push	di
		push	ds
		mov	bx, 0A800h
		call	sub_11AC
		call	sub_11AC
		mov	bx, 0B000h
		call	sub_11AC
		call	sub_11AC
		mov	bx, 0B800h
		call	sub_11AC
		call	sub_11AC
		mov	bx, 0E000h
		call	sub_11AC
		call	sub_11AC
		pop	ds
		pop	di
		pop	si
		push	dx
		nop
		push	cs
		call	near ptr sub_2084
		mov	ax, 1

locret_1214:
		retf	2
sub_11C2	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_1218	proc far
		xor	ax, ax
		mov	es, ax
		assume es:seg000
		test	byte ptr es:loc_45B+1, 40h
		jz	short locret_126B
		mov	bx, sp
		mov	cx, ss:[bx+6]
		mov	dx, ss:[bx+4]
		mov	ah, 31h	; '1'
		int	18h		; TRANSFER TO ROM BASIC
					; causes transfer to ROM-based BASIC (IBM-PC)
					; often	reboots	a compatible; often has	no effect at all
		mov	ah, bh
		jcxz	short locret_126B
		and	dx, cx
		not	cx
		and	ax, cx
		or	ax, dx
		mov	cx, ax
		mov	bh, ah
		mov	ah, 30h	; '0'
		int	18h		; TRANSFER TO ROM BASIC
					; causes transfer to ROM-based BASIC (IBM-PC)
					; often	reboots	a compatible; often has	no effect at all
		test	word_E92A, 1
		jz	short loc_1252
		mov	ah, 0Ch
		int	18h		; TRANSFER TO ROM BASIC
					; causes transfer to ROM-based BASIC (IBM-PC)
					; often	reboots	a compatible; often has	no effect at all

loc_1252:
		test	cl, 1
		jz	short loc_125D
		mov	ah, 0Eh
		xor	dx, dx
		int	18h		; TRANSFER TO ROM BASIC
					; causes transfer to ROM-based BASIC (IBM-PC)
					; often	reboots	a compatible; often has	no effect at all

loc_125D:
		test	byte ptr es:loc_711, 1
		jz	short loc_1269
		mov	ah, 11h
		int	18h		; TRANSFER TO ROM BASIC
					; causes transfer to ROM-based BASIC (IBM-PC)
					; often	reboots	a compatible; often has	no effect at all

loc_1269:
		mov	ax, cx

locret_126B:
		retf	4
sub_1218	endp


; =============== S U B	R O U T	I N E =======================================


sub_126E	proc far
		mov	ah, 41h	; 'A'
		int	18h		; TRANSFER TO ROM BASIC
					; causes transfer to ROM-based BASIC (IBM-PC)
					; often	reboots	a compatible; often has	no effect at all
		retf
sub_126E	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1274	proc far

arg_2		= word ptr  8
arg_4		= dword	ptr  0Ah

		push	bp
		mov	bp, sp
		xor	cx, cx
		les	bx, [bp+arg_4]
		assume es:nothing
		mov	ax, es:[bx+2]
		test	ax, ax
		jz	short loc_1295
		push	ax
		nop
		push	cs
		call	near ptr sub_2454
		mov	es:[bx+4], cx
		mov	es:[bx+2], cx
		mov	es:[bx], cx

loc_1295:
		mov	ax, es:[bx+12h]
		test	ax, ax
		jz	short loc_12AF
		push	ax
		nop
		push	cs
		call	near ptr sub_2454
		mov	es:[bx+0Eh], cx
		mov	es:[bx+12h], cx
		mov	es:[bx+10h], cx

loc_12AF:
		mov	ax, [bp+arg_2]
		test	ax, ax
		jz	short loc_12BC
		push	ax
		nop
		push	cs
		call	near ptr sub_2454

loc_12BC:
		pop	bp
		retf	8
sub_1274	endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_12CC

loc_12C0:
		pop	di
		pop	si
		pop	bp
		push	seg dseg
		pop	ds
		stc
		retf	0Ch
; END OF FUNCTION CHUNK	FOR sub_12CC
; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_12CC	proc far

arg_0		= dword	ptr  6
arg_4		= dword	ptr  0Ah
arg_8		= word ptr  0Eh
arg_A		= word ptr  10h

; FUNCTION CHUNK AT 12C0 SIZE 0000000B BYTES

		push	bp
		mov	bp, sp
		push	si
		push	di
		cld
		push	[bp+arg_A]
		push	[bp+arg_8]
		nop
		push	cs
		call	near ptr sub_BD0
		jb	short loc_12C0
		mov	bx, ax
		push	4114h
		nop
		push	cs
		call	near ptr sub_209A
		jb	short loc_12C0
		mov	ds, ax
		mov	word_1263E, bx
		mov	byte ptr word_12642, 0
		mov	byte ptr word_12642+1, 0
		mov	cx, 4000h
		xor	dx, dx
		mov	word_12640, dx
		mov	ah, 3Fh
		int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
					; BX = file handle, CX = number	of bytes to read
					; DS:DX	-> buffer
		mov	ax, ds
		mov	es, ax
		assume es:dseg
		mov	ax, 1
		mov	cx, 10h
		mov	di, 400Ch
		nop

loc_1316:
		and	al, 0Fh
		stosb
		inc	al
		inc	ah
		test	ah, 0Fh
		jnz	short loc_1316
		inc	al
		loop	loc_1316
		mov	ax, 0FFF3h
		call	sub_1876
		cmp	dl, 50h	; 'P'
		jnz	short loc_12C0
		call	sub_1876
		cmp	dl, 69h	; 'i'
		jnz	short loc_12C0
		les	di, [bp+arg_4]
		assume es:nothing
		xor	ax, ax
		stosw
		stosw
		dec	ax

loc_1341:
		inc	ax
		call	sub_1876
		cmp	dl, 1Ah
		jnz	short loc_1341
		stosw

loc_134B:
		call	sub_1876
		or	dl, dl
		jnz	short loc_134B
		call	sub_1876
		mov	al, dl
		stosb
		mov	byte ptr word_1263C, al
		call	sub_1876
		mov	ah, dl
		call	sub_1876
		mov	al, dl
		stosw
		test	ax, ax
		mov	ax, 0FFF3h
		jz	short loc_1370
		jmp	loc_12C0
; ---------------------------------------------------------------------------

loc_1370:
		call	sub_1876
		cmp	dl, 4
		jz	short loc_137B
		jmp	loc_12C0
; ---------------------------------------------------------------------------

loc_137B:
		mov	al, dl
		stosb
		call	sub_1876
		mov	al, dl
		call	sub_1876
		mov	ah, dl
		stosw
		call	sub_1876
		mov	al, dl
		call	sub_1876
		mov	ah, dl
		stosw
		call	sub_1876
		mov	ah, dl
		call	sub_1876
		mov	al, dl
		stosw
		mov	bx, ax
		xor	ax, ax
		stosw
		push	ds
		push	ax
		push	bx
		push	seg dseg
		pop	ds
		mov	word_E940, 0Ah
		nop
		push	cs
		call	near ptr sub_22AC
		pop	ds
		stosw
		jb	short loc_13CC
		push	es
		push	di
		mov	es, ax
		xor	di, di

loc_13C0:
		call	sub_1876
		mov	al, dl
		stosb
		dec	bx
		jnz	short loc_13C0
		pop	di
		pop	es
		nop

loc_13CC:
		call	sub_1876
		mov	ah, dl
		call	sub_1876
		mov	al, dl
		stosw
		mov	word_12530, ax
		mov	bx, ax
		call	sub_1876
		mov	ah, dl
		call	sub_1876
		mov	al, dl
		stosw
		mov	word_12532, ax
		add	ax, 2
		mul	bx
		shr	dx, 1
		rcr	ax, 1
		push	ds
		push	dx
		push	ax
		shl	dx, 0Ch
		mov	word_12538, ax
		mov	word_1253A, dx
		push	seg dseg
		pop	ds
		mov	word_E940, 0Ah
		nop
		push	cs
		call	near ptr sub_22AC
		pop	ds
		mov	bx, ax
		mov	ax, 0FFF8h
		jnb	short loc_141A
		jmp	loc_12C0
; ---------------------------------------------------------------------------

loc_141A:
		mov	ax, bx
		mov	word ptr dword_12534, 0
		mov	word ptr dword_12534+2,	ax
		add	word_1253A, ax
		mov	cx, word_12530
		push	es
		les	bx, [bp+arg_0]
		mov	es:[bx], cx
		mov	es:[bx+2], ax
		pop	es
		shl	byte ptr word_1263C, 1
		jb	short loc_144C
		mov	bl, 30h	; '0'
		nop

loc_1442:
		call	sub_1876
		mov	al, dl
		stosb
		dec	bl
		jnz	short loc_1442

loc_144C:
		xor	bl, bl
		call	sub_1788
		mov	bl, dl
		mov	al, dl
		shl	al, 4
		call	sub_1788
		or	al, dl
		les	di, dword_12534
		mov	cx, word_12530
		rep stosb
		mov	cl, 0FFh
		nop

loc_146A:
					; sub_12CC+49Bj
		mov	ch, 2
		push	cx
		mov	dh, 0
		mov	dl, byte ptr word_12642
		mov	cl, byte ptr word_12642+1
		cmp	cl, ch
		jnb	short loc_1496
		shl	dx, cl
		mov	si, word_12640
		cmp	si, 4000h
		jnz	short loc_148A
		call	sub_18A2

loc_148A:
		mov	dl, [si]
		inc	si
		sub	ch, cl
		mov	cl, 8
		mov	word_12640, si
		nop

loc_1496:
		xchg	cl, ch
		shl	dx, cl
		sub	ch, cl
		mov	byte ptr word_12642, dl
		mov	byte ptr word_12642+1, ch
		mov	dl, dh
		mov	dh, 0
		pop	cx
		mov	bl, dl
		cmp	dl, 3
		jnz	short loc_14E4
		push	cx
		mov	dl, byte ptr word_12642
		mov	cl, byte ptr word_12642+1
		mov	dh, 0
		dec	cl
		jns	short loc_14D6
		mov	si, word_12640
		cmp	si, 4000h
		jnz	short loc_14CC
		call	sub_18A2

loc_14CC:
		mov	dl, [si]
		inc	si
		mov	cl, 7
		mov	word_12640, si
		nop

loc_14D6:
		shl	dl, 1
		mov	byte ptr word_12642, dl
		mov	byte ptr word_12642+1, cl
		adc	bl, 0
		pop	cx

loc_14E4:
		cmp	bl, cl
		jnz	short loc_1558
		mov	bl, es:[di-1]
		cmp	di, 1
		jnb	short loc_14FE
		push	es
		mov	ax, es
		sub	ax, 1000h
		mov	es, ax
		assume es:nothing
		mov	bl, es:[di-1]
		pop	es
		assume es:nothing

loc_14FE:
		and	bl, 0Fh
		nop

loc_1502:
		call	sub_1788
		mov	bl, dl
		mov	al, dl
		shl	al, 4
		call	sub_1788
		mov	bl, dl
		or	al, dl
		stosb
		or	di, di
		jnz	short loc_1520
		mov	ax, es
		add	ax, 1000h
		mov	es, ax
		assume es:nothing
		nop

loc_1520:
		mov	dl, byte ptr word_12642
		mov	cl, byte ptr word_12642+1
		mov	dh, 0
		dec	cl
		jns	short loc_1546
		mov	si, word_12640
		cmp	si, 4000h
		jnz	short loc_153C
		call	sub_18A2
		nop

loc_153C:
		mov	dl, [si]
		inc	si
		mov	cl, 7
		mov	word_12640, si
		nop

loc_1546:
		shl	dl, 1
		mov	byte ptr word_12642, dl
		mov	byte ptr word_12642+1, cl
		jb	short loc_1502
		mov	cl, 0FFh
		jmp	loc_1756
; ---------------------------------------------------------------------------
		nop

loc_1558:
		mov	bh, 0
		xor	bp, bp
		mov	ax, 1
		mov	dl, byte ptr word_12642
		mov	cl, byte ptr word_12642+1
		nop

loc_1568:
		inc	bh
		dec	cl
		jns	short loc_1586
		mov	si, word_12640
		cmp	si, 4000h
		jnz	short loc_157C
		call	sub_18A2
		nop

loc_157C:
		mov	dl, [si]
		inc	si
		mov	cl, 7
		mov	word_12640, si
		nop

loc_1586:
		shl	dl, 1
		jb	short loc_1568
		mov	byte ptr word_12642, dl
		mov	byte ptr word_12642+1, cl
		mov	dh, 0
		dec	bh
		jnz	short loc_159B
		jmp	loc_1632
; ---------------------------------------------------------------------------

loc_159B:
		cmp	bh, 8
		jl	short loc_15E0
		mov	cx, bp

loc_15A2:
		push	cx
		mov	si, word_12640
		cmp	si, 4000h
		jnz	short loc_15B0
		call	sub_18A2

loc_15B0:
		mov	dh, 0
		mov	dl, [si]
		inc	si
		mov	word_12640, si
		mov	cl, byte ptr word_12642+1
		sub	cl, 8
		neg	cl
		shl	dx, cl
		xchg	dl, byte ptr word_12642
		or	dl, dh
		mov	dh, 0
		pop	cx
		mov	ch, cl
		mov	cl, ah
		mov	ah, al
		mov	al, dl
		sub	bh, 8
		cmp	bh, 8
		jg	short loc_15A2
		mov	bp, cx
		nop

loc_15E0:
		mov	ch, bh
		push	cx
		mov	dh, 0
		mov	dl, byte ptr word_12642
		mov	cl, byte ptr word_12642+1
		cmp	cl, ch
		jnb	short loc_160C
		shl	dx, cl
		mov	si, word_12640
		cmp	si, 4000h
		jnz	short loc_1600
		call	sub_18A2

loc_1600:
		mov	dl, [si]
		inc	si
		sub	ch, cl
		mov	cl, 8
		mov	word_12640, si
		nop

loc_160C:
		xchg	cl, ch
		shl	dx, cl
		sub	ch, cl
		mov	byte ptr word_12642, dl
		mov	byte ptr word_12642+1, ch
		mov	dl, dh
		mov	dh, 0
		pop	cx
		mov	cl, ch
		mov	dh, ah
		shl	ax, cl
		or	al, dl
		mov	dl, 0
		rol	dx, cl
		mov	dh, 0
		shl	bp, cl
		or	bp, dx
		nop

loc_1632:
		mov	cx, ax
		test	bl, bl
		jnz	short loc_163B
		jmp	loc_16D8
; ---------------------------------------------------------------------------

loc_163B:
		mov	bh, 0
		mov	ax, word_12530
		cmp	bl, 1
		jz	short loc_165A
		cmp	bl, 2
		jnz	short loc_1650
		shl	ax, 1
		adc	bh, bh
		jmp	short loc_165A
; ---------------------------------------------------------------------------

loc_1650:
		dec	ax
		cmp	bl, 3
		jz	short loc_165A
		add	ax, 2
		nop

loc_165A:
					; sub_12CC+382j ...
		push	ds
		shr	bh, 1
		rcr	ax, 1
		sbb	bh, bh
		mov	si, di
		sbb	si, ax
		mov	dx, es
		jnb	short loc_166E
		sub	dx, 1000h
		nop

loc_166E:
		mov	ds, dx
		or	bh, bh
		jnz	short loc_16B0
		mov	ax, cx

loc_1676:
		mov	cx, si
		cmp	si, di
		ja	short loc_167E
		mov	cx, di

loc_167E:
		neg	cx
		test	ax, ax
		jz	short loc_168C
		sub	cx, ax
		sbb	dx, dx
		and	cx, dx
		add	cx, ax

loc_168C:
		sub	ax, cx
		rep movsb
		or	di, di
		jnz	short loc_169C
		mov	cx, es
		add	cx, 1000h
		mov	es, cx
		assume es:nothing

loc_169C:
		or	si, si
		jnz	short loc_16A8
		mov	cx, ds
		add	cx, 1000h
		mov	ds, cx
		assume ds:nothing

loc_16A8:
		test	ax, ax
		jnz	short loc_1676
		pop	ds
		assume ds:dseg
		jmp	loc_1754
; ---------------------------------------------------------------------------

loc_16B0:
					; sub_12CC:loc_16D2j
		lodsb
		mov	ah, al
		or	si, si
		jnz	short loc_16C0
		mov	bp, ds
		add	bp, 1000h
		mov	ds, bp
		assume ds:nothing
		nop

loc_16C0:
		mov	al, [si]
		shr	ax, 4
		stosb
		or	di, di
		jnz	short loc_16D2
		mov	ax, es
		add	ax, 1000h
		mov	es, ax
		assume es:nothing
		nop

loc_16D2:
		loop	loc_16B0
		pop	ds
		assume ds:dseg
		jmp	short loc_1754
; ---------------------------------------------------------------------------
		nop

loc_16D8:
		mov	dl, es:[di-1]
		cmp	di, 1
		jnb	short loc_16EE
		push	es
		mov	ax, es
		sub	ax, 1000h
		mov	es, ax
		assume es:nothing
		mov	dl, es:[di-1]
		pop	es
		assume es:nothing

loc_16EE:
		mov	al, dl
		ror	dl, 4
		cmp	al, dl
		jnz	short loc_1710
		nop

loc_16F8:
					; sub_12CC+43Fj
		stosb
		or	di, di
		jnz	short loc_1706
		mov	dx, es
		add	dx, 1000h
		mov	es, dx
		assume es:nothing
		nop

loc_1706:
		loop	loc_16F8
		sub	bp, 1
		jnb	short loc_16F8
		jmp	short loc_1754
; ---------------------------------------------------------------------------
		nop

loc_1710:
		mov	bh, al
		mov	dl, es:[di-2]
		cmp	di, 2
		jnb	short loc_1728
		push	es
		mov	ax, es
		sub	ax, 1000h
		mov	es, ax
		assume es:nothing
		mov	dl, es:[di-2]
		pop	es

loc_1728:
					; sub_12CC:loc_174Cj ...
		mov	al, dl
		stosb
		or	di, di
		jnz	short loc_1736
		mov	ax, es
		add	ax, 1000h
		mov	es, ax
		assume es:nothing

loc_1736:
		loop	loc_173E
		sub	bp, 1
		jb	short loc_1754
		nop

loc_173E:
		mov	al, bh
		stosb
		or	di, di
		jnz	short loc_174C
		mov	ax, es
		add	ax, 1000h
		mov	es, ax
		assume es:nothing

loc_174C:
		loop	loc_1728
		sub	bp, 1
		jnb	short loc_1728
		nop

loc_1754:
					; sub_12CC+409j ...
		mov	cl, bl

loc_1756:
		cmp	word_12538, di
		jbe	short loc_175F
		jmp	loc_146A
; ---------------------------------------------------------------------------

loc_175F:
		mov	ax, es
		cmp	word_1253A, ax
		jbe	short loc_176A
		jmp	loc_146A
; ---------------------------------------------------------------------------

loc_176A:
		mov	ah, 3Eh	; '>'
		mov	bx, word_1263E
		int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
					; BX = file handle
		push	ds
		mov	bx, seg	dseg
		mov	ds, bx
		nop
		push	cs
		call	near ptr sub_2084
		clc
		mov	ax, 0
		pop	di
		pop	si
		pop	bp
		retf	0Ch
sub_12CC	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_1788	proc near
					; sub_12CC+18Cp ...
		push	ax
		push	bx
		push	cx
		xor	ax, ax
		mov	dl, byte ptr word_12642
		mov	cl, byte ptr word_12642+1
		dec	cl
		jns	short loc_17B0
		mov	si, word_12640
		cmp	si, 4000h
		jnz	short loc_17A6
		call	sub_18A2

loc_17A6:
		mov	dl, [si]
		inc	si
		mov	cl, 7
		mov	word_12640, si
		nop

loc_17B0:
		shl	dl, 1
		jb	short loc_17FE
		add	al, 2
		dec	cl
		jns	short loc_17D2
		mov	si, word_12640
		cmp	si, 4000h
		jnz	short loc_17C8
		call	sub_18A2
		nop

loc_17C8:
		mov	dl, [si]
		inc	si
		mov	cl, 7
		mov	word_12640, si
		nop

loc_17D2:
		shl	dl, 1
		jnb	short loc_17FE
		add	al, 2
		inc	ah
		dec	cl
		jns	short loc_17F6
		mov	si, word_12640
		cmp	si, 4000h
		jnz	short loc_17EC
		call	sub_18A2
		nop

loc_17EC:
		mov	dl, [si]
		inc	si
		mov	cl, 7
		mov	word_12640, si
		nop

loc_17F6:
		shl	dl, 1
		jnb	short loc_17FE
		add	al, 4
		inc	ah

loc_17FE:
		mov	byte ptr word_12642, dl
		mov	byte ptr word_12642+1, cl
		mov	ch, ah
		inc	ch
		push	cx
		mov	dh, 0
		mov	dl, byte ptr word_12642
		mov	cl, byte ptr word_12642+1
		cmp	cl, ch
		jnb	short loc_1834
		shl	dx, cl
		mov	si, word_12640
		cmp	si, 4000h
		jnz	short loc_1828
		call	sub_18A2

loc_1828:
		mov	dl, [si]
		inc	si
		sub	ch, cl
		mov	cl, 8
		mov	word_12640, si
		nop

loc_1834:
		xchg	cl, ch
		shl	dx, cl
		sub	ch, cl
		mov	byte ptr word_12642, dl
		mov	byte ptr word_12642+1, ch
		mov	dl, dh
		mov	dh, 0
		pop	cx
		add	al, dl
		xor	al, 0Fh
		mov	ah, 0
		mov	bh, 0
		shl	bx, 4
		add	bx, 400Ch
		add	bx, ax
		mov	cx, 0Fh
		mov	dh, 0
		mov	dl, [bx]
		sub	cx, ax
		jnz	short loc_1868
		pop	cx
		pop	bx
		pop	ax
		retn
; ---------------------------------------------------------------------------
		nop

loc_1868:
		mov	al, [bx+1]
		mov	[bx], al
		inc	bx
		loop	loc_1868
		mov	[bx], dl
		pop	cx
		pop	bx
		pop	ax
		retn
sub_1788	endp


; =============== S U B	R O U T	I N E =======================================


sub_1876	proc near
		push	cx
		mov	si, word_12640
		cmp	si, 4000h
		jnz	short loc_1884
		call	sub_18A2

loc_1884:
		mov	dh, 0
		mov	dl, [si]
		inc	si
		mov	word_12640, si
		mov	cl, byte ptr word_12642+1
		sub	cl, 8
		neg	cl
		shl	dx, cl
		xchg	dl, byte ptr word_12642
		or	dl, dh
		mov	dh, 0
		pop	cx
		retn
sub_1876	endp


; =============== S U B	R O U T	I N E =======================================


sub_18A2	proc near
					; sub_12CC+1FDp ...
		pusha
		mov	ah, 3Fh	; '?'
		mov	bx, word_1263E
		mov	cx, 4000h
		xor	dx, dx
		int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
					; BX = file handle, CX = number	of bytes to read
					; DS:DX	-> buffer
		popa
		xor	si, si
		retn
sub_18A2	endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_18BA

loc_18B4:
		pop	di
		pop	si
		pop	bp
		retf	0Ah
; END OF FUNCTION CHUNK	FOR sub_18BA

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_18BA	proc far

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch
arg_8		= word ptr  0Eh

; FUNCTION CHUNK AT 18B4 SIZE 00000006 BYTES

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, [bp+arg_6]
		sub	ax, word_E612
		cmp	ax, word_E614
		ja	short loc_18B4
		mov	cx, [bp+arg_0]
		sar	cx, 3
		jle	short loc_18B4
		mov	si, [bp+arg_2]
		mov	di, [bp+arg_8]
		sar	di, 3
		jns	short loc_18EA
		add	cx, di
		jle	short loc_18B4
		shl	di, 2
		add	si, di
		xor	di, di

loc_18EA:
		cmp	di, 50h	; 'P'
		jge	short loc_18B4
		add	cx, di
		cmp	cx, 50h	; 'P'
		jl	short loc_18F9
		mov	cx, 50h	; 'P'

loc_18F9:
		sub	cx, di
		imul	ax, 50h
		add	di, ax
		push	ds
		mov	es, word_E618
		assume es:nothing
		mov	ds, [bp+arg_4]
		mov	bp, cx
		cld
		nop

loc_190C:
		mov	cl, 2
		mov	bl, [si]
		mov	bh, 0
		shl	bx, cl
		mov	ax, cs:[bx+1C84h]
		mov	dx, cs:[bx+1C86h]
		inc	si
		shl	ax, cl
		shl	dx, cl
		mov	bl, [si]
		mov	bh, 0
		shl	bx, cl
		or	ax, cs:[bx+1C84h]
		or	dx, cs:[bx+1C86h]
		inc	si
		shl	ax, cl
		shl	dx, cl
		mov	bl, [si]
		mov	bh, 0
		shl	bx, cl
		or	ax, cs:[bx+1C84h]
		or	dx, cs:[bx+1C86h]
		inc	si
		shl	ax, cl
		shl	dx, cl
		mov	bl, [si]
		mov	bh, 0
		shl	bx, cl
		or	ax, cs:[bx+1C84h]
		or	dx, cs:[bx+1C86h]
		inc	si
		mov	es:[di], al
		mov	bx, es
		mov	es:[di-8000h], ah
		add	bh, 10h
		mov	es, bx
		assume es:nothing
		mov	es:[di], dl
		add	bh, 28h	; '('
		mov	es, bx
		assume es:nothing
		mov	es:[di], dh
		sub	bh, 38h	; '8'
		mov	es, bx
		assume es:nothing
		inc	di
		dec	bp
		jnz	short loc_190C
		pop	ds
		pop	di
		pop	si
		pop	bp
		retf	0Ah
sub_18BA	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1988	proc far
					; sub_A847+2A3P

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		mov	bx, [bp+arg_0]
		mov	dx, word_E650
		sub	bx, dx
		sbb	ax, ax
		and	bx, ax
		add	bx, dx
		sub	dx, bx
		mov	bp, bx
		mov	cx, word_E654
		shl	bx, cl
		shl	dx, cl
		mov	cl, 4

loc_19A8:
		jmp	short $+2
		in	al, 0A0h	; PIC 2	 same as 0020 for PIC 1
		test	al, cl
		jz	short loc_19A8
		mov	al, 70h	; 'p'
		out	0A2h, al	; Interrupt Controller #2, 8259A
		mov	ax, bp
		shl	ax, 1
		shl	ax, 1
		add	ax, bp
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		call	sub_CB2
		mov	ax, dx
		shl	ax, cl
		or	ah, ch
		call	sub_CB2
		xor	ax, ax
		call	sub_CB2
		mov	ax, bx
		shl	ax, cl
		or	ah, ch
		call	sub_CB2
		pop	bp
		retf	2
sub_1988	endp


; =============== S U B	R O U T	I N E =======================================


sub_19E0	proc far
		mov	ah, 40h	; '@'
		int	18h		; TRANSFER TO ROM BASIC
					; causes transfer to ROM-based BASIC (IBM-PC)
					; often	reboots	a compatible; often has	no effect at all
		retf
sub_19E0	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_19E6	proc far
		nop
		push	cs
		call	near ptr sub_7EA
		retf
sub_19E6	endp

; ---------------------------------------------------------------------------

loc_19EC:
		cld
		push	si
		mov	ax, word_E662
		cwd
		not	dx
		and	ax, dx
		sub	ax, 0C8h ; 'È'
		sbb	dx, dx
		and	ax, dx
		add	ax, 0C8h ; 'È'
		mov	dh, al
		xor	bx, bx
		mov	ch, bl
		cmp	dh, 64h	; 'd'
		jbe	short loc_1A12
		mov	ch, 0Fh
		sub	dh, 0C8h ; 'È'
		neg	dh

loc_1A12:
		mov	si, 0ECAh
		mov	dl, 64h	; 'd'
		cmp	word_E694, bx
		jnz	short loc_1A56

loc_1A1D:
		mov	al, bl
		out	0A8h, al	; Interrupt Controller #2, 8259A
		lodsw
		shr	ax, 4
		mov	cl, ah
		and	al, 0Fh
		xor	al, ch
		mul	dh
		div	dl
		xor	al, ch
		out	0ACh, al	; Interrupt Controller #2, 8259A
		mov	al, cl
		xor	al, ch
		mul	dh
		div	dl
		xor	al, ch
		out	0AAh, al	; Interrupt Controller #2, 8259A
		lodsb
		shr	al, 4
		xor	al, ch
		mul	dh
		div	dl
		xor	al, ch
		out	0AEh, al	; Interrupt Controller #2, 8259A
		inc	bx
		cmp	bx, 10h
		jl	short loc_1A1D
		pop	si
		retf
; ---------------------------------------------------------------------------
		nop

loc_1A56:
		mov	bx, dx
		mov	dx, 871Eh
		mov	al, 0A0h ; ' '
		out	0F6h, al
		in	al, dx
		cmp	al, 0FFh
		jnz	short loc_1A6B
		mov	dx, 0AE8Eh
		in	al, dx
		shr	al, 2

loc_1A6B:
		shr	al, 1
		cmc
		sbb	al, al
		mov	cs:byte_1AD4, al
		mov	dx, bx
		push	di
		mov	di, 0

loc_1A7A:
		mov	ax, di
		out	0A8h, al	; Interrupt Controller #2, 8259A
		lodsw
		mov	bx, ax
		shr	bx, 4
		and	bl, ch
		lodsb
		and	al, ch
		xor	al, ch
		mul	dh
		div	dl
		xor	al, ch
		xchg	al, bh
		xor	al, ch
		mul	dh
		div	dl
		xor	al, ch
		xchg	al, bl
		xor	al, ch
		mul	dh
		div	dl
		xor	al, ch
		xchg	al, bl
		mov	ah, bh
		cmp	bh, al
		ja	short loc_1AAF
		mov	bh, al

loc_1AAF:
		cmp	bh, bl
		ja	short loc_1AB5
		mov	bh, bl

loc_1AB5:
		shl	al, 1
		add	al, bl
		shl	al, 1
		add	al, ah
		add	al, bh
		mov	cl, 3
		mul	cl
		mov	cl, 14h
		div	cl
		shr	al, 1
		adc	al, 0
		sub	al, 2
		cmc
		sbb	ah, ah
		and	ah, al
; ---------------------------------------------------------------------------
		db 80h,	0F4h
byte_1AD4	db 0
; ---------------------------------------------------------------------------
		shr	ah, 1
		sbb	al, al
		and	al, 0Fh
		out	0AEh, al	; Interrupt Controller #2, 8259A
		shr	ah, 1
		sbb	al, al
		and	al, 0Fh
		out	0ACh, al	; Interrupt Controller #2, 8259A
		shr	ah, 1
		sbb	al, al
		and	al, 0Fh
		out	0AAh, al	; Interrupt Controller #2, 8259A
		inc	di
		cmp	di, 10h
		jl	short loc_1A7A
		pop	di
		pop	si
		retf

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1AF6	proc far

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		mov	es, [bp+arg_0]
		assume es:nothing
		push	word ptr es:0
		push	cs
		call	near ptr sub_55E
		push	[bp+arg_0]
		push	cs
		call	near ptr sub_2454
		pop	bp
		retf	2
sub_1AF6	endp

; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		mov	es, word ptr [bp+6]
		call	word ptr es:2
		pop	bp
		retf	2
; ---------------------------------------------------------------------------
		nop
		cmp	word ptr es:1Ah, 0
		jz	short loc_1B3E
		dec	word ptr es:1Ah
		add	word ptr es:12h, 1
		adc	word ptr es:14h, 0
		mov	ax, es:1Ch
		retn
; ---------------------------------------------------------------------------

loc_1B3E:
		call	word ptr es:4
		test	ah, ah
		jnz	short locret_1B6D
		cmp	ax, es:1Ch
		mov	es:1Ch,	ax
		jnz	short locret_1B6D
		push	ax
		call	word ptr es:4
		test	ah, ah
		jnz	short loc_1B6C
		mov	es:1Ah,	ax
		sub	word ptr es:12h, 1
		sbb	word ptr es:14h, 0

loc_1B6C:
		pop	ax

locret_1B6D:
		retn

; =============== S U B	R O U T	I N E =======================================


sub_1B6E	proc near
		mov	ax, es:0Ah
		mov	dx, es:0Ch
		cmp	dx, es:8
		jb	short loc_1B8B
		ja	short loc_1B87
		cmp	ax, es:6
		jb	short loc_1B8B

loc_1B87:
		mov	ax, 0FFFFh
		retn
; ---------------------------------------------------------------------------

loc_1B8B:
		add	ax, 1
		adc	dx, 0
		mov	es:0Ah,	ax
		mov	es:0Ch,	dx
		add	word ptr es:12h, 1
		adc	word ptr es:14h, 0
		push	es
		push	word ptr es:0
		push	cs
		call	near ptr sub_5F2
		pop	es
		retn
sub_1B6E	endp

; ---------------------------------------------------------------------------
		call	sub_1B6E
		or	ah, ah
		jnz	short locret_1BBE
		xor	al, es:1Eh

locret_1BBE:
		retn
; ---------------------------------------------------------------------------
		db    0
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		cld
		mov	si, [bp+8]
		mov	di, [bp+0Ah]
		test	si, si
		jz	short loc_1BE3

loc_1BD0:
		mov	es, word ptr [bp+6]
		call	word ptr es:2
		inc	ah
		jz	short loc_1BE3
		mov	es, word ptr [bp+0Ch]
		stosb
		dec	si
		jnz	short loc_1BD0

loc_1BE3:
		mov	ax, di
		sub	ax, [bp+0Ah]
		pop	di
		pop	si
		pop	bp
		retf	8
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		mov	es, word ptr [bp+6]
		xor	ax, ax
		mov	es:1Ah,	ax
		mov	word ptr es:1Ch, 0FFFFh
		mov	es:0Ah,	ax
		mov	es:0Ch,	ax
		mov	es:12h,	ax
		mov	es:14h,	ax
		push	word ptr es:0
		push	word ptr es:10h
		push	word ptr es:0Eh
		push	ax
		push	cs
		call	near ptr sub_76A
		pop	bp
		retf	2
; ---------------------------------------------------------------------------
		nop
		push	bp
		mov	bp, sp
		push	di
		mov	es, word ptr [bp+0Ah]
		inc	word ptr [bp+8]
		mov	di, [bp+6]
		or	di, di
		jz	short loc_1C47

loc_1C3B:
		call	word ptr es:2
		test	ah, ah
		jnz	short loc_1C4C
		dec	di
		jnz	short loc_1C3B

loc_1C47:
		dec	word ptr [bp+8]
		jnz	short loc_1C3B

loc_1C4C:
		mov	ax, es:12h
		mov	dx, es:14h
		pop	di
		pop	bp
		retf	6

; =============== S U B	R O U T	I N E =======================================


sub_1C5A	proc far
					; sub_C1A1+21P	...
		mov	ax, 4E35h
		mul	word ptr dword_E6A0+2
		mov	cx, ax
		mov	ax, 15Ah
		mul	word ptr dword_E6A0
		add	cx, ax
		mov	ax, 4E35h
		mul	word ptr dword_E6A0
		add	ax, 1
		adc	dx, cx
		mov	word ptr dword_E6A0, ax
		mov	ax, dx
		mov	word ptr dword_E6A0+2, ax
		and	ah, 7Fh
		retf
sub_1C5A	endp

; ---------------------------------------------------------------------------
		dd 0
		db 1, 4	dup(0),	1, 2 dup(0), 2 dup(1), 4 dup(0), 1, 0
		db 1, 0, 1, 2 dup(0), 2	dup(1),	0, 3 dup(1), 4 dup(0)
		db 2 dup(1), 2 dup(0), 1, 0, 1,	0, 3 dup(1), 0,	1, 2 dup(0)
		db 3 dup(1), 0,	2 dup(1), 0, 7 dup(1), 2, 3 dup(0), 3
		db 3 dup(0), 2,	1, 2 dup(0), 3,	1, 2 dup(0), 2,	0, 1, 0
		db 3, 0, 1, 0, 2, 2 dup(1), 0, 3, 2 dup(1), 0, 2, 2 dup(0)
		db 1, 3, 2 dup(0), 1, 2, 1, 0, 1, 3, 1,	0, 1, 2, 0, 2 dup(1)
		db 3, 0, 2 dup(1), 2, 3	dup(1),	3, 3 dup(1), 0,	2, 2 dup(0)
		db 1, 2, 3 dup(0), 3, 2	dup(0),	1, 3, 3	dup(0),	2, 1, 0
		db 1, 2, 1, 2 dup(0), 3, 1, 0, 1, 3, 1,	2 dup(0), 2, 0
		db 2 dup(1), 2,	0, 1, 0, 3, 0, 2 dup(1), 3, 0, 1, 0, 2
		db 3 dup(1), 2,	2 dup(1), 0, 3,	3 dup(1), 3, 2 dup(1)
		db 2 dup(2), 2 dup(0), 3, 2, 2 dup(0), 2, 3, 2 dup(0)
		db 2 dup(3), 2 dup(0), 2 dup(2), 1, 0, 3, 2, 1,	0, 2, 3
		db 1, 0, 2 dup(3), 1, 0, 2 dup(2), 0, 1, 3, 2, 0, 1, 2
		db 3, 0, 1, 2 dup(3), 0, 1, 2 dup(2), 2	dup(1),	3, 2, 2	dup(1)
		db 2, 3, 2 dup(1), 2 dup(3), 2 dup(1), 2 dup(0), 2, 0
		db 1, 0, 2, 2 dup(0), 1, 2, 0, 2 dup(1), 2, 3 dup(0), 3
		db 0, 1, 0, 3, 2 dup(0), 1, 3, 0, 2 dup(1), 3, 3 dup(0)
		db 2, 2	dup(1),	0, 2, 1, 0, 1, 2, 3 dup(1), 2, 1, 2 dup(0)
		db 3, 2	dup(1),	0, 3, 1, 0, 1, 3, 3 dup(1), 3, 1, 2, 0
		db 2, 0, 3, 0, 2, 0, 2,	1, 2, 0, 3, 1, 2, 0, 2,	0, 3, 0
		db 3, 0, 3, 0, 2, 1, 3,	0, 3, 1, 3, 0, 2, 0, 2,	1, 3, 0
		db 2, 1, 2, 1, 2, 1, 3,	1, 2, 1, 2, 0, 3, 1, 3,	0, 3, 1
		db 2, 1, 3, 1, 3, 1, 3,	1, 0, 2	dup(2),	0, 1, 2	dup(2)
		db 2 dup(0), 3,	2, 0, 1, 3, 2, 2 dup(0), 2, 3, 0, 1, 2
		db 3, 2	dup(0),	2 dup(3), 0, 1,	2 dup(3), 2 dup(0), 2 dup(2)
		db 2 dup(1), 2 dup(2), 1, 0, 3,	2, 2 dup(1), 3,	2, 1, 0
		db 2, 3, 2 dup(1), 2, 3, 1, 0, 2 dup(3), 2 dup(1), 2 dup(3)
		db 1, 3	dup(2),	0, 3, 2	dup(2),	0, 2, 3, 2, 0, 2 dup(3)
		db 2, 0, 2 dup(2), 3, 0, 3, 2, 3, 0, 2,	2 dup(3), 0, 3 dup(3)
		db 0, 3	dup(2),	1, 3, 2	dup(2),	1, 2, 3, 2, 1, 2 dup(3)
		db 2, 1, 2 dup(2), 3, 1, 3, 2, 3, 1, 2,	2 dup(3), 1, 3 dup(3)
		db 1, 3	dup(0),	2, 1, 2	dup(0),	2, 0, 1, 0, 2, 2 dup(1)
		db 0, 2, 2 dup(0), 1, 2, 1, 0, 1, 2, 0,	2 dup(1), 2, 3 dup(1)
		db 2, 3	dup(0),	3, 1, 2	dup(0),	3, 0, 1, 0, 3, 2 dup(1)
		db 0, 3, 2 dup(0), 1, 3, 1, 0, 1, 3, 0,	2 dup(1), 3, 3 dup(1)
		db 3, 2, 2 dup(0), 2, 3, 2 dup(0), 2 dup(2), 1,	0, 2, 3
		db 1, 0, 2 dup(2), 0, 1, 2, 3, 0, 1, 2 dup(2), 2 dup(1)
		db 2, 3, 2 dup(1), 2 dup(2), 2 dup(0), 2 dup(3), 2 dup(0)
		db 3, 2, 1, 0, 2 dup(3), 1, 0, 3, 2, 0,	1, 2 dup(3), 0
		db 1, 3, 2, 2 dup(1), 2	dup(3),	2 dup(1), 3, 0,	2, 0, 2
		db 1, 2, 0, 2, 0, 3, 0,	2, 1, 3, 0, 2, 0, 2, 1,	2, 1, 2
		db 1, 2, 0, 3, 1, 2, 1,	3, 1, 2, 0
		db 2, 0, 3, 1, 2, 0, 3,	0, 3, 0, 3, 1, 3, 0, 3,	0, 2, 1
		db 3, 1, 2, 1, 3, 0, 3,	1, 3, 1, 3, 1, 3, 2 dup(2), 0
		db 2, 3, 2, 0, 2 dup(2), 3, 0, 2, 2 dup(3), 0, 3 dup(2)
		db 1, 2, 3, 2, 1, 2 dup(2), 3, 1, 2, 2 dup(3), 1, 3 dup(2)
		db 0, 2	dup(3),	2, 0, 3, 2, 3, 0, 3 dup(3), 0, 3, 2 dup(2)
		db 1, 2	dup(3),	2, 1, 3, 2, 3, 1, 3 dup(3), 1, 3, 2 dup(0)
		db 2 dup(2), 1,	0, 2 dup(2), 0,	1, 2 dup(2), 2 dup(1)
		db 2 dup(2), 2 dup(0), 3, 2, 1,	0, 3, 2, 0, 1, 3, 2, 2 dup(1)
		db 3, 2, 2 dup(0), 2, 3, 1, 0, 2, 3, 0,	1, 2, 3, 2 dup(1)
		db 2, 3, 2 dup(0), 2 dup(3), 1,	0, 2 dup(3), 0,	1, 2 dup(3)
		db 2 dup(1), 2 dup(3), 2, 0, 2 dup(2), 3, 0, 3 dup(2)
		db 1, 2	dup(2),	3, 1, 3	dup(2),	0, 3, 2, 3, 0, 3, 2 dup(2)
		db 1, 3, 2, 3, 1, 3, 2 dup(2), 0, 2, 2 dup(3), 0, 2, 3
		db 2, 1, 2, 2 dup(3), 1, 2, 3, 2, 0, 3 dup(3), 0, 2 dup(3)
		db 2, 1, 3 dup(3), 1, 2	dup(3),	0, 3 dup(2), 1,	3 dup(2)
		db 0, 3, 2 dup(2), 1, 3, 2 dup(2), 0, 2, 3, 2, 1, 2, 3
		db 2, 0, 2 dup(3), 2, 1, 2 dup(3), 2, 0, 2 dup(2), 3, 1
		db 2 dup(2), 3,	0, 3, 2, 3, 1, 3, 2, 3,	0, 2, 2	dup(3)
		db 1, 2, 2 dup(3), 0, 3	dup(3),	1, 3 dup(3), 4 dup(2)
		db 3, 4	dup(2),	3, 2 dup(2), 2 dup(3), 4 dup(2), 3, 2
		db 3, 2, 3, 2 dup(2), 2	dup(3),	2, 3 dup(3), 4 dup(2)
		db 2 dup(3), 2 dup(2), 3, 2, 3,	2, 3 dup(3), 2,	3, 2 dup(2)
		db 3 dup(3), 2,	2 dup(3), 2, 7 dup(3)

; =============== S U B	R O U T	I N E =======================================


sub_2084	proc far
		push	bx
		mov	bx, sp
		mov	bx, ss:[bx+6]
		mov	word_F43A, bx
		pop	bx
		retf	2
sub_2084	endp

; ---------------------------------------------------------------------------
		nop
; START	OF FUNCTION CHUNK FOR sub_209A

loc_2094:
		push	cs
		call	near ptr sub_2328
		jb	short loc_20C9
; END OF FUNCTION CHUNK	FOR sub_209A

; =============== S U B	R O U T	I N E =======================================


sub_209A	proc far

; FUNCTION CHUNK AT 2094 SIZE 00000006 BYTES

		cmp	word_E93C, 0
		jz	short loc_2094
		push	bx
		mov	bx, sp
		mov	bx, ss:[bx+6]
		add	bx, 0Fh
		rcr	bx, 1
		shr	bx, 1
		shr	bx, 1
		shr	bx, 1
		mov	ax, word_F43A
		add	bx, ax
		jb	short loc_20C8
		cmp	word_F436, bx
		jb	short loc_20C8
		mov	word_F43A, bx
		pop	bx
		retf	2
; ---------------------------------------------------------------------------

loc_20C8:
		pop	bx

loc_20C9:
		mov	ax, 0FFF8h
		retf	2
sub_209A	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_20D0	proc near
		mov	dx, 188h

loc_20D3:
		in	al, dx
		test	al, 80h
		jnz	short loc_20D3
		mov	al, bh
		out	dx, al

loc_20DB:
		in	al, dx
		test	al, 80h
		jnz	short loc_20DB
		inc	dx
		inc	dx
		mov	al, bl
		out	dx, al
		retn
sub_20D0	endp


; =============== S U B	R O U T	I N E =======================================


sub_20E6	proc near
		mov	dx, 188h

loc_20E9:
		in	al, dx
		test	al, 80h
		jnz	short loc_20E9
		mov	al, bh
		out	dx, al

loc_20F1:
		in	al, dx
		test	al, 80h
		jnz	short loc_20F1
		inc	dx
		inc	dx
		in	al, dx
		retn
sub_20E6	endp


; =============== S U B	R O U T	I N E =======================================


sub_20FA	proc far
		mov	al, 1Bh
		int	29h		; DOS 2+ internal - FAST PUTCHAR
					; AL = character to display
		mov	al, 5Bh	; '['
		int	29h		; DOS 2+ internal - FAST PUTCHAR
					; AL = character to display
		mov	al, 32h	; '2'
		int	29h		; DOS 2+ internal - FAST PUTCHAR
					; AL = character to display
		mov	al, 4Ah	; 'J'
		int	29h		; DOS 2+ internal - FAST PUTCHAR
					; AL = character to display
		retf
sub_20FA	endp

; ---------------------------------------------------------------------------
		nop
; ---------------------------------------------------------------------------
dword_210C	dd 0

; =============== S U B	R O U T	I N E =======================================


sub_2110	proc far
		xor	ax, ax
		push	ax
		push	ax
		push	cs
		call	near ptr sub_1218
		and	ax, 0Ch
		cmp	ax, 0Ch
		mov	word_E930, 33FFh
		jz	short loc_212C
		mov	word_E930, 0

loc_212C:
		xor	ax, ax
		mov	word_F42A, ax
		mov	word_F42C, ax
		cmp	byte_E932, al
		jnz	short locret_2179
		mov	al, 0Ah
		push	ax
		push	cs
		mov	ax, 2184h
		push	ax
		nop
		push	cs
		call	near ptr sub_826
		mov	word_F42E, ax
		mov	word_F430, dx
		pushf
		cli
		in	al, 2		; DMA controller, 8237A-5.
					; channel 1 current address
		mov	ah, al
		and	al, 0FBh
		out	2, al		; DMA controller, 8237A-5.
					; channel 1 base address
					; (also	sets current address)
		popf
		or	ah, 0FBh
		mov	byte_E932, ah
		mov	ax, 18h
		push	ax
		push	cs
		mov	ax, 217Ah
		push	ax
		nop
		push	cs
		call	near ptr sub_826
		mov	word ptr cs:dword_210C,	ax
		mov	word ptr cs:dword_210C+2, dx
		out	64h, al		; AT Keyboard controller 8042.

locret_2179:
		retf
sub_2110	endp

; ---------------------------------------------------------------------------
		pushf
		call	cs:dword_210C
		out	64h, al		; AT Keyboard controller 8042.
		iret
; ---------------------------------------------------------------------------
		nop
		push	ax
		push	ds
		mov	ax, seg	dseg
		mov	ds, ax
		mov	ax, word_E930
		add	word_F432, ax
		jb	short loc_21B5
		inc	word_F42A
		inc	word_F42C
		cmp	word_E92E, 0
		jz	short loc_21B5
		push	bx
		push	cx
		push	dx
		push	si
		push	di
		push	es
		cld
		call	dword ptr unk_E92C
		pop	es
		pop	di
		pop	si
		pop	dx
		pop	cx
		pop	bx
		cli

loc_21B5:
		pop	ds
		mov	al, 20h	; ' '
		out	0, al
		out	64h, al		; AT Keyboard controller 8042.
		pop	ax
		iret

; =============== S U B	R O U T	I N E =======================================


sub_21BE	proc far
		cmp	byte_E932, 0
		jz	short locret_2204
		mov	ax, 18h
		push	ax
		push	word ptr cs:dword_210C+2
		push	word ptr cs:dword_210C
		nop
		push	cs
		call	near ptr sub_826
		pushf
		cli
		in	al, 2		; DMA controller, 8237A-5.
					; channel 1 current address
		or	al, 4
		out	2, al		; DMA controller, 8237A-5.
					; channel 1 base address
					; (also	sets current address)
		popf
		mov	ax, 0Ah
		push	ax
		push	word_F430
		push	word_F42E
		nop
		push	cs
		call	near ptr sub_826
		pushf
		cli
		in	al, 2		; DMA controller, 8237A-5.
					; channel 1 current address
		and	al, byte_E932
		out	2, al		; DMA controller, 8237A-5.
					; channel 1 base address
					; (also	sets current address)
		popf
		out	64h, al		; AT Keyboard controller 8042.
		xor	al, al
		mov	byte_E932, al

locret_2204:
		retf
sub_21BE	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_2206	proc far
		cmp	byte_E932, 0
		jnz	short loc_2222

loc_220D:
		jmp	short $+2
		jmp	short $+2
		in	al, 0A0h	; PIC 2	 same as 0020 for PIC 1
		test	al, 20h
		jnz	short loc_220D

loc_2217:
		jmp	short $+2
		jmp	short $+2
		in	al, 0A0h	; PIC 2	 same as 0020 for PIC 1
		test	al, 20h
		jz	short loc_2217
		retf
; ---------------------------------------------------------------------------

loc_2222:
		mov	ax, word_F42A

loc_2225:
		cmp	ax, word_F42A
		jz	short loc_2225
		retf
sub_2206	endp


; =============== S U B	R O U T	I N E =======================================


sub_222C	proc far
		mov	bx, sp
		push	si
		push	di
		mov	si, ss:[bx+4]
		mov	word_E662, 0C8h	; 'È'
		push	cs
		call	near ptr sub_2206

loc_223E:
		push	cs
		call	loc_19EC
		mov	di, si
		cmp	di, 0
		jle	short loc_2250

loc_2249:
		push	cs
		call	near ptr sub_2206
		dec	di
		jnz	short loc_2249

loc_2250:
		sub	word_E662, 6
		cmp	word_E662, 64h ; 'd'
		jg	short loc_223E
		mov	word_E662, 64h ; 'd'
		push	cs
		call	loc_19EC
		pop	di
		pop	si
		retf	2
sub_222C	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_226C	proc far
		mov	bx, sp
		push	si
		push	di
		mov	si, ss:[bx+4]
		mov	word_E662, 64h ; 'd'
		push	cs
		call	near ptr sub_2206

loc_227E:
		push	cs
		call	loc_19EC
		mov	di, si
		cmp	di, 0
		jle	short loc_2290

loc_2289:
		push	cs
		call	near ptr sub_2206
		dec	di
		jnz	short loc_2289

loc_2290:
		add	word_E662, 6
		cmp	word_E662, 0C8h	; 'È'
		jl	short loc_227E
		mov	word_E662, 0C8h	; 'È'
		push	cs
		call	loc_19EC
		pop	di
		pop	si
		retf	2
sub_226C	endp


; =============== S U B	R O U T	I N E =======================================


sub_22AC	proc far
					; sub_12CC+140p
		push	bx
		mov	bx, sp
		mov	ax, ss:[bx+8]
		mov	bx, ss:[bx+6]
		add	bx, 0Fh
		adc	ax, 0
		shr	ax, 1
		rcr	bx, 1
		shr	ax, 1
		rcr	bx, 1
		shr	ax, 1
		rcr	bx, 1
		shr	ax, 1
		jnz	short loc_22D8
		rcr	bx, 1
		push	bx
		push	cs
		call	near ptr sub_2364
		pop	bx
		retf	4
; ---------------------------------------------------------------------------

loc_22D8:
		mov	ax, 0
		stc
		pop	bx
		retf	4
sub_22AC	endp


; =============== S U B	R O U T	I N E =======================================


sub_22E0	proc far
		push	bx
		mov	bx, sp
		mov	bx, ss:[bx+6]
		mov	ah, 48h
		int	21h		; DOS -	2+ - ALLOCATE MEMORY
					; BX = number of 16-byte paragraphs desired
		jb	short loc_22FB
		push	ax
		push	bx
		push	cs
		call	near ptr sub_2302
		xor	ax, ax
		mov	word_E93E, 1

loc_22FB:
		neg	ax
		pop	bx
		retf	2
sub_22E0	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_2302	proc far

arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		mov	ax, [bp+arg_2]
		mov	word_E93C, ax
		mov	word_F43A, ax
		add	ax, [bp+arg_0]
		mov	word_F434, ax
		mov	word_F436, ax
		mov	word_F438, 0
		mov	word_E93E, 0
		clc
		pop	bp
		retf	4
sub_2302	endp


; =============== S U B	R O U T	I N E =======================================


sub_2328	proc far
		push	bx
		mov	bx, 0FFFFh
		mov	ah, 48h
		int	21h		; DOS -	2+ - ALLOCATE MEMORY
					; BX = number of 16-byte paragraphs desired
		mov	ax, word_E942
		cmp	bx, ax
		jbe	short loc_2339
		sub	bx, ax

loc_2339:
		mov	ah, 48h
		int	21h		; DOS -	2+ - ALLOCATE MEMORY
					; BX = number of 16-byte paragraphs desired
		jb	short loc_234D
		push	ax
		push	ax
		push	bx
		push	cs
		call	near ptr sub_2302
		mov	word_E93E, 1
		pop	ax

loc_234D:
		pop	bx
		retf
sub_2328	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_2350	proc far
		push	bx
		mov	bx, sp
		mov	bx, ss:[bx+6]
		add	bx, 0Fh
		rcr	bx, 1
		shr	bx, 1
		shr	bx, 1
		shr	bx, 1
		jmp	short loc_236B
sub_2350	endp


; =============== S U B	R O U T	I N E =======================================


sub_2364	proc far
		push	bx
		mov	bx, sp
		mov	bx, ss:[bx+6]

loc_236B:
		cmp	word_E93C, 0
		jnz	short loc_2376
		push	cs
		call	near ptr sub_2328

loc_2376:
		push	cx
		push	es
		test	bx, bx
		jz	short loc_23D7
		mov	ax, word_F434
		sub	ax, word_F43A
		cmp	bx, ax
		jnb	short loc_23D7
		inc	bx
		mov	ax, word_F438
		test	ax, ax
		jz	short loc_23B3
		mov	cx, word_F434

loc_2393:
		mov	es, ax
		mov	ax, es:2
		cmp	word ptr es:0, 0
		jnz	short loc_23AF
		mov	cx, es
		add	cx, bx
		jb	short loc_23AB
		cmp	cx, ax
		jbe	short loc_23E4

loc_23AB:
		mov	cx, word_F434

loc_23AF:
		cmp	ax, cx
		jnz	short loc_2393

loc_23B3:
		mov	ax, word_F436
		mov	cx, ax
		sub	ax, bx
		jb	short loc_23D7
		cmp	ax, word_F43A
		jb	short loc_23D7
		mov	word_F436, ax
		mov	es, ax
		mov	es:2, cx
		mov	word ptr es:0, 1
		mov	bx, ax
		jmp	short loc_243D
; ---------------------------------------------------------------------------

loc_23D7:
		mov	ax, 0
		mov	word_E940, ax
		stc
		pop	es
		pop	cx
		pop	bx
		retf	2
; ---------------------------------------------------------------------------

loc_23E4:
		sub	ax, cx
		cmp	ax, 1
		jbe	short loc_2414
		add	ax, cx
		mov	word ptr es:0, 1
		mov	es:2, cx
		mov	bx, es
		mov	es, cx
		mov	es:2, ax
		mov	word ptr es:0, 0
		cmp	bx, word_F438
		jnz	short loc_243D
		mov	word_F438, cx
		jmp	short loc_243D
; ---------------------------------------------------------------------------

loc_2414:
		mov	word ptr es:0, 1
		mov	bx, es
		cmp	bx, word_F438
		jnz	short loc_243D
		mov	ax, word_F434
		mov	cx, bx
		push	bx

loc_2429:
		les	cx, es:0
		jcxz	short loc_2438
		mov	bx, es
		cmp	bx, ax
		jb	short loc_2429
		xor	bx, bx

loc_2438:
		mov	word_F438, bx
		pop	bx

loc_243D:
		mov	es, bx
		mov	ax, 0
		xchg	ax, word_E940
		mov	es:4, ax
		lea	ax, [bx+1]
		clc

loc_244E:
		pop	es
		pop	cx
		pop	bx
		retf	2
sub_2364	endp


; =============== S U B	R O U T	I N E =======================================


sub_2454	proc far
		push	bx
		mov	bx, sp
		push	cx
		push	es
		mov	bx, ss:[bx+6]
		dec	bx
		mov	es, bx
		cmp	bx, word_F436
		jz	short loc_24B8
		jb	short loc_244E
		xor	bx, bx
		cmp	word ptr es:[bx], 1
		jnz	short loc_244E
		mov	es:[bx], bx
		mov	cx, word_F438
		mov	ax, es
		mov	word_F438, ax
		jcxz	short loc_24F5
		cmp	ax, cx
		jb	short loc_2487
		mov	ax, cx
		mov	word_F438, ax

loc_2487:
		mov	cx, ax
		mov	ax, es:[bx+2]
		cmp	ax, word_F434
		jnz	short loc_2495
		mov	ax, es

loc_2495:
		push	ds

loc_2496:
		mov	ds, cx
		mov	cx, [bx+2]
		cmp	cx, ax
		ja	short loc_24B5
		cmp	[bx], bx
		jnz	short loc_2496

loc_24A3:
		mov	es, cx
		cmp	es:[bx], bx
		jnz	short loc_2496
		mov	cx, es:[bx+2]
		mov	[bx+2],	cx
		cmp	cx, ax
		jbe	short loc_24A3

loc_24B5:
		pop	ds
		jmp	short loc_24F5
; ---------------------------------------------------------------------------

loc_24B8:
		xor	bx, bx
		mov	ax, es:[bx+2]
		mov	word_F436, ax
		cmp	ax, word_F434
		jz	short loc_24F5
		mov	es, ax
		cmp	es:[bx], bx
		jnz	short loc_24F5
		mov	ax, es:[bx+2]
		mov	word_F436, ax
		mov	cx, word_F434
		cmp	ax, cx
		jz	short loc_24F1
		jmp	short loc_24E8
; ---------------------------------------------------------------------------
		nop

loc_24E0:
		mov	ax, es:[bx+2]
		cmp	ax, cx
		jz	short loc_24F1

loc_24E8:
		mov	es, ax
		cmp	es:[bx], bx
		jnz	short loc_24E0
		mov	bx, es

loc_24F1:
		mov	word_F438, bx

loc_24F5:
		clc
		pop	es
		pop	cx
		pop	bx
		retf	2
sub_2454	endp


; =============== S U B	R O U T	I N E =======================================


sub_24FC	proc far
		cmp	word_E93C, 0
		jz	short loc_2517
		mov	ax, word_E93C
		mov	es, ax
		xor	ax, ax
		cmp	word_E93E, ax
		mov	word_E93C, ax
		jz	short loc_2517
		mov	ah, 49h
		int	21h		; DOS -	2+ - FREE MEMORY
					; ES = segment address of area to be freed

loc_2517:
		mov	ax, 1
		retf
sub_24FC	endp

; ---------------------------------------------------------------------------
		xor	ax, ax
		stc
		retf
; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_2520	proc far
		cmp	word_E964, 0
		jz	short locret_254F
		push	word_E964
		push	cs
		call	near ptr sub_2454
		mov	word_E964, 0
		jmp	short loc_253D
; ---------------------------------------------------------------------------

loc_2537:
		dec	ax
		push	ax
		push	cs
		call	near ptr sub_270E

loc_253D:
		mov	ax, word_E966
		test	ax, ax
		jnz	short loc_2537
		cmp	word_E968, 0
		jz	short locret_254F
		call	word_E968

locret_254F:
		retf
sub_2520	endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_2564

loc_2550:
		push	ax
		push	es
		push	cs
		call	near ptr sub_2454
		pop	ax
		jmp	short loc_255D
; END OF FUNCTION CHUNK	FOR sub_2564
; ---------------------------------------------------------------------------
		nop
; START	OF FUNCTION CHUNK FOR sub_2564

loc_255A:
		mov	ax, 0FFF8h

loc_255D:
		stc
		pop	di
		pop	si
		pop	bp
		retf	8
; END OF FUNCTION CHUNK	FOR sub_2564

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_2564	proc far

arg_0		= word ptr  6
arg_2		= dword	ptr  8
arg_6		= word ptr  0Ch

; FUNCTION CHUNK AT 2550 SIZE 00000009 BYTES
; FUNCTION CHUNK AT 255A SIZE 0000000A BYTES

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	di, word_E966
		shl	di, 1
		mov	ax, [bp+arg_6]
		mov	dx, ax
		mul	ah
		mov	bx, ax
		shl	ax, 2
		add	ax, bx
		mov	word_E940, 4
		push	ax
		push	cs
		call	near ptr sub_2350
		jb	short loc_255A
		mov	es, ax
		push	word_E966
		push	dx
		push	ax
		push	cs
		call	near ptr sub_2610
		jb	short loc_2550
		push	ds
		lds	si, [bp+arg_2]
		mov	di, bx
		mov	cx, bx
		shl	cx, 1
		rep movsw
		push	es
		pop	ds
		mov	si, bx
		mov	dx, [bp+arg_0]
		mov	dh, dl
		mov	cx, bx
		xor	di, di
		shr	dh, 1
		jb	short loc_25BA
		rep movsb
		jmp	short loc_25C0
; ---------------------------------------------------------------------------
		nop

loc_25BA:
		lodsb
		not	al
		stosb
		loop	loc_25BA

loc_25C0:
		mov	cx, bx
		xor	di, di
		shr	dh, 1
		sbb	ah, ah

loc_25C8:
		lodsb
		xor	al, ah
		or	[di], al
		inc	di
		loop	loc_25C8
		mov	cx, bx
		xor	di, di
		shr	dh, 1
		sbb	ah, ah

loc_25D8:
		lodsb
		xor	al, ah
		or	[di], al
		inc	di
		loop	loc_25D8
		mov	cx, bx
		xor	di, di
		shr	dh, 1
		sbb	ah, ah

loc_25E8:
		lodsb
		xor	al, ah
		or	[di], al
		inc	di
		loop	loc_25E8
		test	dl, dl
		jz	short loc_2604
		mov	ah, 4

loc_25F6:
		xor	si, si
		mov	cx, bx

loc_25FA:
		lodsb
		and	[di], al
		inc	di
		loop	loc_25FA
		dec	ah
		jnz	short loc_25F6

loc_2604:
		pop	ds
		mov	ax, word_E966
		dec	ax
		pop	di
		pop	si
		pop	bp
		retf	8
sub_2564	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_2610	proc far

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		push	bx
		cld
		mov	bx, [bp+arg_4]
		cmp	bx, 200h
		cmc
		mov	ax, 0FFE1h
		jb	short loc_267F
		cmp	word_E964, 0
		jnz	short loc_2650
		mov	word_E940, 4
		push	240h
		push	cs
		call	near ptr sub_2364
		mov	word_E964, ax
		mov	ax, 0FFF8h
		jb	short loc_267F
		push	es
		push	cx
		push	di
		push	ds
		pop	es
		assume es:dseg
		xor	ax, ax
		mov	di, 130Ch
		mov	cx, 200h
		rep stosw
		pop	di
		pop	cx
		pop	es
		assume es:nothing

loc_2650:
		mov	ax, bx
		shl	bx, 1
		cmp	ax, word_E966
		jnb	short loc_266B
		cmp	word ptr [bx+130Ch], 0
		jz	short loc_266F
		push	word ptr [bx+0F0Ch]
		push	cs
		call	near ptr sub_2454
		jmp	short loc_266F
; ---------------------------------------------------------------------------

loc_266B:
		inc	ax
		mov	word_E966, ax

loc_266F:
		mov	ax, [bp+arg_2]
		mov	[bx+130Ch], ax
		mov	ax, [bp+arg_0]
		mov	[bx+0F0Ch], ax
		xor	ax, ax

loc_267F:
		pop	bx
		pop	bp
		retf	6
sub_2610	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_2684	proc far

arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		push	ds
		push	si
		push	di
		push	[bp+arg_2]
		push	[bp+arg_0]
		push	cs
		call	near ptr sub_BD0
		jb	short loc_2706
		mov	bx, ax
		mov	cx, 414h
		push	bx
		push	cx
		push	bx
		push	ds
		push	cx
		push	cs
		call	near ptr sub_3D6
		pop	cx
		pop	bx
		jb	short loc_26FE
		mov	al, byte_E949
		and	al, 7Fh
		cmp	al, 3
		mov	ax, 0FFF3h
		jnz	short loc_26FE
		xor	si, si
		mov	ax, word_E960
		or	ax, ax
		jz	short loc_26CA
		push	bx
		push	cx
		push	bx
		push	ds
		push	cx
		push	cs
		call	near ptr sub_412
		pop	cx
		pop	bx
		mov	si, ax

loc_26CA:
		test	byte_E949, 80h
		jz	short loc_26DE
		push	bx
		push	cx
		push	bx
		push	ds
		push	cx
		push	cs
		call	near ptr sub_5B2
		pop	cx
		pop	bx
		jb	short loc_26FE

loc_26DE:
		push	bx
		push	bx
		push	ds
		push	cx
		push	si
		push	cs
		call	loc_286
		pop	bx
		jb	short loc_26FE
		push	bx
		push	cs
		call	near ptr sub_BBA
		mov	ax, word_E952
		sub	ax, word_E950
		inc	ax
		pop	di
		pop	si
		pop	ds
		pop	bp
		retf	4
; ---------------------------------------------------------------------------

loc_26FE:
		push	ax
		push	bx
		push	cs
		call	near ptr sub_BBA
		pop	ax
		stc

loc_2706:
		pop	di
		pop	si
		pop	ds
		pop	bp
		retf	4
sub_2684	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_270E	proc far
		mov	bx, sp
		xor	dx, dx
		mov	bx, ss:[bx+4]
		cmp	bx, word_E966
		jnb	short loc_2756
		mov	cx, bx
		shl	bx, 1
		mov	ax, [bx+130Ch]
		or	ax, ax
		jz	short loc_2756
		push	word ptr [bx+0F0Ch]
		push	cs
		call	near ptr sub_2454
		mov	[bx+0F0Ch], dx
		mov	[bx+130Ch], dx
		inc	cx
		cmp	cx, word_E966
		jnz	short loc_274E

loc_273F:
		dec	word_E966
		jz	short loc_274E
		dec	bx
		dec	bx
		mov	cx, [bx+0F0Ch]
		jcxz	short loc_273F
		nop

loc_274E:
		mov	ax, 0
		clc
		retf	2
; ---------------------------------------------------------------------------
		nop

loc_2756:
		stc
		mov	ax, 0FFE1h
		retf	2
sub_270E	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_275E	proc far

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		push	ds
		push	si
		push	di
		mov	bx, [bp+arg_0]
		shl	bx, 1
		mov	dx, [bx+130Ch]
		mov	cx, [bp+arg_4]
		mov	bp, [bp+arg_2]
		mov	ax, bp
		shl	ax, 2
		add	bp, ax
		shl	bp, 4
		mov	ax, cx
		and	cx, 7
		shr	ax, 3
		add	bp, ax
		mov	si, cx
		mov	ch, dh
		shr	ch, 1
		mov	al, dl
		mov	ah, [si+404h]
		mov	cs:word_290B, ax
		test	bp, 1
		jnz	short loc_27CE
		test	dh, 1
		jnz	short loc_27B8
		mov	cs:byte_286B, ch
		mov	al, 50h	; 'P'
		sub	al, dh
		mov	cs:byte_2869, al
		mov	cs:word_290E, 0FF3Eh
		jmp	short loc_2800
; ---------------------------------------------------------------------------

loc_27B8:
		mov	cs:byte_2899, ch
		mov	al, 50h	; 'P'
		sub	al, dh
		mov	cs:byte_2897, al
		mov	cs:word_290E, 0FF62h
		jmp	short loc_2800
; ---------------------------------------------------------------------------

loc_27CE:
		dec	bp
		test	dh, 1
		jnz	short loc_27EC
		dec	ch
		mov	cs:byte_28D0, ch
		mov	al, 4Eh	; 'N'
		sub	al, dh
		mov	cs:byte_28CE, al
		mov	cs:word_290E, 0FF90h
		jmp	short loc_2800
; ---------------------------------------------------------------------------

loc_27EC:
		mov	cs:byte_2901, ch
		mov	al, 4Fh	; 'O'
		sub	al, dh
		mov	cs:byte_28FF, al
		mov	cs:word_290E, 0FFC6h

loc_2800:
		mov	ds, word ptr [bx+0F0Ch]
		xor	si, si
		mov	al, 0C0h ; 'À'
		out	7Ch, al
		mov	ax, si
		out	7Eh, al
		out	7Eh, al
		out	7Eh, al
		out	7Eh, al
		mov	ax, 0A800h
		mov	es, ax
		assume es:nothing
		call	loc_2908
		mov	ax, 0FFCEh
		out	7Ch, al
		mov	al, ah
		out	7Eh, al
		out	7Eh, al
		out	7Eh, al
		out	7Eh, al
		call	loc_2908
		mov	al, 0CDh ; 'Í'
		out	7Ch, al
		call	loc_2908
		mov	al, 0CBh ; 'Ë'
		out	7Ch, al
		call	loc_2908
		mov	al, 0C7h ; 'Ç'
		out	7Ch, al
		call	loc_2908
		xor	al, al
		out	7Ch, al
		pop	di
		pop	si
		pop	ds
		pop	bp
		retf	6
sub_275E	endp

; ---------------------------------------------------------------------------
		db 32h,	0D2h, 0ADh, 0D3h, 0C8h,	8Ah, 0F0h, 22h,	0C7h, 32h
		db 0F0h, 0Ah, 0C2h, 0ABh, 8Ah, 0D6h, 0FEh, 0CDh, 75h, 0EEh
		db 26h,	88h, 15h, 8Ah, 0D5h, 83h, 0C7h
byte_2869	db 50h
		db 0B5h
byte_286B	db 11h
		db 0FEh, 0CBh, 75h, 0E0h, 0C3h,	90h, 32h, 0D2h,	0Ah, 0EDh
		db 74h,	12h, 0ADh, 0D3h, 0C8h, 8Ah, 0F0h, 22h, 0C7h, 32h
		db 0F0h, 0Ah, 0C2h, 0ABh, 8Ah, 0D6h, 0FEh, 0CDh, 75h, 0EEh
		db 0ACh, 32h, 0E4h, 0D3h, 0C8h,	0Ah, 0C2h, 0ABh, 4Fh, 8Ah
		db 0D5h, 83h, 0C7h
byte_2897	db 50h
		db 0B5h
byte_2899	db 11h
		db 0FEh, 0CBh, 75h, 0D6h, 0C3h,	90h, 0ACh, 32h,	0E4h, 0D3h
		db 0C8h, 8Ah, 0D4h, 86h, 0E0h, 32h, 0C0h, 0ABh,	0Ah, 0EDh
		db 74h,	12h, 0ADh, 0D3h, 0C8h, 8Ah, 0F0h, 22h, 0C7h, 32h
		db 0F0h, 0Ah, 0C2h, 0ABh, 8Ah, 0D6h, 0FEh, 0CDh, 75h, 0EEh
		db 0ACh, 32h, 0E4h, 0D3h, 0C8h,	0Ah, 0C2h, 0ABh, 8Ah, 0D5h
		db 83h,	0C7h
byte_28CE	db 50h
		db 0B5h
byte_28D0	db 11h
		db 0FEh, 0CBh, 75h, 0CBh, 0C3h,	0ACh, 32h, 0E4h, 0D3h
		db 0C8h, 8Ah, 0D4h, 86h, 0E0h, 32h, 0C0h, 0ABh,	0Ah, 0EDh
		db 74h,	12h, 0ADh, 0D3h, 0C8h, 8Ah, 0F0h, 22h, 0C7h, 32h
		db 0F0h, 0Ah, 0C2h, 0ABh, 8Ah, 0D6h, 0FEh, 0CDh, 75h, 0EEh
		db 26h,	88h, 15h, 8Ah, 0D5h, 83h, 0C7h
byte_28FF	db 50h
		db 0B5h
byte_2901	db 11h
		db 0FEh, 0CBh, 75h, 0D0h, 0C3h,	90h
; ---------------------------------------------------------------------------

loc_2908:
		mov	di, bp
; ---------------------------------------------------------------------------
		db 0BBh
word_290B	dw 1234h
		db 0E9h
word_290E	dw 0FF3Eh
dword_2910	dd 0
byte_2914	db 0, 90h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_2916	proc far

arg_0		= dword	ptr  6

		push	bp
		mov	bp, sp
		cld
		mov	ax, word ptr cs:dword_2910
		or	ax, word ptr cs:dword_2910+2
		jz	short loc_2928
		jmp	loc_29A9
; ---------------------------------------------------------------------------

loc_2928:
		push	di
		push	si
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		push	cs
		call	near ptr sub_A88
		push	10h
		push	cs
		call	near ptr sub_2350
		mov	di, ax
		push	ax
		push	0
		push	10h
		push	cs
		call	near ptr sub_9D4
		mov	ax, di
		mov	es, ax
		assume es:nothing
		mov	di, es:0
		mov	si, es:6
		push	ax
		push	cs
		call	near ptr sub_2454
		push	di
		push	cs
		call	near ptr sub_2350
		mov	word_FCD0, ax
		push	ax
		push	0
		push	di
		push	cs
		call	near ptr sub_9D4
		push	cs
		call	near ptr sub_968
		mov	cx, di
		mov	ax, word_FCD0
		mov	es, ax
		mov	ax, si
		xor	bx, bx

loc_2977:
		xor	es:[bx], al
		sub	al, es:[bx]
		inc	bx
		loop	loc_2977
		pop	si
		pop	di
		mov	ax, 3521h
		int	21h		; DOS -	2+ - GET INTERRUPT VECTOR
					; AL = interrupt number
					; Return: ES:BX	= value	of interrupt vector
		mov	word ptr cs:dword_2910,	bx
		mov	word ptr cs:dword_2910+2, es
		mov	word_FCCC, 0
		mov	word_FCCE, 0FFFFh
		push	ds
		push	cs
		pop	ds
		assume ds:seg000
		mov	dx, 2A0Ah
		mov	ax, 2521h
		int	21h		; DOS -	SET INTERRUPT VECTOR
					; AL = interrupt number
					; DS:DX	= new vector to	be used	for specified interrupt
		pop	ds
		assume ds:dseg

loc_29A9:
		push	si
		push	di
		push	ds
		mov	cx, 0FFFFh
		mov	al, 0
		les	di, [bp+arg_0]
		repne scasb
		not	cx
		sub	di, cx
		mov	si, di
		mov	di, 171Ch
		push	ds
		push	es
		pop	ds
		pop	es
		shr	cx, 1
		rep movsw
		adc	cx, cx
		rep movsb
		pop	ds
		pop	di
		pop	si
		pop	bp
		retf	4
sub_2916	endp


; =============== S U B	R O U T	I N E =======================================


sub_29D2	proc far
		mov	ax, word ptr cs:dword_2910
		or	ax, word ptr cs:dword_2910+2
		jz	short locret_2A09
		push	ds
		lds	dx, cs:dword_2910
		mov	ax, 2521h
		int	21h		; DOS -	SET INTERRUPT VECTOR
					; AL = interrupt number
					; DS:DX	= new vector to	be used	for specified interrupt
		pop	ds
		xor	ax, ax
		mov	word ptr cs:dword_2910,	ax
		mov	word ptr cs:dword_2910+2, ax
		cmp	word_FCCC, ax
		jz	short locret_2A09
		push	word_FCCC
		push	cs
		call	near ptr sub_1AF6
		push	word_FCD0
		push	cs
		call	near ptr sub_2454

locret_2A09:
		retf
sub_29D2	endp

; ---------------------------------------------------------------------------
		cmp	cs:byte_2914, 0
		jz	short loc_2A17
		jmp	cs:dword_2910
; ---------------------------------------------------------------------------

loc_2A17:
		pusha
		push	ds
		push	es
		mov	bp, sp
		mov	di, seg	dseg
		mov	ds, di
		inc	cs:byte_2914
		push	word ptr [bp+18h]
		popf
		mov	cs:byte_2A6E, ah
		mov	si, 2A3Eh

loc_2A32:
		add	si, 4
		cmp	ah, cs:[si]
		jnz	short loc_2A32
		mov	di, word_FCCE
		jmp	word ptr cs:[si+2]
; ---------------------------------------------------------------------------
		db 3Dh,	0, 72h,	2Ah, 3Eh, 0, 0A7h, 2Ah,	3Fh, 0,	0C5h, 2Ah
		db 42h,	0, 0D9h, 2Ah, 46h, 0, 3Ah, 2Bh,	40h, 0,	3Eh, 2Bh
		db 45h,	0, 3Eh,	2Bh, 4Ch, 0, 1Ch, 2Bh, 57h, 0, 3Eh, 2Bh
		db 5Ch,	0, 3Eh,	2Bh, 44h, 0, 28h, 2Bh
byte_2A6E	db 0
		db    0
		db 42h,	2Bh, 0A8h, 0Fh,	74h, 3,	0E9h, 0C9h, 0, 0Bh, 0FFh
		db 78h,	3, 0E9h, 0C2h, 0, 1Eh, 68h, 1Ch, 17h, 0FFh, 76h
		db 2, 52h, 0Eh,	0E8h, 0Ch, 1, 0Bh, 0C0h, 75h, 3, 0E9h
		db 0AFh, 0, 0A3h, 9Ch, 17h, 8Eh, 0C0h, 26h, 8Eh, 6, 2 dup(0)
		db 26h,	0A1h, 2	dup(0),	0A3h, 9Eh, 17h,	0E9h, 0B6h, 0
		db 3Bh,	0DFh, 74h, 3, 0E9h, 94h, 0, 0FFh, 36h, 9Ch, 17h
		db 0Eh,	0E8h, 40h, 0F0h, 0C7h, 6, 9Ch, 17h, 2 dup(0), 0C7h
		db 6, 9Eh, 17h,	2 dup(0FFh), 0E9h, 98h,	0, 3Bh,	0DFh, 75h
		db 79h,	0FFh, 76h, 2, 52h, 51h,	0FFh, 36h, 9Ch,	17h, 0Eh
		db 0E8h, 0EAh, 0F0h, 0E9h, 84h,	0, 3Bh,	0DFh, 75h, 65h
		db 0Bh,	0C9h, 7Ch, 73h,	3Ch, 1,	74h, 28h, 7Ch, 1Ah, 8Eh
		db 6, 9Ch, 17h,	26h, 8Bh, 2 dup(16h), 0, 26h, 8Bh, 0Eh
		db 18h,	0, 26h,	2Bh, 16h, 12h, 0, 26h, 1Bh, 0Eh, 14h, 0
		db 0EBh, 0Ch, 51h, 52h,	0FFh, 36h, 9Ch,	17h, 0Eh, 0E8h
		db 0E3h, 0F0h, 5Ah, 59h, 0FFh, 36h, 9Ch, 17h, 51h, 52h
		db 0Eh,	0E8h, 13h, 0F1h, 89h, 56h, 0Eh,	0EBh, 41h, 2Eh
		db 0C5h, 16h, 10h, 29h,	0B8h, 21h, 25h,	0CDh, 21h, 0EBh
		db 1Ah,	8Ah, 0C8h, 0B8h, 1, 0, 0D3h, 0E0h, 2Eh,	85h, 6
		db 38h,	2Bh, 75h, 8, 0EBh, 0Ah,	0CFh, 14h, 8Bh,	0CFh, 74h
		db 16h,	3Bh, 0DFh, 74h,	12h, 2Eh, 0FEh,	0Eh, 14h, 29h
		db 0FFh, 76h, 18h, 9Dh,	7, 1Fh,	61h, 0FAh, 2Eh,	0FFh, 2Eh
		db 10h,	29h, 80h, 4Eh, 18h, 1, 0B8h, 1,	0, 0EBh, 4, 80h
		db 66h,	18h, 0FEh, 89h,	46h, 12h, 2Eh, 0FEh, 0Eh, 14h
		db 29h,	7, 1Fh,	61h, 0CFh, 0

; =============== S U B	R O U T	I N E =======================================


sub_2B6E	proc far
		mov	cx, 100h
		mov	dx, 188h

loc_2B74:
		in	al, dx
		inc	al
		jnz	short loc_2B7F
		loop	loc_2B74
		xor	ax, ax
		jmp	short loc_2B93
; ---------------------------------------------------------------------------

loc_2B7F:
		pushf
		cli
		mov	bh, 7
		call	sub_20E6
		and	al, 3Fh
		or	al, 80h
		mov	bl, al
		call	sub_20D0
		popf
		mov	ax, 1

loc_2B93:
		mov	word_E658, ax
		retf
sub_2B6E	endp

; ---------------------------------------------------------------------------
		nop
		enter	0, 0
		push	si
		push	di
		mov	word_E940, 7
		push	1Fh
		push	cs
		call	near ptr sub_2350
		jb	loc_2CA4
		mov	si, ax
		push	word ptr [bp+0Ch]
		push	word ptr [bp+0Ah]
		push	cs
		call	near ptr sub_6A4
		or	ax, ax
		jz	loc_2C9D
		mov	es, si
		mov	es:0, ax
		mov	ax, word_FCD0
		mov	fs, ax
		xor	ax, ax
		mov	di, ax

loc_2BCF:
		mov	al, fs:[di]
		mov	bx, 2
		or	al, al
		jz	short loc_2BF1
		mov	bx, 3
		add	bx, di
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		push	fs
		push	bx
		call	sub_2CB2
		jnz	short loc_2BF3
		add	di, 20h	; ' '
		jmp	short loc_2BCF
; ---------------------------------------------------------------------------

loc_2BF1:
		mov	ax, bx

loc_2BF3:
		mov	es, si
		mov	ax, fs:[di+14h]
		mov	dx, fs:[di+16h]
		mov	es:0Eh,	ax
		mov	es:10h,	dx
		push	word ptr es:0
		push	dx
		push	ax
		push	0
		push	cs
		call	near ptr sub_76A
		mov	ax, 1B6Eh
		mov	dl, fs:[di+2]
		mov	es, si
		or	dl, dl
		jz	short loc_2C28
		mov	es:1Eh,	dl
		mov	ax, 1BB2h

loc_2C28:
		mov	es:4, ax
		mov	es, cx
		mov	ax, fs:[di]
		mov	es, si
		cmp	ax, 0F388h
		jz	short loc_2C42
		cmp	ax, 9595h
		jz	short loc_2C4C
		mov	ax, 5
		jmp	short loc_2C91
; ---------------------------------------------------------------------------

loc_2C42:
		mov	ax, es:4
		mov	es:2, ax
		jmp	short loc_2C61
; ---------------------------------------------------------------------------

loc_2C4C:
		mov	word ptr es:2, 1B20h
		mov	word ptr es:1Ah, 0
		mov	word ptr es:1Ch, 0FFFFh

loc_2C61:
		mov	bx, fs:[di+10h]
		mov	dx, fs:[di+12h]
		xor	ax, ax
		mov	es:6, bx
		mov	es:8, ax
		mov	es:16h,	dx
		mov	es:18h,	ax
		mov	es:0Ah,	ax
		mov	es:0Ch,	ax
		mov	es:12h,	ax
		mov	es:14h,	ax
		mov	ax, si
		jmp	short loc_2CAB
; ---------------------------------------------------------------------------

loc_2C91:
		mov	word_E69C, ax
		push	word ptr es:0
		push	cs
		call	near ptr sub_55E

loc_2C9D:
		push	si
		push	cs
		call	near ptr sub_2454
		jmp	short loc_2CA9
; ---------------------------------------------------------------------------

loc_2CA4:
		mov	byte ptr word_E69C, 3

loc_2CA9:
		xor	ax, ax

loc_2CAB:
		pop	di
		pop	si
		leave
		retf	8
; ---------------------------------------------------------------------------
		db  90h	; 

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_2CB2	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	bp
		mov	bp, sp
		push	si
		push	ds
		cld
		les	bx, [bp+arg_4]
		lds	si, [bp+arg_0]

loc_2CBE:
		mov	ah, es:[bx]
		inc	bx
		lodsb
		sub	al, 61h	; 'a'
		cmp	al, 19h
		ja	short loc_2CCB
		sub	al, 20h	; ' '

loc_2CCB:
		sub	ah, 61h	; 'a'
		cmp	ah, 19h
		ja	short loc_2CD6
		sub	ah, 20h	; ' '

loc_2CD6:
		cmp	ah, al
		jnz	short loc_2CE0
		add	al, 61h	; 'a'
		jnz	short loc_2CBE
		jmp	short loc_2CE2
; ---------------------------------------------------------------------------

loc_2CE0:
		xor	ax, ax

loc_2CE2:
		test	ax, ax
		pop	ds
		pop	si
		pop	bp
		retn	8
sub_2CB2	endp


; =============== S U B	R O U T	I N E =======================================


sub_2CEA	proc near
		mov	bh, 0Fh
		call	sub_20D0
		mov	dx, 188h
		mov	al, 0Eh
		out	dx, al
		inc	dx
		inc	dx
		in	al, dx
		not	al
		retn
sub_2CEA	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_2CFC	proc far
		pushf
		cli
		mov	bl, 80h	; ''
		call	sub_2CEA
		and	ax, 3Fh
		popf
		retf
sub_2CFC	endp

; ---------------------------------------------------------------------------
		xchg	dx, bx
		out	dx, al
		xchg	dx, bx
		in	al, dx
		not	al
		retn
; ---------------------------------------------------------------------------
		db    0

; =============== S U B	R O U T	I N E =======================================


sub_2D12	proc far
		test	word_E660, 10h
		jnz	short loc_2D3A
		xor	ax, ax
		mov	es, ax
		assume es:seg000
		test	es:byte_501, 80h
		mov	bx, 3E6h
		jnz	short loc_2D2C
		mov	bx, 4CDh

loc_2D2C:
		mov	dx, 3FDBh
		mov	al, bl
		out	dx, al
		mov	al, bh
		out	dx, al
		mov	al, 7
		out	37h, al
		retf
; ---------------------------------------------------------------------------

loc_2D3A:
		in	al, 61h		; PC/XT	PPI port B bits:
					; 0: Tmr 2 gate	ÍËÍ OR	03H=spkr ON
					; 1: Tmr 2 data	Í¼  AND	0fcH=spkr OFF
					; 3: 1=read high switches
					; 4: 0=enable RAM parity checking
					; 5: 0=enable I/O channel check
					; 6: 0=hold keyboard clock low
					; 7: 0=enable kbrd
		and	al, 0FCh
		out	61h, al		; PC/XT	PPI port B bits:
					; 0: Tmr 2 gate	ÍËÍ OR	03H=spkr ON
					; 1: Tmr 2 data	Í¼  AND	0fcH=spkr OFF
					; 3: 1=read high switches
					; 4: 0=enable RAM parity checking
					; 5: 0=enable I/O channel check
					; 6: 0=hold keyboard clock low
					; 7: 0=enable kbrd
		retf
sub_2D12	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_2D42	proc near
					; sub_2D6A:loc_2E34p ...
		les	bx, [si]
		assume es:nothing
		mov	al, es:[bx]
		sub	al, 30h	; '0'
		cmp	al, 9
		ja	short loc_2D66
		sub	ah, ah
		nop

loc_2D50:
		mov	dx, cx
		shl	dx, 3
		add	dx, cx
		add	cx, dx
		add	cx, ax
		inc	bx
		mov	al, es:[bx]
		sub	al, 30h	; '0'
		cmp	al, 9
		jbe	short loc_2D50
		nop

loc_2D66:
		mov	[si], bx
		retn
sub_2D42	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_2D6A	proc far
					; sub_3198+10Fp
		mov	bx, sp
		push	si
		mov	si, ss:[bx+4]
		jmp	loc_2E23
; ---------------------------------------------------------------------------

loc_2D74:
		xor	cx, cx
		mov	al, es:[bx]
		mov	[si+8],	al
		inc	word ptr [si]
		cbw
		cmp	ax, 4Fh	; 'O'
		jnz	short loc_2D88
		jmp	loc_2E4E
; ---------------------------------------------------------------------------
		nop

loc_2D88:
		sub	ax, 3Ch	; '<'
		test	al, 1
		jnz	short loc_2DBA
		cmp	ax, 18h
		ja	short loc_2DBA
		xchg	ax, bx
		jmp	cs:off_2D9A[bx]
; ---------------------------------------------------------------------------
off_2D9A	dw offset loc_2E64
		dw offset loc_2E72
		dw offset loc_2DBA
		dw offset loc_2DBA
		dw offset loc_2DBA
		dw offset loc_2DBA
		dw offset loc_2DBA
		dw offset loc_2DBA
		dw offset loc_2E34
		dw offset loc_2E80
		dw offset loc_2DBA
		dw offset loc_2DB4
		dw offset loc_2E42
; ---------------------------------------------------------------------------

loc_2DB4:
		mov	byte ptr [si+8], 48h ; 'H'
		jmp	short loc_2DE6
; ---------------------------------------------------------------------------

loc_2DBA:
		mov	al, [si+8]
		sub	al, 41h	; 'A'
		cmp	al, 6
		ja	short loc_2E23
		nop
		les	bx, [si]
		mov	al, es:[bx]
		cmp	al, 2Bh	; '+'
		jz	short loc_2DD1
		cmp	al, 23h	; '#'
		jnz	short loc_2DD7

loc_2DD1:
		add	byte ptr [si+8], 8
		inc	word ptr [si]

loc_2DD7:
		les	bx, [si]
		cmp	byte ptr es:[bx], 2Dh ;	'-'
		jnz	short loc_2DE6
		add	byte ptr [si+8], 10h
		inc	word ptr [si]
		nop

loc_2DE6:
		call	sub_2D42
		mov	[si+0Ch], cx
		or	cx, cx
		jle	short loc_2DF5
		cmp	cx, 20h	; ' '
		jle	short loc_2DFB

loc_2DF5:
		mov	cx, [si+0Eh]
		mov	[si+0Ch], cx

loc_2DFB:
		mov	bx, cx
		shl	bx, 2
		mov	ax, [bx+470h]
		mov	[si+10h], ax
		les	bx, [si]
		cmp	byte ptr es:[bx], 2Eh ;	'.'
		jnz	short loc_2E1C
		mov	bx, ax
		shl	ax, 1
		adc	ax, bx
		sar	ax, 1
		mov	[si+10h], ax
		inc	word ptr [si]

loc_2E1C:
		mov	ax, 1
		pop	si
		retf	2
; ---------------------------------------------------------------------------

loc_2E23:
		les	bx, [si]
		cmp	byte ptr es:[bx], 0
		jz	short loc_2E2E
		jmp	loc_2D74
; ---------------------------------------------------------------------------

loc_2E2E:
		xor	ax, ax
		pop	si
		retf	2
; ---------------------------------------------------------------------------

loc_2E34:
		call	sub_2D42
		cmp	cx, 20h	; ' '
		ja	short loc_2E23
		mov	[si+0Eh], cx
		jmp	short loc_2E23
; ---------------------------------------------------------------------------
		nop

loc_2E42:
		call	sub_2D42
		push	cx
		nop
		push	cs
		call	near ptr sub_33A2
		jmp	short loc_2E23
; ---------------------------------------------------------------------------
		nop

loc_2E4E:
		les	bx, [si]
		mov	al, es:[bx]
		sub	al, 31h	; '1'
		cmp	al, 7
		ja	short loc_2E23
		sub	ah, ah
		inc	ax
		mov	[si+0Ah], ax
		inc	word ptr [si]
		jmp	short loc_2E23
; ---------------------------------------------------------------------------
		nop

loc_2E64:
		dec	word ptr [si+0Ah]
		cmp	word ptr [si+0Ah], 0
		jnz	short loc_2E23
		inc	word ptr [si+0Ah]
		jmp	short loc_2E23
; ---------------------------------------------------------------------------

loc_2E72:
		inc	word ptr [si+0Ah]
		cmp	word ptr [si+0Ah], 9
		jnz	short loc_2E23
		dec	word ptr [si+0Ah]
		jmp	short loc_2E23
; ---------------------------------------------------------------------------

loc_2E80:
		les	bx, [si]
		mov	word ptr [si+14h], 0
		cmp	byte ptr es:[bx], 31h ;	'1'
		jnz	short loc_2E23
		mov	word ptr [si+14h], 1
		jmp	short loc_2E23
sub_2D6A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_2E94	proc far

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

		enter	4, 0
		push	di
		push	si
		push	[bp+arg_2]
		push	[bp+arg_0]
		nop
		push	cs
		call	near ptr sub_BD0
		mov	si, ax
		cmp	si, 0FFFEh
		jnz	short loc_2EBA
		mov	ax, 0FFFEh
		jmp	short loc_2EB4
; ---------------------------------------------------------------------------

loc_2EB1:
		mov	ax, 0FFF8h

loc_2EB4:
		pop	si
		pop	di
		leave
		retf	4
; ---------------------------------------------------------------------------

loc_2EBA:
		push	ax
		push	0
		push	0
		push	2
		nop
		push	cs
		call	near ptr sub_80A
		mov	di, ax
		push	si
		push	0
		push	0
		push	0
		nop
		push	cs
		call	near ptr sub_80A
		push	di
		nop
		push	cs
		call	near ptr sub_209A
		jb	short loc_2EB1
		mov	[bp+var_2], ax
		push	si
		push	ax
		push	cx
		push	di
		nop
		push	cs
		call	near ptr sub_7F0
		mov	es, [bp+var_2]
		mov	bx, ax
		mov	byte ptr es:[bx], 0FFh
		push	si
		nop
		push	cs
		call	near ptr sub_BBA
		cld
		mov	ax, word_EA80
		mov	[bp+var_4], ax
		mov	bx, ax
		shl	bx, 3
		mov	word ptr [bx+1AB2h], 0
		mov	ax, [bx+1AB8h]
		mov	[bx+1AB4h], ax
		xor	di, di
		xor	si, si

loc_2F15:
		mov	ds, [bp+var_2]

loc_2F18:
		lodsb
		cmp	al, 3Bh	; ';'
		jnz	short loc_2F26

loc_2F1D:
		lodsb
		cmp	al, 0FFh
		jz	short loc_2F32
		cmp	al, 0Ah
		jnz	short loc_2F1D

loc_2F26:
		cmp	al, 30h	; '0'
		jb	short loc_2F2E
		cmp	al, 39h	; '9'
		jbe	short loc_2F32

loc_2F2E:
		cmp	al, 0FFh
		jnz	short loc_2F18

loc_2F32:
		xor	cx, cx
		cmp	al, 30h	; '0'
		jb	short loc_2F58

loc_2F38:
		cmp	al, 39h	; '9'
		ja	short loc_2F58
		cmp	al, 0FFh
		jz	short loc_2F58
		sub	al, 30h	; '0'
		mov	dl, al
		mov	dh, 0
		mov	ax, cx
		shl	ax, 2
		add	ax, cx
		add	ax, ax
		add	ax, dx
		mov	cx, ax
		lodsb
		cmp	al, 30h	; '0'
		jnb	short loc_2F38

loc_2F58:
		push	seg dseg
		pop	ds
		cmp	al, 0FFh
		jz	short loc_2FB9
		mov	bx, word_EA80
		shl	bx, 3
		mov	dx, bx
		les	bx, [bx+1AB2h]
		mov	es:[bx], cx
		mov	bx, dx
		add	word ptr [bx+1AB2h], 2
		or	cx, cx
		jz	short loc_2F82
		inc	di
		cmp	di, 100h
		jnz	short loc_2FB2

loc_2F82:
		mov	bx, word_EA80
		shl	bx, 3
		les	bx, [bx+1AB2h]
		xor	di, di
		mov	es:[bx], di
		inc	word_EA80
		cmp	word_EA80, 10h
		jz	short loc_2FB9
		mov	bx, word_EA80
		shl	bx, 3
		mov	word ptr [bx+1AB2h], 0
		mov	cx, [bx+1AB8h]
		mov	[bx+1AB4h], cx

loc_2FB2:
		cmp	al, 0FFh
		jz	short loc_2FB9
		jmp	loc_2F15
; ---------------------------------------------------------------------------

loc_2FB9:
					; sub_2E94+107j ...
		mov	ax, word_EA80
		cmp	[bp+var_4], ax
		mov	ax, 0FFF5h
		jz	short loc_2FC6
		xor	ax, ax

loc_2FC6:
		push	[bp+var_2]
		nop
		push	cs
		call	near ptr sub_2084
		pop	si
		pop	di
		leave
		retf	4
sub_2E94	endp


; =============== S U B	R O U T	I N E =======================================


sub_2FD4	proc far
		test	word_E660, 10h
		jnz	short loc_300E
		in	al, 2		; DMA controller, 8237A-5.
					; channel 1 current address
		mov	ah, 0
		mov	word_EA22, ax
		cli
		push	8
		push	seg seg000
		push	offset loc_3080
		nop
		push	cs
		call	near ptr sub_826
		mov	word_FF9E, dx
		mov	word_FF9C, ax
		mov	al, 36h	; '6'
		out	77h, al
		mov	ax, word_EA24
		out	71h, al		; CMOS Memory:
					; used by real-time clock
		mov	al, ah
		out	71h, al		; CMOS Memory:
					; used by real-time clock
		mov	al, byte ptr word_EA22
		and	al, 0FEh
		out	2, al		; DMA controller, 8237A-5.
					; channel 1 base address
					; (also	sets current address)
		sti
		retf
; ---------------------------------------------------------------------------

loc_300E:
		mov	ax, 3080h
		mov	bx, 0
		call	loc_476
		retf
sub_2FD4	endp


; =============== S U B	R O U T	I N E =======================================


sub_3018	proc far
		cli
		test	word_E660, 10h
		jnz	short loc_3037
		push	8
		push	word_FF9E
		push	word_FF9C
		nop
		push	cs
		call	near ptr sub_826
		mov	al, byte ptr word_EA22
		out	2, al		; DMA controller, 8237A-5.
					; channel 1 base address
					; (also	sets current address)
		sti
		retf
; ---------------------------------------------------------------------------

loc_3037:
		mov	ax, 0
		mov	bx, 0
		call	loc_476
		retf
sub_3018	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_3042	proc far
		mov	bx, sp
		mov	dx, ss:[bx+4]
		mov	bx, word_EA3A
		dec	bx
		shl	bx, 1
		mov	ax, [bx+50Ch]
		mov	bx, dx
		add	ax, [bx+4]
		mov	[bx], ax
		mov	ax, [bx+6]
		mov	[bx+2],	ax
		mov	word ptr [bx+0Ah], 4
		mov	word ptr [bx+8], 48h ; 'H'
		mov	ax, 4
		mov	[bx+0Eh], ax
		mov	[bx+0Ch], ax
		mov	word ptr [bx+10h], 8
		mov	word ptr [bx+14h], 0
		retf	2
sub_3042	endp

; ---------------------------------------------------------------------------

loc_3080:
		push	ax
		push	ds
		mov	ax, seg	dseg
		mov	ds, ax
		test	word_E660, 10h
		jz	short loc_30A8
		mov	ax, word_E970
		add	ax, 4
		cmp	ax, word_EA24
		mov	word_E970, ax
		jbe	short loc_30EE
		mov	ax, word_EA24
		inc	ax
		sub	word_E970, ax
		jmp	short loc_30B2
; ---------------------------------------------------------------------------

loc_30A8:
		cld
		mov	ax, word_EA24
		out	71h, al		; CMOS Memory:
					; used by real-time clock
		mov	al, ah
		out	71h, al		; CMOS Memory:
					; used by real-time clock

loc_30B2:
		push	dx
		push	bx
		push	cx
		push	es
		inc	word_EA32
		cmp	word_EA32, 14h
		jnz	short loc_30F2
		xor	ax, ax
		mov	word_EA32, ax
		cmp	word_EA28, 1
		jnz	short loc_311C
		push	ax
		push	3
		push	ax
		nop
		push	cs
		call	near ptr sub_3198
		dec	ax
		jnz	short loc_311C
		cmp	word_EA30, 0
		jnz	short loc_311C
		mov	word_EA28, 0
		nop
		push	cs
		call	near ptr sub_2D12
		jmp	short loc_311C
; ---------------------------------------------------------------------------
		nop

loc_30EE:
		pop	ds
		pop	ax
		retn
; ---------------------------------------------------------------------------
		nop

loc_30F2:
		test	word_EA32, 3
		jnz	short loc_311C
		cmp	word_EA7E, 1
		jnz	short loc_311C
		nop
		push	cs
		call	near ptr sub_3310
		dec	ax
		jnz	short loc_311C
		mov	word_EA7E, 0
		cmp	word_EA28, 0
		jnz	short loc_311C
		nop
		push	cs
		call	near ptr sub_2D12
		nop

loc_311C:
		pop	es
		pop	cx
		pop	bx
		pop	dx
		test	word_E660, 10h
		jnz	short loc_30EE
		mov	al, 20h	; ' '
		out	0, al
		pop	ds
		pop	ax
		iret
; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_3130	proc near
		push	si
		mov	si, bx
		cmp	word ptr [si+3Ah], 1
		jz	short loc_3195
		mov	bx, [si+8]
		shl	bx, 1
		mov	bx, [bx+3C0h]
		cmp	word ptr [si+0Ah], 1
		jnz	short loc_314C
		shl	bx, 1
		jmp	short loc_3153
; ---------------------------------------------------------------------------

loc_314C:
		mov	cx, [si+0Ah]
		dec	cx
		dec	cx
		shr	bx, cl

loc_3153:
		test	word_E660, 10h
		jz	short loc_316C
		in	al, 61h		; PC/XT	PPI port B bits:
					; 0: Tmr 2 gate	ÍËÍ OR	03H=spkr ON
					; 1: Tmr 2 data	Í¼  AND	0fcH=spkr OFF
					; 3: 1=read high switches
					; 4: 0=enable RAM parity checking
					; 5: 0=enable I/O channel check
					; 6: 0=hold keyboard clock low
					; 7: 0=enable kbrd
		or	al, 3
		out	61h, al		; PC/XT	PPI port B bits:
					; 0: Tmr 2 gate	ÍËÍ OR	03H=spkr ON
					; 1: Tmr 2 data	Í¼  AND	0fcH=spkr OFF
					; 3: 1=read high switches
					; 4: 0=enable RAM parity checking
					; 5: 0=enable I/O channel check
					; 6: 0=hold keyboard clock low
					; 7: 0=enable kbrd
		mov	ax, bx
		mov	bx, 254h
		mov	cx, 42h	; 'B'
		jmp	short loc_3184
; ---------------------------------------------------------------------------
		nop

loc_316C:
		mov	al, 6
		out	37h, al
		mov	cx, 3FDBh
		xor	ax, ax
		mov	es, ax
		assume es:seg000
		test	es:byte_501, 80h
		jz	short loc_318D
		mov	ax, bx
		mov	bx, 3E6h

loc_3184:
		mul	bx
		mov	bx, 4CDh
		div	bx
		mov	bx, ax

loc_318D:
		mov	al, bl
		mov	dx, cx
		out	dx, al
		mov	al, bh
		out	dx, al

loc_3195:
		pop	si
		retn
sub_3130	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_3198	proc far

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

		enter	4, 0
		push	di
		push	si
		mov	ax, word_EA2C
		imul	bx, ax,	16h
		cmp	word ptr [bx+1A80h], 1
		jnz	short loc_31BE
		cmp	word ptr [bx+1A84h], 1
		jz	short loc_31BE
		cmp	word ptr [bx+1A7Ch], 20h ; ' '
		jz	short loc_31BE
		mov	si, 1
		jmp	short loc_31C0
; ---------------------------------------------------------------------------

loc_31BE:
		xor	si, si

loc_31C0:
		mov	cx, [bp+arg_4]
		sub	ax, cx
		jz	short loc_31D0
		dec	ax
		jz	short loc_3200
		dec	ax
		jz	short loc_322C
		jmp	short loc_3242
; ---------------------------------------------------------------------------
		nop

loc_31D0:
		imul	bx, cx,	16h
		cmp	byte ptr [bx+1A78h], 48h ; 'H'
		jz	short loc_31DE
		or	si, si
		jz	short loc_31FA

loc_31DE:
		cmp	byte ptr [bx+1A8Eh], 48h ; 'H'
		jz	short loc_31EC
		cmp	word ptr [bx+1A96h], 1
		jg	short loc_3226

loc_31EC:
		cmp	byte ptr [bx+1AA4h], 48h ; 'H'
		jz	short loc_31FA
		cmp	word ptr [bx+1AACh], 1
		jg	short loc_323A

loc_31FA:
		add	bx, 1A70h
		jmp	short loc_323E
; ---------------------------------------------------------------------------

loc_3200:
		imul	bx, cx,	16h
		cmp	byte ptr [bx+1A8Eh], 48h ; 'H'
		jz	short loc_320E
		or	si, si
		jz	short loc_3226

loc_320E:
		cmp	byte ptr [bx+1A78h], 48h ; 'H'
		jnz	short loc_3242
		cmp	byte ptr [bx+1AA4h], 48h ; 'H'
		jz	short loc_3242
		cmp	word ptr [bx+1AACh], 1
		jle	short loc_3242
		jmp	short loc_323A
; ---------------------------------------------------------------------------
		nop

loc_3226:
		add	bx, 1A86h
		jmp	short loc_323E
; ---------------------------------------------------------------------------

loc_322C:
		imul	bx, cx,	16h
		cmp	byte ptr [bx+1AA4h], 48h ; 'H'
		jz	short loc_3242
		or	si, si
		jnz	short loc_3242

loc_323A:
		add	bx, 1A9Ch

loc_323E:
		call	sub_3130
		nop

loc_3242:
		imul	bx, word_EA2C, 16h
		dec	word ptr [bx+1A80h]
		jnz	short loc_3266
		add	bx, 1A70h
		push	bx
		nop
		push	cs
		call	near ptr sub_2D6A
		or	ax, ax
		jnz	short loc_3266
		mov	cl, byte ptr word_EA2C
		inc	ax
		shl	ax, cl
		or	word_EA2E, ax

loc_3266:
		mov	ax, [bp+arg_2]
		inc	word_EA2C
		cmp	word_EA2C, ax
		jnz	short loc_32BE
		mov	ax, [bp+arg_0]
		mov	word_EA2C, ax
		cmp	word_EA2E, 7
		jnz	short loc_32BE
		xor	di, di
		mov	word_EA2E, di
		mov	si, 1A70h
		nop

loc_328A:
		push	si
		nop
		push	cs
		call	near ptr sub_3042
		mov	cx, di
		mov	ax, 1
		shl	ax, cl
		and	ax, word_EA5C
		cmp	ax, 1
		sbb	ax, ax
		inc	ax
		mov	[si+12h], ax
		push	si
		nop
		push	cs
		call	near ptr sub_2D6A
		inc	di
		add	si, 16h
		cmp	si, 1AB2h
		jb	short loc_328A
		mov	ax, 1
		pop	si
		pop	di
		leave
		retf	6
; ---------------------------------------------------------------------------
		nop

loc_32BE:
		xor	ax, ax
		pop	si
		pop	di
		leave
		retf	6
sub_3198	endp


; =============== S U B	R O U T	I N E =======================================


sub_32C6	proc far
		mov	bx, sp
		push	si
		mov	si, ss:[bx+4]
		cmp	si, 1
		jl	short loc_32D8
		cmp	si, word_EA80
		jle	short loc_32DF

loc_32D8:
		mov	ax, 0FFF3h
		pop	si
		retf	2
; ---------------------------------------------------------------------------

loc_32DF:
		cmp	word_EA86, 1
		jnz	short loc_3309
		nop
		push	cs
		call	near ptr sub_2D12
		mov	word_EA82, si
		mov	bx, si
		shl	bx, 3
		mov	ax, 1AAAh
		add	bx, ax
		mov	ax, [bx+6]
		mov	[bx+2],	ax
		mov	word ptr [bx], 0
		mov	word_EA7E, 1

loc_3309:
		xor	ax, ax
		pop	si
		retf	2
sub_32C6	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_3310	proc far
		mov	ax, word_EA82
		dec	ax
		shl	ax, 3
		mov	bx, ax
		les	bx, [bx+1AB2h]
		assume es:nothing
		mov	cx, es:[bx]
		mov	bx, ax
		jcxz	short loc_3376
		add	word ptr [bx+1AB2h], 2
		test	word_E660, 10h
		jz	short loc_3342
		in	al, 61h		; PC/XT	PPI port B bits:
					; 0: Tmr 2 gate	ÍËÍ OR	03H=spkr ON
					; 1: Tmr 2 data	Í¼  AND	0fcH=spkr OFF
					; 3: 1=read high switches
					; 4: 0=enable RAM parity checking
					; 5: 0=enable I/O channel check
					; 6: 0=hold keyboard clock low
					; 7: 0=enable kbrd
		or	al, 3
		out	61h, al		; PC/XT	PPI port B bits:
					; 0: Tmr 2 gate	ÍËÍ OR	03H=spkr ON
					; 1: Tmr 2 data	Í¼  AND	0fcH=spkr OFF
					; 3: 1=read high switches
					; 4: 0=enable RAM parity checking
					; 5: 0=enable I/O channel check
					; 6: 0=hold keyboard clock low
					; 7: 0=enable kbrd
		mov	dx, 12h
		mov	ax, 34DCh
		mov	bx, 42h	; 'B'
		jmp	short loc_3361
; ---------------------------------------------------------------------------

loc_3342:
		mov	al, 6
		out	37h, al
		mov	bx, 3FDBh
		xor	dx, dx
		mov	es, dx
		assume es:seg000
		test	es:byte_501, 80h
		mov	dx, 1Eh
		mov	ax, 7800h
		jnz	short loc_3361
		mov	dx, 25h	; '%'
		mov	ax, 8000h

loc_3361:
		cmp	cx, dx
		ja	short loc_336A
		mov	ax, 0FFFFh
		jmp	short loc_336C
; ---------------------------------------------------------------------------

loc_336A:
		div	cx

loc_336C:
		mov	dx, bx
		out	dx, al
		mov	al, ah
		out	dx, al
		xor	ax, ax
		retf
; ---------------------------------------------------------------------------
		nop

loc_3376:
		mov	ax, [bx+1AB8h]
		mov	[bx+1AB4h], ax
		mov	word ptr [bx+1AB2h], 0
		mov	ax, 1
		retf
sub_3310	endp


; =============== S U B	R O U T	I N E =======================================


sub_3388	proc far
		cmp	word_EA28, 1
		jnz	short loc_339E
		mov	word_EA28, 0
		nop
		push	cs
		call	near ptr sub_2D12
		xor	ax, ax
		retf
; ---------------------------------------------------------------------------
		nop

loc_339E:
		mov	ax, 0FFE1h
		retf
sub_3388	endp


; =============== S U B	R O U T	I N E =======================================


sub_33A2	proc far
					; sub_33D0+12Dp
		mov	bx, sp
		mov	cx, ss:[bx+4]
		cmp	cx, 1Eh
		jl	short loc_33CA
		cmp	cx, 0F0h ; 'ð'
		jg	short loc_33CA
		cli
		mov	word_EA26, cx
		mov	ax, word_EA8A
		mov	dx, word_EA8C
		div	cx
		mov	word_EA24, ax
		sti
		xor	ax, ax
		retf	2
; ---------------------------------------------------------------------------

loc_33CA:
		mov	ax, 0FFF3h
		retf	2
sub_33A2	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_33D0	proc far

var_2		= word ptr -2
arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		sub	sp, 2
		push	si
		push	di
		nop
		push	cs
		call	near ptr sub_ED2
		cmp	word_EA88, 0
		jz	short loc_33EC
		xor	ax, ax
		pop	di
		pop	si
		leave
		retf	2
; ---------------------------------------------------------------------------

loc_33EC:
		mov	dx, [bp+arg_0]
		mov	[bp+var_2], dx
		or	dx, dx
		jg	short loc_33FB
		mov	[bp+var_2], 1000h

loc_33FB:
		mov	ax, [bp+var_2]
		mov	word_EA34, ax
		mov	di, 1A70h

loc_3404:
		mov	word_E940, 8
		push	[bp+var_2]
		nop
		push	cs
		call	near ptr sub_2350
		mov	[di+6],	ax
		mov	word ptr [di+4], 0
		jnb	short loc_3426
		mov	ax, 0FFF8h
		pop	di
		pop	si
		leave
		retf	2
; ---------------------------------------------------------------------------
		nop

loc_3426:
		add	di, 16h
		cmp	di, 1AB2h
		jnz	short loc_3404
		mov	di, 1AB2h

loc_3432:
		mov	word_E940, 9
		push	201h
		nop
		push	cs
		call	near ptr sub_2350
		mov	[di+6],	ax
		mov	word ptr [di+4], 0
		jnb	short loc_3460
		push	word ptr [di+6]
		mov	word ptr [di+6], 0
		nop
		push	cs
		call	near ptr sub_2454
		mov	ax, 0FFF8h
		pop	di
		pop	si
		leave
		retf	2
; ---------------------------------------------------------------------------

loc_3460:
		add	di, 8
		cmp	di, 1B32h
		jnz	short loc_3432
		mov	word_EA28, 0
		mov	word_EA38, 0
		mov	word_EA3A, 0
		mov	word_EA2A, 3
		mov	word_EA2C, 0
		mov	word_EA2E, 0
		mov	word_EA30, 1
		mov	word_EA32, 0
		mov	word_EA36, 0
		cld
		mov	cx, 10h
		mov	di, 52Eh
		push	ds
		pop	es
		assume es:dseg
		mov	ax, 78h	; 'x'
		rep stosw
		mov	word_EA7E, 0
		mov	word_EA80, 0
		mov	word_EA82, 0
		mov	word_EA84, 1
		mov	word_EA86, 1
		test	word_E660, 10h
		jz	short loc_34D8
		mov	ax, 10h
		jmp	short loc_34EA
; ---------------------------------------------------------------------------

loc_34D8:
		xor	ax, ax
		mov	es, ax
		assume es:seg000
		test	es:byte_501, 80h
		mov	ax, 7CDh
		jnz	short loc_34EA
		mov	ax, 99Ah

loc_34EA:
					; sub_33D0+115j
		and	ax, 0FFFEh
		mov	dx, 78h	; 'x'
		mul	dx
		mov	word_EA8C, dx
		mov	word_EA8A, ax
		push	78h ; 'x'
		nop
		push	cs
		call	near ptr sub_33A2
		mov	bx, 1A74h
		xor	dx, dx
		xor	ax, ax

loc_3507:
		les	di, [bx]
		assume es:nothing
		mov	cx, word_EA34
		shr	cx, 1
		rep stosw
		adc	cx, cx
		rep stosb
		add	bx, 16h
		inc	dx
		cmp	dx, 3
		jl	short loc_3507
		nop
		push	cs
		call	near ptr sub_2FD4
		test	word_E660, 10h
		jz	short loc_353E
		mov	ax, 254h
		mov	cx, ax
		mov	al, 0B6h ; '¶'
		out	43h, al		; Timer	8253-5 (AT: 8254.2).
		mov	al, cl
		out	42h, al		; Timer	8253-5 (AT: 8254.2).
		mov	al, ch
		out	42h, al		; Timer	8253-5 (AT: 8254.2).
		jmp	short loc_3565
; ---------------------------------------------------------------------------

loc_353E:
		xor	ax, ax
		mov	es, ax
		assume es:seg000
		test	es:byte_501, 80h
		mov	ax, 3E6h
		jnz	short loc_3550
		mov	ax, 4CDh

loc_3550:
		mov	cx, ax
		mov	al, 3
		shl	al, 1
		or	al, 70h
		mov	dx, 3FDFh
		out	dx, al
		mov	al, cl
		mov	dx, 3FDBh
		out	dx, al
		mov	al, ch
		out	dx, al

loc_3565:
		mov	word_EA88, 1
		xor	ax, ax
		pop	di
		pop	si
		leave
		retf	2
sub_33D0	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_3574	proc far
		push	si
		cmp	word_EA88, 0
		jz	short loc_3591
		nop
		push	cs
		call	near ptr sub_3388
		nop
		push	cs
		call	near ptr sub_35D2
		nop
		push	cs
		call	near ptr sub_3018
		mov	word_EA88, 0

loc_3591:
		mov	si, 1A70h

loc_3594:
		mov	ax, [si+6]
		cmp	ax, 0
		jz	short loc_35A7
		push	ax
		nop
		push	cs
		call	near ptr sub_2454
		mov	word ptr [si+6], 0

loc_35A7:
		add	si, 16h
		cmp	si, 1AB2h
		jnz	short loc_3594
		mov	si, 1AB2h

loc_35B3:
		mov	ax, [si+6]
		cmp	ax, 0
		jz	short loc_35C6
		push	ax
		nop
		push	cs
		call	near ptr sub_2454
		mov	word ptr [si+6], 0

loc_35C6:
		add	si, 8
		cmp	si, 1B32h
		jnz	short loc_35B3
		pop	si
		retf
sub_3574	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_35D2	proc far
		cmp	word_EA7E, 1
		jnz	short loc_35E8
		mov	word_EA7E, 0
		nop
		push	cs
		call	near ptr sub_2D12
		xor	ax, ax
		retf
; ---------------------------------------------------------------------------
		nop

loc_35E8:
		mov	ax, 0FFE1h
		retf
sub_35D2	endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_35F2

loc_35EC:
		pop	di
		pop	si
		pop	bp
		retf	0Ah
; END OF FUNCTION CHUNK	FOR sub_35F2

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_35F2	proc far

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch
arg_8		= word ptr  0Eh

; FUNCTION CHUNK AT 35EC SIZE 00000006 BYTES

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, [bp+arg_6]
		mov	cx, [bp+arg_0]
		sar	cx, 3
		jle	short loc_35EC
		mov	si, [bp+arg_2]
		mov	di, [bp+arg_8]
		sar	di, 3
		jns	short loc_3618
		add	cx, di
		jle	short loc_35EC
		shl	di, 2
		add	si, di
		xor	di, di

loc_3618:
		cmp	di, 50h	; 'P'
		jge	short loc_35EC
		add	cx, di
		cmp	cx, 50h	; 'P'
		jl	short loc_3627
		mov	cx, 50h	; 'P'

loc_3627:
		sub	cx, di
		imul	ax, 50h
		add	di, ax
		push	ds
		mov	es, word_E618
		assume es:nothing
		mov	ds, [bp+arg_4]
		mov	bp, cx
		cld
		nop

loc_363A:
		mov	cl, 2
		mov	bl, [si]
		mov	bh, 0
		shl	bx, cl
		mov	ax, cs:[bx+1C84h]
		mov	dx, cs:[bx+1C86h]
		inc	si
		shl	ax, cl
		shl	dx, cl
		mov	bl, [si]
		mov	bh, 0
		shl	bx, cl
		or	ax, cs:[bx+1C84h]
		or	dx, cs:[bx+1C86h]
		inc	si
		shl	ax, cl
		shl	dx, cl
		mov	bl, [si]
		mov	bh, 0
		shl	bx, cl
		or	ax, cs:[bx+1C84h]
		or	dx, cs:[bx+1C86h]
		inc	si
		shl	ax, cl
		shl	dx, cl
		mov	bl, [si]
		mov	bh, 0
		shl	bx, cl
		or	ax, cs:[bx+1C84h]
		or	dx, cs:[bx+1C86h]
		inc	si
		mov	es:[di], al
		mov	bx, es
		mov	es:[di-8000h], ah
		add	bh, 10h
		mov	es, bx
		assume es:nothing
		mov	es:[di], dl
		add	bh, 28h	; '('
		mov	es, bx
		assume es:nothing
		mov	es:[di], dh
		sub	bh, 38h	; '8'
		mov	es, bx
		assume es:nothing
		inc	di
		dec	bp
		jnz	short loc_363A
		pop	ds
		pop	di
		pop	si
		pop	bp
		retf	0Ah
sub_35F2	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_36B6	proc far

arg_0		= word ptr  6
arg_2		= dword	ptr  8
arg_6		= word ptr  0Ch
arg_8		= word ptr  0Eh
arg_A		= word ptr  10h

		push	bp
		mov	bp, sp
		push	si
		push	di
		push	ds
		mov	es, word_E64C
		assume es:nothing
		mov	cx, [bp+arg_A]
		mov	di, [bp+arg_8]
		mov	bx, [bp+arg_6]
		lds	si, [bp+arg_2]
		mov	dx, [bp+arg_0]
		mov	bp, bx
		mov	ax, di
		shl	ax, 2
		add	di, ax
		shl	di, 4
		mov	al, 0C0h ; 'À'
		pushf
		cli
		out	7Ch, al
		popf
		shr	dx, 1
		sbb	al, al
		out	7Eh, al
		shr	dx, 1
		sbb	al, al
		out	7Eh, al
		shr	dx, 1
		sbb	al, al
		out	7Eh, al
		shr	dx, 1
		sbb	al, al
		out	7Eh, al
		mov	al, 0Bh
		out	68h, al

loc_36FE:
		lodsb
		or	al, al
		jz	short loc_3750
		mov	ah, 0
		add	ax, 5680h
		and	ax, 0FF7Fh
		mov	bx, cx
		and	cx, 7
		shr	bx, 3
		add	di, bx
		out	0A1h, al	; Interrupt Controller #2, 8259A
		mov	al, ah
		out	0A3h, al	; Interrupt Controller #2, 8259A
		mov	dx, 10h
		xor	ch, ch

loc_3720:
		mov	al, ch
		or	al, 20h
		out	0A5h, al	; Interrupt Controller #2, 8259A
		in	al, 0A9h	; Interrupt Controller #2, 8259A
		mov	ah, al
		mov	al, ch
		out	0A5h, al	; Interrupt Controller #2, 8259A
		in	al, 0A9h	; Interrupt Controller #2, 8259A
		mov	bh, al
		mov	bl, 0
		shr	ax, cl
		shr	bx, cl
		xchg	al, ah
		stosw
		mov	es:[di], bl
		add	di, 4Eh	; 'N'
		inc	ch
		dec	dx
		jnz	short loc_3720
		sub	di, 500h
		xor	ch, ch
		add	cx, bp
		jmp	short loc_36FE
; ---------------------------------------------------------------------------

loc_3750:
		mov	al, 0Ah
		out	68h, al
		xor	al, al
		out	7Ch, al
		pop	ds
		pop	di
		pop	si
		pop	bp
		retf	0Ch
sub_36B6	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_3760	proc far
					; sub_C5EC+5AP	...

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

		push	bp
		mov	bp, sp
		push	di
		mov	cx, [bp+arg_6]
		mov	di, [bp+arg_4]
		mov	dx, [bp+arg_0]
		mov	bp, [bp+arg_2]
		add	bp, 5680h
		and	bp, 0FF7Fh
		pushf
		mov	al, 0C0h ; 'À'
		cli
		out	7Ch, al
		popf
		shr	dx, 1
		sbb	al, al
		out	7Eh, al
		shr	dx, 1
		sbb	al, al
		out	7Eh, al
		shr	dx, 1
		sbb	al, al
		out	7Eh, al
		shr	dx, 1
		sbb	al, al
		out	7Eh, al
		mov	al, 0Bh
		out	68h, al
		mov	ax, di
		shl	ax, 2
		add	di, ax
		shl	di, 4
		mov	ax, cx
		and	cx, 7
		shr	ax, 3
		add	di, ax
		mov	es, word_E64C
		mov	ax, bp
		out	0A1h, al	; Interrupt Controller #2, 8259A
		mov	al, ah
		out	0A3h, al	; Interrupt Controller #2, 8259A
		mov	dx, 10h
		xor	ch, ch

loc_37C0:
		mov	al, ch
		or	al, 20h
		out	0A5h, al	; Interrupt Controller #2, 8259A
		in	al, 0A9h	; Interrupt Controller #2, 8259A
		mov	ah, al
		mov	al, ch
		out	0A5h, al	; Interrupt Controller #2, 8259A
		in	al, 0A9h	; Interrupt Controller #2, 8259A
		mov	bh, al
		mov	bl, 0
		shr	ax, cl
		shr	bx, cl
		xchg	al, ah
		stosw
		mov	es:[di], bl
		add	di, 4Eh	; 'N'
		inc	ch
		dec	dx
		jnz	short loc_37C0
		mov	al, 0Ah
		out	68h, al
		xor	al, al
		out	7Ch, al
		pop	di
		pop	bp
		retf	8
sub_3760	endp

; ---------------------------------------------------------------------------
		nop

include libs/BorlandC/__abort.asm

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; char *__cdecl	stpcpy(char *dest, const char *src)
_stpcpy		proc far
					; __DOSENV+140p ...

var_2		= word ptr -2
dest		= dword	ptr  6
s		= dword	ptr  0Ah

		push	bp
		mov	bp, sp
		sub	sp, 2
		push	si
		push	di
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]	; s
		nop
		push	cs
		call	near ptr _strlen
		pop	cx
		pop	cx
		mov	[bp+var_2], ax
		inc	ax
		push	ax		; n
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]	; src
		push	word ptr [bp+dest+2]
		push	word ptr [bp+dest] ; dest
		nop
		push	cs
		call	near ptr _memcpy
		add	sp, 0Ah
		mov	dx, word ptr [bp+dest+2]
		mov	ax, word ptr [bp+dest]
		add	ax, [bp+var_2]
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
_stpcpy		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function noreturn

; void abort(void)
_abort		proc far
					; ___call_terminate+6Ep ...
		push	si
		push	di
		mov	ax, 16h
		push	ax
		nop
		push	cs
		call	near ptr sub_4CE0
		pop	cx
		nop
		push	cs
		call	near ptr __abort
_abort		endp

; ---------------------------------------------------------------------------
		pop	di
		pop	si
		retf

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl atexit(void (*func)(void))
_atexit		proc far

func		= dword	ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		cmp	word_EE5A, 20h ; ' '
		jnz	short loc_3871
		mov	ax, 1
		jmp	short loc_388D
; ---------------------------------------------------------------------------

loc_3871:
		mov	bx, word_EE5A
		mov	cl, 2
		shl	bx, cl
		mov	dx, word ptr [bp+func+2]
		mov	ax, word ptr [bp+func]
		mov	[bx+408Ch], dx
		mov	[bx+408Ah], ax
		inc	word_EE5A
		xor	ax, ax

loc_388D:
		pop	di
		pop	si
		pop	bp
		retf
_atexit		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl registerbgidriver(void (*driver)(void))
_registerbgidriver proc	far
					; seg000:3FC4p	...

driver		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		push	si
		push	di
		push	[bp+arg_2]
		push	[bp+driver]
		nop
		push	cs
		call	near ptr _farfree
		pop	cx
		pop	cx
		pop	di
		pop	si
		pop	bp
		retf
_registerbgidriver endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl registerbgifont(void (*font)(void))
_registerbgifont proc far

driver		= dword	ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		push	word ptr [bp+driver+2]
		push	word ptr [bp+driver] ; driver
		nop
		push	cs
		call	near ptr _registerbgidriver
		pop	cx
		pop	cx
		pop	di
		pop	si
		pop	bp
		retf
_registerbgifont endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __stdcall	_DOSENV(__int32, char *s, int, int)
__DOSENV	proc near

dest		= dword	ptr -0Ah
var_6		= word ptr -6
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
s		= dword	ptr  8
arg_8		= word ptr  0Ch
arg_A		= word ptr  0Eh

		push	bp
		mov	bp, sp
		sub	sp, 0Ah
		push	si
		push	di
		mov	[bp+var_6], 1
		mov	dx, [bp+arg_A]
		mov	ax, [bp+arg_8]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		or	ax, dx
		jz	short loc_390F
		mov	[bp+var_6], 0
		jmp	short loc_38FA
; ---------------------------------------------------------------------------

loc_38E1:
		les	bx, [bp+var_4]
		add	word ptr [bp+var_4], 4
		push	word ptr es:[bx+2]
		push	word ptr es:[bx] ; s
		nop
		push	cs
		call	near ptr _strlen
		pop	cx
		pop	cx
		inc	ax
		add	[bp+var_6], ax

loc_38FA:
		les	bx, [bp+var_4]
		mov	ax, es:[bx]
		or	ax, es:[bx+2]
		jz	short loc_390F
		les	bx, es:[bx]
		cmp	byte ptr es:[bx], 0
		jnz	short loc_38E1

loc_390F:
		inc	[bp+var_6]
		mov	ax, word ptr [bp+s]
		or	ax, word ptr [bp+s+2]
		jz	short loc_392D
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]	; s
		nop
		push	cs
		call	near ptr _strlen
		pop	cx
		pop	cx
		add	ax, 3
		add	[bp+var_6], ax

loc_392D:
		cmp	[bp+var_6], 8000h
		jb	short loc_3937
		jmp	loc_3A1E
; ---------------------------------------------------------------------------

loc_3937:
		mov	ax, [bp+var_6]
		add	ax, 0Fh
		push	ax
		nop
		push	cs
		call	near ptr _malloc
		pop	cx
		mov	word ptr [bp+dest+2], dx
		mov	word ptr [bp+dest], ax
		or	ax, dx
		jnz	short loc_3951
		jmp	loc_3A1E
; ---------------------------------------------------------------------------

loc_3951:
		les	bx, [bp+arg_0]
		mov	ax, word ptr [bp+dest]
		mov	es:[bx+2], dx
		mov	es:[bx], ax
		add	word ptr [bp+dest], 0Fh
		and	word ptr [bp+dest], 0FFF0h
		mov	dx, [bp+arg_A]
		mov	ax, [bp+arg_8]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		or	ax, dx
		jz	short loc_39C7
		les	bx, [bp+var_4]
		mov	ax, es:[bx]
		or	ax, es:[bx+2]
		jz	short loc_39C7
		jmp	short loc_39B0
; ---------------------------------------------------------------------------

loc_3984:
		les	bx, [bp+var_4]
		add	word ptr [bp+var_4], 4
		push	word ptr es:[bx+2]
		push	word ptr es:[bx] ; src
		push	word ptr [bp+dest+2]
		push	word ptr [bp+dest] ; dest
		nop
		push	cs
		call	near ptr _stpcpy
		add	sp, 8
		mov	word ptr [bp+dest+2], dx
		mov	word ptr [bp+dest], ax
		les	bx, [bp+dest]
		mov	byte ptr es:[bx], 0
		inc	word ptr [bp+dest]

loc_39B0:
		les	bx, [bp+var_4]
		mov	ax, es:[bx]
		or	ax, es:[bx+2]
		jz	short loc_39D1
		les	bx, es:[bx]
		cmp	byte ptr es:[bx], 0
		jnz	short loc_3984
		jmp	short loc_39D1
; ---------------------------------------------------------------------------

loc_39C7:
		les	bx, [bp+dest]
		mov	byte ptr es:[bx], 0
		inc	word ptr [bp+dest]

loc_39D1:
					; __DOSENV+108j
		les	bx, [bp+dest]
		mov	byte ptr es:[bx], 0
		inc	word ptr [bp+dest]
		mov	ax, word ptr [bp+s]
		or	ax, word ptr [bp+s+2]
		jz	short loc_3A13
		les	bx, [bp+dest]
		mov	word ptr es:[bx], 1
		add	word ptr [bp+dest], 2
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]	; src
		push	word ptr [bp+dest+2]
		push	word ptr [bp+dest] ; dest
		nop
		push	cs
		call	near ptr _stpcpy
		add	sp, 8
		mov	word ptr [bp+dest+2], dx
		mov	word ptr [bp+dest], ax
		les	bx, [bp+dest]
		mov	byte ptr es:[bx], 0
		inc	word ptr [bp+dest]

loc_3A13:
		mov	dx, word ptr [bp+dest+2]
		mov	ax, word ptr [bp+dest]
		sub	ax, [bp+var_6]
		jmp	short loc_3A22
; ---------------------------------------------------------------------------

loc_3A1E:
		xor	dx, dx
		xor	ax, ax

loc_3A22:
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn	0Ch
__DOSENV	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; void __cdecl _dos_getdrive(unsigned int *drive)
__dos_getdrive	proc far

drive		= dword	ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ah, 19h
		int	21h		; DOS -	GET DEFAULT DISK NUMBER
		mov	ah, 0
		inc	ax
		les	bx, [bp+drive]
		mov	es:[bx], ax
		pop	di
		pop	si
		pop	bp
		retf
__dos_getdrive	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; void __cdecl _dos_setdrive(unsigned int drive, unsigned int *ndrives)
__dos_setdrive	proc far

drive		= word ptr  6
ndrives		= dword	ptr  8

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	dl, byte ptr [bp+drive]
		dec	dl
		mov	ah, 0Eh
		int	21h		; DOS -	SELECT DISK
					; DL = new default drive number	(0 = A,	1 = B, etc.)
					; Return: AL = number of logical drives
		mov	ah, 0
		les	bx, [bp+ndrives]
		mov	es:[bx], ax
		pop	di
		pop	si
		pop	bp
		retf
__dos_setdrive	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl __far __ErrorMessage(char	*buf)
___ErrorMessage	proc far

buf		= dword	ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		push	word ptr [bp+buf+2]
		push	word ptr [bp+buf] ; s
		nop
		push	cs
		call	near ptr _strlen
		pop	cx
		pop	cx
		push	ax		; len
		push	word ptr [bp+buf+2]
		push	word ptr [bp+buf] ; buf
		mov	al, byte_EE94
		cbw
		push	ax		; handle
		nop
		push	cs
		call	near ptr __rtl_write
		add	sp, 8
		pop	di
		pop	si
		pop	bp
		retf
___ErrorMessage	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

sub_3A84	proc far
		push	si
		push	di
		pop	di
		pop	si
		retf
sub_3A84	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_3A89	proc near

arg_0		= word ptr  4
arg_2		= word ptr  6
arg_4		= word ptr  8

		push	bp
		mov	bp, sp
		push	si
		push	di
		cmp	[bp+arg_4], 0
		jnz	short loc_3AB6
		jmp	short loc_3AA6
; ---------------------------------------------------------------------------

loc_3A96:
		dec	word_EE5A
		mov	bx, word_EE5A
		mov	cl, 2
		shl	bx, cl
		call	dword ptr [bx+408Ah]

loc_3AA6:
		cmp	word_EE5A, 0
		jnz	short loc_3A96
		nop
		push	cs
		call	__cleanup
		call	off_EE5C

loc_3AB6:
		nop
		push	cs
		call	near ptr __restorezero
		nop
		push	cs
		call	near ptr __checknull
		cmp	[bp+arg_2], 0
		jnz	short loc_3ADD
		cmp	[bp+arg_4], 0
		jnz	short loc_3AD4
		call	off_EE60
		call	off_EE64

loc_3AD4:
		push	[bp+arg_0]
		nop
		push	cs
		call	__terminate
; ---------------------------------------------------------------------------
		pop	cx

loc_3ADD:
		pop	di
		pop	si
		pop	bp
		retn	6
sub_3A89	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function noreturn	bp-based frame

; void __cdecl exit(int	status)
_exit		proc far

status		= word ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		xor	ax, ax
		push	ax
		push	ax
		push	[bp+status]
		call	sub_3A89
		pop	di
		pop	si
		pop	bp
		retf
_exit		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function noreturn	bp-based frame

; void __cdecl _exit(int status)
__exit		proc far

status		= word ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, 1
		push	ax
		xor	ax, ax
		push	ax
		push	[bp+status]
		call	sub_3A89
		pop	di
		pop	si
		pop	bp
		retf
__exit		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

; void _cexit(void)
__cexit		proc far
		push	si
		push	di
		xor	ax, ax
		push	ax
		mov	ax, 1
		push	ax
		xor	ax, ax
		push	ax
		call	sub_3A89
		pop	di
		pop	si
		retf
__cexit		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

; void _c_exit(void)
__c_exit	proc far
		push	si
		push	di
		mov	ax, 1
		push	ax
		push	ax
		xor	ax, ax
		push	ax
		call	sub_3A89
		pop	di
		pop	si
		retf
__c_exit	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; void (__cdecl	__interrupt far	*__cdecl getvect(int interruptno))()
_getvect	proc far

interruptno	= byte ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ah, 35h	; '5'
		mov	al, [bp+interruptno]
		int	21h		; DOS -	2+ - GET INTERRUPT VECTOR
					; AL = interrupt number
					; Return: ES:BX	= value	of interrupt vector
		xchg	ax, bx
		mov	dx, es
		pop	di
		pop	si
		pop	bp
		retf
_getvect	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; void __cdecl setvect(int interruptno,	void (__interrupt far *isr)())
_setvect	proc far

interruptno	= byte ptr  6
isr		= dword	ptr  8

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ah, 25h	; '%'
		mov	al, [bp+interruptno]
		push	ds
		lds	dx, [bp+isr]
		int	21h		; DOS -	SET INTERRUPT VECTOR
					; AL = interrupt number
					; DS:DX	= new vector to	be used	for specified interrupt
		pop	ds
		pop	di
		pop	si
		pop	bp
		retf
_setvect	endp

; ---------------------------------------------------------------------------

N_LDIV@:
		pop	cx
		push	cs
		push	cx

LDIV@:
		xor	cx, cx
		jmp	short loc_3B73

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

N_LUDIV@	proc far
		pop	cx
		push	cs
		push	cx

F_LUDIV@:
		mov	cx, 1
		jmp	short loc_3B73
; ---------------------------------------------------------------------------

N_LMOD@:
		pop	cx
		push	cs
		push	cx

F_LMOD@:
		mov	cx, 2
		jmp	short loc_3B73
; ---------------------------------------------------------------------------

N_LUMOD@:
		pop	cx
		push	cs
		push	cx

LUMOD@:
		mov	cx, 3

loc_3B73:
		push	bp
		push	si
		push	di
		mov	bp, sp
		mov	di, cx
		mov	ax, [bp+0Ah]
		mov	dx, [bp+0Ch]
		mov	bx, [bp+0Eh]
		mov	cx, [bp+10h]
		or	cx, cx
		jnz	short loc_3B92
		or	dx, dx
		jz	short loc_3BF7
		or	bx, bx
		jz	short loc_3BF7

loc_3B92:
		test	di, 1
		jnz	short loc_3BB4
		or	dx, dx
		jns	short loc_3BA6
		neg	dx
		neg	ax
		sbb	dx, 0
		or	di, 0Ch

loc_3BA6:
		or	cx, cx
		jns	short loc_3BB4
		neg	cx
		neg	bx
		sbb	cx, 0
		xor	di, 4

loc_3BB4:
		mov	bp, cx
		mov	cx, 20h	; ' '
		push	di
		xor	di, di
		xor	si, si

loc_3BBE:
		shl	ax, 1
		rcl	dx, 1
		rcl	si, 1
		rcl	di, 1
		cmp	di, bp
		jb	short loc_3BD5
		ja	short loc_3BD0
		cmp	si, bx
		jb	short loc_3BD5

loc_3BD0:
		sub	si, bx
		sbb	di, bp
		inc	ax

loc_3BD5:
		loop	loc_3BBE
		pop	bx
		test	bx, 2
		jz	short loc_3BE4
		mov	ax, si
		mov	dx, di
		shr	bx, 1

loc_3BE4:
		test	bx, 4
		jz	short loc_3BF1
		neg	dx
		neg	ax
		sbb	dx, 0

loc_3BF1:
		pop	di
		pop	si
		pop	bp
		retf	8
; ---------------------------------------------------------------------------

loc_3BF7:
		div	bx
		test	di, 2
		jz	short loc_3C00
		xchg	ax, dx

loc_3C00:
		xor	dx, dx
		jmp	short loc_3BF1
N_LUDIV@	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

N_LXLSH@	proc far
		pop	bx
		push	cs
		push	bx

LXLSH@:
		cmp	cl, 10h
		jnb	short loc_3C1C
		mov	bx, ax
		shl	ax, cl
		shl	dx, cl
		neg	cl
		add	cl, 10h
		shr	bx, cl
		or	dx, bx
		retf
; ---------------------------------------------------------------------------

loc_3C1C:
		sub	cl, 10h
		xchg	ax, dx
		xor	ax, ax
		shl	dx, cl
		retf
N_LXLSH@	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

N_PADD@		proc far
		pop	es
		push	cs
		push	es

F_PADD@:
		or	cx, cx
		jge	short loc_3C38
		not	bx
		not	cx
		add	bx, 1
		adc	cx, 0
		jmp	short loc_3C67
; ---------------------------------------------------------------------------

loc_3C38:
		add	ax, bx
		jnb	short loc_3C40
		add	dx, 1000h

loc_3C40:
		mov	ch, cl
		mov	cl, 4
		shl	ch, cl
		add	dh, ch
		mov	ch, al
		shr	ax, cl
		add	dx, ax
		mov	al, ch
		and	ax, 0Fh
		retf
; ---------------------------------------------------------------------------

N_PSUB@:
		pop	es
		push	cs
		push	es

F_PSUB@:
		or	cx, cx
		jge	short loc_3C67
		not	bx
		not	cx
		add	bx, 1
		adc	cx, 0
		jmp	short loc_3C38
; ---------------------------------------------------------------------------

loc_3C67:
		sub	ax, bx
		jnb	short loc_3C6F
		sub	dx, 1000h

loc_3C6F:
		mov	bh, cl
		mov	cl, 4
		shl	bh, cl
		xor	bl, bl
		sub	dx, bx
		mov	ch, al
		shr	ax, cl
		add	dx, ax
		mov	al, ch
		and	ax, 0Fh
		retf
N_PADD@		endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__IOERROR	proc near

arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	dx, [bp+arg_0]
		or	dx, dx
		jl	short loc_3CA8
		cmp	dx, 58h	; 'X'
		jle	short loc_3C99

loc_3C96:
		mov	dx, 57h	; 'W'

loc_3C99:
		mov	word_F022, dx
		mov	bx, dx
		mov	al, [bx+0AF4h]
		cbw
		mov	dx, ax
		jmp	short loc_3CB6
; ---------------------------------------------------------------------------

loc_3CA8:
		neg	dx
		cmp	dx, word_F304
		jg	short loc_3C96
		mov	word_F022, 0FFFFh

loc_3CB6:
		mov	word_E5AE, dx
		mov	ax, 0FFFFh
		pop	di
		pop	si
		pop	bp
		retn	2
__IOERROR	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__DOSERROR	proc near

arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		push	si
		push	di
		push	[bp+arg_0]
		call	__IOERROR
		mov	ax, [bp+arg_0]
		pop	di
		pop	si
		pop	bp
		retn	2
__DOSERROR	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl isatty(int handle)
_isatty		proc far

handle		= word ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, 4400h
		mov	bx, [bp+handle]
		int	21h		; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
					; BX = file or device handle
		xchg	ax, dx
		and	ax, 80h
		pop	di
		pop	si
		pop	bp
		retf
_isatty		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; __int32 __cdecl lseek(int handle, __int32 offset, int	fromwhere)
_lseek		proc far

handle		= word ptr  6
_offset		= word ptr  8
arg_4		= word ptr  0Ah
fromwhere	= byte ptr  0Ch

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	bx, [bp+handle]
		add	bx, bx
		and	word ptr [bx+0ACAh], 0FDFFh
		mov	ah, 42h	; 'B'
		mov	al, [bp+fromwhere]
		mov	bx, [bp+handle]
		mov	cx, [bp+arg_4]
		mov	dx, [bp+_offset]
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method:
					; 0-from beginnig,1-from current,2-from	end
		jb	short loc_3D10
		jmp	short loc_3D15
; ---------------------------------------------------------------------------

loc_3D10:
		push	ax
		call	__IOERROR
		cwd

loc_3D15:
		pop	di
		pop	si
		pop	bp
		retf
_lseek		endp

; ---------------------------------------------------------------------------
		dd byte_3F44
		db 4, 0, 0FAh, 0FFh, 0Ah dup(0), 0DCh, 0FFh, 2 dup(0)
		db 5, 3	dup(0),	19h, 3Dh
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		sub	sp, 24h
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 3D27h
		nop
		push	cs
		call	near ptr ___InitExceptBlocks
		xor	ax, ax
		push	ax
		push	ax
		push	ax
		push	ax
		mov	ax, 5
		push	ax
		mov	ax, seg	seg000
		push	ax
		mov	ax, 3E1Fh
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		push	ds
		mov	ax, 0B4Eh
		push	ax
		push	ss
		lea	ax, [bp-6]
		push	ax
		nop
		push	cs
		call	near ptr @xmsg@$bctr$qmx4xmsg ;	xmsg::xmsg(xmsg	&)
		add	sp, 8
		mov	ax, word_F082
		mov	[bp-2],	ax
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		add	word ptr es:[bx], 1
		adc	word ptr es:[bx+2], 0
		lea	ax, [bp-6]
		push	ss
		push	ax
		push	cs
		mov	ax, 3F44h
		push	ax
		nop
		push	cs
		call	near ptr @_ThrowException$qnvt1t1t1uiuiuinuc ; _ThrowException(void *,void *,void *,void *,uint,uint,uint,uchar	*)
		add	sp, 1Ah
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; set_new_handler(void (*)(void))
@set_new_handler$qnqv$v	proc far

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	si
		push	di
		mov	dx, seg_F086
		mov	ax, word_F084
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		mov	seg_F086, dx
		mov	word_F084, ax
		mov	dx, [bp+var_2]
		mov	ax, [bp+var_4]
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@set_new_handler$qnqv$v	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; operator new(unsigned	int)
@$bnew$qui	proc far
					; xmsg::xmsg(string &)+21p ...

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	si
		push	di
		mov	[bp+var_2], 0
		mov	[bp+var_4], 0
		cmp	[bp+arg_0], 0
		jz	short loc_3DEB
		mov	ax, [bp+arg_0]
		jmp	short loc_3DEE
; ---------------------------------------------------------------------------

loc_3DEB:
		mov	ax, 1

loc_3DEE:
		mov	[bp+arg_0], ax
		jmp	short loc_3DF7
; ---------------------------------------------------------------------------

loc_3DF3:
		call	dword ptr word_F084

loc_3DF7:
		push	[bp+arg_0]
		nop
		push	cs
		call	near ptr _malloc
		pop	cx
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		or	ax, dx
		jnz	short loc_3E13
		mov	ax, word_F084
		or	ax, seg_F086
		jnz	short loc_3DF3

loc_3E13:
		mov	dx, [bp+var_2]
		mov	ax, [bp+var_4]
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@$bnew$qui	endp

; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		push	word ptr [bp+0Ch]
		push	word ptr [bp+0Ah]
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	near ptr @xmsg@$bctr$qmx4xmsg ;	xmsg::xmsg(xmsg	&)
		add	sp, 8
		les	bx, [bp+0Ah]
		mov	ax, es:[bx+4]
		les	bx, [bp+6]
		mov	es:[bx+4], ax
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		add	word ptr es:[bx], 1
		adc	word ptr es:[bx+2], 0
		mov	dx, [bp+8]
		mov	ax, [bp+6]
		pop	di
		pop	si
		pop	bp
		retf
; ---------------------------------------------------------------------------
		dd byte_3F44
		dw 0
		dd unk_F07E
		dd byte_3F0A
		db 4, 0, 0FCh, 0FFh, 0Ah dup(0), 0DEh, 0FFh, 2 dup(0)
		db 5, 3	dup(0),	62h, 3Eh

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; string::contains(char	const *)const
@string@contains$xqnxc proc far

var_22		= word ptr -22h
var_16		= word ptr -16h
driver		= byte ptr -4

		push	bp
		mov	bp, sp
		sub	sp, 22h
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 3E7Ah
		nop
		push	cs
		call	near ptr ___InitExceptBlocks
		mov	[bp+var_16], 6
		xor	ax, ax
		push	ax
		push	ds
		mov	ax, 0B58h
		push	ax		; s
		push	ss
		lea	ax, [bp+driver]
		push	ax		; __int32
		call	@string@$bctr$qnxc ; string::string(char *)
		add	sp, 8
		lea	ax, [bp+driver]
		push	ss
		push	ax
		push	ds
		mov	ax, 0B4Eh
		push	ax
		nop
		push	cs
		call	near ptr @xalloc@$bctr$qmx6stringui ; xalloc::xalloc(string &,uint)
		mov	ax, 2
		push	ax		; char
		push	ss
		lea	ax, [bp+driver]
		push	ax		; driver
		call	@string@$bdtr$qv ; string::~string(void)
		add	sp, 10h
		push	[bp+var_22]
		nop
		push	cs
		call	near ptr ___ExitExceptBlocks
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@string@contains$xqnxc endp

; ---------------------------------------------------------------------------

loc_3EE3:
		push	si
		push	di
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		sub	word ptr es:[bx], 1
		sbb	word ptr es:[bx+2], 0
		xor	ax, ax
		push	ax
		push	ds
		mov	ax, 0B4Eh
		push	ax
		nop
		push	cs
		call	near ptr @xmsg@$bdtr$qv	; xmsg::~xmsg(void)
		add	sp, 6
		pop	di
		pop	si
		retf
; ---------------------------------------------------------------------------
byte_3F0A	db 4, 0, 3, 0, 26h, 0, 2 dup(0FFh), 3, 0, 2Eh, 0, 32h
		db 0Dh dup(0), 1, 0, 1,	0, 11h,	3
		dw seg seg003
		db 5, 0, 36h, 0, 73h, 74h, 72h,	69h, 6Eh, 67h, 0Eh dup(0)
byte_3F44	db 6, 0, 3, 0, 26h, 0, 2 dup(0FFh), 7, 0, 2Eh, 0, 3Ah
		db 0Dh dup(0), 2, 0, 2,	0, 86h,	3Fh
		dw seg seg000
		db 5, 0, 3Eh, 0, 78h, 61h, 2 dup(6Ch), 6Fh, 63h, 2 dup(0)
		db 0D3h, 3Fh
		dw seg seg000
		dw 0
		db 3, 0Dh dup(0)
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, [bp+6]
		or	ax, [bp+8]
		jz	short loc_3FCD
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		sub	word ptr es:[bx], 1
		sbb	word ptr es:[bx+2], 0
		xor	ax, ax
		push	ax
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	near ptr @xmsg@$bdtr$qv	; xmsg::~xmsg(void)
		add	sp, 6
		test	byte ptr [bp+0Ah], 1
		jz	short loc_3FCB
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	near ptr _registerbgidriver
		pop	cx
		pop	cx
		jmp	short loc_3FCF
; ---------------------------------------------------------------------------

loc_3FCB:
		jmp	short loc_3FCF
; ---------------------------------------------------------------------------

loc_3FCD:
		xor	ax, ax

loc_3FCF:
					; seg000:loc_3FCBj
		pop	di
		pop	si
		pop	bp
		retf
; ---------------------------------------------------------------------------
		db 4, 0, 3, 0, 26h, 0, 2 dup(0FFh), 3, 0, 2Ch, 0, 30h
		db 0Dh dup(0), 1, 0, 1,	0, 92h,	60h
		dw seg seg000
		db 5, 0, 34h, 0, 78h, 6Dh, 73h,	67h, 0Eh dup(0)

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

N_LXMUL@	proc near
		push	si
		xchg	ax, si
		xchg	ax, dx
		test	ax, ax
		jz	short loc_4014
		mul	bx

loc_4014:
		jcxz	short loc_401B
		xchg	ax, cx
		mul	si
		add	ax, cx

loc_401B:
		xchg	ax, si
		mul	bx
		add	dx, si
		pop	si
		retn
N_LXMUL@	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

N_PCMP@		proc near
		push	cx
		mov	ch, al
		mov	cl, 4
		shr	ax, cl
		add	dx, ax
		mov	al, ch
		mov	ah, bl
		shr	bx, cl
		pop	cx
		add	cx, bx
		mov	bl, ah
		and	ax, 0Fh
		and	bx, 0Fh
		cmp	dx, cx
		jnz	short locret_4042
		cmp	ax, bx

locret_4042:
		retn
N_PCMP@		endp

; ---------------------------------------------------------------------------

__setupio:
		push	si
		push	di
		mov	cx, 5
		jmp	short loc_406C
; ---------------------------------------------------------------------------

loc_404A:
		mov	bx, cx
		add	bx, bx
		mov	word ptr [bx+0ACAh], 0
		mov	ax, 14h
		imul	cx
		mov	dx, ax
		mov	bx, ax
		mov	byte ptr [bx+93Ch], 0FFh
		add	ax, 938h
		mov	bx, dx
		mov	[bx+94Ah], ax
		inc	cx

loc_406C:
		cmp	cx, word_EFF8
		jb	short loc_404A
		mov	al, byte_EE6C
		cbw
		push	ax
		nop
		push	cs
		call	near ptr _isatty
		pop	cx
		or	ax, ax
		jnz	short loc_4087
		and	word_EE6A, 0FDFFh

loc_4087:
		mov	ax, 200h
		push	ax
		test	byte ptr word_EE6A+1, 2
		jz	short loc_4097
		mov	ax, 1
		jmp	short loc_4099
; ---------------------------------------------------------------------------

loc_4097:
		xor	ax, ax

loc_4099:
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		push	ds
		mov	ax, 938h
		push	ax
		nop
		push	cs
		call	near ptr _setvbuf
		add	sp, 0Ch
		mov	al, byte_EE80
		cbw
		push	ax
		nop
		push	cs
		call	near ptr _isatty
		pop	cx
		or	ax, ax
		jnz	short loc_40C0
		and	word_EE7E, 0FDFFh

loc_40C0:
		mov	ax, 200h
		push	ax
		test	byte ptr word_EE7E+1, 2
		jz	short loc_40D0
		mov	ax, 2
		jmp	short loc_40D2
; ---------------------------------------------------------------------------

loc_40D0:
		xor	ax, ax

loc_40D2:
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		push	ds
		mov	ax, 94Ch
		push	ax
		nop
		push	cs
		call	near ptr _setvbuf
		add	sp, 0Ch
		pop	di
		pop	si
		retn

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl tolower(int ch)
_tolower	proc far

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	dx, [bp+arg_0]
		cmp	dx, 0FFFFh
		jnz	short loc_40F9
		mov	ax, 0FFFFh
		jmp	short loc_4113
; ---------------------------------------------------------------------------

loc_40F9:
		mov	al, dl
		mov	ah, 0
		mov	bx, ax
		test	(__ctype+1)[bx], 4
		jz	short loc_410F
		mov	al, dl
		mov	ah, 0
		add	ax, 20h	; ' '
		jmp	short loc_4113
; ---------------------------------------------------------------------------

loc_410F:
		mov	al, dl
		mov	ah, 0

loc_4113:
		pop	di
		pop	si
		pop	bp
		retf
_tolower	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4117	proc far

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	dx, [bp+arg_0]
		cmp	dx, 0FFFFh
		jnz	short loc_4129
		mov	ax, 0FFFFh
		jmp	short loc_4143
; ---------------------------------------------------------------------------

loc_4129:
		mov	al, dl
		mov	ah, 0
		mov	bx, ax
		test	byte ptr [bx+0B69h], 8
		jz	short loc_413F
		mov	al, dl
		mov	ah, 0
		add	ax, 0FFE0h
		jmp	short loc_4143
; ---------------------------------------------------------------------------

loc_413F:
		mov	al, dl
		mov	ah, 0

loc_4143:
		pop	di
		pop	si
		pop	bp
		retf
sub_4117	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

; __RefDestructorCount(void)
@__RefDestructorCount$qv proc far
		mov	dx, ss
		mov	ax, 10h
		retf
@__RefDestructorCount$qv endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

; __RefExceptionList(void)
@__RefExceptionList$qv proc far
					; ___ExitExceptBlocks+4p
		mov	dx, ss
		mov	ax, 14h
		retf
@__RefExceptionList$qv endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

___InitExceptBlocks proc far
					; string::contains(char	*)+10p	...
		mov	es, ax
		mov	dx, bx
		mov	cx, bp
		mov	bx, es:[bx+4]
		add	bx, cx
		mov	ss:[bx+6], dx
		mov	ss:[bx+8], ax
		mov	ax, sp
		add	ax, 4
		mov	ss:[bx+0Ah], ax
		mov	ax, seg	dseg
		mov	ss:[bx+0Eh], ax
		mov	ss:[bx+10h], si
		mov	word ptr ss:[bx+2], offset __ExceptionHandler
		mov	word ptr ss:[bx+4], seg	seg000
		mov	word ptr ss:[bx+0Ch], 0
		mov	word ptr ss:[bx+12h], 0
		push	bx
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		pop	bx
		xchg	ax, bx
		mov	es, dx
		mov	cx, es:[bx]
		mov	dx, es:[bx+2]
		mov	bx, ax
		mov	ss:[bx+1Ah], cx
		mov	ss:[bx+1Ch], dx
		push	bx
		push	cs
		call	near ptr @__RefExceptionList$qv	; __RefExceptionList(void)
		pop	bx
		xchg	ax, bx
		mov	es, dx
		mov	cx, es:[bx]
		mov	es:[bx], ax
		mov	bx, ax
		mov	ss:[bx], cx
		retf
___InitExceptBlocks endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

___ExitExceptBlocks proc far
					; seg000:42C2p	...

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		push	cs
		call	near ptr @__RefExceptionList$qv	; __RefExceptionList(void)
		mov	bx, [bp+arg_0]
		xchg	ax, bx
		mov	es, dx
		mov	es:[bx], ax
		pop	bp
		retf	2
___ExitExceptBlocks endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function noreturn

; terminate(void)
@terminate$qv	proc near
		push	si
		push	di
		nop
		push	cs
		call	near ptr _abort
@terminate$qv	endp

; ---------------------------------------------------------------------------
		pop	di
		pop	si
		retf

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; set_terminate(void (*)(void))
@set_terminate$qnqv$v proc far

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	si
		push	di
		les	bx, ss:16h
		mov	dx, es:[bx+0Ch]
		mov	ax, es:[bx+0Ah]
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		mov	ax, [bp+arg_0]
		or	ax, [bp+arg_2]
		jz	short loc_4216
		les	bx, ss:16h
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		mov	es:[bx+0Ch], dx
		mov	es:[bx+0Ah], ax

loc_4216:
		mov	dx, [bp+var_2]
		mov	ax, [bp+var_4]
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@set_terminate$qnqv$v endp

; ---------------------------------------------------------------------------
		db 4 dup(0), 0B0h, 42h
		dw seg seg000
		db 14h dup(0), 0E2h, 0FFh, 2 dup(0), 3,	0, 22h,	42h
		dw seg seg000
		db 2 dup(0), 4,	0

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function noreturn	bp-based frame

___call_terminate proc far
					; sub_6E07+272p ...

var_26		= dword	ptr -26h
var_22		= word ptr -22h
var_20		= word ptr -20h
var_1E		= word ptr -1Eh
var_12		= word ptr -12h

		push	bp
		mov	bp, sp
		sub	sp, 26h
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 423Ah
		nop
		push	cs
		call	near ptr ___InitExceptBlocks
		mov	[bp+var_22], ds
		nop
		push	cs
		call	near ptr _flushall
		les	bx, ss:16h
		mov	dx, es:[bx+0Ch]
		mov	ax, es:[bx+0Ah]
		mov	word ptr [bp+var_26+2],	dx
		mov	word ptr [bp+var_26], ax
		mov	[bp+var_12], 6
		les	bx, ss:16h
		cmp	word ptr es:[bx+12h], 0
		jnz	short loc_4294
		les	bx, ss:16h
		mov	word ptr es:[bx+12h], ds

loc_4294:
		les	bx, ss:16h
		mov	ax, es:[bx+12h]
		mov	[bp+var_20], ax
		mov	ds, [bp+var_20]
		call	[bp+var_26]
		mov	ds, [bp+var_22]
		mov	[bp+var_12], 0
		jmp	short loc_42B8
; ---------------------------------------------------------------------------
		mov	ds, [bp+var_22]
		nop
		push	cs
		call	near ptr @_CatchCleanup$qv ; _CatchCleanup(void)

loc_42B8:
		nop
		push	cs
		call	near ptr _abort
___call_terminate endp

; ---------------------------------------------------------------------------
		push	word ptr [bp-1Eh]
		nop
		push	cs
		call	near ptr ___ExitExceptBlocks
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function noreturn

; unexpected(void)
@unexpected$qv	proc near
		push	si
		push	di
		push	cs
		call	near ptr ___call_terminate
@unexpected$qv	endp

; ---------------------------------------------------------------------------
		pop	di
		pop	si
		retf

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; set_unexpected(void (*)(void))
@set_unexpected$qnqv$v proc far

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	si
		push	di
		les	bx, ss:16h
		mov	dx, es:[bx+10h]
		mov	ax, es:[bx+0Eh]
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		mov	ax, [bp+arg_0]
		or	ax, [bp+arg_2]
		jz	short loc_430A
		les	bx, ss:16h
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		mov	es:[bx+10h], dx
		mov	es:[bx+0Eh], ax

loc_430A:
		mov	dx, [bp+var_2]
		mov	ax, [bp+var_4]
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@set_unexpected$qnqv$v endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function noreturn	bp-based frame

___call_unexpected proc	far

var_6		= dword	ptr -6
var_2		= word ptr -2

		push	bp
		mov	bp, sp
		sub	sp, 6
		push	si
		push	di
		les	bx, ss:16h
		mov	dx, es:[bx+10h]
		mov	ax, es:[bx+0Eh]
		mov	word ptr [bp+var_6+2], dx
		mov	word ptr [bp+var_6], ax
		les	bx, ss:16h
		cmp	word ptr es:[bx+14h], 0
		jnz	short loc_4346
		les	bx, ss:16h
		mov	word ptr es:[bx+14h], ds

loc_4346:
		les	bx, ss:16h
		mov	ax, es:[bx+14h]
		mov	[bp+var_2], ax
		push	ds
		mov	ds, [bp+var_2]
		call	[bp+var_6]
		pop	ds
		nop
		push	cs
		call	near ptr _abort
___call_unexpected endp

; ---------------------------------------------------------------------------
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; __GetPolymorphicDTC(void *, unsigned int)
@__GetPolymorphicDTC$qnvui proc	far

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  6
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		sub	sp, 8
		push	si
		push	di
		mov	ax, word ptr [bp+arg_0]
		or	ax, word ptr [bp+arg_0+2]
		jnz	short loc_4379
		xor	ax, ax
		jmp	short loc_43B3
; ---------------------------------------------------------------------------

loc_4379:
		les	bx, [bp+arg_0]
		add	bx, [bp+arg_4]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_4+2], ds
		mov	word ptr [bp+var_4], ax
		les	bx, [bp+var_4]
		mov	dx, word ptr [bp+var_4+2]
		mov	ax, word ptr [bp+var_4]
		sub	ax, es:[bx-2]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		les	bx, [bp+var_4]
		mov	dx, es:[bx-6]
		mov	ax, es:[bx-8]
		mov	word ptr [bp+var_8+2], dx
		mov	word ptr [bp+var_8], ax
		les	bx, [bp+var_8]
		mov	ax, es:[bx+1Ah]

loc_43B3:
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@__GetPolymorphicDTC$qnvui endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; __GetPolymorphicDTCfar(void *, unsigned int)
@__GetPolymorphicDTCfar$qnvui proc far

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  6
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		sub	sp, 8
		push	si
		push	di
		mov	ax, word ptr [bp+arg_0]
		or	ax, word ptr [bp+arg_0+2]
		jnz	short loc_43CD
		xor	ax, ax
		jmp	short loc_440B
; ---------------------------------------------------------------------------

loc_43CD:
		les	bx, [bp+arg_0]
		add	bx, [bp+arg_4]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		les	bx, [bp+var_4]
		mov	dx, word ptr [bp+var_4+2]
		mov	ax, word ptr [bp+var_4]
		sub	ax, es:[bx-2]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		les	bx, [bp+var_4]
		mov	dx, es:[bx-6]
		mov	ax, es:[bx-8]
		mov	word ptr [bp+var_8+2], dx
		mov	word ptr [bp+var_8], ax
		les	bx, [bp+var_8]
		mov	ax, es:[bx+1Ah]

loc_440B:
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@__GetPolymorphicDTCfar$qnvui endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

__ExceptInit	proc far
		push	si
		push	di
		mov	word ptr ss:12h, 0
		mov	word ptr ss:10h, 0
		mov	word ptr ss:18h, ds
		mov	word ptr ss:16h, 0C6Ah
		mov	word ptr ss:1Ah, 0FEEDh
		mov	ax, ds
		mov	word_F1AE, ax
		mov	word_F1AC, ax
		mov	dx, ss:18h
		mov	ax, ss:16h
		add	ax, 0A8h ; '¨'
		les	bx, ss:16h
		mov	es:[bx+22h], dx
		mov	es:[bx+20h], ax
		mov	word ptr ss:14h, 0FFFFh
		pop	di
		pop	si
		retf
__ExceptInit	endp

; ---------------------------------------------------------------------------

unknown_libname_1:			; BCC v4.x/5.x DOS runtime
		pushf
		pop	bx
		mov	ax, 0FFFh
		and	ax, bx
		push	ax
		popf
		pushf
		pop	ax
		and	ax, 0F000h
		cmp	ax, 0F000h
		mov	word_F2C2, 0
		jz	short locret_44BA
		or	bx, 0F000h
		push	bx
		popf
		pushf
		pop	ax
		and	ax, 0F000h
		mov	word_F2C2, 2
		jz	short locret_44BA
		mov	edx, esp
		and	sp, 0FFFCh
		pushfd
		pop	eax
		mov	ecx, eax
		xor	eax, 40000h
		push	eax
		popfd
		pushfd
		pop	eax
		xor	eax, ecx
		mov	word_F2C2, 3
		mov	esp, edx
		jz	short locret_44BA
		mov	word_F2C2, 4

locret_44BA:
		retn
; ---------------------------------------------------------------------------

include libs/BorlandC/FARHEAP.ASM

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_4916	proc near

newsize		= word ptr -2
arg_0		= word ptr  4
arg_2		= word ptr  6

		push	bp
		mov	bp, sp
		sub	sp, 2
		push	si
		push	di
		mov	ax, [bp+arg_2]
		inc	ax
		mov	[bp+newsize], ax
		mov	ax, segx
		sub	[bp+newsize], ax
		mov	ax, [bp+newsize]
		add	ax, 3Fh	; '?'
		mov	cl, 6
		shr	ax, cl
		mov	[bp+newsize], ax
		cmp	ax, word_F2C4
		jz	short loc_497A
		mov	cl, 6
		shl	[bp+newsize], cl
		mov	dx, word_E5BE
		mov	ax, [bp+newsize]
		add	ax, segx
		cmp	ax, dx
		jbe	short loc_495B
		mov	ax, dx
		sub	ax, segx
		mov	[bp+newsize], ax

loc_495B:
		push	[bp+newsize]	; newsize
		push	segx		; segx
		nop
		push	cs
		call	near ptr _setblock
		pop	cx
		pop	cx
		mov	dx, ax
		cmp	dx, 0FFFFh
		jnz	short loc_498C
		mov	ax, [bp+newsize]
		mov	cl, 6
		shr	ax, cl
		mov	word_F2C4, ax

loc_497A:
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		mov	word_E5BA, dx
		mov	word_E5B8, ax
		mov	ax, 1
		jmp	short loc_499C
; ---------------------------------------------------------------------------

loc_498C:
		mov	ax, segx
		add	ax, dx
		mov	word_E5BE, ax
		mov	word_E5BC, 0
		xor	ax, ax

loc_499C:
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn	4
sub_4916	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__brk		proc near

arg_0		= word ptr  4
arg_2		= word ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	cx, word_E5B6
		mov	bx, word_E5B4
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		call	N_PCMP@
		jb	short loc_49DC
		mov	cx, word_E5BE
		mov	bx, word_E5BC
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		call	N_PCMP@
		ja	short loc_49DC
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	sub_4916
		or	ax, ax
		jnz	short loc_49E1

loc_49DC:
		mov	ax, 0FFFFh
		jmp	short loc_49E3
; ---------------------------------------------------------------------------

loc_49E1:
		xor	ax, ax

loc_49E3:
		pop	di
		pop	si
		pop	bp
		retn
__brk		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__sbrk		proc near

var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  4
arg_2		= word ptr  6

		push	bp
		mov	bp, sp
		sub	sp, 8
		push	si
		push	di
		mov	ax, word_E5BA
		xor	dx, dx
		mov	cl, 4
		call	near ptr N_LXLSH@
		add	ax, word_E5B8
		adc	dx, 0
		add	ax, [bp+arg_0]
		adc	dx, [bp+arg_2]
		cmp	dx, 0Fh
		jl	short loc_4A12
		jg	short loc_4A62
		cmp	ax, 0FFFFh
		ja	short loc_4A62

loc_4A12:
		mov	dx, word_E5BA
		mov	ax, word_E5B8
		mov	cx, [bp+arg_2]
		mov	bx, [bp+arg_0]
		call	near ptr N_PADD@
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		mov	cx, word_E5B6
		mov	bx, word_E5B4
		call	N_PCMP@
		jb	short loc_4A62
		mov	cx, word_E5BE
		mov	bx, word_E5BC
		mov	dx, [bp+var_2]
		mov	ax, [bp+var_4]
		call	N_PCMP@
		ja	short loc_4A62
		mov	dx, word_E5BA
		mov	ax, word_E5B8
		mov	[bp+var_6], dx
		mov	[bp+var_8], ax
		push	[bp+var_2]
		push	[bp+var_4]
		call	sub_4916
		or	ax, ax
		jnz	short loc_4A6A

loc_4A62:
		mov	dx, 0FFFFh
		mov	ax, 0FFFFh
		jmp	short loc_4A70
; ---------------------------------------------------------------------------

loc_4A6A:
		mov	dx, [bp+var_6]
		mov	ax, [bp+var_8]

loc_4A70:
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
__sbrk		endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		push	ax
		push	bx
		push	cx
		push	dx
		push	es
		push	ds
		push	si
		push	di
		push	bp
		mov	bp, seg	dseg
		mov	ds, bp
		mov	bp, sp
		sub	sp, 4
		mov	dx, word_F2D2
		mov	ax, word_F2D0
		mov	[bp-2],	dx
		mov	[bp-4],	ax
		or	dx, dx
		jnz	short loc_4A9F
		cmp	ax, 1
		jz	short loc_4ADC

loc_4A9F:
		mov	ax, [bp-4]
		or	ax, [bp-2]
		jz	short loc_4AB3
		cmp	word ptr [bp-2], 0FFFFh
		jnz	short loc_4ABD
		cmp	word ptr [bp-4], 0FFFFh
		jnz	short loc_4ABD

loc_4AB3:
		mov	ax, 1
		push	ax
		nop
		push	cs
		call	near ptr __exit
; ---------------------------------------------------------------------------
		pop	cx

loc_4ABD:
		mov	word_F2D2, 0
		mov	word_F2D0, 0
		push	ss
		lea	ax, [bp+0]
		push	ax
		mov	ax, 7Fh	; ''
		push	ax
		mov	ax, 8
		push	ax
		call	dword ptr [bp-4]
		add	sp, 8

loc_4ADC:
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		pop	ds
		pop	es
		pop	dx
		pop	cx
		pop	bx
		pop	ax
		iret
; ---------------------------------------------------------------------------
		push	ax
		push	bx
		push	cx
		push	dx
		push	es
		push	ds
		push	si
		push	di
		push	bp
		mov	bp, seg	dseg
		mov	ds, bp
		mov	bp, sp
		sub	sp, 4
		mov	dx, word_F2D2
		mov	ax, word_F2D0
		mov	[bp-2],	dx
		mov	[bp-4],	ax
		or	dx, dx
		jnz	short loc_4B11
		cmp	ax, 1
		jz	short loc_4B4E

loc_4B11:
		mov	ax, [bp-4]
		or	ax, [bp-2]
		jz	short loc_4B25
		cmp	word ptr [bp-2], 0FFFFh
		jnz	short loc_4B2F
		cmp	word ptr [bp-4], 0FFFFh
		jnz	short loc_4B2F

loc_4B25:
		mov	ax, 1
		push	ax
		nop
		push	cs
		call	near ptr __exit
; ---------------------------------------------------------------------------
		pop	cx

loc_4B2F:
		mov	word_F2D2, 0
		mov	word_F2D0, 0
		push	ss
		lea	ax, [bp+0]
		push	ax
		mov	ax, 7Eh	; '~'

; =============== S U B	R O U T	I N E =======================================


sub_4B43	proc far
		push	ax
		mov	ax, 8
		push	ax
		call	dword ptr [bp-4]
		add	sp, 8

loc_4B4E:
		mov	sp, bp
		pop	bp
		pop	di
		pop	si
		pop	ds
		pop	es
		pop	dx
		pop	cx
		pop	bx
		pop	ax
		iret
sub_4B43	endp

; ---------------------------------------------------------------------------
		push	ax
		push	cx
		push	dx
		push	bx
		push	sp
		push	bp
		push	si
		push	di
		push	ds
		push	es
		mov	bp, seg	dseg
		mov	ds, bp
		mov	bp, sp
		sub	sp, 4
		pushf
		mov	dx, word_F2CA
		mov	ax, word_F2C8
		mov	[bp-2],	dx
		mov	[bp-4],	ax
		or	dx, dx
		jnz	short loc_4B85
		cmp	ax, 1
		jz	short loc_4BCA

loc_4B85:
		mov	ax, [bp-4]
		or	ax, [bp-2]
		jz	short loc_4B99
		cmp	word ptr [bp-2], 0FFFFh
		jnz	short loc_4BA3
		cmp	word ptr [bp-4], 0FFFFh
		jnz	short loc_4BA3

loc_4B99:
		mov	ax, 1
		push	ax
		nop
		push	cs
		call	near ptr __exit
; ---------------------------------------------------------------------------
		pop	cx

loc_4BA3:
		mov	word_F2CA, 0
		mov	word_F2C8, 0
		push	word_12644
		push	word_12642
		mov	ax, 23h	; '#'
		push	ax
		nop
		push	cs
		call	near ptr _setvect
		mov	ax, 2
		push	ax
		call	dword ptr [bp-4]
		add	sp, 8

loc_4BCA:
		popf
		clc
		mov	sp, bp
		pop	es
		pop	ds
		pop	di
		pop	si
		pop	bp
		pop	bx
		pop	bx
		pop	dx
		pop	cx
		pop	ax
		retf

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4BD9	proc far

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		xor	dx, dx

loc_4BE0:
		mov	bx, dx
		mov	al, [bx+0DB0h]
		mov	ah, 0
		cmp	ax, [bp+arg_0]
		jnz	short loc_4BF1
		mov	ax, dx
		jmp	short loc_4BFA
; ---------------------------------------------------------------------------

loc_4BF1:
		inc	dx
		cmp	dx, 6
		jl	short loc_4BE0
		mov	ax, 0FFFFh

loc_4BFA:
		pop	di
		pop	si
		pop	bp
		retf
sub_4BD9	endp

; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		sub	sp, 6
		push	si
		push	di
		cmp	byte_F2C7, 0
		jnz	short loc_4C1E
		mov	word_1263C, seg	seg000
		mov	word_1263A, 4BFEh
		mov	byte_F2C7, 1

loc_4C1E:
		push	word ptr [bp+6]
		push	cs
		call	near ptr sub_4BD9
		pop	cx
		mov	[bp-2],	ax
		cmp	ax, 0FFFFh
		jnz	short loc_4C3D
		mov	word_E5AE, 13h
		mov	dx, 0FFFFh
		mov	ax, 0FFFFh
		jmp	loc_4CDA
; ---------------------------------------------------------------------------

loc_4C3D:
		mov	bx, [bp-2]
		mov	cl, 2
		shl	bx, cl
		mov	dx, [bx+0D9Ah]
		mov	ax, [bx+0D98h]
		mov	[bp-4],	dx
		mov	[bp-6],	ax
		mov	bx, [bp-2]
		shl	bx, cl
		mov	dx, [bp+0Ah]
		mov	ax, [bp+8]
		mov	[bx+0D9Ah], dx
		mov	[bx+0D98h], ax
		cmp	word ptr [bp+6], 2
		jnz	short loc_4CA7
		cmp	byte_F2C6, 0
		jnz	short loc_4C88
		mov	ax, 23h	; '#'
		push	ax
		nop
		push	cs
		call	near ptr _getvect
		pop	cx
		mov	word_12644, dx
		mov	word_12642, ax
		mov	byte_F2C6, 1

loc_4C88:
		mov	ax, [bp+8]
		or	ax, [bp+0Ah]
		jnz	short loc_4C9A
		push	word_12644
		push	word_12642
		jmp	short loc_4CA2
; ---------------------------------------------------------------------------

loc_4C9A:
		mov	ax, seg	seg000
		push	ax
		mov	ax, 4B5Ah
		push	ax

loc_4CA2:
		mov	ax, 23h	; '#'
		jmp	short loc_4CCB
; ---------------------------------------------------------------------------

loc_4CA7:
		cmp	word ptr [bp+6], 8
		jnz	short loc_4CD4
		mov	ax, seg	seg000
		push	ax
		mov	ax, 4A76h
		push	ax
		xor	ax, ax
		push	ax
		nop
		push	cs
		call	near ptr _setvect
		add	sp, 6
		mov	ax, seg	seg000
		push	ax
		mov	ax, 4AE8h
		push	ax
		mov	ax, 4

loc_4CCB:
		push	ax
		nop
		push	cs
		call	near ptr _setvect
		add	sp, 6

loc_4CD4:
		mov	dx, [bp-4]
		mov	ax, [bp-6]

loc_4CDA:
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4CE0	proc far

var_6		= dword	ptr -6
var_2		= word ptr -2
arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		sub	sp, 6
		push	si
		push	di
		push	[bp+arg_0]
		push	cs
		call	near ptr sub_4BD9
		pop	cx
		mov	[bp+var_2], ax
		cmp	ax, 0FFFFh
		jnz	short loc_4CFD
		mov	ax, 1
		jmp	short loc_4D71
; ---------------------------------------------------------------------------

loc_4CFD:
		mov	bx, [bp+var_2]
		mov	cl, 2
		shl	bx, cl
		mov	dx, [bx+0D9Ah]
		mov	ax, [bx+0D98h]
		mov	word ptr [bp+var_6+2], dx
		mov	word ptr [bp+var_6], ax
		or	dx, dx
		jnz	short loc_4D1B
		cmp	ax, 1
		jz	short loc_4D6F

loc_4D1B:
		mov	ax, word ptr [bp+var_6]
		or	ax, word ptr [bp+var_6+2]
		jnz	short loc_4D4A
		mov	ax, [bp+arg_0]
		cmp	ax, 2
		jz	short loc_4D35
		cmp	ax, 16h
		jnz	short loc_4D3E
		nop
		push	cs
		call	near ptr __abort
; ---------------------------------------------------------------------------

loc_4D35:
		xor	ax, ax
		int	23h		; DOS -	CONTROL	"C" EXIT ADDRESS
					; Return: return via RETF 2 with CF set
					; DOS will abort program with errorlevel 0
					; else
					; interrupted DOS call continues
		mov	ax, 4C03h
		int	21h		; DOS -	2+ - QUIT WITH EXIT CODE (EXIT)
					; AL = exit code
; ---------------------------------------------------------------------------

loc_4D3E:
		mov	ax, 1
		push	ax		; status
		nop
		push	cs
		call	near ptr __exit
; ---------------------------------------------------------------------------
		pop	cx
		jmp	short loc_4D6F
; ---------------------------------------------------------------------------

loc_4D4A:
		mov	bx, [bp+var_2]
		mov	cl, 2
		shl	bx, cl
		mov	word ptr [bx+0D9Ah], 0
		mov	word ptr [bx+0D98h], 0
		mov	bx, [bp+var_2]
		mov	al, [bx+0DB6h]
		mov	ah, 0
		push	ax
		push	[bp+arg_0]
		call	[bp+var_6]
		pop	cx
		pop	cx

loc_4D6F:
		xor	ax, ax

loc_4D71:
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_4CE0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl __far _access(char *pathname, char)
__access	proc far

pathname	= dword	ptr  6
arg_4		= byte ptr  0Ah

		push	bp
		mov	bp, sp
		push	si
		push	di
		xor	ax, ax
		push	ax		; func
		push	word ptr [bp+pathname+2]
		push	word ptr [bp+pathname] ; pathname
		nop
		push	cs
		call	near ptr __chmod
		add	sp, 6
		mov	dx, ax
		cmp	dx, 0FFFFh
		jnz	short loc_4D96
		jmp	short loc_4DAE
; ---------------------------------------------------------------------------

loc_4D96:
		test	[bp+arg_4], 2
		jz	short loc_4DA1
		test	dl, 1
		jnz	short loc_4DA5

loc_4DA1:
		xor	ax, ax
		jmp	short loc_4DAE
; ---------------------------------------------------------------------------

loc_4DA5:
		mov	word_E5AE, 5
		mov	ax, 0FFFFh

loc_4DAE:
		pop	di
		pop	si
		pop	bp
		retf
__access	endp

; ---------------------------------------------------------------------------
		db 50h,	51h, 52h, 53h, 54h, 55h, 56h, 57h, 1Eh,	6, 8Bh
		db 0ECh, 0A1h, 0BCh, 0Dh, 0Bh, 6, 0BEh,	0Dh, 75h, 27h
		db 0BEh, 2 dup(0FFh), 1Eh, 0B8h, 0, 63h, 0F8h, 0CDh, 21h
		db 8Ch,	0D8h, 1Fh, 72h,	0Bh, 8Ch, 0DAh,	3Bh, 0C2h, 74h
		db 5, 83h, 0FEh, 0FFh, 75h, 6, 0BEh, 0C0h, 0Dh,	0B8h
		dw seg dseg
; ---------------------------------------------------------------------------
		mov	word ptr dword_F2EC, si
		mov	word ptr dword_F2EC+2, ax
		mov	sp, bp
		pop	es
		pop	ds
		pop	di
		pop	si
		pop	bp
		pop	bx
		pop	bx
		pop	dx
		pop	cx
		pop	ax
		retn

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4DFB	proc far
					; sub_5205+284p ...

arg_0		= byte ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	al, [bp+arg_0]
		xor	cx, cx
		les	bx, dword_F2EC

loc_4E09:
		mov	dx, es:[bx]
		or	dx, dx
		jz	short loc_4E1B
		cmp	al, dl
		jb	short loc_4E1B
		inc	bx
		inc	bx
		cmp	al, dh
		ja	short loc_4E09
		inc	cx

loc_4E1B:
		xchg	ax, cx
		pop	di
		pop	si
		pop	bp
		retf
sub_4DFB	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4E20	proc far
					; sub_5205+1AEp ...

var_4		= dword	ptr -4
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	si
		push	di
		xor	cx, cx
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax

loc_4E36:
		les	bx, [bp+var_4]
		cmp	byte ptr es:[bx], 0
		jnz	short loc_4E43
		xor	cx, cx
		jmp	short loc_4E71
; ---------------------------------------------------------------------------

loc_4E43:
		cmp	cx, 1
		jnz	short loc_4E4D
		mov	cx, 2
		jmp	short loc_4E64
; ---------------------------------------------------------------------------

loc_4E4D:
		les	bx, [bp+var_4]
		mov	al, es:[bx]
		push	ax
		push	cs
		call	near ptr sub_4DFB
		pop	cx
		or	ax, ax
		jz	short loc_4E62
		mov	cx, 1
		jmp	short loc_4E64
; ---------------------------------------------------------------------------

loc_4E62:
		xor	cx, cx

loc_4E64:
		mov	ax, word ptr [bp+var_4]
		cmp	ax, [bp+arg_4]
		jnb	short loc_4E71
		inc	word ptr [bp+var_4]
		jmp	short loc_4E36
; ---------------------------------------------------------------------------

loc_4E71:
		or	cx, cx
		jnz	short loc_4E7A
		mov	ax, 1
		jmp	short loc_4E7C
; ---------------------------------------------------------------------------

loc_4E7A:
		xor	ax, ax

loc_4E7C:
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_4E20	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int _chmod(const char	*pathname, int func, ...)
__chmod		proc far

pathname	= dword	ptr  6
func		= byte ptr  0Ah
arg_6		= word ptr  0Ch

		push	bp
		mov	bp, sp
		push	si
		push	di
		push	ds
		mov	cx, [bp+arg_6]
		mov	ah, 43h	; 'C'
		mov	al, [bp+func]
		lds	dx, [bp+pathname]
		int	21h		; DOS -
		pop	ds
		jb	short loc_4E9B
		xchg	ax, cx
		jmp	short loc_4E9F
; ---------------------------------------------------------------------------

loc_4E9B:
		push	ax
		call	__IOERROR

loc_4E9F:
		pop	di
		pop	si
		pop	bp
		retf
__chmod		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl fflush(FILE *stream)
_fflush		proc far

var_2		= word ptr -2
stream		= dword	ptr  6

		push	bp
		mov	bp, sp
		sub	sp, 2
		push	si
		push	di
		mov	ax, word ptr [bp+stream]
		or	ax, word ptr [bp+stream+2]
		jnz	short loc_4EBB
		nop
		push	cs
		call	near ptr _flushall
		jmp	loc_4F6C
; ---------------------------------------------------------------------------

loc_4EBB:
		les	bx, [bp+stream]
		mov	ax, es:[bx+12h]
		cmp	ax, word ptr [bp+stream]
		jz	short loc_4ECA
		jmp	loc_4F67
; ---------------------------------------------------------------------------

loc_4ECA:
		les	bx, [bp+stream]
		cmp	word ptr es:[bx], 0
		jl	short loc_4F21
		test	byte ptr es:[bx+2], 8
		jnz	short loc_4EF2
		mov	dx, es:[bx+0Eh]
		mov	ax, word ptr [bp+stream]
		add	ax, 5
		cmp	dx, word ptr [bp+stream+2]
		jz	short loc_4EEC
		jmp	loc_4F6C
; ---------------------------------------------------------------------------

loc_4EEC:
		cmp	es:[bx+0Ch], ax
		jnz	short loc_4F6C

loc_4EF2:
		les	bx, [bp+stream]
		mov	word ptr es:[bx], 0
		mov	dx, es:[bx+0Eh]
		mov	ax, word ptr [bp+stream]
		add	ax, 5
		cmp	dx, word ptr [bp+stream+2]
		jnz	short loc_4F6C
		cmp	es:[bx+0Ch], ax
		jnz	short loc_4F6C
		mov	dx, es:[bx+0Ah]
		mov	ax, es:[bx+8]
		mov	es:[bx+0Eh], dx
		mov	es:[bx+0Ch], ax
		jmp	short loc_4F6C
; ---------------------------------------------------------------------------

loc_4F21:
		les	bx, [bp+stream]
		mov	ax, es:[bx+6]
		add	ax, es:[bx]
		inc	ax
		mov	[bp+var_2], ax
		sub	es:[bx], ax
		push	ax		; len
		mov	dx, es:[bx+0Ah]
		mov	ax, es:[bx+8]
		mov	es:[bx+0Eh], dx
		mov	es:[bx+0Ch], ax
		push	dx
		push	ax		; buf
		mov	al, es:[bx+4]
		cbw
		push	ax		; handle
		nop
		push	cs
		call	near ptr ___write
		add	sp, 8
		cmp	ax, [bp+var_2]
		jz	short loc_4F6C
		les	bx, [bp+stream]
		test	byte ptr es:[bx+3], 2
		jnz	short loc_4F6C
		or	word ptr es:[bx+2], 10h

loc_4F67:
		mov	ax, 0FFFFh
		jmp	short loc_4F6E
; ---------------------------------------------------------------------------

loc_4F6C:
		xor	ax, ax

loc_4F6E:
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
_fflush		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int flushall(void)
_flushall	proc far
					; _fflush+12p

var_8		= word ptr -8
var_6		= word ptr -6
stream		= dword	ptr -4

		push	bp
		mov	bp, sp
		sub	sp, 8
		push	si
		push	di
		mov	[bp+var_8], 0
		mov	ax, word_EFF8
		mov	[bp+var_6], ax
		mov	word ptr [bp+stream+2],	ds
		mov	word ptr [bp+stream], 938h
		jmp	short loc_4FAD
; ---------------------------------------------------------------------------

loc_4F91:
		les	bx, [bp+stream]
		test	byte ptr es:[bx+2], 3
		jz	short loc_4FA9
		push	word ptr [bp+stream+2]
		push	bx		; stream
		nop
		push	cs
		call	near ptr _fflush
		pop	cx
		pop	cx
		inc	[bp+var_8]

loc_4FA9:
		add	word ptr [bp+stream], 14h

loc_4FAD:
		mov	ax, [bp+var_6]
		dec	[bp+var_6]
		or	ax, ax
		jnz	short loc_4F91
		mov	ax, [bp+var_8]
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
_flushall	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_4FC0	proc near

var_6		= dword	ptr -6
var_2		= word ptr -2
arg_0		= dword	ptr  4

		push	bp
		mov	bp, sp
		sub	sp, 6
		push	si
		push	di
		les	bx, [bp+arg_0]
		cmp	word ptr es:[bx], 0
		jge	short loc_4FDD
		mov	cx, es:[bx+6]
		add	cx, es:[bx]
		inc	cx
		mov	ax, cx
		jmp	short loc_4FEA
; ---------------------------------------------------------------------------

loc_4FDD:
		les	bx, [bp+arg_0]
		mov	ax, es:[bx]
		cwd
		xor	ax, dx
		sub	ax, dx
		mov	cx, ax

loc_4FEA:
		mov	[bp+var_2], ax
		les	bx, [bp+arg_0]
		test	byte ptr es:[bx+2], 40h
		jnz	short loc_503E
		les	bx, [bp+arg_0]
		mov	dx, es:[bx+0Eh]
		mov	ax, es:[bx+0Ch]
		mov	word ptr [bp+var_6+2], dx
		mov	word ptr [bp+var_6], ax
		cmp	word ptr es:[bx], 0
		jge	short loc_5037
		jmp	short loc_501F
; ---------------------------------------------------------------------------

loc_5010:
		dec	word ptr [bp+var_6]
		les	bx, [bp+var_6]
		cmp	byte ptr es:[bx], 0Ah
		jnz	short loc_501F
		inc	[bp+var_2]

loc_501F:
		mov	ax, cx
		dec	cx
		or	ax, ax
		jnz	short loc_5010
		jmp	short loc_503E
; ---------------------------------------------------------------------------

loc_5028:
		les	bx, [bp+var_6]
		inc	word ptr [bp+var_6]
		cmp	byte ptr es:[bx], 0Ah
		jnz	short loc_5037
		inc	[bp+var_2]

loc_5037:
		mov	ax, cx
		dec	cx
		or	ax, ax
		jnz	short loc_5028

loc_503E:
		mov	ax, [bp+var_2]
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn	4
sub_4FC0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl fseek(FILE *stream, __int32 offset, int whence)
_fseek		proc far

stream		= dword	ptr  6
_offset		= dword	ptr  0Ah
whence		= word ptr  0Eh

		push	bp
		mov	bp, sp
		push	si
		push	di
		push	word ptr [bp+stream+2]
		push	word ptr [bp+stream] ; stream
		nop
		push	cs
		call	near ptr _fflush
		pop	cx
		pop	cx
		or	ax, ax
		jz	short loc_5064
		mov	ax, 0FFFFh
		jmp	short loc_50C7
; ---------------------------------------------------------------------------

loc_5064:
		cmp	[bp+whence], 1
		jnz	short loc_5081
		les	bx, [bp+stream]
		cmp	word ptr es:[bx], 0
		jle	short loc_5081
		push	word ptr [bp+stream+2]
		push	bx
		call	sub_4FC0
		cwd
		sub	word ptr [bp+_offset], ax
		sbb	word ptr [bp+_offset+2],	dx

loc_5081:
		les	bx, [bp+stream]
		and	word ptr es:[bx+2], 0FE5Fh
		mov	word ptr es:[bx], 0
		mov	dx, es:[bx+0Ah]
		mov	ax, es:[bx+8]
		mov	es:[bx+0Eh], dx
		mov	es:[bx+0Ch], ax
		push	[bp+whence]	; fromwhere
		push	word ptr [bp+_offset+2]
		push	word ptr [bp+_offset] ; offset
		mov	al, es:[bx+4]
		cbw
		push	ax		; handle
		nop
		push	cs
		call	near ptr _lseek
		add	sp, 8
		cmp	dx, 0FFFFh
		jnz	short loc_50C5
		cmp	ax, 0FFFFh
		jnz	short loc_50C5
		mov	ax, 0FFFFh
		jmp	short loc_50C7
; ---------------------------------------------------------------------------

loc_50C5:
		xor	ax, ax

loc_50C7:
		pop	di
		pop	si
		pop	bp
		retf
_fseek		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; __int32 __cdecl ftell(FILE *stream)
_ftell		proc far

var_8		= word ptr -8
var_6		= word ptr -6
_offset		= dword	ptr -4
stream		= dword	ptr  6

		push	bp
		mov	bp, sp
		sub	sp, 8
		push	si
		push	di
		mov	ax, 1
		push	ax		; fromwhere
		xor	ax, ax
		push	ax
		push	ax		; offset
		les	bx, [bp+stream]
		mov	al, es:[bx+4]
		cbw
		push	ax		; handle
		nop
		push	cs
		call	near ptr _lseek
		add	sp, 8
		mov	word ptr [bp+_offset+2],	dx
		mov	word ptr [bp+_offset], ax
		cmp	dx, 0FFFFh
		jnz	short loc_50FF
		cmp	ax, 0FFFFh
		jnz	short loc_50FF
		jmp	loc_51A0
; ---------------------------------------------------------------------------

loc_50FF:
		les	bx, [bp+stream]
		cmp	word ptr es:[bx], 0
		jl	short loc_510B
		jmp	loc_5190
; ---------------------------------------------------------------------------

loc_510B:
		mov	al, es:[bx+4]
		cbw
		add	ax, ax
		mov	bx, ax
		test	byte ptr [bx+0ACBh], 8
		jz	short loc_517E
		mov	ax, 2
		push	ax		; fromwhere
		xor	ax, ax
		push	ax
		push	ax		; offset
		mov	bx, word ptr [bp+stream]
		mov	al, es:[bx+4]
		cbw
		push	ax		; handle
		nop
		push	cs
		call	near ptr _lseek
		add	sp, 8
		mov	[bp+var_6], dx
		mov	[bp+var_8], ax
		cmp	dx, 0FFFFh
		jnz	short loc_5146
		cmp	ax, 0FFFFh
		jnz	short loc_5146
		jmp	short loc_51A6
; ---------------------------------------------------------------------------

loc_5146:
		xor	ax, ax
		push	ax		; fromwhere
		push	word ptr [bp+_offset+2]
		push	word ptr [bp+_offset] ; offset
		les	bx, [bp+stream]
		mov	al, es:[bx+4]
		cbw
		push	ax		; handle
		nop
		push	cs
		call	near ptr _lseek
		add	sp, 8
		cmp	dx, 0FFFFh
		jnz	short loc_5172
		cmp	ax, 0FFFFh
		jnz	short loc_5172
		mov	dx, 0FFFFh
		mov	ax, 0FFFFh
		jmp	short loc_51A6
; ---------------------------------------------------------------------------

loc_5172:
		mov	dx, [bp+var_6]
		mov	ax, [bp+var_8]
		mov	word ptr [bp+_offset+2],	dx
		mov	word ptr [bp+_offset], ax

loc_517E:
		push	word ptr [bp+stream+2]
		push	word ptr [bp+stream]
		call	sub_4FC0
		cwd
		add	word ptr [bp+_offset], ax
		adc	word ptr [bp+_offset+2],	dx
		jmp	short loc_51A0
; ---------------------------------------------------------------------------

loc_5190:
		push	word ptr [bp+stream+2]
		push	word ptr [bp+stream]
		call	sub_4FC0
		cwd
		sub	word ptr [bp+_offset], ax
		sbb	word ptr [bp+_offset+2],	dx

loc_51A0:
		mov	dx, word ptr [bp+_offset+2]
		mov	ax, word ptr [bp+_offset]

loc_51A6:
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
_ftell		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_51AC	proc near

arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, [bp+arg_0]
		cmp	ax, 5Ch	; '\'
		jz	short loc_51BE
		cmp	ax, 2Fh	; '/'
		jnz	short loc_51C3

loc_51BE:
		mov	ax, 1
		jmp	short loc_51C5
; ---------------------------------------------------------------------------

loc_51C3:
		xor	ax, ax

loc_51C5:
		pop	di
		pop	si
		pop	bp
		retn	2
sub_51AC	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_51CB	proc near
					; sub_5205+15Bp ...

arg_0		= dword	ptr  4
arg_4		= word ptr  8
arg_6		= word ptr  0Ah

		push	bp
		mov	bp, sp
		push	si
		push	di
		les	bx, [bp+arg_0]
		mov	al, es:[bx]
		mov	ah, 0
		push	ax
		call	sub_51AC
		or	ax, ax
		jz	short loc_51FD
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		push	[bp+arg_6]
		push	[bp+arg_4]
		nop
		push	cs
		call	near ptr sub_4E20
		add	sp, 8
		or	ax, ax
		jz	short loc_51FD
		mov	ax, 1
		jmp	short loc_51FF
; ---------------------------------------------------------------------------

loc_51FD:
		xor	ax, ax

loc_51FF:
		pop	di
		pop	si
		pop	bp
		retn	8
sub_51CB	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_5205	proc far

drive		= word ptr -12h
var_10		= word ptr -10h
var_E		= word ptr -0Eh
src		= dword	ptr -0Ch
dest		= dword	ptr -8
s		= dword	ptr -4
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch
arg_8		= word ptr  0Eh

		push	bp
		mov	bp, sp
		sub	sp, 12h
		push	si
		push	di
		mov	ax, 0A1h ; '¡'
		push	ax
		nop
		push	cs
		call	near ptr _malloc
		pop	cx
		mov	word ptr [bp+s+2], dx
		mov	word ptr [bp+s], ax
		or	ax, dx
		jnz	short loc_5224
		jmp	loc_5467
; ---------------------------------------------------------------------------

loc_5224:
		mov	dx, [bp+arg_6]
		mov	ax, [bp+arg_4]
		mov	word ptr [bp+src+2], dx
		mov	word ptr [bp+src], ax
		les	bx, [bp+src]
		mov	al, es:[bx]
		cbw
		mov	bx, ax
		test	byte ptr [bx+0B69h], 0Ch
		jz	short loc_5264
		mov	bx, word ptr [bp+src]
		cmp	byte ptr es:[bx+1], 3Ah	; ':'
		jnz	short loc_5264
		mov	al, es:[bx]
		cbw
		mov	[bp+var_10], ax
		push	ax
		nop
		push	cs
		call	near ptr sub_4117
		pop	cx
		add	ax, 0FFC0h
		mov	[bp+drive], ax
		add	word ptr [bp+src], 2
		jmp	short loc_527A
; ---------------------------------------------------------------------------

loc_5264:
		push	ss
		lea	ax, [bp+drive]
		push	ax		; drive
		nop
		push	cs
		call	near ptr __dos_getdrive
		pop	cx
		pop	cx
		mov	ax, [bp+drive]
		add	ax, 41h	; 'A'
		dec	ax
		mov	[bp+var_10], ax

loc_527A:
		les	bx, [bp+src]
		mov	al, es:[bx]
		cbw
		push	ax
		call	sub_51AC
		or	ax, ax
		jnz	short loc_52E2
		mov	ax, 0A1h ; '¡'
		push	ax		; len
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]	; buf
		push	[bp+drive]	; drive
		nop
		push	cs
		call	near ptr __getdcwd
		add	sp, 8
		or	ax, dx
		jnz	short loc_52B2
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]
		nop
		push	cs
		call	near ptr _farfree
		pop	cx
		pop	cx
		jmp	loc_5467
; ---------------------------------------------------------------------------

loc_52B2:
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]	; s
		nop
		push	cs
		call	near ptr _strlen
		pop	cx
		pop	cx
		mov	dx, word ptr [bp+s+2]
		add	ax, word ptr [bp+s]
		mov	word ptr [bp+dest+2], dx
		mov	word ptr [bp+dest], ax
		push	dx
		push	word ptr [bp+s]
		dec	ax
		push	dx
		push	ax
		call	sub_51CB
		or	ax, ax
		jnz	short loc_5304
		les	bx, [bp+dest]
		mov	byte ptr es:[bx], 5Ch ;	'\'
		jmp	short loc_5301
; ---------------------------------------------------------------------------

loc_52E2:
		mov	dx, word ptr [bp+s+2]
		mov	ax, word ptr [bp+s]
		mov	word ptr [bp+dest+2], dx
		mov	word ptr [bp+dest], ax
		les	bx, [bp+dest]
		mov	al, byte ptr [bp+var_10]
		mov	es:[bx], al
		inc	word ptr [bp+dest]
		les	bx, [bp+dest]
		mov	byte ptr es:[bx], 3Ah ;	':'

loc_5301:
		inc	word ptr [bp+dest]

loc_5304:
		push	word ptr [bp+src+2]
		push	word ptr [bp+src] ; src
		push	word ptr [bp+dest+2]
		push	word ptr [bp+dest] ; dest
		nop
		push	cs
		call	near ptr _strcpy
		add	sp, 8
		mov	dx, word ptr [bp+s+2]
		mov	ax, word ptr [bp+s]
		mov	word ptr [bp+dest+2], dx
		mov	word ptr [bp+dest], ax
		mov	word ptr [bp+src+2], dx
		mov	word ptr [bp+src], ax

loc_532A:
					; sub_5205+298j ...
		les	bx, [bp+src]
		inc	word ptr [bp+src]
		mov	al, es:[bx]
		cbw
		mov	[bp+var_E], ax
		or	ax, ax
		jz	short loc_5346
		push	ax
		call	sub_51AC
		or	ax, ax
		jnz	short loc_5346
		jmp	loc_5478
; ---------------------------------------------------------------------------

loc_5346:
					; sub_5205+13Cj
		les	bx, [bp+dest]
		cmp	byte ptr es:[bx-1], 2Eh	; '.'
		jnz	short loc_536D
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]
		mov	ax, word ptr [bp+dest]
		add	ax, 0FFFEh
		push	word ptr [bp+dest+2]
		push	ax
		call	sub_51CB
		or	ax, ax
		jz	short loc_536D
		sub	word ptr [bp+dest], 2
		jmp	short loc_53E4
; ---------------------------------------------------------------------------

loc_536D:
					; sub_5205+160j
		les	bx, [bp+dest]
		cmp	byte ptr es:[bx-1], 2Eh	; '.'
		jnz	short loc_53E4
		cmp	byte ptr es:[bx-2], 2Eh	; '.'
		jnz	short loc_53E4
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]
		mov	ax, word ptr [bp+dest]
		add	ax, 0FFFDh
		push	word ptr [bp+dest+2]
		push	ax
		call	sub_51CB
		or	ax, ax
		jz	short loc_53E4
		sub	word ptr [bp+dest], 3
		les	bx, [bp+dest]
		cmp	byte ptr es:[bx-1], 3Ah	; ':'
		jnz	short loc_53CD
		mov	ax, word ptr [bp+dest]
		dec	ax
		push	word ptr [bp+dest+2]
		push	ax
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]
		nop
		push	cs
		call	near ptr sub_4E20
		add	sp, 8
		or	ax, ax
		jz	short loc_53CD
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]
		nop
		push	cs
		call	near ptr _farfree
		pop	cx
		pop	cx
		jmp	loc_5467
; ---------------------------------------------------------------------------

loc_53CD:
					; sub_5205+1B6j ...
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]
		dec	word ptr [bp+dest]
		mov	ax, word ptr [bp+dest]
		push	word ptr [bp+dest+2]
		push	ax
		call	sub_51CB
		or	ax, ax
		jz	short loc_53CD

loc_53E4:
					; sub_5205+170j ...
		cmp	[bp+var_E], 0
		jz	short loc_53ED
		jmp	loc_546D
; ---------------------------------------------------------------------------

loc_53ED:
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]
		mov	ax, word ptr [bp+dest]
		dec	ax
		push	word ptr [bp+dest+2]
		push	ax
		call	sub_51CB
		or	ax, ax
		jz	short loc_5405
		dec	word ptr [bp+dest]

loc_5405:
		les	bx, [bp+dest]
		cmp	byte ptr es:[bx-1], 3Ah	; ':'
		jnz	short loc_5433
		mov	ax, word ptr [bp+dest]
		dec	ax
		push	word ptr [bp+dest+2]
		push	ax
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]
		nop
		push	cs
		call	near ptr sub_4E20
		add	sp, 8
		or	ax, ax
		jz	short loc_5433
		les	bx, [bp+dest]
		mov	byte ptr es:[bx], 5Ch ;	'\'
		inc	word ptr [bp+dest]

loc_5433:
					; sub_5205+222j
		les	bx, [bp+dest]
		mov	byte ptr es:[bx], 0
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]	; s
		nop
		push	cs
		call	near ptr _strlen
		pop	cx
		pop	cx
		inc	ax
		mov	dx, ax
		mov	ax, [bp+arg_0]
		or	ax, [bp+arg_2]
		jnz	short loc_5455
		jmp	loc_54D9
; ---------------------------------------------------------------------------

loc_5455:
		cmp	dx, [bp+arg_8]
		jbe	short loc_54B2
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]
		nop
		push	cs
		call	near ptr _farfree
		pop	cx
		pop	cx

loc_5467:
		xor	dx, dx
		xor	ax, ax
		jmp	short loc_54E8
; ---------------------------------------------------------------------------

loc_546D:
		les	bx, [bp+dest]
		mov	al, byte ptr [bp+var_E]
		mov	es:[bx], al
		jmp	short loc_54AC
; ---------------------------------------------------------------------------

loc_5478:
		les	bx, [bp+dest]
		mov	al, byte ptr [bp+var_E]
		mov	es:[bx], al
		inc	word ptr [bp+dest]
		push	[bp+var_E]
		nop
		push	cs
		call	near ptr sub_4DFB
		pop	cx
		or	ax, ax
		jnz	short loc_5494
		jmp	loc_532A
; ---------------------------------------------------------------------------

loc_5494:
		les	bx, [bp+src]
		cmp	byte ptr es:[bx], 0
		jnz	short loc_54A0
		jmp	loc_532A
; ---------------------------------------------------------------------------

loc_54A0:
		mov	al, es:[bx]
		les	bx, [bp+dest]
		mov	es:[bx], al
		inc	word ptr [bp+src]

loc_54AC:
		inc	word ptr [bp+dest]
		jmp	loc_532A
; ---------------------------------------------------------------------------

loc_54B2:
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]	; src
		push	[bp+arg_2]
		push	[bp+arg_0]	; dest
		nop
		push	cs
		call	near ptr _strcpy
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]
		nop
		push	cs
		call	near ptr _farfree
		add	sp, 0Ch
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		jmp	short loc_54E8
; ---------------------------------------------------------------------------

loc_54D9:
		push	dx
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]
		nop
		push	cs
		call	near ptr _realloc
		add	sp, 6

loc_54E8:
					; sub_5205+2D2j
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_5205	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; char *__cdecl	_getdcwd(int drive, char *buf, int len)
__getdcwd	proc far

s		= byte ptr -48h
var_47		= byte ptr -47h
var_46		= byte ptr -46h
var_45		= byte ptr -45h
var_2		= word ptr -2
drive		= word ptr  6
dest		= dword	ptr  8
len		= word ptr  0Ch

		push	bp
		mov	bp, sp
		sub	sp, 48h
		push	si
		push	di
		mov	ax, [bp+drive]
		mov	[bp+var_2], ax
		or	ax, ax
		jnz	short loc_550A
		mov	ah, 19h
		int	21h		; DOS -	GET DEFAULT DISK NUMBER
		mov	ah, 0
		inc	ax
		mov	[bp+var_2], ax

loc_550A:
		mov	al, byte ptr [bp+var_2]
		add	al, 40h	; '@'
		mov	[bp+s],	al
		mov	[bp+var_47], 3Ah ; ':'
		mov	[bp+var_46], 5Ch ; '\'
		push	ds
		mov	ax, ss
		mov	ds, ax
		lea	si, [bp+var_45]
		mov	ah, 47h	; 'G'
		mov	dl, byte ptr [bp+var_2]
		int	21h		; DOS -	2+ - GET CURRENT DIRECTORY
					; DL = drive (0=default, 1=A, etc.)
					; DS:SI	points to 64-byte buffer area
		pop	ds
		jb	short loc_5566
		push	ss
		lea	ax, [bp+s]
		push	ax		; s
		nop
		push	cs
		call	near ptr _strlen
		pop	cx
		pop	cx
		cmp	ax, [bp+len]
		jb	short loc_5545
		mov	word_E5AE, 22h ; '"'
		jmp	short loc_5566
; ---------------------------------------------------------------------------

loc_5545:
		mov	ax, word ptr [bp+dest]
		or	ax, word ptr [bp+dest+2]
		jnz	short loc_556C
		push	[bp+len]
		nop
		push	cs
		call	near ptr _malloc
		pop	cx
		mov	word ptr [bp+dest+2], dx
		mov	word ptr [bp+dest], ax
		or	ax, dx
		jnz	short loc_556C
		mov	word_E5AE, 8

loc_5566:
					; __getdcwd+55j
		xor	dx, dx
		xor	ax, ax
		jmp	short loc_5585
; ---------------------------------------------------------------------------

loc_556C:
					; __getdcwd+70j
		push	ss
		lea	ax, [bp+s]
		push	ax		; src
		push	word ptr [bp+dest+2]
		push	word ptr [bp+dest] ; dest
		nop
		push	cs
		call	near ptr _strcpy
		add	sp, 8
		mov	dx, word ptr [bp+dest+2]
		mov	ax, word ptr [bp+dest]

loc_5585:
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
__getdcwd	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; char *__cdecl	getenv(const char *name)
_getenv		proc far
					; sub_9DFF+126p

var_4		= dword	ptr -4
_name		= dword	ptr  6

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	si
		push	di
		les	di, [bp+_name]
		mov	ax, es
		or	ax, di
		jz	short loc_55BC
		mov	al, 0
		mov	ah, es:[di]
		mov	cx, 0FFFFh
		cld
		repne scasb
		not	cx
		dec	cx
		jz	short loc_55BC
		les	di, dword_F318
		mov	word ptr [bp+var_4+2], es
		mov	bx, es
		or	bx, di
		mov	word ptr [bp+var_4], di
		jnz	short loc_55C9

loc_55BC:
		xor	dx, dx
		xor	ax, ax
		jmp	short loc_55F5
; ---------------------------------------------------------------------------

loc_55C2:
		add	word ptr [bp+var_4], 4
		les	di, [bp+var_4]

loc_55C9:
		les	di, es:[di]
		mov	bx, es
		or	bx, di
		jz	short loc_55BC
		mov	al, es:[di]
		or	al, al
		jz	short loc_55BC
		cmp	ah, al
		jnz	short loc_55C2
		mov	bx, cx
		cmp	byte ptr es:[bx+di], 3Dh ; '='
		jnz	short loc_55C2
		push	ds
		lds	si, [bp+_name]
		repe cmpsb
		pop	ds
		xchg	cx, bx
		jnz	short loc_55C2
		inc	di
		mov	ax, di
		mov	dx, es

loc_55F5:
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
_getenv		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl memcmp(const void	*s1, const void	*s2, size_t n)
_memcmp		proc far

s1		= dword	ptr  6
s2		= dword	ptr  0Ah
n		= word ptr  0Eh

		push	bp
		mov	bp, sp
		push	si
		push	di
		push	ds
		mov	ax, [bp+n]
		mov	cx, ax
		jcxz	short loc_561C
		lds	si, [bp+s1]
		les	di, [bp+s2]
		cld
		repe cmpsb
		mov	al, [si-1]
		xor	ah, ah
		mov	cl, es:[di-1]
		xor	ch, ch

loc_561C:
		pop	ds
		sub	ax, cx
		pop	di
		pop	si
		pop	bp
		retf
_memcmp		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; void *__cdecl	memcpy(void *dest, const void *src, size_t n)
_memcpy		proc far

dest		= dword	ptr  6
src		= dword	ptr  0Ah
n		= word ptr  0Eh

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	dx, ds
		les	di, [bp+dest]
		lds	si, [bp+src]
		mov	cx, [bp+n]
		shr	cx, 1
		cld
		rep movsw
		jnb	short loc_563B
		movsb

loc_563B:
		mov	ds, dx
		mov	dx, word ptr [bp+dest+2]
		mov	ax, word ptr [bp+dest]
		pop	di
		pop	si
		pop	bp
		retf
_memcpy		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; void __cdecl setmem(void *dest, unsigned int length, char value)
_setmem		proc far

dest		= dword	ptr  6
_length		= word ptr  0Ah
value		= byte ptr  0Ch

		push	bp
		mov	bp, sp
		push	si
		push	di
		les	di, [bp+dest]
		mov	cx, [bp+_length]
		mov	al, [bp+value]
		mov	ah, al
		cld
		test	di, 1
		jz	short loc_5662
		jcxz	short loc_5669
		stosb
		dec	cx

loc_5662:
		shr	cx, 1
		rep stosw
		jnb	short loc_5669
		stosb

loc_5669:
		pop	di
		pop	si
		pop	bp
		retf
_setmem		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; void *__cdecl	memset(void *s,	int c, size_t n)
_memset		proc far

dest		= dword	ptr  6
value		= byte ptr  0Ah
_length		= word ptr  0Ch

		push	bp
		mov	bp, sp
		push	si
		push	di
		push	word ptr [bp+value] ; value
		push	[bp+_length]	; length
		push	word ptr [bp+dest+2]
		push	word ptr [bp+dest] ; dest
		push	cs
		call	near ptr _setmem
		add	sp, 8
		mov	dx, word ptr [bp+dest+2]
		mov	ax, word ptr [bp+dest]
		pop	di
		pop	si
		pop	bp
		retf
_memset		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; void __cdecl movmem(const void *src, void *dest, unsigned int	length)
_movmem		proc far

src		= dword	ptr  6
dest		= dword	ptr  0Ah
_length		= word ptr  0Eh

		push	bp
		mov	bp, sp
		push	si
		push	di
		push	ds
		mov	cx, word ptr [bp+dest+2]
		mov	bx, word ptr [bp+dest]
		mov	dx, word ptr [bp+src+2]
		mov	ax, word ptr [bp+src]
		call	N_PCMP@
		jnb	short loc_56AC
		std
		mov	ax, 1
		jmp	short loc_56AF
; ---------------------------------------------------------------------------

loc_56AC:
		cld
		xor	ax, ax

loc_56AF:
		lds	si, [bp+src]
		les	di, [bp+dest]
		mov	cx, [bp+_length]
		or	ax, ax
		jz	short loc_56C2
		add	si, cx
		dec	si
		add	di, cx
		dec	di

loc_56C2:
		test	di, 1
		jz	short loc_56CC
		jcxz	short loc_56DB
		movsb
		dec	cx

loc_56CC:
		sub	si, ax
		sub	di, ax
		shr	cx, 1
		rep movsw
		jnb	short loc_56DB
		add	si, ax
		add	di, ax
		movsb

loc_56DB:
		cld
		pop	ds
		pop	di
		pop	si
		pop	bp
		retf
_movmem		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; void *__cdecl	memmove(void *dest, const void *src, size_t n)
_memmove	proc far

dest		= dword	ptr  6
src		= dword	ptr  0Ah
_length		= word ptr  0Eh

		push	bp
		mov	bp, sp
		push	si
		push	di
		push	[bp+_length]	; length
		push	word ptr [bp+dest+2]
		push	word ptr [bp+dest] ; dest
		push	word ptr [bp+src+2]
		push	word ptr [bp+src] ; src
		push	cs
		call	near ptr _movmem
		add	sp, 0Ah
		mov	dx, word ptr [bp+dest+2]
		mov	ax, word ptr [bp+dest]
		pop	di
		pop	si
		pop	bp
		retf
_memmove	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; void __cdecl _searchenv(const	char *file, const char *varname, char *pathname)
__searchenv	proc far

var_4		= dword	ptr -4
src		= dword	ptr  6
varname		= dword	ptr  0Ah
pathname	= dword	ptr  0Eh

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	si
		push	di
		push	word ptr [bp+varname+2]
		push	word ptr [bp+varname] ;	name
		nop
		push	cs
		call	near ptr _getenv
		pop	cx
		pop	cx
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		or	ax, dx
		jnz	short loc_572D
		mov	word ptr [bp+var_4+2], ds
		mov	word ptr [bp+var_4], 0DCCh

loc_572D:
		push	word ptr [bp+pathname+2]
		push	word ptr [bp+pathname] ; pathname
		push	word ptr [bp+var_4+2]
		push	word ptr [bp+var_4] ; __int32
		push	word ptr [bp+src+2]
		push	word ptr [bp+src] ; src
		nop
		push	cs
		call	near ptr sub_574D
		add	sp, 0Ch
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
__searchenv	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl __far sub_574D(char *src,	__int32, char *pathname)
sub_574D	proc far

var_4		= word ptr -4
var_2		= word ptr -2
src		= dword	ptr  6
arg_4		= dword	ptr  0Ah
pathname	= dword	ptr  0Eh

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	si
		push	di
		mov	ax, 50h	; 'P'
		push	ax		; len
		push	word ptr [bp+pathname+2]
		push	word ptr [bp+pathname] ; buf
		xor	ax, ax
		push	ax		; drive
		nop
		push	cs
		call	near ptr __getdcwd
		add	sp, 8
		or	ax, dx
		jnz	short loc_5772
		xor	dx, dx
		jmp	short loc_5781
; ---------------------------------------------------------------------------

loc_5772:
		push	word ptr [bp+pathname+2]
		push	word ptr [bp+pathname] ; s
		nop
		push	cs
		call	near ptr _strlen
		pop	cx
		pop	cx
		mov	dx, ax

loc_5781:
		les	bx, [bp+pathname]
		add	bx, dx
		mov	byte ptr es:[bx], 0
		or	dx, dx
		jz	short loc_57D6
		mov	bx, dx
		add	bx, word ptr [bp+pathname]
		mov	bl, es:[bx-1]
		mov	al, bl
		cmp	al, 5Ch	; '\'
		jz	short loc_57A7
		cmp	bl, 2Fh	; '/'
		jz	short loc_57A7
		cmp	bl, 3Ah	; ':'
		jnz	short loc_57C3

loc_57A7:
		mov	ax, word ptr [bp+pathname]
		add	ax, dx
		dec	ax
		push	word ptr [bp+pathname+2]
		push	ax
		push	word ptr [bp+pathname+2]
		push	word ptr [bp+pathname]
		nop
		push	cs
		call	near ptr sub_4E20
		add	sp, 8
		or	ax, ax
		jnz	short loc_57D6

loc_57C3:
		push	ds
		mov	ax, 0DCEh
		push	ax		; src
		push	word ptr [bp+pathname+2]
		push	word ptr [bp+pathname] ; dest
		nop
		push	cs
		call	near ptr _strcat
		add	sp, 8

loc_57D6:
		push	word ptr [bp+src+2]
		push	word ptr [bp+src] ; src
		push	word ptr [bp+pathname+2]
		push	word ptr [bp+pathname] ; dest
		nop
		push	cs
		call	near ptr _strcat
		add	sp, 8
		xor	ax, ax
		push	ax		; char
		push	word ptr [bp+pathname+2]
		push	word ptr [bp+pathname] ; pathname
		nop
		push	cs
		call	near ptr __access
		add	sp, 6
		or	ax, ax
		jz	short loc_584A
		les	bx, [bp+arg_4]
		cmp	byte ptr es:[bx], 0
		jnz	short loc_5811
		les	bx, [bp+pathname]
		mov	byte ptr es:[bx], 0
		jmp	short loc_5889
; ---------------------------------------------------------------------------

loc_5811:
		xor	dx, dx
		jmp	short loc_5829
; ---------------------------------------------------------------------------

loc_5815:
		les	bx, [bp+pathname]
		add	bx, dx
		push	es
		les	si, [bp+arg_4]
		mov	al, es:[si]
		pop	es
		mov	es:[bx], al
		inc	word ptr [bp+arg_4]
		inc	dx

loc_5829:
		les	bx, [bp+arg_4]
		cmp	byte ptr es:[bx], 3Bh ;	';'
		jz	short loc_5838
		cmp	byte ptr es:[bx], 0
		jnz	short loc_5815

loc_5838:
		les	bx, [bp+arg_4]
		cmp	byte ptr es:[bx], 0
		jnz	short loc_5844
		jmp	loc_5781
; ---------------------------------------------------------------------------

loc_5844:
		inc	word ptr [bp+arg_4]
		jmp	loc_5781
; ---------------------------------------------------------------------------

loc_584A:
		mov	ax, 50h	; 'P'
		push	ax
		push	word ptr [bp+pathname+2]
		push	word ptr [bp+pathname]
		xor	ax, ax
		push	ax
		push	ax
		nop
		push	cs
		call	near ptr sub_5205
		add	sp, 0Ah
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		or	ax, dx
		jz	short loc_5889
		push	[bp+var_2]
		push	[bp+var_4]	; src
		push	word ptr [bp+pathname+2]
		push	word ptr [bp+pathname] ; dest
		nop
		push	cs
		call	near ptr _strcpy
		push	[bp+var_2]
		push	[bp+var_4]
		nop
		push	cs
		call	near ptr _farfree
		add	sp, 0Ch

loc_5889:
					; sub_574D+11Bj
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_574D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl setvbuf(FILE *stream, char *buf, int type, size_t	size)
_setvbuf	proc far

stream		= dword	ptr  6
buf		= dword	ptr  0Ah
_type		= word ptr  0Eh
_size		= word ptr  10h

		push	bp
		mov	bp, sp
		push	si
		push	di
		les	bx, [bp+stream]
		mov	ax, es:[bx+12h]
		cmp	ax, word ptr [bp+stream]
		jz	short loc_58A3
		jmp	loc_597A
; ---------------------------------------------------------------------------

loc_58A3:
		cmp	[bp+_type], 2
		jle	short loc_58AC
		jmp	loc_597A
; ---------------------------------------------------------------------------

loc_58AC:
		cmp	[bp+_size], 7FFFh
		jbe	short loc_58B6
		jmp	loc_597A
; ---------------------------------------------------------------------------

loc_58B6:
		cmp	word_F302, 0
		jnz	short loc_58CC
		cmp	word ptr [bp+stream], 94Ch
		jnz	short loc_58CC
		mov	word_F302, 1
		jmp	short loc_58E0
; ---------------------------------------------------------------------------

loc_58CC:
		cmp	word_F300, 0
		jnz	short loc_58E0
		cmp	word ptr [bp+stream], 938h
		jnz	short loc_58E0
		mov	word_F300, 1

loc_58E0:
		les	bx, [bp+stream]
		cmp	word ptr es:[bx], 0
		jz	short loc_58FD
		mov	ax, 1
		push	ax		; whence
		xor	ax, ax
		push	ax
		push	ax		; offset
		push	word ptr [bp+stream+2]
		push	bx		; stream
		nop
		push	cs
		call	near ptr _fseek
		add	sp, 0Ah

loc_58FD:
		les	bx, [bp+stream]
		test	byte ptr es:[bx+2], 4
		jz	short loc_5916
		push	word ptr es:[bx+0Ah]
		push	word ptr es:[bx+8]
		nop
		push	cs
		call	near ptr _farfree
		pop	cx
		pop	cx

loc_5916:
		les	bx, [bp+stream]
		and	word ptr es:[bx+2], 0FFF3h
		mov	word ptr es:[bx+6], 0
		mov	dx, word ptr [bp+stream+2]
		mov	ax, word ptr [bp+stream]
		add	ax, 5
		mov	es:[bx+0Ah], dx
		mov	es:[bx+8], ax
		mov	es:[bx+0Eh], dx
		mov	es:[bx+0Ch], ax
		cmp	[bp+_type], 2
		jz	short loc_59AA
		cmp	[bp+_size], 0
		jbe	short loc_59AA
		mov	word ptr off_EE5C+2, seg seg000
		mov	word ptr off_EE5C, 5CB8h
		mov	ax, word ptr [bp+buf]
		or	ax, word ptr [bp+buf+2]
		jnz	short loc_597F
		push	[bp+_size]
		nop
		push	cs
		call	near ptr _malloc
		pop	cx
		mov	word ptr [bp+buf+2], dx
		mov	word ptr [bp+buf], ax
		or	ax, dx
		jz	short loc_597A
		les	bx, [bp+stream]
		or	word ptr es:[bx+2], 4
		jmp	short loc_597F
; ---------------------------------------------------------------------------

loc_597A:
		mov	ax, 0FFFFh
		jmp	short loc_59AC
; ---------------------------------------------------------------------------

loc_597F:
		les	bx, [bp+stream]
		mov	dx, word ptr [bp+buf+2]
		mov	ax, word ptr [bp+buf]
		mov	es:[bx+0Eh], dx
		mov	es:[bx+0Ch], ax
		mov	es:[bx+0Ah], dx
		mov	es:[bx+8], ax
		mov	ax, [bp+_size]
		mov	es:[bx+6], ax
		cmp	[bp+_type], 1
		jnz	short loc_59AA
		or	word ptr es:[bx+2], 8

loc_59AA:
		xor	ax, ax

loc_59AC:
		pop	di
		pop	si
		pop	bp
		retf
_setvbuf	endp

include libs/BorlandC/_strcat.asm
include libs/BorlandC/_strcmp.asm
include libs/BorlandC/_strcpy.asm
include libs/BorlandC/_stricmp.asm
include libs/BorlandC/_strlen.asm
include libs/BorlandC/strrchr.asm

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl __far __write(int	handle,	void *buf, unsigned int	len)
___write	proc far

var_90		= byte ptr -90h
var_E		= dword	ptr -0Eh
var_9		= byte ptr -9
var_8		= word ptr -8
var_6		= dword	ptr -6
var_2		= word ptr -2
handle		= word ptr  6
buf		= dword	ptr  8
len		= word ptr  0Ch

		push	bp
		mov	bp, sp
		sub	sp, 90h
		push	si
		push	di
		mov	ax, [bp+handle]
		cmp	ax, word_EFF8
		jb	short loc_5B13
		mov	ax, 6
		push	ax
		call	__IOERROR
		jmp	loc_5C57
; ---------------------------------------------------------------------------

loc_5B13:
		mov	ax, [bp+len]
		inc	ax
		cmp	ax, 2
		jnb	short loc_5B21
		xor	ax, ax
		jmp	loc_5C57
; ---------------------------------------------------------------------------

loc_5B21:
		mov	bx, [bp+handle]
		add	bx, bx
		test	byte ptr [bx+0ACBh], 8
		jz	short loc_5B40
		mov	ax, 2
		push	ax		; fromwhere
		xor	ax, ax
		push	ax
		push	ax		; offset
		push	[bp+handle]	; handle
		nop
		push	cs
		call	near ptr _lseek
		add	sp, 8

loc_5B40:
		mov	bx, [bp+handle]
		add	bx, bx
		test	byte ptr [bx+0ACBh], 40h
		jnz	short loc_5B63
		push	[bp+len]	; len
		push	word ptr [bp+buf+2]
		push	word ptr [bp+buf] ; buf
		push	[bp+handle]	; handle
		nop
		push	cs
		call	near ptr __rtl_write
		add	sp, 8
		jmp	loc_5C57
; ---------------------------------------------------------------------------

loc_5B63:
		mov	bx, [bp+handle]
		add	bx, bx
		and	word ptr [bx+0ACAh], 0FDFFh
		mov	dx, word ptr [bp+buf+2]
		mov	ax, word ptr [bp+buf]
		mov	word ptr [bp+var_E+2], dx
		mov	word ptr [bp+var_E], ax
		mov	ax, [bp+len]
		mov	[bp+var_8], ax
		jmp	short loc_5BFD
; ---------------------------------------------------------------------------

loc_5B82:
		dec	[bp+var_8]
		les	bx, [bp+var_E]
		inc	word ptr [bp+var_E]
		mov	al, es:[bx]
		mov	[bp+var_9], al
		cmp	al, 0Ah
		jnz	short loc_5B9F
		les	bx, [bp+var_6]
		mov	byte ptr es:[bx], 0Dh
		inc	word ptr [bp+var_6]

loc_5B9F:
		les	bx, [bp+var_6]
		mov	al, [bp+var_9]
		mov	es:[bx], al
		inc	word ptr [bp+var_6]
		lea	ax, [bp+var_90]
		mov	dx, word ptr [bp+var_6]
		xor	bx, bx
		sub	dx, ax
		sbb	bx, 0
		or	bx, bx
		jl	short loc_5C07
		jnz	short loc_5BC5
		cmp	dx, 80h	; ''
		jb	short loc_5C07

loc_5BC5:
		lea	ax, [bp+var_90]
		mov	dx, word ptr [bp+var_6]
		xor	bx, bx
		sub	dx, ax
		sbb	bx, 0
		mov	[bp+var_2], dx
		push	dx		; len
		push	ss
		push	ax		; buf
		push	[bp+handle]	; handle
		nop
		push	cs
		call	near ptr __rtl_write
		add	sp, 8
		mov	dx, ax
		cmp	ax, [bp+var_2]
		jz	short loc_5BFD
		cmp	dx, 0FFFFh
		jnz	short loc_5BF5
		mov	ax, 0FFFFh
		jmp	short loc_5C52
; ---------------------------------------------------------------------------

loc_5BF5:
		mov	ax, [bp+len]
		sub	ax, [bp+var_8]
		jmp	short loc_5C4D
; ---------------------------------------------------------------------------

loc_5BFD:
		lea	ax, [bp+var_90]
		mov	word ptr [bp+var_6+2], ss
		mov	word ptr [bp+var_6], ax

loc_5C07:
		cmp	[bp+var_8], 0
		jz	short loc_5C10
		jmp	loc_5B82
; ---------------------------------------------------------------------------

loc_5C10:
		lea	ax, [bp+var_90]
		mov	dx, word ptr [bp+var_6]
		xor	bx, bx
		sub	dx, ax
		sbb	bx, 0
		mov	[bp+var_2], dx
		mov	ax, dx
		or	ax, ax
		jbe	short loc_5C54
		push	dx		; len
		push	ss
		lea	ax, [bp+var_90]
		push	ax		; buf
		push	[bp+handle]	; handle
		nop
		push	cs
		call	near ptr __rtl_write
		add	sp, 8
		mov	dx, ax
		cmp	ax, [bp+var_2]
		jz	short loc_5C54
		cmp	dx, 0FFFFh
		jnz	short loc_5C4A
		mov	ax, 0FFFFh
		jmp	short loc_5C52
; ---------------------------------------------------------------------------

loc_5C4A:
		mov	ax, [bp+len]

loc_5C4D:
		add	ax, dx
		sub	ax, [bp+var_2]

loc_5C52:
					; ___write+151j
		jmp	short loc_5C57
; ---------------------------------------------------------------------------

loc_5C54:
					; ___write+147j
		mov	ax, [bp+len]

loc_5C57:
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
___write	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl _rtl_write(int handle, const void	*buf, unsigned int len)
__rtl_write	proc far
					; ___write+63p	...

handle		= word ptr  6
buf		= dword	ptr  8
len		= word ptr  0Ch

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	bx, [bp+handle]
		add	bx, bx
		test	byte ptr [bx+0ACAh], 1
		jz	short loc_5C74
		mov	ax, 5
		push	ax
		jmp	short loc_5C95
; ---------------------------------------------------------------------------

loc_5C74:
		push	ds
		mov	ah, 40h	; '@'
		mov	bx, [bp+handle]
		mov	cx, [bp+len]
		lds	dx, [bp+buf]
		int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
					; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer
		pop	ds
		jb	short loc_5C94
		push	ax
		mov	bx, [bp+handle]
		add	bx, bx
		or	word ptr [bx+0ACAh], 1000h
		pop	ax
		jmp	short loc_5C98
; ---------------------------------------------------------------------------

loc_5C94:
		push	ax

loc_5C95:
		call	__IOERROR

loc_5C98:
		pop	di
		pop	si
		pop	bp
		retf
__rtl_write	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl _write(int handle, const void *buf, unsigned int len)
__write		proc far

handle		= word ptr  6
buf		= dword	ptr  8
len		= word ptr  0Ch

		push	bp
		mov	bp, sp
		push	si
		push	di
		push	[bp+len]	; len
		push	word ptr [bp+buf+2]
		push	word ptr [bp+buf] ; buf
		push	[bp+handle]	; handle
		push	cs
		call	near ptr __rtl_write
		add	sp, 8
		pop	di
		pop	si
		pop	bp
		retf
__write		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__xfflush	proc far

var_6		= word ptr -6
stream		= dword	ptr -4

		push	bp
		mov	bp, sp
		sub	sp, 6
		push	si
		push	di
		mov	[bp+var_6], 4
		mov	word ptr [bp+stream+2],	ds
		mov	word ptr [bp+stream], 938h
		jmp	short loc_5CEB
; ---------------------------------------------------------------------------

loc_5CCF:
		les	bx, [bp+stream]
		test	byte ptr es:[bx+2], 3
		jz	short loc_5CE4
		push	word ptr [bp+stream+2]
		push	bx		; stream
		nop
		push	cs
		call	near ptr _fflush
		pop	cx
		pop	cx

loc_5CE4:
		dec	[bp+var_6]
		add	word ptr [bp+stream], 14h

loc_5CEB:
		cmp	[bp+var_6], 0
		jnz	short loc_5CCF
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
__xfflush	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; xalloc::xalloc(string	const &, unsigned int)
@xalloc@$bctr$qmx6stringui proc	far

arg_0		= dword	ptr  6
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch
arg_8		= word ptr  0Eh

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, word ptr [bp+arg_0]
		or	ax, word ptr [bp+arg_0+2]
		jnz	short loc_5D18
		mov	ax, 6
		push	ax
		nop
		push	cs
		call	near ptr @$bnew$qui ; operator new(uint)
		pop	cx
		mov	word ptr [bp+arg_0+2], dx
		mov	word ptr [bp+arg_0], ax
		or	ax, dx
		jz	short loc_5D36

loc_5D18:
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		nop
		push	cs
		call	near ptr @xmsg@$bctr$qmx6string	; xmsg::xmsg(string &)
		add	sp, 8
		les	bx, [bp+arg_0]
		mov	ax, [bp+arg_8]
		mov	es:[bx+4], ax

loc_5D36:
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		add	word ptr es:[bx], 1
		adc	word ptr es:[bx+2], 0
		mov	dx, word ptr [bp+arg_0+2]
		mov	ax, word ptr [bp+arg_0]
		pop	di
		pop	si
		pop	bp
		retf
@xalloc@$bctr$qmx6stringui endp

; ---------------------------------------------------------------------------
		dd byte_5E31
		db 4 dup(0), 31h, 5Eh
		dw seg seg000
		db 4, 0, 0FAh, 0FFh, 6 dup(0), 52h, 5Dh
		dw seg seg000
		db 0DCh, 0FFh, 2 dup(0), 5, 3 dup(0), 5Ah, 5Dh

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; xalloc::raise(void)
@xalloc@raise$qv proc far
					; sub_E0BA+4DP	...

var_28		= dword	ptr -28h
src		= byte ptr -6
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		sub	sp, 28h
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 5D68h
		nop
		push	cs
		call	near ptr ___InitExceptBlocks
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		push	ax		; int
		push	ax		; int
		mov	ax, 5
		push	ax		; int
		mov	ax, seg	seg000
		push	ax		; int
		mov	ax, 5DEEh
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		mov	word ptr [bp+var_28+2],	dx
		mov	word ptr [bp+var_28], ax
		push	dx
		push	ax
		push	ss
		lea	ax, [bp+src]
		push	ax
		nop
		push	cs
		call	near ptr @xmsg@$bctr$qmx4xmsg ;	xmsg::xmsg(xmsg	&)
		add	sp, 8
		les	bx, [bp+var_28]
		mov	ax, es:[bx+4]
		mov	[bp+var_2], ax
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		add	word ptr es:[bx], 1
		adc	word ptr es:[bx+2], 0
		lea	ax, [bp+src]
		push	ss
		push	ax		; src
		push	cs		; int
		mov	ax, 5E31h
		push	ax		; int
		nop
		push	cs
		call	near ptr @_ThrowException$qnvt1t1t1uiuiuinuc ; _ThrowException(void *,void *,void *,void *,uint,uint,uint,uchar	*)
		add	sp, 1Ah
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@xalloc@raise$qv endp

; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		push	word ptr [bp+0Ch]
		push	word ptr [bp+0Ah]
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	near ptr @xmsg@$bctr$qmx4xmsg ;	xmsg::xmsg(xmsg	&)
		add	sp, 8
		les	bx, [bp+0Ah]
		mov	ax, es:[bx+4]
		les	bx, [bp+6]
		mov	es:[bx+4], ax
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		add	word ptr es:[bx], 1
		adc	word ptr es:[bx+2], 0
		mov	dx, [bp+8]
		mov	ax, [bp+6]
		pop	di
		pop	si
		pop	bp
		retf
; ---------------------------------------------------------------------------
byte_5E31	db 6, 0, 3, 0, 26h, 0, 2 dup(0FFh), 7, 0, 2Eh, 0, 3Ah
		db 0Dh dup(0), 2, 0, 2,	0, 73h,	5Eh
		dw seg seg000
		db 5, 0, 3Eh, 0, 78h, 61h, 2 dup(6Ch), 6Fh, 63h, 2 dup(0)
		db 0C0h, 5Eh
		dw seg seg000
		db 2 dup(0), 3,	0Dh dup(0)
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, [bp+6]
		or	ax, [bp+8]
		jz	short loc_5EBA
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		sub	word ptr es:[bx], 1
		sbb	word ptr es:[bx+2], 0
		xor	ax, ax
		push	ax
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	near ptr @xmsg@$bdtr$qv	; xmsg::~xmsg(void)
		add	sp, 6
		test	byte ptr [bp+0Ah], 1
		jz	short loc_5EB8
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	near ptr _registerbgidriver
		pop	cx
		pop	cx
		jmp	short loc_5EBC
; ---------------------------------------------------------------------------

loc_5EB8:
		jmp	short loc_5EBC
; ---------------------------------------------------------------------------

loc_5EBA:
		xor	ax, ax

loc_5EBC:
					; seg000:loc_5EB8j
		pop	di
		pop	si
		pop	bp
		retf
; ---------------------------------------------------------------------------
		db 4, 0, 3, 0, 26h, 0, 2 dup(0FFh), 3, 0, 2Ch, 0, 30h
		db 0Dh dup(0), 1, 0, 1,	0, 92h,	60h
		dw seg seg000
		db 5, 0, 34h, 0, 78h, 6Dh, 73h,	67h, 0Eh dup(0), 66h, 62h
		dw seg seg000
		db 87h,	20h, 0FCh, 0FFh, 0Ah dup(0), 0DEh, 0FFh, 2 dup(0)
		db 5, 3	dup(0),	2 dup(0FFh), 6,	0, 5, 3	dup(0),	0F8h, 5Eh

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; xmsg::xmsg(string const &)
@xmsg@$bctr$qmx6string proc far
					; string::assert_element(uint)+6AP ...

var_22		= word ptr -22h
var_16		= word ptr -16h
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  6
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

		push	bp
		mov	bp, sp
		sub	sp, 22h
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 5F06h
		nop
		push	cs
		call	near ptr ___InitExceptBlocks
		mov	ax, word ptr [bp+arg_0]
		or	ax, word ptr [bp+arg_0+2]
		jnz	short loc_5F4B
		mov	ax, 4
		push	ax
		nop
		push	cs
		call	near ptr @$bnew$qui ; operator new(uint)
		pop	cx
		mov	word ptr [bp+arg_0+2], dx
		mov	word ptr [bp+arg_0], ax
		or	ax, dx
		jz	short loc_5F9D

loc_5F4B:
		mov	ax, 4
		push	ax
		nop
		push	cs
		call	near ptr @$bnew$qui ; operator new(uint)
		pop	cx
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		or	ax, dx
		jz	short loc_5F8D
		mov	[bp+var_16], 0Eh
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	dx
		push	[bp+var_4]
		call	@string@$bctr$qmx6string ; string::string(string &)
		add	sp, 8
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		sub	word ptr es:[bx], 1
		sbb	word ptr es:[bx+2], 0
		mov	[bp+var_16], 6

loc_5F8D:
		mov	dx, [bp+var_2]
		mov	ax, [bp+var_4]
		les	bx, [bp+arg_0]
		mov	es:[bx+2], dx
		mov	es:[bx], ax

loc_5F9D:
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		add	word ptr es:[bx], 1
		adc	word ptr es:[bx+2], 0
		push	[bp+var_22]
		nop
		push	cs
		call	near ptr ___ExitExceptBlocks
		mov	dx, word ptr [bp+arg_0+2]
		mov	ax, word ptr [bp+arg_0]
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@xmsg@$bctr$qmx6string endp

; ---------------------------------------------------------------------------
		dd byte_6266
		db 87h,	20h, 0FCh, 0FFh, 0Ah dup(0), 0DEh, 0FFh, 2 dup(0)
		db 5, 3	dup(0),	2 dup(0FFh), 6,	0, 5, 3	dup(0),	0C3h, 5Fh

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; xmsg::xmsg(xmsg const	&)
@xmsg@$bctr$qmx4xmsg proc far

var_22		= word ptr -22h
var_16		= word ptr -16h
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  6
arg_4		= dword	ptr  0Ah

		push	bp
		mov	bp, sp
		sub	sp, 22h
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 5FD1h
		nop
		push	cs
		call	near ptr ___InitExceptBlocks
		mov	ax, word ptr [bp+arg_0]
		or	ax, word ptr [bp+arg_0+2]
		jnz	short loc_6016
		mov	ax, 4
		push	ax
		nop
		push	cs
		call	near ptr @$bnew$qui ; operator new(uint)
		pop	cx
		mov	word ptr [bp+arg_0+2], dx
		mov	word ptr [bp+arg_0], ax
		or	ax, dx
		jz	short loc_606C

loc_6016:
		mov	ax, 4
		push	ax
		nop
		push	cs
		call	near ptr @$bnew$qui ; operator new(uint)
		pop	cx
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		or	ax, dx
		jz	short loc_605C
		mov	[bp+var_16], 0Eh
		les	bx, [bp+arg_4]
		push	word ptr es:[bx+2]
		push	word ptr es:[bx]
		push	dx
		push	[bp+var_4]
		call	@string@$bctr$qmx6string ; string::string(string &)
		add	sp, 8
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		sub	word ptr es:[bx], 1
		sbb	word ptr es:[bx+2], 0
		mov	[bp+var_16], 6

loc_605C:
		mov	dx, [bp+var_2]
		mov	ax, [bp+var_4]
		les	bx, [bp+arg_0]
		mov	es:[bx+2], dx
		mov	es:[bx], ax

loc_606C:
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		add	word ptr es:[bx], 1
		adc	word ptr es:[bx+2], 0
		push	[bp+var_22]
		nop
		push	cs
		call	near ptr ___ExitExceptBlocks
		mov	dx, word ptr [bp+arg_0+2]
		mov	ax, word ptr [bp+arg_0]
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@xmsg@$bctr$qmx4xmsg endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl __far xmsg___xmsg(void (*driver)(void), char)
@xmsg@$bdtr$qv	proc far

driver		= dword	ptr  6
arg_4		= byte ptr  0Ah

		push	bp
		mov	bp, sp
		push	si
		push	di
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		sub	word ptr es:[bx], 1
		sbb	word ptr es:[bx+2], 0
		mov	ax, word ptr [bp+driver]
		or	ax, word ptr [bp+driver+2]
		jz	short loc_60EC
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		add	word ptr es:[bx], 1
		adc	word ptr es:[bx+2], 0
		mov	ax, 3
		push	ax		; char
		les	bx, [bp+driver]
		push	word ptr es:[bx+2]
		push	word ptr es:[bx] ; driver
		call	@string@$bdtr$qv ; string::~string(void)
		add	sp, 6
		test	[bp+arg_4], 1
		jz	short loc_60EC
		push	word ptr [bp+driver+2]
		push	word ptr [bp+driver] ; driver
		nop
		push	cs
		call	near ptr _registerbgidriver
		pop	cx
		pop	cx

loc_60EC:
					; xmsg::~xmsg(void)+4Bj
		pop	di
		pop	si
		pop	bp
		retf
@xmsg@$bdtr$qv	endp

; ---------------------------------------------------------------------------
off_60F0	dd byte_622E
		dd 0
		dd off_60F0
		db 0E2h, 0FFh

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; xmsg::raise(void)
@xmsg@raise$qv	proc far

src		= byte ptr -22h
arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		sub	sp, 22h
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 60F8h
		nop
		push	cs
		call	near ptr ___InitExceptBlocks
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		push	ax		; int
		push	ax		; int
		mov	ax, 5
		push	ax		; int
		mov	ax, seg	seg000
		push	ax		; int
		mov	ax, 5FE7h
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		push	[bp+arg_2]
		push	[bp+arg_0]
		push	ss
		lea	ax, [bp+src]
		push	ax
		push	cs
		call	near ptr @xmsg@$bctr$qmx4xmsg ;	xmsg::xmsg(xmsg	&)
		add	sp, 8
		lea	ax, [bp+src]
		push	ss
		push	ax		; src
		push	cs		; int
		mov	ax, 622Eh
		push	ax		; int
		nop
		push	cs
		call	near ptr @_ThrowException$qnvt1t1t1uiuiuinuc ; _ThrowException(void *,void *,void *,void *,uint,uint,uint,uchar	*)
		add	sp, 1Ah
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@xmsg@raise$qv	endp

; ---------------------------------------------------------------------------
		dd byte_6266
		db 87h,	20h, 0FCh, 0FFh, 0Ah dup(0), 0DEh, 0FFh, 2 dup(0)
		db 5, 3	dup(0),	2 dup(0FFh), 6,	0, 5, 3	dup(0),	51h, 61h

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; xmsg::operator=(xmsg const &)
@xmsg@$basg$qmx4xmsg proc far

var_22		= word ptr -22h
var_16		= word ptr -16h
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  6
arg_4		= dword	ptr  0Ah

		push	bp
		mov	bp, sp
		sub	sp, 22h
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 615Fh
		nop
		push	cs
		call	near ptr ___InitExceptBlocks
		mov	dx, word ptr [bp+arg_0+2]
		mov	ax, word ptr [bp+arg_0]
		cmp	dx, word ptr [bp+arg_4+2]
		jnz	short loc_6198
		cmp	ax, word ptr [bp+arg_4]
		jz	short loc_6216

loc_6198:
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		add	word ptr es:[bx], 1
		adc	word ptr es:[bx+2], 0
		mov	ax, 3
		push	ax		; char
		les	bx, [bp+arg_0]
		push	word ptr es:[bx+2]
		push	word ptr es:[bx] ; driver
		call	@string@$bdtr$qv ; string::~string(void)
		add	sp, 6
		mov	ax, 4
		push	ax
		nop
		push	cs
		call	near ptr @$bnew$qui ; operator new(uint)
		pop	cx
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		or	ax, dx
		jz	short loc_6206
		mov	[bp+var_16], 0Eh
		les	bx, [bp+arg_4]
		push	word ptr es:[bx+2]
		push	word ptr es:[bx]
		push	dx
		push	[bp+var_4]
		call	@string@$bctr$qmx6string ; string::string(string &)
		add	sp, 8
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		sub	word ptr es:[bx], 1
		sbb	word ptr es:[bx+2], 0
		mov	[bp+var_16], 6

loc_6206:
		mov	dx, [bp+var_2]
		mov	ax, [bp+var_4]
		les	bx, [bp+arg_0]
		mov	es:[bx+2], dx
		mov	es:[bx], ax

loc_6216:
		mov	dx, word ptr [bp+arg_0+2]
		mov	ax, word ptr [bp+arg_0]
		push	dx
		push	ax
		push	[bp+var_22]
		nop
		push	cs
		call	near ptr ___ExitExceptBlocks
		pop	ax
		pop	dx
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@xmsg@$basg$qmx4xmsg endp

; ---------------------------------------------------------------------------
byte_622E	db 4, 0, 3, 0, 26h, 0, 2 dup(0FFh), 3, 0, 2Ch, 0, 30h
		db 0Dh dup(0), 1, 0, 1,	0, 92h,	60h
		dw seg seg000
		db 5, 0, 34h, 0, 78h, 6Dh, 73h,	67h, 0Eh dup(0)
byte_6266	db 4, 0, 10h, 20h, 0Ah,	0, 79h,	62h
					; seg000:6151o
		dw seg seg000
aString		db 'string *',0
		db 4, 0, 3, 0, 26h, 0, 2 dup(0FFh), 3, 0, 2Eh, 0, 32h
		db 0Dh dup(0), 1, 0, 1,	0, 11h,	3
		dw seg seg003
		db 5, 0, 36h, 0, 73h, 74h, 72h,	69h, 6Eh, 67h, 0Eh dup(0)

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

___JumpToCatch__ proc far
		push	si
		push	di
		mov	sp, bx
		mov	bp, cx
		push	dx
		push	ax
		retf
___JumpToCatch__ endp

; ---------------------------------------------------------------------------
		pop	di
		pop	si
		retf

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_62BF	proc far

arg_0		= dword	ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, word ptr [bp+arg_0]
		or	ax, word ptr [bp+arg_0+2]
		jnz	short loc_62D3
		mov	dx, ds
		mov	ax, 0DD6h
		jmp	short loc_62E0
; ---------------------------------------------------------------------------

loc_62D3:
		les	bx, [bp+arg_0]
		mov	dx, word ptr [bp+arg_0+2]
		mov	ax, word ptr [bp+arg_0]
		add	ax, es:[bx+4]

loc_62E0:
		pop	di
		pop	si
		pop	bp
		retf
sub_62BF	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_62E4	proc far
					; sub_6381+106p ...

var_A		= word ptr -0Ah
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  6
arg_4		= dword	ptr  0Ah

		push	bp
		mov	bp, sp
		sub	sp, 0Ah
		push	si
		push	di
		mov	dx, word ptr [bp+arg_0+2]
		mov	ax, word ptr [bp+arg_0]
		cmp	dx, word ptr [bp+arg_4+2]
		jnz	short loc_62FC
		cmp	ax, word ptr [bp+arg_4]
		jz	short loc_6378

loc_62FC:
		les	bx, [bp+arg_0]
		mov	ax, es:[bx+2]
		les	bx, [bp+arg_4]
		cmp	ax, es:[bx+2]
		jnz	short loc_6370
		les	bx, [bp+arg_0]
		mov	ax, es:[bx]
		les	bx, [bp+arg_4]
		cmp	ax, es:[bx]
		jnz	short loc_6370
		les	bx, [bp+arg_0]
		mov	ax, es:[bx+2]
		les	bx, [bp+arg_4]
		or	ax, es:[bx+2]
		test	al, 80h
		jnz	short loc_6370
		les	bx, [bp+arg_0]
		mov	dx, word ptr [bp+arg_0+2]
		mov	ax, word ptr [bp+arg_0]
		add	ax, es:[bx+4]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		les	bx, [bp+arg_4]
		mov	dx, word ptr [bp+arg_4+2]
		mov	ax, word ptr [bp+arg_4]
		add	ax, es:[bx+4]
		mov	word ptr [bp+var_8+2], dx
		mov	word ptr [bp+var_8], ax

loc_6352:
		les	bx, [bp+var_4]
		mov	al, es:[bx]
		cbw
		mov	dx, ax
		inc	word ptr [bp+var_4]
		les	bx, [bp+var_8]
		mov	al, es:[bx]
		cbw
		mov	[bp+var_A], ax
		inc	word ptr [bp+var_8]
		cmp	dx, [bp+var_A]
		jz	short loc_6374

loc_6370:
		xor	ax, ax
		jmp	short loc_637B
; ---------------------------------------------------------------------------

loc_6374:
		or	dx, dx
		jnz	short loc_6352

loc_6378:
		mov	ax, 1

loc_637B:
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_62E4	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_6381	proc near
					; sub_6381+135p ...

var_A		= dword	ptr -0Ah
var_6		= word ptr -6
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= word ptr  8
arg_6		= word ptr  0Ah
arg_8		= word ptr  0Ch
arg_A		= word ptr  0Eh
arg_C		= word ptr  10h

		push	bp
		mov	bp, sp
		sub	sp, 0Ah
		push	si
		push	di
		les	bx, [bp+arg_0]
		mov	dx, word ptr [bp+arg_0+2]
		mov	ax, word ptr [bp+arg_0]
		add	ax, es:[bx+0Ch]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax

loc_639C:
		les	bx, [bp+var_4]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_A+2], dx
		mov	word ptr [bp+var_A], ax
		mov	ax, word ptr [bp+var_A]
		or	ax, word ptr [bp+var_A+2]
		jz	short loc_6430
		les	bx, [bp+var_4]
		test	byte ptr es:[bx+6], 8
		jnz	short loc_6429
		cmp	[bp+arg_C], 0
		jz	short loc_63D8
		les	bx, [bp+var_4]
		mov	ax, es:[bx+6]
		and	ax, 3
		cmp	ax, 3
		jnz	short loc_63D8
		mov	ax, 1
		jmp	short loc_63DA
; ---------------------------------------------------------------------------

loc_63D8:
		xor	ax, ax

loc_63DA:
		mov	[bp+var_6], ax
		push	word ptr [bp+var_A+2]
		push	word ptr [bp+var_A]
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	cs
		call	near ptr sub_62E4
		add	sp, 8
		or	ax, ax
		jz	short loc_63FD
		cmp	[bp+var_6], 0
		jz	short loc_63FD
		jmp	loc_64C0
; ---------------------------------------------------------------------------

loc_63FD:
		les	bx, [bp+var_A]
		test	byte ptr es:[bx+8], 4
		jz	short loc_6429
		push	[bp+var_6]
		push	[bp+arg_A]
		push	[bp+arg_8]
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	word ptr [bp+var_A+2]
		push	word ptr [bp+var_A]
		call	sub_6381
		add	sp, 0Eh
		or	ax, ax
		jz	short loc_6429
		jmp	loc_64C0
; ---------------------------------------------------------------------------

loc_6429:
		add	word ptr [bp+var_4], 8
		jmp	loc_639C
; ---------------------------------------------------------------------------

loc_6430:
		les	bx, [bp+arg_0]
		mov	dx, word ptr [bp+arg_0+2]
		mov	ax, word ptr [bp+arg_0]
		add	ax, es:[bx+0Ah]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax

loc_6443:
		les	bx, [bp+var_4]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_A+2], dx
		mov	word ptr [bp+var_A], ax
		mov	ax, word ptr [bp+var_A]
		or	ax, word ptr [bp+var_A+2]
		jz	short loc_64CC
		cmp	[bp+arg_C], 0
		jz	short loc_6475
		les	bx, [bp+var_4]
		mov	ax, es:[bx+6]
		and	ax, 3
		cmp	ax, 3
		jnz	short loc_6475
		mov	ax, 1
		jmp	short loc_6477
; ---------------------------------------------------------------------------

loc_6475:
		xor	ax, ax

loc_6477:
		mov	[bp+var_6], ax
		push	word ptr [bp+var_A+2]
		push	word ptr [bp+var_A]
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	cs
		call	near ptr sub_62E4
		add	sp, 8
		or	ax, ax
		jz	short loc_6497
		cmp	[bp+var_6], 0
		jnz	short loc_64C0

loc_6497:
		les	bx, [bp+var_A]
		test	byte ptr es:[bx+8], 4
		jz	short loc_64C5
		push	[bp+var_6]
		push	[bp+arg_A]
		push	[bp+arg_8]
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	word ptr [bp+var_A+2]
		push	word ptr [bp+var_A]
		call	sub_6381
		add	sp, 0Eh
		or	ax, ax
		jz	short loc_64C5

loc_64C0:
		mov	ax, 1
		jmp	short loc_64CE
; ---------------------------------------------------------------------------

loc_64C5:
					; sub_6381+13Dj
		add	word ptr [bp+var_4], 8
		jmp	loc_6443
; ---------------------------------------------------------------------------

loc_64CC:
		xor	ax, ax

loc_64CE:
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_6381	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_64D4	proc near

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= word ptr  0Ch
arg_A		= word ptr  0Eh
arg_C		= word ptr  10h

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	si
		push	di
		mov	cx, [bp+arg_8]

loc_64DF:
		mov	dx, word ptr [bp+arg_0+2]
		mov	ax, word ptr [bp+arg_0]
		cmp	dx, word ptr [bp+arg_4+2]
		jnz	short loc_64F2
		cmp	ax, word ptr [bp+arg_4]
		jnz	short loc_64F2
		jmp	loc_6607
; ---------------------------------------------------------------------------

loc_64F2:
		les	bx, [bp+arg_0]
		mov	ax, es:[bx+2]
		mov	[bp+var_2], ax
		les	bx, [bp+arg_4]
		mov	ax, es:[bx+2]
		mov	[bp+var_4], ax
		mov	ax, [bp+var_2]
		and	ax, [bp+var_4]
		test	al, 10h
		jz	short loc_6582
		and	[bp+var_2], 3300h
		and	[bp+var_4], 3300h
		mov	ax, [bp+var_2]
		cmp	ax, [bp+var_4]
		jnz	short loc_6525
		jmp	loc_65C8
; ---------------------------------------------------------------------------

loc_6525:
		or	cx, cx
		jz	short loc_652C
		jmp	loc_6640
; ---------------------------------------------------------------------------

loc_652C:
		mov	ax, [bp+var_2]
		and	ax, 300h
		mov	dx, [bp+var_4]
		and	dx, 300h
		cmp	ax, dx
		jz	short loc_6562
		mov	ax, [bp+var_4]
		and	ax, 300h
		not	ax
		and	ax, [bp+var_2]
		test	ah, 3
		jz	short loc_6550
		jmp	loc_6640
; ---------------------------------------------------------------------------

loc_6550:
		or	[bp+var_2], 300h
		or	[bp+var_4], 300h
		mov	ax, [bp+var_2]
		cmp	ax, [bp+var_4]
		jz	short loc_65C8

loc_6562:
		mov	ax, [bp+var_2]
		or	ax, 3000h
		mov	dx, [bp+var_4]
		or	dx, 3000h
		cmp	ax, dx
		jz	short loc_6576
		jmp	loc_6640
; ---------------------------------------------------------------------------

loc_6576:
		test	byte ptr [bp+var_2+1], 10h
		jnz	short loc_657F
		jmp	loc_6640
; ---------------------------------------------------------------------------

loc_657F:
		jmp	loc_6607
; ---------------------------------------------------------------------------

loc_6582:
		mov	ax, [bp+var_2]
		and	ax, [bp+var_4]
		test	ah, 4
		jz	short loc_65F0
		les	bx, [bp+arg_0]
		mov	dx, es:[bx+0Ch]
		mov	ax, es:[bx+0Ah]
		les	bx, [bp+arg_4]
		cmp	dx, es:[bx+0Ch]
		jnz	short loc_65A7
		cmp	ax, es:[bx+0Ah]
		jz	short loc_65C8

loc_65A7:
		or	cx, cx
		jz	short loc_65AE
		jmp	loc_6640
; ---------------------------------------------------------------------------

loc_65AE:
		les	bx, [bp+arg_0]
		mov	dx, es:[bx+0Ch]
		mov	ax, es:[bx+0Ah]
		les	bx, [bp+arg_4]
		or	ax, es:[bx+0Ah]
		or	dx, es:[bx+0Ch]
		or	ax, dx
		jnz	short loc_6640

loc_65C8:
		mov	cx, 1
		les	bx, [bp+arg_0]
		mov	dx, es:[bx+8]
		mov	ax, es:[bx+6]
		mov	word ptr [bp+arg_0+2], dx
		mov	word ptr [bp+arg_0], ax
		les	bx, [bp+arg_4]
		mov	dx, es:[bx+8]
		mov	ax, es:[bx+6]
		mov	word ptr [bp+arg_4+2], dx
		mov	word ptr [bp+arg_4], ax
		jmp	loc_64DF
; ---------------------------------------------------------------------------

loc_65F0:
		push	word ptr [bp+arg_4+2]
		push	word ptr [bp+arg_4]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		push	cs
		call	near ptr sub_62E4
		add	sp, 8
		or	ax, ax
		jz	short loc_660C

loc_6607:
					; sub_64D4:loc_657Fj
		mov	ax, 1
		jmp	short loc_6642
; ---------------------------------------------------------------------------

loc_660C:
		test	byte ptr [bp+var_2], 2
		jz	short loc_6640
		test	byte ptr [bp+var_4], 1
		jz	short loc_6640
		les	bx, [bp+arg_0]
		test	byte ptr es:[bx+8], 4
		jz	short loc_6640
		mov	ax, 1
		push	ax
		push	[bp+arg_C]
		push	[bp+arg_A]
		push	word ptr [bp+arg_4+2]
		push	word ptr [bp+arg_4]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		call	sub_6381
		add	sp, 0Eh
		jmp	short loc_6642
; ---------------------------------------------------------------------------

loc_6640:
		xor	ax, ax

loc_6642:
					; sub_64D4+16Aj
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_64D4	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_6648	proc far

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	si
		push	di
		push	[bp+arg_0]
		nop
		push	cs
		call	near ptr _malloc
		pop	cx
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		mov	ax, [bp+var_4]
		or	ax, [bp+var_2]
		jnz	short loc_6698
		cmp	[bp+arg_0], 80h	; ''
		ja	short loc_667A
		les	bx, ss:16h
		test	byte ptr es:[bx+4], 1
		jz	short loc_667F

loc_667A:
		nop
		push	cs
		call	near ptr _abort
; ---------------------------------------------------------------------------

loc_667F:
		les	bx, ss:16h
		or	word ptr es:[bx+4], 1
		les	bx, ss:16h
		mov	dx, es:[bx+22h]
		mov	ax, es:[bx+20h]
		jmp	short loc_669E
; ---------------------------------------------------------------------------

loc_6698:
		mov	dx, [bp+var_2]
		mov	ax, [bp+var_4]

loc_669E:
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_6648	endp

; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		les	bx, ss:16h
		mov	dx, es:[bx+22h]
		mov	ax, es:[bx+20h]
		cmp	dx, [bp+8]
		jnz	short loc_66CC
		cmp	ax, [bp+6]
		jnz	short loc_66CC
		les	bx, ss:16h
		and	word ptr es:[bx+4], 0FFFEh
		jmp	short loc_66D9
; ---------------------------------------------------------------------------

loc_66CC:
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	near ptr _farfree
		pop	cx
		pop	cx

loc_66D9:
		pop	di
		pop	si
		pop	bp
		retf

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_66DD	proc near
					; __ExceptionHandler+F7p

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  4
arg_4		= word ptr  8
arg_6		= word ptr  0Ah
arg_8		= dword	ptr  0Ch
arg_C		= byte ptr  10h

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	si
		push	di
		push	[bp+arg_6]
		push	[bp+arg_4]
		xor	ax, ax
		push	ax
		push	word ptr [bp+arg_8+2]
		push	word ptr [bp+arg_8]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		call	sub_64D4
		add	sp, 0Eh
		or	ax, ax
		jz	short loc_6707
		jmp	loc_67A3
; ---------------------------------------------------------------------------

loc_6707:
		les	bx, [bp+arg_0]
		mov	ax, es:[bx+2]
		mov	[bp+var_2], ax
		les	bx, [bp+arg_8]
		mov	ax, es:[bx+2]
		mov	[bp+var_4], ax
		test	byte ptr [bp+var_4], 20h
		jz	short loc_6797
		push	[bp+arg_6]
		push	[bp+arg_4]
		mov	ax, 1
		push	ax
		les	bx, [bp+arg_8]
		push	word ptr es:[bx+8]
		push	word ptr es:[bx+6]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		call	sub_64D4
		add	sp, 0Eh
		or	ax, ax
		jnz	short loc_67A3
		les	bx, [bp+arg_8]
		mov	dx, es:[bx+8]
		mov	ax, es:[bx+6]
		mov	word ptr [bp+arg_8+2], dx
		mov	word ptr [bp+arg_8], ax
		les	bx, [bp+arg_8]
		mov	ax, es:[bx+2]
		mov	[bp+var_4], ax
		test	byte ptr [bp+var_4], 10h
		jz	short loc_67DA
		push	[bp+arg_6]
		push	[bp+arg_4]
		xor	ax, ax
		push	ax
		push	word ptr [bp+arg_8+2]
		push	word ptr [bp+arg_8]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		call	sub_64D4
		add	sp, 0Eh
		or	ax, ax
		jnz	short loc_67A3
		mov	ax, [bp+var_2]
		and	ax, 3000h
		mov	dx, [bp+var_4]
		and	dx, 3000h
		cmp	ax, dx
		jnz	short loc_67DA

loc_6797:
		test	byte ptr [bp+var_4], 10h
		jz	short loc_67DA
		test	[bp+arg_C], 1
		jz	short loc_67A8

loc_67A3:
		mov	ax, 1
		jmp	short loc_67DC
; ---------------------------------------------------------------------------

loc_67A8:
		test	byte ptr [bp+var_2], 10h
		jz	short loc_67DA
		test	byte ptr [bp+var_2+1], 20h
		jz	short loc_67BA
		test	byte ptr [bp+var_4+1], 20h
		jz	short loc_67DA

loc_67BA:
		test	byte ptr [bp+var_4], 40h
		jz	short loc_67DA
		mov	ax, [bp+var_2]
		and	ax, 300h
		mov	dx, [bp+var_4]
		and	dx, 300h
		cmp	ax, dx
		jnz	short loc_67D6
		mov	ax, 1
		jmp	short loc_67D8
; ---------------------------------------------------------------------------

loc_67D6:
		xor	ax, ax

loc_67D8:
		jmp	short loc_67DC
; ---------------------------------------------------------------------------

loc_67DA:
		xor	ax, ax

loc_67DC:
					; sub_66DD:loc_67D8j
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_66DD	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_67E2	proc near
					; sub_7AB3+1FDp

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  4
arg_4		= word ptr  8
arg_6		= word ptr  0Ah
arg_8		= dword	ptr  0Ch
arg_C		= word ptr  10h

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	si
		push	di
		les	bx, ss:16h
		mov	ax, es:[bx+6]
		mov	[bp+var_2], ax
		push	ds
		mov	ds, [bp+var_2]
		mov	ax, [bp+arg_C]
		and	ax, 1
		mov	[bp+var_4], ax
		test	byte ptr [bp+arg_C], 4
		jz	short loc_680D
		or	[bp+var_4], 2

loc_680D:
		test	byte ptr [bp+arg_C], 2
		jz	short loc_6821
		or	[bp+var_4], 4
		test	byte ptr [bp+arg_C+1], 1
		jnz	short loc_6821
		or	[bp+var_4], 20h

loc_6821:
		test	byte ptr [bp+arg_C], 20h
		jz	short loc_682B
		or	[bp+var_4], 8

loc_682B:
		test	byte ptr [bp+arg_C], 80h
		jz	short loc_6835
		or	[bp+var_4], 10h

loc_6835:
		test	byte ptr [bp+arg_C+1], 10h
		jnz	short loc_683E
		jmp	loc_69C3
; ---------------------------------------------------------------------------

loc_683E:
		mov	bx, [bp+var_4]
		cmp	bx, 17h
		jbe	short loc_6849
		jmp	loc_6AC9
; ---------------------------------------------------------------------------

loc_6849:
		add	bx, bx
		jmp	cs:off_6B00[bx]

loc_6850:
		push	[bp+arg_4]
		xor	ax, ax
		push	ax
		push	word ptr [bp+arg_0]
		; Hack
		db 0ffh
		db 056h
		db 00ch
		add	sp, 6
		jmp	loc_6AC9
; ---------------------------------------------------------------------------

loc_6862:
					; sub_67E2+1EEj
		push	[bp+arg_4]
		xor	ax, ax
		push	ax
		push	word ptr [bp+arg_0]
		call	[bp+arg_8]
		add	sp, 6
		jmp	loc_6AC9
; ---------------------------------------------------------------------------

loc_6874:
					; sub_67E2+1EEj
		push	[bp+arg_6]
		push	[bp+arg_4]
		xor	ax, ax
		push	ax
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		; Hack
		db 0ffh
		db 056h
		db 00ch
		jmp	short loc_689A
; ---------------------------------------------------------------------------

loc_6888:
					; sub_67E2+1EEj
		push	[bp+arg_6]
		push	[bp+arg_4]
		xor	ax, ax
		push	ax
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		call	[bp+arg_8]

loc_689A:
		add	sp, 0Ah
		jmp	loc_6AC9
; ---------------------------------------------------------------------------

loc_68A0:
					; sub_67E2+1EEj
		xor	ax, ax
		push	ax
		push	[bp+arg_4]
		push	word ptr [bp+arg_0]
		; Hack
		db 0ffh
		db 056h
		db 00ch
		jmp	loc_6AC9
; ---------------------------------------------------------------------------

loc_68AF:
					; sub_67E2+1EEj
		xor	ax, ax
		push	ax
		push	[bp+arg_4]
		push	word ptr [bp+arg_0]
		call	[bp+arg_8]
		jmp	loc_6AC9
; ---------------------------------------------------------------------------

loc_68BE:
					; sub_67E2+1EEj
		xor	ax, ax
		push	ax
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		; Hack
		db 0ffh
		db 056h
		db 00ch
		jmp	short loc_68E4
; ---------------------------------------------------------------------------

loc_68D2:
					; sub_67E2+1EEj
		xor	ax, ax
		push	ax
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		call	[bp+arg_8]

loc_68E4:
		jmp	loc_6AC9
; ---------------------------------------------------------------------------

loc_68E7:
					; sub_67E2+1EEj
		mov	dx, word ptr [bp+arg_0]
		mov	bx, [bp+arg_4]
		xor	ax, ax
		push	bx
		pop	bx
		; Hack
		db 0ffh
		db 056h
		db 00ch
		jmp	loc_6AC9
; ---------------------------------------------------------------------------

loc_68F7:
					; sub_67E2+1EEj
		mov	dx, word ptr [bp+arg_0]
		mov	bx, [bp+arg_4]
		xor	ax, ax

loc_68FF:
		push	bx
		pop	bx
		call	[bp+arg_8]
		jmp	loc_6AC9
; ---------------------------------------------------------------------------

loc_6907:
					; sub_67E2+1EEj
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		xor	ax, ax

loc_6915:
		; Hack
		db 0ffh
		db 056h
		db 00ch
		jmp	short loc_692B
; ---------------------------------------------------------------------------

loc_691A:
					; sub_67E2+1EEj
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		xor	ax, ax

loc_6928:
		call	[bp+arg_8]

loc_692B:
		jmp	loc_6AC9
; ---------------------------------------------------------------------------

loc_692E:
					; sub_67E2+1EEj
		mov	si, word ptr [bp+arg_0]
		push	[bp+arg_4]
		xor	ax, ax
		push	ax
		; Hack
		db 0ffh
		db 056h
		db 00ch
		jmp	short loc_6948
; ---------------------------------------------------------------------------

loc_693C:
					; sub_67E2+1EEj
		mov	si, word ptr [bp+arg_0]
		push	[bp+arg_4]
		xor	ax, ax
		push	ax

loc_6945:
		call	[bp+arg_8]

loc_6948:
					; sub_67E2+1FCj
		pop	cx
		pop	cx
		jmp	loc_6AC9
; ---------------------------------------------------------------------------

loc_694D:
					; sub_67E2+1EEj
		push	ds
		lds	si, [bp+arg_0]
		push	[bp+arg_6]
		push	[bp+arg_4]
		xor	ax, ax
		push	ax
		; Hack
		db 0ffh
		db 056h
		db 00ch
		add	sp, 6
		pop	ds
		jmp	loc_6AC9
; ---------------------------------------------------------------------------

loc_6964:
					; sub_67E2+1EEj
		push	ds
		lds	si, [bp+arg_0]
		push	[bp+arg_6]
		push	[bp+arg_4]
		xor	ax, ax
		push	ax
		call	[bp+arg_8]
		add	sp, 6
		pop	ds
		jmp	loc_6AC9
; ---------------------------------------------------------------------------

loc_697B:
					; sub_67E2+1EEj
		mov	si, word ptr [bp+arg_0]
		xor	ax, ax
		push	ax
		push	[bp+arg_4]

loc_6984:
		; Hack
		db 0ffh
		db 056h
		db 00ch
		jmp	short loc_6995
; ---------------------------------------------------------------------------

loc_6989:
					; sub_67E2+1EEj
		mov	si, word ptr [bp+arg_0]
		xor	ax, ax
		push	ax
		push	[bp+arg_4]

loc_6992:
		call	[bp+arg_8]

loc_6995:
		jmp	loc_6AC9
; ---------------------------------------------------------------------------

loc_6998:
					; sub_67E2+1EEj
		push	ds
		lds	si, [bp+arg_0]
		xor	ax, ax
		push	ax
		push	[bp+arg_6]
		push	[bp+arg_4]
		; Hack
		db 0ffh
		db 056h
		db 00ch
		pop	ds
		jmp	loc_6AC9
; ---------------------------------------------------------------------------

loc_69AC:
					; sub_67E2+1EEj
		push	ds
		lds	si, [bp+arg_0]
		xor	ax, ax
		push	ax
		push	[bp+arg_6]
		push	[bp+arg_4]
		call	[bp+arg_8]
		pop	ds
		jmp	loc_6AC9
; ---------------------------------------------------------------------------

loc_69C0:
					; sub_67E2+1EEj
		jmp	loc_6AC9
; ---------------------------------------------------------------------------

loc_69C3:
		mov	bx, [bp+var_4]
		cmp	bx, 17h
		jbe	short loc_69CE
		jmp	loc_6AC9
; ---------------------------------------------------------------------------

loc_69CE:
		add	bx, bx
		jmp	cs:off_6AD0[bx]

loc_69D5:
		push	[bp+arg_4]
		push	word ptr [bp+arg_0]
		; Hack
		db 0ffh
		db 056h
		db 00ch
		jmp	loc_6948
; ---------------------------------------------------------------------------

loc_69E1:
		push	[bp+arg_4]
		push	word ptr [bp+arg_0]
		jmp	loc_6945
; ---------------------------------------------------------------------------

loc_69EA:
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		; Hack
		db 0ffh
		db 056h
		db 00ch
		jmp	short loc_6A0A
; ---------------------------------------------------------------------------

loc_69FB:
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		call	[bp+arg_8]

loc_6A0A:
		add	sp, 8
		jmp	loc_6AC9
; ---------------------------------------------------------------------------

loc_6A10:
		push	[bp+arg_4]
		push	word ptr [bp+arg_0]
		jmp	loc_6984
; ---------------------------------------------------------------------------

loc_6A19:
		push	[bp+arg_4]
		push	word ptr [bp+arg_0]
		jmp	loc_6992
; ---------------------------------------------------------------------------

loc_6A22:
		mov	ax, word ptr [bp+arg_0]
		mov	bx, [bp+arg_4]
		push	bx
		pop	bx
		; Hack
		db 0ffh
		db 056h
		db 00ch
		jmp	loc_6AC9
; ---------------------------------------------------------------------------

loc_6A30:
		mov	ax, word ptr [bp+arg_0]
		mov	bx, [bp+arg_4]
		jmp	loc_68FF
; ---------------------------------------------------------------------------

loc_6A39:
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		jmp	loc_6915
; ---------------------------------------------------------------------------

loc_6A48:
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		jmp	loc_6928
; ---------------------------------------------------------------------------

loc_6A57:
		mov	si, word ptr [bp+arg_0]
		push	[bp+arg_4]
		; Hack
		db 0ffh
		db 056h
		db 00ch
		pop	cx
		jmp	short loc_6AC9
; ---------------------------------------------------------------------------

loc_6A63:
		mov	si, word ptr [bp+arg_0]
		push	[bp+arg_4]
		call	[bp+arg_8]
		pop	cx
		jmp	short loc_6AC9
; ---------------------------------------------------------------------------

loc_6A6F:
		push	ds
		lds	si, [bp+arg_0]
		push	[bp+arg_6]
		push	[bp+arg_4]
		; Hack
		db 0ffh
		db 056h
		db 00ch
		pop	cx
		pop	cx
		pop	ds
		jmp	short loc_6AC9
; ---------------------------------------------------------------------------

loc_6A81:
		push	ds
		lds	si, [bp+arg_0]
		push	[bp+arg_6]
		push	[bp+arg_4]
		call	[bp+arg_8]
		pop	cx
		pop	cx
		pop	ds
		jmp	short loc_6AC9
; ---------------------------------------------------------------------------

loc_6A93:
		mov	si, word ptr [bp+arg_0]
		push	[bp+arg_4]
		; Hack
		db 0ffh
		db 056h
		db 00ch
		jmp	short loc_6AC9
; ---------------------------------------------------------------------------

loc_6A9E:
		mov	si, word ptr [bp+arg_0]
		push	[bp+arg_4]
		call	[bp+arg_8]
		jmp	short loc_6AC9
; ---------------------------------------------------------------------------

loc_6AA9:
		push	ds
		lds	si, [bp+arg_0]
		push	[bp+arg_6]
		push	[bp+arg_4]
		; Hack
		db 0ffh
		db 056h
		db 00ch
		pop	ds
		jmp	short loc_6AC9
; ---------------------------------------------------------------------------

loc_6AB9:
		push	ds
		lds	si, [bp+arg_0]
		push	[bp+arg_6]
		push	[bp+arg_4]
		call	[bp+arg_8]
		pop	ds
		jmp	short $+2

loc_6AC9:
		pop	ds
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_67E2	endp

; ---------------------------------------------------------------------------
off_6AD0	dw offset loc_69D5
		dw offset loc_69E1
		dw offset loc_69EA
		dw offset loc_69FB
		dw offset loc_6A10
		dw offset loc_6A19
		dw offset loc_6A39
		dw offset loc_6A48
		dw offset loc_6A22
		dw offset loc_6A30
		dw offset loc_6A39
		dw offset loc_6A48
		dw offset loc_6AC9
		dw offset loc_6AC9
		dw offset loc_6AC9
		dw offset loc_6AC9
		dw offset loc_6A57
		dw offset loc_6A63
		dw offset loc_6A6F
		dw offset loc_6A81
		dw offset loc_6A93
		dw offset loc_6A9E
		dw offset loc_6AA9
		dw offset loc_6AB9
off_6B00	dw offset loc_6850
		dw offset loc_6862
		dw offset loc_6874
		dw offset loc_6888
		dw offset loc_68A0
		dw offset loc_68AF
		dw offset loc_68BE
		dw offset loc_68D2
		dw offset loc_68E7
		dw offset loc_68F7
		dw offset loc_6907
		dw offset loc_691A
		dw offset loc_69C0
		dw offset loc_69C0
		dw offset loc_69C0
		dw offset loc_69C0
		dw offset loc_692E
		dw offset loc_693C
		dw offset loc_694D
		dw offset loc_6964
		dw offset loc_697B
		dw offset loc_6989
		dw offset loc_6998
		dw offset loc_69AC

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_6B30	proc near
					; sub_77BF+2Bp	...

var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= word ptr  0Ch
arg_A		= word ptr  0Eh

		push	bp
		mov	bp, sp
		sub	sp, 6
		push	si
		push	di
		cmp	[bp+arg_A], 0
		jz	short loc_6B43
		mov	ax, 2
		jmp	short loc_6B45
; ---------------------------------------------------------------------------

loc_6B43:
		xor	ax, ax

loc_6B45:
		mov	[bp+var_2], ax
		les	bx, ss:16h
		mov	ax, es:[bx+6]
		mov	[bp+var_4], ax
		push	ds
		mov	ds, [bp+var_4]
		mov	ax, [bp+arg_8]
		and	ax, 1
		mov	[bp+var_6], ax
		test	byte ptr [bp+arg_8], 4
		jz	short loc_6B6B
		or	[bp+var_6], 2

loc_6B6B:
		test	byte ptr [bp+arg_8], 2
		jz	short loc_6B7F
		or	[bp+var_6], 4
		test	byte ptr [bp+arg_8+1], 1
		jnz	short loc_6B7F
		or	[bp+var_6], 20h

loc_6B7F:
		test	byte ptr [bp+arg_8], 20h
		jz	short loc_6B89
		or	[bp+var_6], 8

loc_6B89:
		test	byte ptr [bp+arg_8], 80h
		jz	short loc_6B93
		or	[bp+var_6], 10h

loc_6B93:
		mov	bx, [bp+var_6]
		cmp	bx, 17h
		jbe	short loc_6B9E
		jmp	loc_6CB1
; ---------------------------------------------------------------------------

loc_6B9E:
		add	bx, bx
		jmp	cs:off_6CB8[bx]

loc_6BA5:
		push	[bp+var_2]
		push	word ptr [bp+arg_0]
		call	word ptr [bp+arg_4]
		pop	cx
		pop	cx
		jmp	loc_6CB1
; ---------------------------------------------------------------------------

loc_6BB3:
		push	[bp+var_2]
		push	word ptr [bp+arg_0]
		call	[bp+arg_4]
		pop	cx
		pop	cx
		jmp	loc_6CB1
; ---------------------------------------------------------------------------

loc_6BC1:
		push	[bp+var_2]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		call	word ptr [bp+arg_4]
		add	sp, 6
		jmp	loc_6CB1
; ---------------------------------------------------------------------------

loc_6BD3:
		push	[bp+var_2]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		call	[bp+arg_4]
		add	sp, 6
		jmp	loc_6CB1
; ---------------------------------------------------------------------------

loc_6BE5:
		push	[bp+var_2]
		push	word ptr [bp+arg_0]
		call	word ptr [bp+arg_4]
		jmp	short loc_6C4B
; ---------------------------------------------------------------------------

loc_6BF0:
		push	[bp+var_2]
		push	word ptr [bp+arg_0]
		jmp	short loc_6C48
; ---------------------------------------------------------------------------

loc_6BF8:
		push	[bp+var_2]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		call	word ptr [bp+arg_4]
		jmp	short loc_6C12
; ---------------------------------------------------------------------------

loc_6C06:
		push	[bp+var_2]
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		call	[bp+arg_4]

loc_6C12:
		jmp	loc_6CB1
; ---------------------------------------------------------------------------

loc_6C15:
		mov	bx, word ptr [bp+arg_0]
		mov	ax, [bp+var_2]
		push	bx
		pop	bx
		call	word ptr [bp+arg_4]
		jmp	loc_6CB1
; ---------------------------------------------------------------------------

loc_6C23:
		mov	bx, word ptr [bp+arg_0]
		mov	ax, [bp+var_2]
		push	bx
		pop	bx
		call	[bp+arg_4]
		jmp	loc_6CB1
; ---------------------------------------------------------------------------

loc_6C31:
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		mov	ax, [bp+var_2]
		call	word ptr [bp+arg_4]
		jmp	short loc_6C4B
; ---------------------------------------------------------------------------

loc_6C3F:
		push	word ptr [bp+arg_0+2]
		push	word ptr [bp+arg_0]
		mov	ax, [bp+var_2]

loc_6C48:
		call	[bp+arg_4]

loc_6C4B:
					; sub_6B30+10Dj
		jmp	short loc_6CB1
; ---------------------------------------------------------------------------

loc_6C4D:
		mov	si, word ptr [bp+arg_0]
		push	[bp+var_2]
		call	word ptr [bp+arg_4]
		pop	cx
		jmp	short loc_6CB1
; ---------------------------------------------------------------------------

loc_6C59:
		mov	si, word ptr [bp+arg_0]
		push	[bp+var_2]
		call	[bp+arg_4]
		pop	cx
		jmp	short loc_6CB1
; ---------------------------------------------------------------------------

loc_6C65:
		push	ds
		lds	si, [bp+arg_0]
		push	[bp+var_2]
		call	word ptr [bp+arg_4]
		pop	cx
		pop	ds
		jmp	short loc_6CB1
; ---------------------------------------------------------------------------

loc_6C73:
		push	ds
		lds	si, [bp+arg_0]
		push	[bp+var_2]
		call	[bp+arg_4]
		pop	cx
		pop	ds
		jmp	short loc_6CB1
; ---------------------------------------------------------------------------

loc_6C81:
		mov	si, word ptr [bp+arg_0]
		push	[bp+var_2]
		call	word ptr [bp+arg_4]
		jmp	short loc_6CB1
; ---------------------------------------------------------------------------

loc_6C8C:
		mov	si, word ptr [bp+arg_0]
		push	[bp+var_2]
		call	[bp+arg_4]
		jmp	short loc_6CB1
; ---------------------------------------------------------------------------

loc_6C97:
		push	ds
		lds	si, [bp+arg_0]
		push	[bp+var_2]
		call	word ptr [bp+arg_4]
		pop	ds
		jmp	short loc_6CB1
; ---------------------------------------------------------------------------

loc_6CA4:
		push	ds
		lds	si, [bp+arg_0]
		push	[bp+var_2]
		call	[bp+arg_4]
		pop	ds
		jmp	short $+2

loc_6CB1:
		pop	ds
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_6B30	endp

; ---------------------------------------------------------------------------
off_6CB8	dw offset loc_6BA5
		dw offset loc_6BB3
		dw offset loc_6BC1
		dw offset loc_6BD3
		dw offset loc_6BE5
		dw offset loc_6BF0
		dw offset loc_6BF8
		dw offset loc_6C06
		dw offset loc_6C15
		dw offset loc_6C23
		dw offset loc_6C31
		dw offset loc_6C3F
		dw offset loc_6CB1
		dw offset loc_6CB1
		dw offset loc_6CB1
		dw offset loc_6CB1
		dw offset loc_6C4D
		dw offset loc_6C59
		dw offset loc_6C65
		dw offset loc_6C73
		dw offset loc_6C81
		dw offset loc_6C8C
		dw offset loc_6C97
		dw offset loc_6CA4

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_6CE8	proc near

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  4
arg_2		= word ptr  6
arg_4		= dword	ptr  8
arg_8		= word ptr  0Ch

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	si
		push	di
		les	bx, ss:16h
		mov	ax, es:[bx+6]
		mov	[bp+var_2], ax
		push	ds
		mov	ds, [bp+var_2]
		mov	ax, [bp+arg_8]
		and	ax, 1
		mov	[bp+var_4], ax
		test	byte ptr [bp+arg_8], 4
		jz	short loc_6D13
		or	[bp+var_4], 2

loc_6D13:
		test	byte ptr [bp+arg_8], 2
		jz	short loc_6D1D
		or	[bp+var_4], 4

loc_6D1D:
		test	byte ptr [bp+arg_8], 20h
		jz	short loc_6D27
		or	[bp+var_4], 8

loc_6D27:
		mov	bx, [bp+var_4]
		cmp	bx, 0Bh
		ja	short loc_6D9A
		add	bx, bx
		jmp	cs:off_6DA1[bx]

loc_6D36:
		push	[bp+arg_0]
		call	word ptr [bp+arg_4]
		pop	cx
		jmp	short loc_6D9A
; ---------------------------------------------------------------------------

loc_6D3F:
		push	[bp+arg_0]
		call	[bp+arg_4]
		pop	cx
		jmp	short loc_6D9A
; ---------------------------------------------------------------------------

loc_6D48:
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	word ptr [bp+arg_4]
		jmp	short loc_6D5C
; ---------------------------------------------------------------------------

loc_6D53:
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	[bp+arg_4]

loc_6D5C:
		pop	cx
		pop	cx
		jmp	short loc_6D9A
; ---------------------------------------------------------------------------

loc_6D60:
		push	[bp+arg_0]
		call	word ptr [bp+arg_4]
		jmp	short loc_6D6E
; ---------------------------------------------------------------------------

loc_6D68:
		push	[bp+arg_0]
		call	[bp+arg_4]

loc_6D6E:
		jmp	short loc_6D9A
; ---------------------------------------------------------------------------

loc_6D70:
		mov	bx, [bp+arg_0]
		push	bx
		pop	bx
		call	word ptr [bp+arg_4]
		jmp	short loc_6D9A
; ---------------------------------------------------------------------------

loc_6D7A:
		mov	bx, [bp+arg_0]
		push	bx
		pop	bx
		call	[bp+arg_4]
		jmp	short loc_6D9A
; ---------------------------------------------------------------------------

loc_6D84:
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	word ptr [bp+arg_4]
		jmp	short loc_6D98
; ---------------------------------------------------------------------------

loc_6D8F:
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	[bp+arg_4]

loc_6D98:
		jmp	short $+2

loc_6D9A:
		pop	ds
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_6CE8	endp

; ---------------------------------------------------------------------------
off_6DA1	dw offset loc_6D36
		dw offset loc_6D3F
		dw offset loc_6D48
		dw offset loc_6D53
		dw offset loc_6D60
		dw offset loc_6D68
		dw offset loc_6D84
		dw offset loc_6D8F
		dw offset loc_6D70
		dw offset loc_6D7A
		dw offset loc_6D84
		dw offset loc_6D8F
		db 4 dup(0), 77h, 70h
		dw seg seg000
		db 14h dup(0), 0D0h, 70h
		dw seg seg000
		db 14h dup(0), 0E2h, 0FFh, 2 dup(0), 3,	0, 0B9h, 6Dh
		dw seg seg000
		db 2 dup(0), 4,	3 dup(0), 3, 0,	0D1h, 6Dh
		dw seg seg000
		db 2 dup(0), 4,	0

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl __far sub_6E07(int, int, void *src, int, int, int, int, int, int,	int, int, int, int, int, int)
sub_6E07	proc far
					; _ReThrowException(uint,uchar *)+9Ep

var_48		= word ptr -48h
var_46		= word ptr -46h
var_44		= word ptr -44h
var_42		= word ptr -42h
var_40		= word ptr -40h
var_3E		= word ptr -3Eh
var_3C		= word ptr -3Ch
var_3A		= word ptr -3Ah
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= word ptr -2Ch
var_2A		= word ptr -2Ah
n		= word ptr -28h
var_26		= dword	ptr -26h
var_22		= dword	ptr -22h
var_1E		= word ptr -1Eh
var_12		= word ptr -12h
arg_0		= word ptr  6
arg_2		= word ptr  8
src		= dword	ptr  0Ah
arg_8		= word ptr  0Eh
arg_A		= word ptr  10h
arg_C		= word ptr  12h
arg_E		= word ptr  14h
arg_10		= word ptr  16h
arg_12		= word ptr  18h
arg_14		= word ptr  1Ah
arg_16		= word ptr  1Ch
arg_18		= word ptr  1Eh
arg_1A		= word ptr  20h
arg_1C		= word ptr  22h
arg_1E		= word ptr  24h

		push	bp
		mov	bp, sp
		sub	sp, 48h
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 6DE9h
		nop
		push	cs
		call	near ptr ___InitExceptBlocks
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		mov	word ptr [bp+var_22+2],	dx
		mov	word ptr [bp+var_22], ax
		les	bx, ss:16h
		mov	word ptr es:[bx+6], ds
		mov	dx, ss:18h
		mov	ax, ss:16h
		add	ax, 28h	; '('
		les	bx, ss:16h
		mov	es:[bx+1Eh], dx
		mov	es:[bx+1Ch], ax
		les	bx, [bp+var_22]
		mov	dx, word ptr [bp+var_22+2]
		mov	ax, word ptr [bp+var_22]
		add	ax, es:[bx+4]
		mov	word ptr [bp+var_34+2],	dx
		mov	word ptr [bp+var_34], ax
		les	bx, ss:16h
		mov	dx, es:[bx+1Eh]
		mov	ax, es:[bx+1Ch]
		mov	word ptr [bp+var_38+2],	dx
		mov	word ptr [bp+var_38], ax
		jmp	short loc_6E93
; ---------------------------------------------------------------------------

loc_6E70:
		les	bx, ss:16h
		mov	ax, es:[bx+1Ch]
		add	ax, 7Fh	; ''
		cmp	ax, word ptr [bp+var_38]
		jbe	short loc_6E90
		les	bx, [bp+var_34]
		mov	al, es:[bx]
		les	bx, [bp+var_38]
		mov	es:[bx], al
		inc	word ptr [bp+var_38]

loc_6E90:
		inc	word ptr [bp+var_34]

loc_6E93:
		les	bx, [bp+var_34]
		cmp	byte ptr es:[bx], 0
		jnz	short loc_6E70
		les	bx, [bp+var_38]
		mov	byte ptr es:[bx], 0
		les	bx, ss:16h
		mov	ax, [bp+arg_14]
		mov	es:[bx+1Ah], ax
		les	bx, ss:16h
		mov	dx, [bp+arg_18]
		mov	ax, [bp+arg_16]
		mov	es:[bx+18h], dx
		mov	es:[bx+16h], ax
		mov	dx, word ptr [bp+var_22+2]
		mov	ax, word ptr [bp+var_22]
		mov	word ptr [bp+var_26+2],	dx
		mov	word ptr [bp+var_26], ax
		les	bx, [bp+var_22]
		mov	ax, es:[bx]
		mov	[bp+n],	ax
		les	bx, [bp+var_22]
		mov	ax, es:[bx+2]
		mov	[bp+var_2A], ax
		test	byte ptr [bp+var_2A], 2
		jz	short loc_6EF0
		les	bx, [bp+var_22]
		mov	ax, es:[bx+8]
		jmp	short loc_6EF2
; ---------------------------------------------------------------------------

loc_6EF0:
		xor	ax, ax

loc_6EF2:
		mov	[bp+var_2C], ax
		test	byte ptr [bp+var_2A], 30h
		jz	short loc_6F0C
		les	bx, [bp+var_26]
		mov	dx, es:[bx+8]
		mov	ax, es:[bx+6]
		mov	word ptr [bp+var_26+2],	dx
		mov	word ptr [bp+var_26], ax

loc_6F0C:
		mov	ax, [bp+n]
		add	ax, 3Ah	; ':'
		push	ax
		push	cs
		call	near ptr sub_6648
		pop	cx
		mov	word ptr [bp+var_30+2],	dx
		mov	word ptr [bp+var_30], ax
		les	bx, ss:16h
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		les	bx, [bp+var_30]
		mov	es:[bx+2], dx
		mov	es:[bx], ax
		les	bx, ss:16h
		mov	dx, word ptr [bp+var_30+2]
		mov	ax, word ptr [bp+var_30]
		mov	es:[bx+2], dx
		mov	es:[bx], ax
		les	bx, [bp+var_30]
		mov	dx, word ptr [bp+var_22+2]
		mov	ax, word ptr [bp+var_22]
		mov	es:[bx+6], dx
		mov	es:[bx+4], ax
		les	bx, [bp+var_30]
		mov	ax, [bp+arg_12]
		mov	es:[bx+0Ch], ax
		les	bx, [bp+var_30]
		mov	ax, [bp+n]
		mov	es:[bx+0Eh], ax
		les	bx, [bp+var_30]
		mov	ax, [bp+var_2A]
		mov	es:[bx+14h], ax
		les	bx, [bp+var_30]
		mov	ax, [bp+var_2C]
		mov	es:[bx+16h], ax
		les	bx, [bp+var_30]
		mov	dx, word ptr [bp+var_26+2]
		mov	ax, word ptr [bp+var_26]
		mov	es:[bx+12h], dx
		mov	es:[bx+10h], ax
		les	bx, [bp+var_30]
		mov	dx, [bp+arg_A]
		mov	ax, [bp+arg_8]
		mov	es:[bx+0Ah], dx
		mov	es:[bx+8], ax
		les	bx, [bp+var_30]
		mov	word ptr es:[bx+24h], 0
		les	bx, [bp+var_30]
		mov	word ptr es:[bx+28h], 0
		mov	word ptr es:[bx+26h], 0
		les	bx, [bp+var_30]
		mov	word ptr es:[bx+18h], ds
		les	bx, [bp+var_30]
		mov	word ptr es:[bx+1Ch], seg seg000
		mov	word ptr es:[bx+1Ah], 66A4h
		les	bx, [bp+var_30]
		mov	ax, [bp+arg_14]
		mov	es:[bx+2Ch], ax
		les	bx, [bp+var_30]
		mov	dx, [bp+arg_18]
		mov	ax, [bp+arg_16]
		mov	es:[bx+30h], dx
		mov	es:[bx+2Eh], ax
		les	bx, [bp+var_30]
		mov	dx, [bp+arg_E]
		mov	ax, [bp+arg_C]
		mov	es:[bx+20h], dx
		mov	es:[bx+1Eh], ax
		les	bx, [bp+var_30]
		mov	ax, [bp+arg_10]
		mov	es:[bx+22h], ax
		les	bx, [bp+var_30]
		mov	byte ptr es:[bx+39h], 0
		les	bx, [bp+var_30]
		mov	byte ptr es:[bx+38h], 1
		push	[bp+n]		; n
		push	word ptr [bp+src+2]
		push	word ptr [bp+src] ; src
		mov	ax, word ptr [bp+var_30]
		add	ax, 3Ah	; ':'
		push	word ptr [bp+var_30+2]
		push	ax		; dest
		nop
		push	cs
		call	near ptr _memcpy
		add	sp, 0Ah
		test	byte ptr [bp+var_2C], 1
		jz	short loc_7096
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	[bp+var_3A], dx
		mov	[bp+var_3C], ax
		mov	[bp+var_12], 6
		push	[bp+arg_10]
		push	[bp+arg_E]
		push	[bp+arg_C]
		push	word ptr [bp+src+2]
		push	word ptr [bp+src]
		mov	ax, word ptr [bp+var_30]
		add	ax, 3Ah	; ':'
		push	word ptr [bp+var_30+2]
		push	ax
		call	sub_67E2
		add	sp, 0Eh
		mov	[bp+var_12], 0
		jmp	short loc_7081
; ---------------------------------------------------------------------------
		nop
		push	cs
		call	near ptr ___call_terminate
; ---------------------------------------------------------------------------
		nop
		push	cs
		call	near ptr @_CatchCleanup$qv ; _CatchCleanup(void)

loc_7081:
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, [bp+var_3A]
		mov	cx, [bp+var_3C]
		mov	es, dx
		xchg	ax, bx
		mov	es:[bx+2], ax
		mov	es:[bx], cx

loc_7096:
		cmp	[bp+arg_1E], 0
		jnz	short loc_70DA
		test	byte ptr [bp+var_2C], 2
		jz	short loc_70DA
		mov	[bp+var_12], 12h
		mov	ax, 1
		push	ax
		les	bx, [bp+var_22]
		push	word ptr es:[bx+22h]
		les	bx, [bp+var_22]
		push	word ptr es:[bx+20h]
		push	word ptr es:[bx+1Eh]
		push	word ptr [bp+src+2]
		push	word ptr [bp+src]
		call	sub_6B30
		add	sp, 0Ch
		mov	[bp+var_12], 0
		jmp	short loc_70DA
; ---------------------------------------------------------------------------
		nop
		push	cs
		call	near ptr ___call_terminate
; ---------------------------------------------------------------------------
		nop
		push	cs
		call	near ptr @_CatchCleanup$qv ; _CatchCleanup(void)

loc_70DA:
					; sub_6E07+299j ...
		les	bx, ss:16h
		mov	dx, es:[bx+1Eh]
		mov	ax, es:[bx+1Ch]
		mov	[bp+var_46], dx
		mov	[bp+var_48], ax
		mov	dx, [bp+arg_1C]
		mov	ax, [bp+arg_1A]
		mov	[bp+var_42], dx
		mov	[bp+var_44], ax
		mov	dx, word ptr [bp+var_30+2]
		mov	ax, word ptr [bp+var_30]
		mov	[bp+var_3E], dx
		mov	[bp+var_40], ax
		push	ss
		lea	ax, [bp+var_48]
		push	ax
		xor	ax, ax
		mov	dx, 3
		push	ax
		push	dx
		xor	ax, ax
		mov	dx, 1
		push	ax
		push	dx
		mov	ax, 0EEFh
		mov	dx, 0FACEh
		push	ax
		push	dx
		nop
		push	cs
		call	near ptr _RaiseException
		add	sp, 10h
		push	[bp+var_1E]
		nop
		push	cs
		call	near ptr ___ExitExceptBlocks
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_6E07	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl __far _ThrowException(int, int, void *src, int, int, int,	int, int, int, int, int, int)
@_ThrowException$qnvt1t1t1uiuiuinuc proc far
					; xalloc::raise(void)+6Cp ...

var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
src		= dword	ptr  0Ah
arg_8		= word ptr  0Eh
arg_A		= word ptr  10h
arg_C		= word ptr  12h
arg_E		= word ptr  14h
arg_10		= word ptr  16h
arg_12		= word ptr  18h
arg_14		= word ptr  1Ah
arg_16		= word ptr  1Ch
arg_18		= word ptr  1Eh

		push	bp
		mov	bp, sp
		sub	sp, 6
		push	si
		push	di
		mov	[bp+var_6], bp
		mov	bx, [bp+var_6]
		mov	dx, ss:[bx+4]
		mov	ax, ss:[bx+2]
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		xor	ax, ax
		push	ax		; int
		push	[bp+var_2]	; int
		push	[bp+var_4]	; int
		push	[bp+arg_18]	; int
		push	[bp+arg_16]	; int
		push	[bp+arg_14]	; int
		push	[bp+arg_12]	; int
		push	[bp+arg_10]	; int
		push	[bp+arg_E]	; int
		push	[bp+arg_C]	; int
		push	[bp+arg_A]	; int
		push	[bp+arg_8]	; int
		push	word ptr [bp+src+2]
		push	word ptr [bp+src] ; src
		push	[bp+arg_2]	; int
		push	[bp+arg_0]	; int
		push	cs
		call	near ptr sub_6E07
		add	sp, 20h
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@_ThrowException$qnvt1t1t1uiuiuinuc endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; _ReThrowException(unsigned int, unsigned char	*)
@_ReThrowException$quinuc proc far

var_A		= word ptr -0Ah
var_8		= dword	ptr -8
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		sub	sp, 0Ah
		push	si
		push	di
		mov	[bp+var_A], bp
		mov	bx, [bp+var_A]
		mov	dx, ss:[bx+4]
		mov	ax, ss:[bx+2]
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		les	bx, ss:16h
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_8+2], dx
		mov	word ptr [bp+var_8], ax
		mov	ax, word ptr [bp+var_8]
		or	ax, word ptr [bp+var_8+2]
		jnz	short loc_71CA
		nop
		push	cs
		call	near ptr ___call_terminate
; ---------------------------------------------------------------------------

loc_71CA:
		mov	ax, 1
		push	ax		; int
		push	[bp+var_2]	; int
		push	[bp+var_4]	; int
		push	[bp+arg_4]	; int
		push	[bp+arg_2]	; int
		push	[bp+arg_0]	; int
		les	bx, [bp+var_8]
		push	word ptr es:[bx+0Ch] ; int
		les	bx, [bp+var_8]
		push	word ptr es:[bx+22h] ; int
		les	bx, [bp+var_8]
		push	word ptr es:[bx+20h] ; int
		push	word ptr es:[bx+1Eh] ; int
		les	bx, [bp+var_8]
		push	word ptr es:[bx+0Ah] ; int
		push	word ptr es:[bx+8] ; int
		les	bx, [bp+var_8]
		cmp	byte ptr es:[bx+38h], 0
		jz	short loc_7216
		mov	dx, word ptr [bp+var_8+2]
		mov	ax, word ptr [bp+var_8]
		add	ax, 3Ah	; ':'
		jmp	short loc_721F
; ---------------------------------------------------------------------------

loc_7216:
		les	bx, [bp+var_8]
		mov	ax, es:[bx+36h]
		mov	dx, ss

loc_721F:
		push	dx
		push	ax		; src
		les	bx, [bp+var_8]
		push	word ptr es:[bx+6] ; int
		push	word ptr es:[bx+4] ; int
		push	cs
		call	near ptr sub_6E07
		add	sp, 20h
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@_ReThrowException$quinuc endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

sub_7239	proc far
		push	si
		push	di
		pop	di
		pop	si
		retf
sub_7239	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_723E	proc far
					; _RaiseException+2A6p	...

var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

		push	bp
		mov	bp, sp
		sub	sp, 6
		push	si
		push	di
		mov	[bp+var_4], 0
		mov	bx, [bp+arg_0]
		test	byte ptr ss:[bx+4], 6
		jz	short loc_7258
		inc	[bp+var_4]

loc_7258:
		mov	ax, ss:14h
		mov	[bp+var_2], ax
		push	cs
		call	near ptr sub_7239
		jmp	short loc_72A6
; ---------------------------------------------------------------------------

loc_7265:
		mov	ax, [bp+var_2]
		mov	[bp+var_6], ax
		xor	ax, ax
		push	ax
		push	ax
		push	[bp+arg_4]
		push	[bp+arg_2]
		push	[bp+var_2]
		push	ss
		push	[bp+arg_0]
		mov	bx, [bp+var_6]
		call	dword ptr ss:[bx+2]
		add	sp, 0Eh
		mov	dx, ax
		or	dx, dx
		jnz	short loc_7290
		mov	ax, dx
		jmp	short loc_72C4
; ---------------------------------------------------------------------------

loc_7290:
		cmp	[bp+var_4], 0
		jz	short loc_729D
		mov	ax, [bp+var_2]
		mov	ss:14h,	ax

loc_729D:
		mov	bx, [bp+var_2]
		mov	ax, ss:[bx]
		mov	[bp+var_2], ax

loc_72A6:
		cmp	[bp+var_2], 0FFFFh
		jz	short loc_72B4
		mov	ax, [bp+var_2]
		cmp	ax, [bp+arg_6]
		jnz	short loc_7265

loc_72B4:
		cmp	[bp+var_4], 0
		jz	short loc_72C1
		mov	ax, [bp+var_2]
		mov	ss:14h,	ax

loc_72C1:
		mov	ax, 1

loc_72C4:
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_723E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__Global_unwind	proc far

var_4C		= word ptr -4Ch
var_4A		= word ptr -4Ah
var_48		= word ptr -48h
var_46		= word ptr -46h
var_3E		= word ptr -3Eh
arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		sub	sp, 4Ch
		push	si
		push	di
		mov	dx, [bp+arg_2]
		or	dx, dx
		jnz	short loc_72F5
		mov	[bp+var_4A], 0
		mov	[bp+var_4C], 26h ; '&'
		mov	[bp+var_46], 0
		mov	[bp+var_48], 2
		mov	[bp+var_3E], 0
		lea	dx, [bp+var_4C]

loc_72F5:
		mov	bx, dx
		or	word ptr ss:[bx+4], 2
		push	[bp+arg_0]
		xor	ax, ax
		push	ax
		push	ax
		push	dx
		push	cs
		call	near ptr sub_723E
		add	sp, 8
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
__Global_unwind	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

sub_7311	proc far
		push	si
		push	di
		pop	di
		pop	si
		retf
sub_7311	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

_RaiseException	proc far

dest		= word ptr -186h
var_184		= word ptr -184h
var_182		= word ptr -182h
var_180		= word ptr -180h
var_17E		= word ptr -17Eh
var_17C		= word ptr -17Ch
var_176		= word ptr -176h
var_174		= word ptr -174h
var_172		= word ptr -172h
var_170		= word ptr -170h
var_16E		= word ptr -16Eh
var_16C		= word ptr -16Ch
var_16A		= word ptr -16Ah
var_168		= word ptr -168h
var_166		= word ptr -166h
var_164		= word ptr -164h
var_162		= word ptr -162h
var_160		= word ptr -160h
var_15E		= word ptr -15Eh
var_15A		= word ptr -15Ah
var_158		= word ptr -158h
var_156		= word ptr -156h
var_154		= word ptr -154h
var_152		= byte ptr -152h
var_C6		= word ptr -0C6h
var_C4		= word ptr -0C4h
var_C2		= word ptr -0C2h
var_C0		= word ptr -0C0h
var_BE		= word ptr -0BEh
var_BC		= word ptr -0BCh
var_BA		= word ptr -0BAh
var_B8		= word ptr -0B8h
var_B6		= word ptr -0B6h
var_B4		= word ptr -0B4h
var_B2		= word ptr -0B2h
var_B0		= word ptr -0B0h
var_AE		= word ptr -0AEh
var_AC		= word ptr -0ACh
var_AA		= word ptr -0AAh
var_A8		= word ptr -0A8h
var_A6		= word ptr -0A6h
var_A4		= word ptr -0A4h
var_A2		= word ptr -0A2h
var_A0		= word ptr -0A0h
var_9E		= word ptr -9Eh
var_9C		= word ptr -9Ch
var_9A		= word ptr -9Ah
var_98		= word ptr -98h
var_96		= word ptr -96h
var_94		= word ptr -94h
var_92		= word ptr -92h
var_90		= word ptr -90h
var_8E		= word ptr -8Eh
var_8C		= word ptr -8Ch
var_8A		= word ptr -8Ah
var_88		= word ptr -88h
var_86		= byte ptr -86h
var_56		= word ptr -56h
var_54		= word ptr -54h
var_52		= word ptr -52h
var_50		= word ptr -50h
var_4E		= word ptr -4Eh
var_4C		= word ptr -4Ch
var_4A		= word ptr -4Ah
var_48		= word ptr -48h
var_46		= byte ptr -46h
src		= dword	ptr -0Ah
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  18h
arg_2		= word ptr  1Ah
arg_4		= word ptr  1Ch
arg_6		= word ptr  1Eh
arg_8		= word ptr  20h
arg_A		= word ptr  22h
arg_C		= dword	ptr  24h

; FUNCTION CHUNK AT 7788 SIZE 0000000D BYTES

		push	ax
		push	cx
		push	dx
		push	bx
		push	sp
		push	bp
		push	si
		push	di
		push	ds
		push	es
		mov	bp, sp
		sub	sp, 186h
		lea	ax, [bp+var_86]
		push	ax
		push	cs
		call	near ptr sub_7311
		pop	cx
		pushf
		pop	ax
		mov	word ptr [bp+src+2], ax
		cmp	byte ptr word_F2C2, 3
		jnb	short loc_733F
		jmp	loc_73F5
; ---------------------------------------------------------------------------

loc_733F:
		pushad
		mov	word ptr [bp+src], sp
		mov	ax, 20h	; ' '
		push	ax		; n
		push	ss
		push	word ptr [bp+src] ; src
		push	ss
		lea	ax, [bp+dest]
		push	ax		; dest
		nop
		push	cs
		call	near ptr _memcpy
		add	sp, 0Ah
		popad
		mov	dx, [bp+var_184]
		mov	ax, [bp+dest]
		mov	[bp+var_B4], dx
		mov	[bp+var_B6], ax
		mov	dx, [bp+var_180]
		mov	ax, [bp+var_182]
		mov	[bp+var_B0], dx
		mov	[bp+var_B2], ax
		mov	dx, [bp+var_174]
		mov	ax, [bp+var_176]
		mov	[bp+var_AC], dx
		mov	[bp+var_AE], ax
		mov	dx, [bp+var_170]
		mov	ax, [bp+var_172]
		mov	[bp+var_A8], dx
		mov	[bp+var_AA], ax
		mov	dx, [bp+var_16C]
		mov	ax, [bp+var_16E]
		mov	[bp+var_A4], dx
		mov	[bp+var_A6], ax
		mov	dx, [bp+var_168]
		mov	ax, [bp+var_16A]
		mov	[bp+var_A0], dx
		mov	[bp+var_A2], ax
		mov	dx, [bp+var_17C]
		mov	ax, [bp+var_17E]
		mov	[bp+var_9C], dx
		mov	[bp+var_9E], ax
		pushfd
		pop	eax
		shr	eax, 10h
		mov	[bp+var_90], ax
		mov	ax, word ptr [bp+src+2]
		mov	[bp+var_92], ax
		mov	[bp+var_C0], 0
		mov	[bp+var_C2], fs
		mov	[bp+var_C4], 0
		mov	[bp+var_C6], gs
		jmp	short loc_743E
; ---------------------------------------------------------------------------

loc_73F5:
		xor	ax, ax
		xor	dx, dx
		mov	[bp+var_9C], ax
		mov	[bp+var_9E], dx
		mov	[bp+var_A0], ax
		mov	[bp+var_A2], dx
		mov	[bp+var_A4], ax
		mov	[bp+var_A6], dx
		mov	[bp+var_A8], ax
		mov	[bp+var_AA], dx
		mov	[bp+var_AC], ax
		mov	[bp+var_AE], dx
		mov	[bp+var_B0], ax
		mov	[bp+var_B2], dx
		mov	[bp+var_B4], ax
		mov	[bp+var_B6], dx
		mov	ax, word ptr [bp+src+2]
		mov	[bp+var_90], 0
		mov	[bp+var_92], ax

loc_743E:
		mov	dx, [bp+var_9C]
		mov	ax, [bp+var_9E]
		add	ax, 18h
		adc	dx, 0
		mov	[bp+var_8C], dx
		mov	[bp+var_8E], ax
		cmp	[bp+arg_2], 0EEFh
		jnz	short loc_746F
		cmp	[bp+arg_0], 0FACEh
		jnz	short loc_746F
		les	bx, [bp+arg_C]
		mov	dx, es:[bx+6]
		mov	ax, es:[bx+4]
		jmp	short loc_747D
; ---------------------------------------------------------------------------

loc_746F:
					; _RaiseException+14Aj
		mov	word ptr [bp+src], bp
		mov	bx, word ptr [bp+src]
		mov	dx, ss:[bx+16h]
		mov	ax, ss:[bx+14h]

loc_747D:
		mov	[bp+var_4], dx
		mov	[bp+var_6], ax
		mov	ax, [bp+var_6]
		mov	[bp+var_98], 0
		mov	[bp+var_9A], ax
		mov	ax, [bp+var_4]
		mov	[bp+var_94], 0
		mov	[bp+var_96], ax
		mov	ax, 14h
		push	ax		; n
		push	ss
		push	bp		; src
		push	ss
		lea	ax, [bp+var_166]
		push	ax		; dest
		nop
		push	cs
		call	near ptr _memcpy
		add	sp, 0Ah
		mov	ax, [bp+var_164]
		mov	[bp+var_B8], 0
		mov	[bp+var_BA], ax
		mov	ax, [bp+var_166]
		mov	[bp+var_BC], 0
		mov	[bp+var_BE], ax
		mov	[bp+var_88], 0
		mov	[bp+var_8A], ss
		mov	ax, [bp+var_154]
		mov	[bp+var_A2], ax
		mov	ax, [bp+var_15A]
		mov	[bp+var_AE], ax
		mov	ax, [bp+var_156]
		mov	[bp+var_A6], ax
		mov	ax, [bp+var_158]
		mov	[bp+var_AA], ax
		mov	ax, [bp+var_160]
		mov	[bp+var_B2], ax
		mov	ax, [bp+var_162]
		mov	[bp+var_B6], ax
		mov	ax, [bp+var_15E]
		mov	[bp+var_9E], ax
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		and	dx, 0EFFFh
		mov	[bp+var_54], dx
		mov	[bp+var_56], ax
		mov	dx, [bp+arg_6]
		mov	ax, [bp+arg_4]
		mov	[bp+var_50], dx
		mov	[bp+var_52], ax
		mov	dx, [bp+var_4]
		mov	ax, [bp+var_6]
		mov	[bp+var_4A], dx
		mov	[bp+var_4C], ax
		mov	[bp+var_4E], 0
		mov	ax, word ptr [bp+arg_C]
		or	ax, word ptr [bp+arg_C+2]
		jnz	short loc_754E
		mov	[bp+arg_A], 0
		mov	[bp+arg_8], 0

loc_754E:
		cmp	[bp+arg_A], 0
		jb	short loc_7566
		ja	short loc_755C
		cmp	[bp+arg_8], 0Fh
		jbe	short loc_7566

loc_755C:
		mov	[bp+arg_A], 0
		mov	[bp+arg_8], 0Fh

loc_7566:
					; _RaiseException+244j
		mov	ax, [bp+arg_8]
		mov	[bp+var_48], ax
		mov	[bp+var_2], 0
		jmp	short loc_759C
; ---------------------------------------------------------------------------

loc_7573:
					; _RaiseException+295j
		mov	bx, [bp+var_2]
		mov	cl, 2
		shl	bx, cl
		lea	ax, [bp+var_46]
		add	bx, ax
		mov	ax, [bp+var_2]
		mov	cl, 2
		shl	ax, cl
		les	si, [bp+arg_C]
		add	si, ax
		mov	dx, es:[si+2]
		mov	ax, es:[si]
		mov	ss:[bx+2], dx
		mov	ss:[bx], ax
		inc	[bp+var_2]

loc_759C:
		mov	ax, [bp+var_2]
		xor	dx, dx
		cmp	dx, [bp+arg_A]
		jb	short loc_7573
		jnz	short loc_75AD
		cmp	ax, [bp+arg_8]
		jb	short loc_7573

loc_75AD:
					; _RaiseException+2E0j
		mov	ax, 0FFFFh
		push	ax
		push	ss
		lea	ax, [bp+var_152]
		push	ax
		lea	ax, [bp+var_56]
		push	ax
		push	cs
		call	near ptr sub_723E
		add	sp, 8
		or	ax, ax
		jnz	short loc_75F8
		test	byte ptr [bp+arg_4], 1
		jz	short loc_7618
		mov	[bp+var_54], 0C000h
		mov	[bp+var_56], 25h ; '%'
		mov	dx, [bp+arg_6]
		mov	ax, [bp+arg_4]
		mov	[bp+var_50], dx
		mov	[bp+var_52], ax
		mov	[bp+var_4A], 0
		mov	[bp+var_4C], 0
		mov	[bp+var_4E], 0
		mov	[bp+var_48], 0
		jmp	short loc_75AD
; ---------------------------------------------------------------------------

loc_75F8:
		or	[bp+var_52], 2
		mov	ax, 0FFFFh
		push	ax
		push	ss
		lea	ax, [bp+var_152]
		push	ax
		lea	ax, [bp+var_56]
		push	ax
		push	cs
		call	near ptr sub_723E
		add	sp, 8
		or	ax, ax
		jz	short loc_7618
		jmp	loc_7783
; ---------------------------------------------------------------------------

loc_7618:
					; _RaiseException+2FDj
		cmp	byte ptr word_F2C2, 3
		jnb	short loc_7622
		jmp	loc_7702
; ---------------------------------------------------------------------------

loc_7622:
		mov	cx, [bp+var_8E]
		sub	cx, 30h	; '0'
		mov	es, [bp+var_8A]
		mov	bx, cx
		mov	ax, [bp+var_C6]
		mov	es:[bx], ax
		mov	ax, [bp+var_C2]
		mov	es:[bx+2], ax
		mov	ax, [bp+var_BE]
		mov	es:[bx+4], ax
		mov	ax, [bp+var_BA]
		mov	es:[bx+6], ax
		mov	dx, [bp+var_B4]
		mov	ax, [bp+var_B6]
		mov	es:[bx+0Ah], dx
		mov	es:[bx+8], ax
		mov	dx, [bp+var_B0]
		mov	ax, [bp+var_B2]
		mov	es:[bx+0Eh], dx
		mov	es:[bx+0Ch], ax
		mov	dx, [bp+var_9C]
		mov	ax, [bp+var_9E]
		mov	es:[bx+12h], dx
		mov	es:[bx+10h], ax
		mov	dx, [bp+var_8C]
		mov	ax, [bp+var_8E]
		mov	es:[bx+16h], dx
		mov	es:[bx+14h], ax
		mov	dx, [bp+var_AC]
		mov	ax, [bp+var_AE]
		mov	es:[bx+1Ah], dx
		mov	es:[bx+18h], ax
		mov	dx, [bp+var_A8]
		mov	ax, [bp+var_AA]
		mov	es:[bx+1Eh], dx
		mov	es:[bx+1Ch], ax
		mov	dx, [bp+var_A4]
		mov	ax, [bp+var_A6]
		mov	es:[bx+22h], dx
		mov	es:[bx+20h], ax
		mov	dx, [bp+var_A0]
		mov	ax, [bp+var_A2]
		mov	es:[bx+26h], dx
		mov	es:[bx+24h], ax
		mov	dx, [bp+var_90]
		mov	ax, [bp+var_92]
		mov	es:[bx+2Ah], dx
		mov	es:[bx+28h], ax
		mov	ax, [bp+var_9A]
		mov	es:[bx+2Ch], ax
		mov	ax, [bp+var_96]
		mov	es:[bx+2Eh], ax
		mov	ss, [bp+var_8A]
		mov	sp, bx
		pop	gs
		pop	fs
		pop	es
		pop	ds
		popad
		popfd
		retf
; ---------------------------------------------------------------------------
		jmp	loc_7788
; ---------------------------------------------------------------------------

loc_7702:
		mov	cx, [bp+var_8E]
		sub	cx, 1Ah
		mov	es, [bp+var_8A]
		mov	bx, cx
		mov	ax, [bp+var_BE]
		mov	es:[bx], ax
		mov	ax, [bp+var_BA]
		mov	es:[bx+2], ax
		mov	ax, [bp+var_B6]
		mov	es:[bx+4], ax
		mov	ax, [bp+var_B2]
		mov	es:[bx+6], ax
		mov	ax, [bp+var_9E]
		mov	es:[bx+8], ax
		mov	ax, [bp+var_8E]
		mov	es:[bx+0Ah], ax
		mov	ax, [bp+var_AE]
		mov	es:[bx+0Ch], ax
		mov	ax, [bp+var_AA]
		mov	es:[bx+0Eh], ax
		mov	ax, [bp+var_A6]
		mov	es:[bx+10h], ax
		mov	ax, [bp+var_A2]
		mov	es:[bx+12h], ax
		mov	ax, [bp+var_92]
		mov	es:[bx+14h], ax
		mov	ax, [bp+var_9A]
		mov	es:[bx+16h], ax
		mov	ax, [bp+var_96]
		mov	es:[bx+18h], ax
		mov	ss, [bp+var_8A]
		mov	sp, bx
		pop	es
		pop	ds
		popa
		popf
		retf
; ---------------------------------------------------------------------------
		jmp	short loc_7788
; ---------------------------------------------------------------------------

loc_7783:
		nop
		push	cs
		call	near ptr ___call_terminate
_RaiseException	endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR _RaiseException

loc_7788:
					; _RaiseException+46Bj
		mov	sp, bp
		pop	es
		pop	ds
		pop	di
		pop	si
		pop	bp
		pop	bx
		pop	bx
		pop	dx
		pop	cx
		pop	ax
		retf
; END OF FUNCTION CHUNK	FOR _RaiseException
; ---------------------------------------------------------------------------
		db 4 dup(0), 0F7h, 77h
		dw seg seg000
		db 14h dup(0), 0E2h, 0FFh, 2 dup(0), 3,	0, 95h,	77h
		dw seg seg000
		db 2 dup(0), 4,	0

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_77BF	proc near

var_1E		= word ptr -1Eh
var_12		= word ptr -12h
arg_0		= word ptr  4
arg_2		= word ptr  6
arg_4		= word ptr  8
arg_6		= word ptr  0Ah
arg_8		= word ptr  0Ch

		push	bp
		mov	bp, sp
		sub	sp, 1Eh
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 77ADh
		nop
		push	cs
		call	near ptr ___InitExceptBlocks
		mov	[bp+var_12], 6
		mov	ax, 1
		push	ax
		push	[bp+arg_8]
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	sub_6B30
		add	sp, 0Ch
		mov	[bp+var_12], 0
		jmp	short loc_7801
; ---------------------------------------------------------------------------
		nop
		push	cs
		call	near ptr ___call_terminate
; ---------------------------------------------------------------------------
		nop
		push	cs
		call	near ptr @_CatchCleanup$qv ; _CatchCleanup(void)

loc_7801:
		push	[bp+var_1E]
		nop
		push	cs
		call	near ptr ___ExitExceptBlocks
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_77BF	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_780F	proc near
					; sub_7D59+138p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		push	bp
		mov	bp, sp
		sub	sp, 8
		push	si
		push	di
		les	bx, [bp+arg_0]
		cmp	byte ptr es:[bx+38h], 0
		jz	short loc_788A
		les	bx, [bp+arg_0]
		test	byte ptr es:[bx+16h], 2
		jz	short loc_7882
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_8+2], dx
		mov	word ptr [bp+var_8], ax
		les	bx, [bp+arg_0]
		les	bx, es:[bx+4]
		mov	word ptr [bp+var_4+2], es
		mov	word ptr [bp+var_4], bx
		push	word ptr es:[bx+22h]
		les	bx, [bp+var_4]
		push	word ptr es:[bx+20h]
		push	word ptr es:[bx+1Eh]
		mov	ax, word ptr [bp+arg_0]
		add	ax, 3Ah	; ':'
		push	word ptr [bp+arg_0+2]
		push	ax
		call	sub_77BF
		add	sp, 0Ah
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, word ptr [bp+var_8+2]
		mov	cx, word ptr [bp+var_8]
		mov	es, dx
		xchg	ax, bx
		mov	es:[bx+2], ax
		mov	es:[bx], cx

loc_7882:
		les	bx, [bp+arg_0]
		mov	byte ptr es:[bx+38h], 0

loc_788A:
		les	bx, [bp+arg_0]
		cmp	byte ptr es:[bx+39h], 0
		jz	short loc_78E1
		les	bx, [bp+arg_0]
		mov	dx, es:[bx+34h]
		mov	ax, es:[bx+32h]
		mov	word ptr [bp+var_8+2], dx
		mov	word ptr [bp+var_8], ax
		les	bx, [bp+var_8]
		test	byte ptr es:[bx+2], 2
		jz	short loc_78D9
		les	bx, [bp+var_8]
		test	byte ptr es:[bx+8], 2
		jz	short loc_78D9
		les	bx, [bp+var_8]
		push	word ptr es:[bx+22h]
		les	bx, [bp+var_8]
		push	word ptr es:[bx+20h]
		push	word ptr es:[bx+1Eh]
		push	ss
		les	bx, [bp+arg_0]
		push	word ptr es:[bx+36h]
		call	sub_77BF
		add	sp, 0Ah

loc_78D9:
		les	bx, [bp+arg_0]
		mov	byte ptr es:[bx+39h], 0

loc_78E1:
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_780F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; _CatchCleanup(void)
@_CatchCleanup$qv proc far
					; sub_6E07+277p ...

var_6		= word ptr -6
var_4		= dword	ptr -4
arg_0		= dword	ptr  6
arg_6		= word ptr  0Ch

		push	bp
		mov	bp, sp
		sub	sp, 6
		push	si
		push	di
		les	bx, ss:16h
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		les	bx, [bp+var_4]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		les	bx, ss:16h
		mov	es:[bx+2], dx
		mov	es:[bx], ax
		les	bx, [bp+var_4]
		mov	ax, es:[bx+24h]
		mov	[bp+var_6], ax
		mov	bx, [bp+var_6]
		les	ax, ss:[bx+arg_0]
		mov	bx, [bp+var_6]
		add	ax, ss:[bx+arg_6]
		mov	bx, ax
		mov	ax, es:[bx]
		mov	bx, [bp+var_6]
		mov	ss:[bx+arg_6], ax
		push	word ptr [bp+var_4+2]
		push	word ptr [bp+var_4]
		call	sub_780F
		pop	cx
		pop	cx
		push	ds
		les	bx, [bp+var_4]
		mov	ds, word ptr es:[bx+18h]
		push	word ptr [bp+var_4+2]
		push	word ptr [bp+var_4]
		les	bx, [bp+var_4]
		call	dword ptr es:[bx+1Ah]
		pop	cx
		pop	cx
		pop	ds
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@_CatchCleanup$qv endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_7964	proc near

var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= word ptr  8
arg_6		= word ptr  0Ah
arg_8		= word ptr  0Ch
arg_A		= word ptr  0Eh

		push	bp
		mov	bp, sp
		sub	sp, 0Ch
		push	si
		push	di

loc_796C:
		les	bx, [bp+arg_0]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		mov	ax, word ptr [bp+var_4]
		or	ax, word ptr [bp+var_4+2]
		jnz	short loc_7989
		xor	ax, ax
		jmp	loc_7A2A
; ---------------------------------------------------------------------------

loc_7989:
		mov	bx, [bp+arg_A]
		mov	dx, ss:[bx+2]
		mov	ax, ss:[bx]
		les	bx, [bp+arg_0]
		add	ax, es:[bx+4]
		mov	word ptr [bp+var_8+2], dx
		mov	word ptr [bp+var_8], ax
		cmp	[bp+arg_4], 0
		jz	short loc_79B5
		les	bx, [bp+var_8]
		mov	ax, es:[bx]
		mov	dx, word ptr [bp+var_8+2]
		mov	word ptr [bp+var_8+2], dx
		mov	word ptr [bp+var_8], ax

loc_79B5:
		push	[bp+arg_8]
		push	[bp+arg_6]
		push	word ptr [bp+var_4+2]
		push	word ptr [bp+var_4]
		push	cs
		call	near ptr sub_62E4
		add	sp, 8
		or	ax, ax
		jnz	short loc_7A0E
		les	bx, [bp+var_4]
		test	byte ptr es:[bx+2], 2
		jz	short loc_7A23
		les	bx, [bp+var_4]
		mov	dx, word ptr [bp+var_4+2]
		mov	ax, word ptr [bp+var_4]
		add	ax, es:[bx+0Ah]
		mov	[bp+var_A], dx
		mov	[bp+var_C], ax
		mov	ax, [bp+var_C]
		or	ax, [bp+var_A]
		jz	short loc_7A23
		lea	ax, [bp+var_8]
		push	ax
		push	[bp+arg_8]
		push	[bp+arg_6]
		xor	ax, ax
		push	ax
		push	[bp+var_A]
		push	[bp+var_C]
		call	sub_7964
		add	sp, 0Ch
		or	ax, ax
		jz	short loc_7A23

loc_7A0E:
		mov	bx, [bp+arg_A]
		mov	dx, word ptr [bp+var_8+2]
		mov	ax, word ptr [bp+var_8]
		mov	ss:[bx+2], dx
		mov	ss:[bx], ax
		mov	ax, 1
		jmp	short loc_7A2A
; ---------------------------------------------------------------------------

loc_7A23:
		add	word ptr [bp+arg_0], 8
		jmp	loc_796C
; ---------------------------------------------------------------------------

loc_7A2A:
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_7964	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_7A30	proc far
					; sub_7AB3+1C2p

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= dword	ptr  0Ah
arg_8		= word ptr  0Eh
arg_A		= word ptr  10h

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	si
		push	di
		mov	ax, [bp+arg_0]
		or	ax, [bp+arg_2]
		jz	short loc_7AA1
		les	bx, [bp+arg_4]
		mov	dx, word ptr [bp+arg_4+2]
		mov	ax, word ptr [bp+arg_4]
		add	ax, es:[bx+0Ah]
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		lea	ax, [bp+arg_0]
		push	ax
		push	[bp+arg_A]
		push	[bp+arg_8]
		xor	ax, ax
		push	ax
		push	[bp+var_2]
		push	[bp+var_4]
		call	sub_7964
		add	sp, 0Ch
		or	ax, ax
		jnz	short loc_7AA1
		les	bx, [bp+arg_4]
		mov	dx, word ptr [bp+arg_4+2]
		mov	ax, word ptr [bp+arg_4]
		add	ax, es:[bx+0Ch]
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		lea	ax, [bp+arg_0]
		push	ax
		push	[bp+arg_A]
		push	[bp+arg_8]
		mov	ax, 1
		push	ax
		push	[bp+var_2]
		push	[bp+var_4]
		call	sub_7964
		add	sp, 0Ch
		or	ax, ax
		jz	short loc_7AA9

loc_7AA1:
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		jmp	short loc_7AAD
; ---------------------------------------------------------------------------

loc_7AA9:
		xor	dx, dx
		xor	ax, ax

loc_7AAD:
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_7A30	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_7AB3	proc near

var_18		= word ptr -18h
var_16		= word ptr -16h
var_14		= word ptr -14h
var_12		= word ptr -12h
var_10		= word ptr -10h
src		= dword	ptr -0Eh
n		= word ptr -0Ah
var_8		= dword	ptr -8
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  4
arg_6		= dword	ptr  0Ah
arg_A		= dword	ptr  0Eh
arg_E		= word ptr  12h

		push	bp
		mov	bp, sp
		sub	sp, 18h
		push	si
		push	di
		les	bx, [bp+arg_0]
		mov	dx, es:[bx+6]
		mov	ax, es:[bx+4]
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		les	bx, [bp+arg_6]
		mov	es:[bx+34h], dx
		mov	es:[bx+32h], ax
		mov	ax, [bp+var_4]
		or	ax, [bp+var_2]
		jnz	short loc_7AE2
		jmp	loc_7D53
; ---------------------------------------------------------------------------

loc_7AE2:
		les	bx, [bp+arg_0]
		test	byte ptr es:[bx+8], 80h
		jz	short loc_7AEF
		jmp	loc_7D53
; ---------------------------------------------------------------------------

loc_7AEF:
		les	bx, [bp+arg_0]
		mov	ax, es:[bx+8]
		and	ax, 1
		neg	ax
		sbb	ax, ax
		inc	ax
		mov	[bp+var_14], ax
		mov	dx, word ptr [bp+arg_6+2]
		mov	ax, word ptr [bp+arg_6]
		add	ax, 3Ah	; ':'
		mov	word ptr [bp+src+2], dx
		mov	word ptr [bp+src], ax
		les	bx, [bp+arg_6]
		mov	byte ptr es:[bx+39h], 1
		les	bx, [bp+arg_A]
		mov	ax, es:[bx]
		add	ax, [bp+arg_E]
		les	bx, [bp+arg_6]
		mov	es:[bx+36h], ax
		mov	dx, [bp+var_2]
		mov	ax, [bp+var_4]
		mov	word ptr [bp+var_8+2], dx
		mov	word ptr [bp+var_8], ax
		les	bx, [bp+var_8]
		mov	ax, es:[bx]
		mov	[bp+n],	ax
		les	bx, [bp+var_8]
		mov	cx, es:[bx+2]
		mov	dx, cx
		test	cl, 30h
		jz	short loc_7B63
		les	bx, [bp+var_8]
		mov	dx, es:[bx+8]
		mov	ax, es:[bx+6]
		mov	word ptr [bp+var_8+2], dx
		mov	word ptr [bp+var_8], ax
		les	bx, [bp+var_8]
		mov	dx, es:[bx+2]

loc_7B63:
		test	cl, 10h
		jz	short loc_7B8B
		les	bx, [bp+arg_6]
		test	byte ptr es:[bx+0Ch], 1
		jz	short loc_7B8B
		push	[bp+n]		; n
		xor	ax, ax
		push	ax		; c
		push	ss
		les	bx, [bp+arg_6]
		push	word ptr es:[bx+36h] ; s
		nop
		push	cs
		call	near ptr _memset
		add	sp, 8
		jmp	loc_7CB6
; ---------------------------------------------------------------------------

loc_7B8B:
		test	dl, 1
		jnz	short loc_7B93
		jmp	loc_7C37
; ---------------------------------------------------------------------------

loc_7B93:
		test	cl, 30h
		jnz	short loc_7B9B
		jmp	loc_7C37
; ---------------------------------------------------------------------------

loc_7B9B:
		test	cl, 20h
		jz	short loc_7BA2
		jmp	short loc_7BC5
; ---------------------------------------------------------------------------

loc_7BA2:
		les	bx, [bp+src]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+src+2], dx
		mov	word ptr [bp+src], ax
		les	bx, [bp+arg_6]
		test	byte ptr es:[bx+15h], 10h
		jz	short loc_7BCC
		mov	ax, word ptr [bp+src]
		mov	word ptr [bp+src+2], ds
		mov	word ptr [bp+src], ax

loc_7BC5:
		mov	[bp+var_14], 1
		jmp	short $+2

loc_7BCC:
		push	word ptr [bp+var_8+2]
		push	word ptr [bp+var_8]
		les	bx, [bp+arg_6]
		push	word ptr es:[bx+12h]
		push	word ptr es:[bx+10h]
		push	cs
		call	near ptr sub_62E4
		add	sp, 8
		or	ax, ax
		jnz	short loc_7C2D
		mov	dx, word ptr [bp+src+2]
		mov	ax, word ptr [bp+src]
		mov	[bp+var_16], dx
		mov	[bp+var_18], ax
		push	word ptr [bp+var_8+2]
		push	word ptr [bp+var_8]
		les	bx, [bp+arg_6]
		push	word ptr es:[bx+12h]
		push	word ptr es:[bx+10h]
		push	word ptr [bp+src+2]
		push	word ptr [bp+src]
		push	cs
		call	near ptr sub_7A30
		add	sp, 0Ch
		mov	word ptr [bp+src+2], dx
		mov	word ptr [bp+src], ax
		mov	dx, word ptr [bp+src+2]
		mov	ax, word ptr [bp+src]
		cmp	dx, [bp+var_16]
		jnz	short loc_7C28
		cmp	ax, [bp+var_18]
		jz	short loc_7C2D

loc_7C28:
		mov	[bp+var_14], 1

loc_7C2D:
					; sub_7AB3+173j
		push	[bp+n]
		push	ss
		lea	ax, [bp+src]
		jmp	loc_7D01
; ---------------------------------------------------------------------------

loc_7C37:
		les	bx, [bp+arg_6]
		test	byte ptr es:[bx+14h], 1
		jz	short loc_7CBD
		push	word ptr [bp+var_8+2]
		push	word ptr [bp+var_8]
		les	bx, [bp+arg_6]
		push	word ptr es:[bx+12h]
		push	word ptr es:[bx+10h]
		push	cs
		call	near ptr sub_62E4
		add	sp, 8
		or	ax, ax
		jnz	short loc_7C86
		push	word ptr [bp+var_8+2]
		push	word ptr [bp+var_8]
		les	bx, [bp+arg_6]
		push	word ptr es:[bx+12h]
		push	word ptr es:[bx+10h]
		push	word ptr [bp+src+2]
		push	word ptr [bp+src]
		push	cs
		call	near ptr sub_7A30
		add	sp, 0Ch
		mov	word ptr [bp+src+2], dx
		mov	word ptr [bp+src], ax
		mov	[bp+var_14], 1

loc_7C86:
		les	bx, [bp+var_8]
		test	byte ptr es:[bx+8], 1
		jz	short loc_7D04
		les	bx, [bp+arg_0]
		push	word ptr es:[bx+0Eh]
		les	bx, [bp+arg_0]
		push	word ptr es:[bx+0Ch]
		push	word ptr es:[bx+0Ah]
		push	word ptr [bp+src+2]
		push	word ptr [bp+src]
		push	ss
		les	bx, [bp+arg_6]
		push	word ptr es:[bx+36h]
		call	sub_67E2
		add	sp, 0Eh

loc_7CB6:
					; sub_7AB3+227j
		mov	[bp+var_14], 1
		jmp	short loc_7D1D
; ---------------------------------------------------------------------------

loc_7CBD:
		test	cl, 20h
		jz	short loc_7CDC
		push	[bp+n]		; n
		push	ss
		lea	ax, [bp+src]
		push	ax		; src
		push	ss
		les	bx, [bp+arg_6]
		push	word ptr es:[bx+36h] ; dest
		nop
		push	cs
		call	near ptr _memcpy
		add	sp, 0Ah
		jmp	short loc_7CB6
; ---------------------------------------------------------------------------

loc_7CDC:
		test	cl, 10h
		jz	short loc_7D04
		les	bx, [bp+arg_6]
		mov	ax, es:[bx+0Eh]
		cmp	ax, [bp+n]
		jz	short loc_7D04
		les	bx, [bp+src]
		mov	ax, es:[bx]
		mov	[bp+var_10], ds
		mov	[bp+var_12], ax
		mov	ax, 4
		push	ax
		push	ss
		lea	ax, [bp+var_12]

loc_7D01:
		push	ax
		jmp	short loc_7D0D
; ---------------------------------------------------------------------------

loc_7D04:
					; sub_7AB3+22Cj ...
		push	[bp+n]		; n
		push	word ptr [bp+src+2]
		push	word ptr [bp+src] ; src

loc_7D0D:
		push	ss
		les	bx, [bp+arg_6]
		push	word ptr es:[bx+36h] ; dest
		nop
		push	cs
		call	near ptr _memcpy
		add	sp, 0Ah

loc_7D1D:
		cmp	[bp+var_14], 0
		jnz	short loc_7D53
		les	bx, [bp+var_8]
		test	byte ptr es:[bx+8], 2
		jz	short loc_7D4B
		les	bx, [bp+var_8]
		push	word ptr es:[bx+22h]
		les	bx, [bp+var_8]
		push	word ptr es:[bx+20h]
		push	word ptr es:[bx+1Eh]
		push	word ptr [bp+src+2]
		push	word ptr [bp+src]
		call	sub_77BF
		add	sp, 0Ah

loc_7D4B:
		les	bx, [bp+arg_6]
		mov	byte ptr es:[bx+38h], 0

loc_7D53:
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_7AB3	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_7D59	proc near
					; __Return_unwind+15p ...

var_20		= word ptr -20h
var_1E		= word ptr -1Eh
var_1C		= word ptr -1Ch
var_1A		= dword	ptr -1Ah
var_16		= dword	ptr -16h
var_12		= word ptr -12h
var_10		= word ptr -10h
var_E		= word ptr -0Eh
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= dword	ptr -4
arg_0		= word ptr  4
arg_2		= word ptr  6
arg_4		= word ptr  8
arg_8		= word ptr  0Ch
arg_A		= word ptr  0Eh
arg_C		= word ptr  10h
arg_E		= word ptr  12h

		push	bp
		mov	bp, sp
		sub	sp, 20h
		push	si
		push	di
		mov	[bp+var_E], 0
		les	bx, ss:16h
		mov	si, [bp+arg_0]
		mov	ax, ss:[si+arg_A]
		mov	es:[bx+6], ax
		mov	[bp+var_C], ax
		les	bx, ss:16h
		mov	si, [bp+arg_0]
		mov	ax, ss:[si+arg_C]
		mov	es:[bx+8], ax
		mov	bx, [bp+arg_0]
		mov	dx, ss:[bx+arg_4]
		mov	ax, ss:[bx+arg_2]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		les	bx, [bp+var_4]
		mov	ax, [bp+arg_0]
		sub	ax, es:[bx+4]
		mov	[bp+var_A], ax
		mov	bx, [bp+arg_0]
		mov	ax, ss:[bx+arg_8]
		jmp	loc_7EFE
; ---------------------------------------------------------------------------

loc_7DB1:
		mov	ax, [bp+var_6]
		mov	[bp+var_12], ax
		les	bx, [bp+var_4]
		add	bx, [bp+var_12]
		mov	ax, es:[bx]
		mov	[bp+var_8], ax
		add	[bp+var_12], 2
		les	bx, [bp+var_4]
		add	bx, [bp+var_12]
		mov	ax, es:[bx]
		mov	[bp+var_10], ax
		add	[bp+var_12], 2
		mov	bx, [bp+arg_0]
		mov	ax, [bp+var_8]
		mov	ss:[bx+arg_8], ax
		mov	bx, [bp+var_10]
		cmp	bx, 5
		jbe	short loc_7DEC
		jmp	loc_7EFB
; ---------------------------------------------------------------------------

loc_7DEC:
		add	bx, bx
		jmp	cs:off_7F18[bx]

loc_7DF3:
		les	bx, [bp+var_4]
		add	bx, [bp+var_12]
		mov	dx, es:[bx+6]
		mov	ax, es:[bx+4]
		mov	word ptr dword_12646+2,	dx
		mov	word ptr dword_12646, ax
		mov	bx, [bp+arg_0]
		mov	ss:[bx+arg_E], 1
		push	ds
		pop	es
		assume es:dseg
		push	ds
		mov	ds, [bp+var_C]
		push	bp
		mov	bp, [bp+var_A]
		call	es:dword_12646
		pop	bp
		pop	ds
		mov	bx, [bp+arg_0]
		mov	ss:[bx+arg_E], 0
		jmp	loc_7EFB
; ---------------------------------------------------------------------------

loc_7E2E:
		add	[bp+var_12], 4
		mov	dx, ss:18h
		mov	ax, ss:16h
		jmp	short loc_7E5D
; ---------------------------------------------------------------------------

loc_7E3D:
		les	bx, [bp+var_16]
		assume es:nothing
		mov	ax, es:[bx+24h]
		cmp	ax, [bp+arg_0]
		jnz	short loc_7E57
		les	bx, [bp+var_16]
		mov	ax, es:[bx+2Ah]
		cmp	ax, [bp+var_6]
		jnz	short loc_7E57
		jmp	short loc_7E77
; ---------------------------------------------------------------------------

loc_7E57:
		mov	dx, word ptr [bp+var_16+2]
		mov	ax, word ptr [bp+var_16]

loc_7E5D:
		mov	word ptr [bp+var_1A+2],	dx
		mov	word ptr [bp+var_1A], ax
		les	bx, [bp+var_1A]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_16+2],	dx
		mov	word ptr [bp+var_16], ax
		or	ax, dx
		jnz	short loc_7E3D

loc_7E77:
		les	bx, [bp+var_16]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		les	bx, [bp+var_1A]
		mov	es:[bx+2], dx
		mov	es:[bx], ax
		push	word ptr [bp+var_16+2]
		push	word ptr [bp+var_16]
		call	sub_780F
		pop	cx
		pop	cx
		push	ds
		les	bx, [bp+var_16]
		mov	ds, word ptr es:[bx+18h]
		push	word ptr [bp+var_16+2]
		push	word ptr [bp+var_16]
		les	bx, [bp+var_16]
		call	dword ptr es:[bx+1Ah]
		pop	cx
		pop	cx
		pop	ds
		jmp	short loc_7EFB
; ---------------------------------------------------------------------------

loc_7EB0:
		les	bx, [bp+var_4]
		add	bx, [bp+var_12]
		mov	ax, es:[bx]
		mov	[bp+var_1C], ax
		add	[bp+var_12], 2
		les	bx, [bp+var_4]
		add	bx, [bp+var_12]
		mov	ax, es:[bx]
		mov	[bp+var_1E], ds
		mov	[bp+var_20], ax
		mov	ax, word ptr [bp+var_4+2]
		mov	dx, [bp+var_20]
		mov	[bp+var_1E], ax
		mov	[bp+var_20], dx
		push	[bp+var_A]
		push	[bp+arg_0]
		mov	ax, [bp+var_1C]
		add	ax, [bp+var_E]
		cwd
		push	dx
		push	ax
		push	[bp+var_1E]
		push	[bp+var_20]
		call	sub_892F
		add	sp, 0Ch
		mov	[bp+var_E], ax
		jmp	short $+2

loc_7EFB:
		mov	ax, [bp+var_8]

loc_7EFE:
		mov	[bp+var_6], ax
		cmp	[bp+var_6], 0
		jz	short loc_7F12
		mov	ax, [bp+var_6]
		cmp	ax, [bp+arg_2]
		jz	short loc_7F12
		jmp	loc_7DB1
; ---------------------------------------------------------------------------

loc_7F12:
					; sub_7D59+1B4j
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_7D59	endp

; ---------------------------------------------------------------------------
off_7F18	dw offset loc_7DF3
		dw offset loc_7EFB
		dw offset loc_7EFB
		dw offset loc_7EFB
		dw offset loc_7E2E
		dw offset loc_7EB0

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__Local_unwind	proc far

var_2		= word ptr -2
arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		sub	sp, 2
		push	si
		push	di
		mov	ax, ss:14h
		mov	[bp+var_2], ax
		push	[bp+arg_0]
		push	[bp+var_2]
		call	sub_7D59
		pop	cx
		pop	cx
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
__Local_unwind	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__Return_unwind	proc far

var_2		= word ptr -2

		push	bp
		mov	bp, sp
		sub	sp, 2
		push	si
		push	di
		mov	ax, ss:14h
		mov	[bp+var_2], ax
		xor	ax, ax
		push	ax
		push	[bp+var_2]
		call	sub_7D59
		pop	cx
		pop	cx
		mov	bx, [bp+var_2]
		mov	ax, ss:[bx]
		mov	ss:14h,	ax
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
__Return_unwind	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_7F6E	proc near

var_8		= word ptr -8
var_6		= word ptr -6
var_4		= dword	ptr -4
arg_0		= word ptr  4
arg_2		= word ptr  6
arg_4		= dword	ptr  8

		push	bp
		mov	bp, sp
		sub	sp, 8
		push	si
		push	di
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		add	ax, 4
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		jmp	short loc_7FDC
; ---------------------------------------------------------------------------

loc_7F87:
		les	bx, [bp+var_4]
		mov	dx, es:[bx+6]
		mov	ax, es:[bx+4]
		mov	[bp+var_6], dx
		mov	[bp+var_8], ax
		mov	ax, [bp+var_8]
		or	ax, [bp+var_6]
		jz	short loc_7FD0
		xor	ax, ax
		push	ax
		les	bx, [bp+arg_4]
		push	word ptr es:[bx+0Ch]
		push	[bp+var_6]
		push	[bp+var_8]
		les	bx, [bp+arg_4]
		push	word ptr es:[bx+0Ah]
		push	word ptr es:[bx+8]
		les	bx, [bp+arg_4]
		push	word ptr es:[bx+6]
		push	word ptr es:[bx+4]
		call	sub_66DD
		add	sp, 10h
		or	ax, ax
		jz	short loc_7FD8

loc_7FD0:
		mov	dx, word ptr [bp+var_4+2]
		mov	ax, word ptr [bp+var_4]
		jmp	short loc_7FEC
; ---------------------------------------------------------------------------

loc_7FD8:
		add	word ptr [bp+var_4], 10h

loc_7FDC:
		les	bx, [bp+var_4]
		mov	ax, es:[bx]
		or	ax, es:[bx+2]
		jnz	short loc_7F87
		xor	dx, dx
		xor	ax, ax

loc_7FEC:
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_7F6E	endp

; ---------------------------------------------------------------------------
		db 2 dup(2Ah), 42h, 2 dup(43h),	78h, 68h, 31h

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__ExceptionHandler proc	far

var_38		= word ptr -38h
var_36		= word ptr -36h
var_34		= word ptr -34h
var_32		= word ptr -32h
var_30		= word ptr -30h
var_2E		= word ptr -2Eh
var_2C		= word ptr -2Ch
var_2A		= word ptr -2Ah
var_28		= word ptr -28h
var_26		= word ptr -26h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= word ptr -1Ch
var_1A		= word ptr -1Ah
var_18		= word ptr -18h
var_16		= word ptr -16h
var_14		= word ptr -14h
var_12		= word ptr -12h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch
arg_8		= word ptr  0Eh
arg_A		= word ptr  10h
arg_E		= word ptr  14h
arg_10		= word ptr  16h
arg_12		= word ptr  18h
arg_14		= word ptr  1Ah

		push	bp
		mov	bp, sp
		sub	sp, 38h
		push	si
		push	di
		mov	ax, [bp+arg_0]
		mov	[bp+var_2], ax
		mov	ax, [bp+arg_4]
		mov	[bp+var_4], ax
		mov	dx, [bp+arg_8]
		mov	ax, [bp+arg_6]
		mov	[bp+var_6], dx
		mov	[bp+var_8], ax
		mov	bx, [bp+var_2]
		mov	dx, ss:[bx+arg_14]
		mov	ax, ss:[bx+arg_12]
		mov	word ptr [bp+var_C+2], dx
		mov	word ptr [bp+var_C], ax
		mov	bx, [bp+var_4]
		mov	dx, ss:[bx+arg_2]
		mov	ax, ss:[bx+arg_0]
		mov	word ptr [bp+var_10+2],	dx
		mov	word ptr [bp+var_10], ax
		les	bx, [bp+var_10]
		mov	ax, [bp+var_4]
		sub	ax, es:[bx+4]
		mov	[bp+var_16], ax
		mov	bx, [bp+var_4]
		mov	ax, ss:[bx+arg_4]
		mov	[bp+var_18], ax
		les	bx, ss:16h
		mov	si, [bp+var_4]
		mov	ax, ss:[si+arg_8]
		mov	es:[bx+6], ax
		mov	[bp+var_1A], ax
		les	bx, ss:16h
		mov	si, [bp+var_4]
		mov	ax, ss:[si+arg_A]
		mov	es:[bx+8], ax
		mov	[bp+var_1C], ax
		mov	bx, [bp+var_2]
		test	byte ptr ss:[bx+4], 6
		jnz	short loc_8086
		jmp	loc_812E
; ---------------------------------------------------------------------------

loc_8086:
		xor	ax, ax
		push	ax
		push	[bp+var_4]
		call	sub_7D59
		pop	cx
		pop	cx
		mov	bx, [bp+var_2]
		cmp	word ptr ss:[bx+2], 0EEFh
		jz	short loc_809F
		jmp	loc_8361
; ---------------------------------------------------------------------------

loc_809F:
		cmp	word ptr ss:[bx], 0FACEh
		jz	short loc_80A9
		jmp	loc_8361
; ---------------------------------------------------------------------------

loc_80A9:
		les	bx, [bp+var_10]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_20+2],	dx
		mov	word ptr [bp+var_20], ax
		mov	ax, word ptr [bp+var_20]
		or	ax, word ptr [bp+var_20+2]
		jnz	short loc_80C4
		jmp	loc_8361
; ---------------------------------------------------------------------------

loc_80C4:
		jmp	short loc_8102
; ---------------------------------------------------------------------------

loc_80C6:
		mov	ax, 1
		push	ax
		les	bx, [bp+var_C]
		push	word ptr es:[bx+0Ch]
		les	bx, [bp+var_20]
		push	word ptr es:[bx+2]
		push	word ptr es:[bx]
		les	bx, [bp+var_C]
		push	word ptr es:[bx+0Ah]
		push	word ptr es:[bx+8]
		les	bx, [bp+var_C]
		push	word ptr es:[bx+6]
		push	word ptr es:[bx+4]
		call	sub_66DD
		add	sp, 10h
		or	ax, ax
		jz	short loc_80FE
		jmp	loc_8361
; ---------------------------------------------------------------------------

loc_80FE:
		add	word ptr [bp+var_20], 4

loc_8102:
		les	bx, [bp+var_20]
		mov	ax, es:[bx]
		or	ax, es:[bx+2]
		jnz	short loc_80C6
		mov	ax, ss:14h
		mov	word ptr [bp+var_24+2],	ax
		mov	bx, [bp+var_4]
		mov	ax, ss:[bx]
		mov	ss:14h,	ax
		nop
		push	cs
		call	near ptr ___call_unexpected
; ---------------------------------------------------------------------------
		mov	ax, word ptr [bp+var_24+2]
		mov	ss:14h,	ax
		jmp	loc_8361
; ---------------------------------------------------------------------------

loc_812E:
		mov	bx, [bp+var_4]
		mov	ax, ss:[bx+arg_6]
		jmp	loc_8355
; ---------------------------------------------------------------------------

loc_8138:
		mov	ax, [bp+var_12]
		mov	word ptr [bp+var_20], ax
		les	bx, [bp+var_10]
		add	bx, word ptr [bp+var_20]
		mov	ax, es:[bx]
		mov	[bp+var_14], ax
		add	word ptr [bp+var_20], 2
		les	bx, [bp+var_10]
		add	bx, word ptr [bp+var_20]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_20+2],	ax
		add	word ptr [bp+var_20], 2
		mov	bx, word ptr [bp+var_20+2]
		cmp	bx, 5
		jbe	short loc_8169
		jmp	loc_8352
; ---------------------------------------------------------------------------

loc_8169:
		add	bx, bx
		jmp	cs:off_836A[bx]

loc_8170:
		mov	bx, [bp+var_2]
		cmp	word ptr ss:[bx+2], 0EEFh
		jz	short loc_817E
		jmp	loc_8352
; ---------------------------------------------------------------------------

loc_817E:
		cmp	word ptr ss:[bx], 0FACEh
		jz	short loc_8188
		jmp	loc_8352
; ---------------------------------------------------------------------------

loc_8188:
		les	bx, [bp+var_10]
		add	bx, word ptr [bp+var_20]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	[bp+var_26], dx
		mov	[bp+var_28], ax
		add	word ptr [bp+var_20], 4
		push	word ptr [bp+var_C+2]
		push	word ptr [bp+var_C]
		push	[bp+var_26]
		push	[bp+var_28]
		call	sub_7F6E
		add	sp, 8
		mov	word ptr [bp+var_24+2],	dx
		mov	word ptr [bp+var_24], ax
		mov	ax, word ptr [bp+var_24]
		or	ax, word ptr [bp+var_24+2]
		jnz	short loc_81C2
		jmp	loc_8352
; ---------------------------------------------------------------------------

loc_81C2:
		les	bx, [bp+var_C]
		mov	ax, [bp+var_4]
		mov	es:[bx+24h], ax
		les	bx, [bp+var_C]
		mov	dx, word ptr [bp+var_24+2]
		mov	ax, word ptr [bp+var_24]
		mov	es:[bx+28h], dx
		mov	es:[bx+26h], ax
		les	bx, [bp+var_C]
		mov	ax, word ptr [bp+var_20]
		mov	es:[bx+2Ah], ax
		mov	ax, [bp+var_12]
		mov	[bp+var_30], ax
		mov	ax, word ptr [bp+var_20]
		mov	[bp+var_2E], ax
		les	bx, [bp+var_24]

loc_81F6:
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	[bp+var_2A], dx
		mov	[bp+var_2C], ax
		push	[bp+var_2]
		push	[bp+var_4]
		push	cs
		call	near ptr __Global_unwind
		pop	cx
		pop	cx
		push	[bp+var_30]
		push	[bp+var_4]
		call	sub_7D59
		pop	cx
		pop	cx
		mov	bx, [bp+var_4]
		mov	ax, [bp+var_2E]
		mov	ss:[bx+arg_6], ax
		cmp	word ptr [bp+var_20+2],	3
		jnz	short loc_8248
		push	[bp+var_16]
		push	[bp+var_26]
		push	[bp+var_28]
		push	word ptr [bp+var_C+2]
		push	word ptr [bp+var_C]
		push	[bp+var_4]
		push	word ptr [bp+var_24+2]
		push	word ptr [bp+var_24]
		call	sub_7AB3
		add	sp, 10h

loc_8248:
		mov	dx, [bp+var_2A]
		mov	ax, [bp+var_2C]
		mov	si, [bp+var_1C]
		mov	ds, [bp+var_1A]
		mov	bx, [bp+var_18]
		mov	cx, [bp+var_16]
		push	cs
		call	near ptr ___JumpToCatch__
		jmp	loc_8352
; ---------------------------------------------------------------------------

loc_8261:
		mov	bx, [bp+var_2]
		cmp	word ptr ss:[bx+2], 0EEFh
		jnz	short loc_8276
		cmp	word ptr ss:[bx], 0FACEh
		jnz	short loc_8276
		jmp	loc_8352
; ---------------------------------------------------------------------------

loc_8276:
					; __ExceptionHandler+277j
		mov	ax, [bp+var_2]
		mov	[bp+var_36], ax
		mov	dx, [bp+var_6]
		mov	ax, [bp+var_8]
		mov	[bp+var_32], dx
		mov	[bp+var_34], ax
		mov	bx, [bp+var_2]
		mov	dx, ss:[bx+2]
		mov	ax, ss:[bx]
		mov	bx, [bp+var_4]
		mov	ss:[bx+arg_10],	dx
		mov	ss:[bx+arg_E], ax
		lea	ax, [bp+var_36]
		mov	bx, [bp+var_4]
		mov	ss:[bx+arg_12],	ax
		les	bx, [bp+var_10]
		add	bx, word ptr [bp+var_20]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr dword_1264A+2,	dx
		mov	word ptr dword_1264A, ax
		mov	ax, ds
		mov	es, ax
		assume es:dseg
		push	si
		mov	si, [bp+var_1C]
		push	ds
		mov	ds, [bp+var_1A]
		push	bp
		mov	bp, [bp+var_16]
		call	es:dword_1264A
		pop	bp
		pop	ds
		pop	si
		mov	[bp+var_38], ax
		jmp	short loc_830D
; ---------------------------------------------------------------------------

loc_82D8:
		mov	bx, [bp+var_2]
		cmp	word ptr ss:[bx+2], 0EEFh
		jnz	short loc_82EC
		cmp	word ptr ss:[bx], 0FACEh
		jnz	short loc_82EC
		jmp	short loc_8352
; ---------------------------------------------------------------------------

loc_82EC:
					; __ExceptionHandler+2EEj
		mov	bx, [bp+var_2]
		mov	dx, ss:[bx+2]
		mov	ax, ss:[bx]
		mov	bx, [bp+var_4]
		mov	ss:[bx+arg_10],	dx
		mov	ss:[bx+arg_E], ax
		les	bx, [bp+var_10]
		assume es:nothing
		add	bx, word ptr [bp+var_20]
		mov	ax, es:[bx]
		mov	[bp+var_38], ax

loc_830D:
		cmp	[bp+var_38], 0
		jge	short loc_832B
		mov	bx, [bp+var_2]
		test	byte ptr ss:[bx+4], 1
		jz	short loc_8327
		mov	bx, [bp+var_4]
		mov	ax, [bp+var_14]
		mov	ss:[bx+arg_6], ax

loc_8327:
		xor	ax, ax
		jmp	short loc_8364
; ---------------------------------------------------------------------------

loc_832B:
		cmp	[bp+var_38], 0
		jnz	short loc_8333
		jmp	short loc_8352
; ---------------------------------------------------------------------------

loc_8333:
		mov	bx, [bp+var_4]
		mov	ss:[bx+arg_12],	0
		add	word ptr [bp+var_20], 4
		mov	ax, [bp+var_14]
		mov	[bp+var_2E], ax
		mov	[bp+var_30], ax
		les	bx, [bp+var_10]
		add	bx, word ptr [bp+var_20]
		jmp	loc_81F6
; ---------------------------------------------------------------------------

loc_8352:
					; __ExceptionHandler+171j ...
		mov	ax, [bp+var_14]

loc_8355:
		mov	[bp+var_12], ax
		cmp	[bp+var_12], 0
		jz	short loc_8361
		jmp	loc_8138
; ---------------------------------------------------------------------------

loc_8361:
					; __ExceptionHandler+ACj ...
		mov	ax, 1

loc_8364:
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
__ExceptionHandler endp

; ---------------------------------------------------------------------------
off_836A	dw offset loc_8352
		dw offset loc_8261
		dw offset loc_82D8
		dw offset loc_8170
		dw offset loc_8352
		dw offset loc_8352
		db 4 dup(0), 9,	84h
		dw seg seg000
		db 14h dup(0), 19h, 84h
		dw seg seg000
		db 14h dup(0), 0E2h, 0FFh, 2 dup(0), 3,	0, 8Eh,	83h
		dw seg seg000
		db 2 dup(0), 4,	0, 6, 0, 3, 0, 76h, 83h
		dw seg seg000
		db 6, 0, 4, 0

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_83C4	proc far

var_1E		= word ptr -1Eh
var_12		= word ptr -12h
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= dword	ptr  0Ah
arg_8		= word ptr  0Eh

		push	bp
		mov	bp, sp
		sub	sp, 1Eh
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 83A6h
		nop
		push	cs
		call	near ptr ___InitExceptBlocks
		mov	[bp+var_12], 6
		mov	[bp+var_12], 12h
		push	[bp+arg_8]
		les	bx, [bp+arg_4]
		push	word ptr es:[bx+22h]
		les	bx, [bp+arg_4]
		push	word ptr es:[bx+20h]
		push	word ptr es:[bx+1Eh]
		push	[bp+arg_2]
		push	[bp+arg_0]
		call	sub_6B30
		add	sp, 0Ch
		mov	[bp+var_12], 6
		jmp	short loc_8412
; ---------------------------------------------------------------------------
		nop
		push	cs
		call	near ptr ___call_terminate
; ---------------------------------------------------------------------------
		push	cs
		call	near ptr @_CatchCleanup$qv ; _CatchCleanup(void)

loc_8412:
		mov	[bp+var_12], 0
		jmp	short loc_8422
; ---------------------------------------------------------------------------
		nop
		push	cs
		call	near ptr ___call_terminate
; ---------------------------------------------------------------------------
		push	cs
		call	near ptr @_CatchCleanup$qv ; _CatchCleanup(void)

loc_8422:
		push	[bp+var_1E]
		nop
		push	cs
		call	near ptr ___ExitExceptBlocks
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_83C4	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_8430	proc far
					; sub_84B1+162p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= dword	ptr  0Ah
arg_8		= word ptr  0Eh
arg_C		= word ptr  12h
arg_E		= word ptr  14h
arg_10		= word ptr  16h

		push	bp
		mov	bp, sp
		sub	sp, 8
		push	si
		push	di
		mov	cx, [bp+arg_C]
		jmp	short loc_849F
; ---------------------------------------------------------------------------

loc_843D:
		les	bx, [bp+arg_4]
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		add	ax, es:[bx+4]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		cmp	[bp+arg_E], 0
		jz	short loc_8465
		les	bx, [bp+var_4]
		mov	ax, es:[bx]
		mov	dx, word ptr [bp+var_4+2]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax

loc_8465:
		les	bx, [bp+arg_4]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_8+2], dx
		mov	word ptr [bp+var_8], ax
		les	bx, [bp+var_8]
		test	byte ptr es:[bx+8], 2
		jz	short loc_849F
		push	[bp+arg_10]
		xor	ax, ax
		push	ax
		xor	ax, ax
		push	ax
		push	cx
		push	word ptr [bp+var_8+2]
		push	word ptr [bp+var_8]
		push	word ptr [bp+var_4+2]
		push	word ptr [bp+var_4]
		nop
		push	cs
		call	near ptr sub_84B1
		add	sp, 10h
		xor	cx, cx

loc_849F:
		sub	word ptr [bp+arg_4], 8
		mov	ax, word ptr [bp+arg_4]
		cmp	ax, [bp+arg_8]
		jnb	short loc_843D
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_8430	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_84B1	proc far
					; sub_84B1+25Ep ...

var_2A		= word ptr -2Ah
var_28		= word ptr -28h
var_26		= word ptr -26h
var_24		= word ptr -24h
var_22		= dword	ptr -22h
var_1E		= word ptr -1Eh
var_1C		= word ptr -1Ch
var_1A		= word ptr -1Ah
var_18		= dword	ptr -18h
var_14		= word ptr -14h
var_12		= word ptr -12h
var_10		= dword	ptr -10h
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= dword	ptr -8
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= dword	ptr  0Ah
arg_8		= word ptr  0Eh
arg_A		= word ptr  10h
arg_C		= word ptr  12h
arg_E		= word ptr  14h

		push	bp
		mov	bp, sp
		sub	sp, 2Ah
		push	si
		push	di
		cmp	[bp+arg_C], 0
		jz	short loc_84C8
		les	bx, [bp+arg_4]
		mov	ax, es:[bx+1Ah]
		jmp	short loc_84CF
; ---------------------------------------------------------------------------

loc_84C8:
		les	bx, [bp+arg_4]
		mov	ax, es:[bx+1Ch]

loc_84CF:
		mov	[bp+var_1A], 0
		mov	[bp+var_1C], ax
		mov	ax, [bp+arg_8]
		or	ax, [bp+arg_A]
		jz	short loc_84F1
		mov	dx, [bp+arg_A]
		mov	ax, [bp+arg_8]
		cmp	dx, [bp+var_1A]
		jb	short loc_850A
		jnz	short loc_84F1
		cmp	ax, [bp+var_1C]
		jb	short loc_850A

loc_84F1:
		push	[bp+arg_C]
		push	word ptr [bp+arg_4+2]
		push	word ptr [bp+arg_4]
		push	[bp+arg_2]
		push	[bp+arg_0]
		push	cs
		call	near ptr sub_83C4
		add	sp, 0Ah
		jmp	loc_8776
; ---------------------------------------------------------------------------

loc_850A:
		mov	dx, [bp+arg_A]
		mov	ax, [bp+arg_8]
		mov	[bp+var_1A], dx
		mov	[bp+var_1C], ax
		les	bx, [bp+arg_4]
		mov	dx, word ptr [bp+arg_4+2]
		mov	ax, word ptr [bp+arg_4]
		add	ax, es:[bx+0Ch]
		mov	word ptr [bp+var_10+2],	dx
		mov	word ptr [bp+var_10], ax
		mov	[bp+var_A], dx
		mov	[bp+var_C], ax
		cmp	[bp+arg_C], 0
		jz	short loc_85A3

loc_8535:
		les	bx, [bp+var_10]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	[bp+var_1E], dx
		mov	word ptr [bp+var_22+2],	ax
		mov	ax, word ptr [bp+var_22+2]
		or	ax, [bp+var_1E]
		jz	short loc_85A3
		les	bx, [bp+var_22+2]
		test	byte ptr es:[bx+8], 2
		jz	short loc_859D
		les	bx, [bp+var_22+2]
		mov	bx, es:[bx+1Ch]
		xor	ax, ax
		cmp	ax, [bp+var_1A]
		jb	short loc_8596
		jnz	short loc_856C
		cmp	bx, [bp+var_1C]
		jb	short loc_8596

loc_856C:
		push	[bp+arg_E]
		mov	ax, 1
		push	ax
		push	[bp+var_1C]
		push	[bp+var_A]
		push	[bp+var_C]
		mov	ax, word ptr [bp+var_10]
		add	ax, 8
		push	word ptr [bp+var_10+2]
		push	ax

loc_8586:
		push	[bp+arg_2]
		push	[bp+arg_0]
		push	cs
		call	near ptr sub_8430
		add	sp, 12h
		jmp	loc_8776
; ---------------------------------------------------------------------------

loc_8596:
		sub	[bp+var_1C], bx
		sbb	[bp+var_1A], 0

loc_859D:
		add	word ptr [bp+var_10], 8
		jmp	short loc_8535
; ---------------------------------------------------------------------------

loc_85A3:
		les	bx, [bp+arg_4]
		mov	dx, word ptr [bp+arg_4+2]
		mov	ax, word ptr [bp+arg_4]
		add	ax, es:[bx+0Ah]
		mov	word ptr [bp+var_8+2], dx
		mov	word ptr [bp+var_8], ax
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax

loc_85BC:
		les	bx, [bp+var_8]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	[bp+var_1E], dx
		mov	word ptr [bp+var_22+2],	ax
		mov	ax, word ptr [bp+var_22+2]
		or	ax, [bp+var_1E]
		jz	short loc_8632
		les	bx, [bp+var_22+2]
		test	byte ptr es:[bx+8], 2
		jz	short loc_862C
		les	bx, [bp+var_22+2]
		mov	bx, es:[bx+1Ch]
		xor	ax, ax
		cmp	ax, [bp+var_1A]
		jb	short loc_8625
		jnz	short loc_85F3
		cmp	bx, [bp+var_1C]
		jb	short loc_8625

loc_85F3:
		push	[bp+arg_E]
		xor	ax, ax
		push	ax
		push	[bp+var_1C]
		push	[bp+var_2]
		push	[bp+var_4]
		mov	ax, word ptr [bp+var_8]
		add	ax, 8
		push	word ptr [bp+var_8+2]
		push	ax
		push	[bp+arg_2]
		push	[bp+arg_0]
		push	cs
		call	near ptr sub_8430
		add	sp, 12h
		cmp	[bp+arg_C], 0
		jnz	short loc_8622
		jmp	loc_8776
; ---------------------------------------------------------------------------

loc_8622:
		jmp	loc_8756
; ---------------------------------------------------------------------------

loc_8625:
					; sub_84B1+140j
		sub	[bp+var_1C], bx
		sbb	[bp+var_1A], 0

loc_862C:
		add	word ptr [bp+var_8], 8
		jmp	short loc_85BC
; ---------------------------------------------------------------------------

loc_8632:
		les	bx, [bp+arg_4]
		mov	dx, word ptr [bp+arg_4+2]
		mov	ax, word ptr [bp+arg_4]
		add	ax, es:[bx+24h]
		mov	word ptr [bp+var_18+2],	dx
		mov	word ptr [bp+var_18], ax
		mov	[bp+var_12], dx
		mov	[bp+var_14], ax

loc_864B:
		les	bx, [bp+var_18]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_22+2],	dx
		mov	word ptr [bp+var_22], ax
		mov	[bp+var_1E], 1
		les	bx, [bp+var_22]
		test	byte ptr es:[bx+3], 4
		jz	short loc_8685
		les	bx, [bp+var_22]
		mov	ax, es:[bx+0Ah]
		mov	[bp+var_1E], ax
		les	bx, [bp+var_22]
		mov	dx, es:[bx+8]
		mov	ax, es:[bx+6]
		mov	word ptr [bp+var_22+2],	dx
		mov	word ptr [bp+var_22], ax

loc_8685:
		les	bx, [bp+var_22]
		mov	ax, es:[bx+1Ah]
		imul	[bp+var_1E]
		mov	bx, ax
		xor	ax, ax
		cmp	ax, [bp+var_1A]
		ja	short loc_86A9
		jb	short loc_869F
		cmp	bx, [bp+var_1C]
		jnb	short loc_86A9

loc_869F:
		sub	[bp+var_1C], bx
		sbb	[bp+var_1A], 0
		jmp	loc_876F
; ---------------------------------------------------------------------------

loc_86A9:
					; sub_84B1+1ECj ...
		les	bx, [bp+var_18]
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		add	ax, es:[bx+4]
		mov	[bp+var_24], dx
		mov	[bp+var_26], ax
		les	bx, [bp+var_18]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	[bp+var_28], dx
		mov	[bp+var_2A], ax
		cmp	[bp+var_1E], 1
		jbe	short loc_86F5
		push	[bp+arg_E]
		push	[bp+var_1A]
		push	[bp+var_1C]
		les	bx, [bp+var_18]
		push	word ptr es:[bx+2]
		push	word ptr es:[bx]
		push	[bp+var_24]
		push	[bp+var_26]
		nop
		push	cs
		call	near ptr sub_877C
		add	sp, 0Eh
		jmp	short loc_8715
; ---------------------------------------------------------------------------

loc_86F5:
		push	[bp+arg_E]
		mov	ax, 1
		push	ax
		push	[bp+var_1A]
		push	[bp+var_1C]
		push	[bp+var_28]
		push	[bp+var_2A]
		push	[bp+var_24]
		push	[bp+var_26]
		push	cs
		call	near ptr sub_84B1
		add	sp, 10h

loc_8715:
		mov	[bp+var_1A], 0
		mov	[bp+var_1C], 0
		sub	word ptr [bp+var_18], 6
		mov	ax, word ptr [bp+var_18]
		cmp	ax, [bp+var_14]
		jb	short loc_872E
		jmp	loc_86A9
; ---------------------------------------------------------------------------

loc_872E:
		push	[bp+arg_E]
		xor	ax, ax
		push	ax
		xor	ax, ax
		push	ax
		push	[bp+var_2]
		push	[bp+var_4]
		push	word ptr [bp+var_8+2]
		push	word ptr [bp+var_8]
		push	[bp+arg_2]
		push	[bp+arg_0]
		push	cs
		call	near ptr sub_8430
		add	sp, 12h
		cmp	[bp+arg_C], 0
		jz	short loc_8776

loc_8756:
		push	[bp+arg_E]
		mov	ax, 1
		push	ax
		xor	ax, ax
		push	ax
		push	[bp+var_A]
		push	[bp+var_C]
		push	word ptr [bp+var_10+2]
		push	word ptr [bp+var_10]
		jmp	loc_8586
; ---------------------------------------------------------------------------

loc_876F:
		add	word ptr [bp+var_18], 6
		jmp	loc_864B
; ---------------------------------------------------------------------------

loc_8776:
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_84B1	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_877C	proc far
					; sub_892F+316p

var_E		= word ptr -0Eh
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= dword	ptr -4
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch
arg_8		= word ptr  0Eh
arg_A		= word ptr  10h
arg_C		= word ptr  12h

		push	bp
		mov	bp, sp
		sub	sp, 0Eh
		push	si
		push	di
		mov	dx, [bp+arg_6]
		mov	ax, [bp+arg_4]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		les	bx, [bp+var_4]
		mov	ax, es:[bx+0Ah]
		mov	[bp+var_6], ax
		les	bx, [bp+var_4]
		mov	dx, es:[bx+8]
		mov	ax, es:[bx+6]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		les	bx, [bp+var_4]
		mov	ax, es:[bx+1Ah]
		mov	[bp+var_8], 0
		mov	[bp+var_A], ax
		mov	ax, [bp+arg_8]
		or	ax, [bp+arg_A]
		jnz	short loc_87D6
		mov	bx, [bp+var_6]
		xor	cx, cx
		mov	dx, [bp+var_8]
		mov	ax, [bp+var_A]
		call	N_LXMUL@
		mov	[bp+arg_A], dx
		mov	[bp+arg_8], ax

loc_87D6:
		push	[bp+var_8]
		push	[bp+var_A]
		push	[bp+arg_A]
		push	[bp+arg_8]
		call	near ptr N_LUDIV@
		mov	[bp+var_C], dx
		mov	[bp+var_E], ax
		mov	cx, [bp+var_C]
		mov	bx, [bp+var_E]
		mov	dx, [bp+var_8]
		mov	ax, [bp+var_A]
		call	N_LXMUL@
		sub	[bp+arg_8], ax
		sbb	[bp+arg_A], dx
		les	bx, [bp+var_4]
		mov	bx, es:[bx]
		xor	cx, cx
		mov	dx, [bp+var_C]
		mov	ax, [bp+var_E]
		call	N_LXMUL@
		mov	dx, [bp+arg_2]
		add	ax, [bp+arg_0]
		mov	[bp+arg_2], dx
		mov	[bp+arg_0], ax
		mov	ax, [bp+arg_8]
		or	ax, [bp+arg_A]
		jz	short loc_8866
		push	[bp+arg_C]
		mov	ax, 1
		push	ax
		push	[bp+arg_A]
		push	[bp+arg_8]
		jmp	short loc_8853
; ---------------------------------------------------------------------------

loc_8834:
		les	bx, [bp+var_4]
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		sub	ax, es:[bx]
		mov	[bp+arg_2], dx
		mov	[bp+arg_0], ax
		push	[bp+arg_C]
		mov	ax, 1
		push	ax
		push	[bp+var_8]
		push	[bp+var_A]

loc_8853:
		push	word ptr [bp+var_4+2]
		push	word ptr [bp+var_4]
		push	[bp+arg_2]
		push	[bp+arg_0]
		push	cs
		call	near ptr sub_84B1
		add	sp, 10h

loc_8866:
		mov	ax, [bp+var_C]
		mov	dx, [bp+var_E]
		sub	[bp+var_E], 1
		sbb	[bp+var_C], 0
		or	dx, ax
		jnz	short loc_8834
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_877C	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_887E	proc far
					; sub_892F+2E4p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		sub	sp, 8
		push	si
		push	di
		mov	cx, [bp+arg_4]
		mov	bx, cx
		mov	dx, ss:[bx+2]
		mov	ax, ss:[bx]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		les	bx, [bp+var_4]
		mov	ax, es:[bx+8]
		and	ax, 50h
		cmp	ax, 50h	; 'P'
		jnz	short loc_8923
		les	bx, [bp+var_4]
		cmp	word ptr es:[bx+6], 0FFFFh
		jz	short loc_8923
		les	bx, [bp+var_4]
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		add	ax, es:[bx+6]
		mov	word ptr [bp+var_8+2], dx
		mov	word ptr [bp+var_8], ax
		les	bx, [bp+var_4]
		test	byte ptr es:[bx+9], 10h
		jz	short loc_88DD
		les	bx, [bp+var_8]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_8+2], dx
		jmp	short loc_88E6
; ---------------------------------------------------------------------------

loc_88DD:
		les	bx, [bp+var_8]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_8+2], ds

loc_88E6:
		mov	word ptr [bp+var_8], ax
		les	bx, [bp+var_8]
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		sub	ax, es:[bx-4]
		mov	[bp+arg_2], dx
		mov	[bp+arg_0], ax
		les	bx, [bp+var_8]
		mov	dx, word ptr [bp+var_8+2]
		mov	ax, word ptr [bp+var_8]
		sub	ax, es:[bx-2]
		mov	word ptr [bp+var_8+2], dx
		mov	word ptr [bp+var_8], ax
		les	bx, [bp+var_8]
		mov	dx, es:[bx-6]
		mov	ax, es:[bx-8]
		mov	bx, cx
		mov	ss:[bx+2], dx
		mov	ss:[bx], ax

loc_8923:
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_887E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_892F	proc near

driver		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= word ptr -18h
var_16		= dword	ptr -16h
var_12		= dword	ptr -12h
var_E		= word ptr -0Eh
var_C		= dword	ptr -0Ch
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  4
arg_4		= word ptr  8
arg_6		= word ptr  0Ah
arg_8		= word ptr  0Ch
arg_A		= word ptr  0Eh
arg_16		= word ptr  1Ah
arg_18		= word ptr  1Ch

		push	bp
		mov	bp, sp
		sub	sp, 20h
		push	si
		push	di
		mov	[bp+var_E], 0
		cmp	word ptr [bp+arg_0], 0FFFFh
		jnz	short loc_8945
		jmp	loc_8D32
; ---------------------------------------------------------------------------

loc_8945:
		mov	bx, [bp+arg_8]
		mov	dx, ss:[bx+arg_18]
		mov	ax, ss:[bx+arg_16]
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		sub	ax, [bp+var_4]
		sbb	dx, [bp+var_2]
		mov	[bp+var_6], dx
		mov	[bp+var_8], ax
		mov	dx, [bp+arg_6]
		mov	ax, [bp+arg_4]
		sub	[bp+var_8], ax
		sbb	[bp+var_6], dx
		les	bx, [bp+arg_0]
		test	byte ptr es:[bx+4], 20h
		jz	short loc_899E
		les	bx, [bp+arg_0]
		les	bx, es:[bx]
		les	bx, es:[bx+6]
		mov	ax, es:[bx+1Ah]
		mov	[bp+var_6], 0
		mov	[bp+var_8], ax

loc_899E:
		les	bx, [bp+arg_0]
		test	byte ptr es:[bx+5], 1
		jz	short loc_89B5
		les	bx, [bp+arg_0]
		les	bx, es:[bx]
		mov	ax, es:[bx+1Ch]
		jmp	loc_8D34
; ---------------------------------------------------------------------------

loc_89B5:
		cmp	[bp+var_6], 0
		jg	short loc_89E7
		jnz	short loc_89C3
		cmp	[bp+var_8], 0
		ja	short loc_89E7

loc_89C3:
		les	bx, [bp+arg_0]
		mov	ax, es:[bx+4]
		and	ax, 3
		cmp	ax, 3
		jz	short loc_89D5
		jmp	loc_8D32
; ---------------------------------------------------------------------------

loc_89D5:
		mov	dx, word ptr [bp+arg_0+2]
		mov	ax, word ptr [bp+arg_0]
		mov	word ptr [bp+var_C+2], dx
		mov	word ptr [bp+var_C], ax
		inc	[bp+var_E]
		jmp	loc_8B4C
; ---------------------------------------------------------------------------

loc_89E7:
		mov	dx, word ptr [bp+arg_0+2]
		mov	ax, word ptr [bp+arg_0]
		mov	word ptr [bp+var_C+2], dx
		mov	word ptr [bp+var_C], ax

loc_89F3:
		les	bx, [bp+var_C]
		mov	ax, es:[bx]
		or	ax, es:[bx+2]
		jnz	short loc_8A06
		sub	word ptr [bp+var_C], 0Ah
		jmp	loc_8B4C
; ---------------------------------------------------------------------------

loc_8A06:
		les	bx, [bp+var_C]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_16+2],	dx
		mov	word ptr [bp+var_16], ax
		mov	word ptr [bp+var_12+2],	dx
		mov	word ptr [bp+var_12], ax
		mov	[bp+var_18], 1
		les	bx, [bp+var_12]
		test	byte ptr es:[bx+2], 10h
		jnz	short loc_8A2E
		jmp	loc_8AF8
; ---------------------------------------------------------------------------

loc_8A2E:
		les	bx, [bp+var_12]
		mov	dx, es:[bx+8]
		mov	ax, es:[bx+6]
		mov	word ptr [bp+var_16+2],	dx
		mov	word ptr [bp+var_16], ax
		mov	word ptr [bp+var_12+2],	dx
		mov	word ptr [bp+var_12], ax
		les	bx, [bp+var_12]
		test	byte ptr es:[bx+2], 2
		jnz	short loc_8A52
		jmp	loc_8AF8
; ---------------------------------------------------------------------------

loc_8A52:
		les	bx, [bp+var_12]
		test	byte ptr es:[bx+8], 20h
		jnz	short loc_8A5F
		jmp	loc_8AF8
; ---------------------------------------------------------------------------

loc_8A5F:
		les	bx, [bp+var_C]
		test	byte ptr es:[bx+4], 8
		jnz	short loc_8A6C
		jmp	loc_8AF8
; ---------------------------------------------------------------------------

loc_8A6C:
		les	bx, [bp+var_C]
		test	byte ptr es:[bx+4], 4
		jz	short loc_8A85
		les	bx, [bp+var_C]
		mov	ax, es:[bx+6]
		add	ax, [bp+arg_A]
		mov	word ptr [bp+var_1C+2],	ss
		jmp	short loc_8A93
; ---------------------------------------------------------------------------

loc_8A85:
		les	bx, [bp+var_C]
		mov	dx, es:[bx+8]
		mov	ax, es:[bx+6]
		mov	word ptr [bp+var_1C+2],	dx

loc_8A93:
		mov	word ptr [bp+var_1C], ax
		mov	dx, word ptr [bp+var_1C+2]
		mov	ax, word ptr [bp+var_1C]
		mov	word ptr [bp+driver+2],	dx
		mov	word ptr [bp+driver], ax
		les	bx, [bp+var_C]
		test	byte ptr es:[bx+4], 80h
		jz	short loc_8ABB
		les	bx, [bp+driver]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_1C+2],	dx
		jmp	short loc_8AC4
; ---------------------------------------------------------------------------

loc_8ABB:
		les	bx, [bp+driver]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_1C+2],	ds

loc_8AC4:
		mov	word ptr [bp+var_1C], ax
		les	bx, [bp+var_C]
		test	byte ptr es:[bx+4], 40h
		jz	short loc_8AD5
		add	word ptr [bp+var_1C], 4

loc_8AD5:
		lea	ax, [bp+var_12]
		push	ax
		push	word ptr [bp+var_1C+2]
		push	word ptr [bp+var_1C]
		push	cs
		call	near ptr sub_887E
		add	sp, 6
		mov	word ptr [bp+var_1C+2],	dx
		mov	word ptr [bp+var_1C], ax
		mov	dx, word ptr [bp+var_12+2]
		mov	ax, word ptr [bp+var_12]
		mov	word ptr [bp+var_16+2],	dx
		mov	word ptr [bp+var_16], ax

loc_8AF8:
					; sub_892F+120j ...
		les	bx, [bp+var_12]
		test	byte ptr es:[bx+3], 4
		jz	short loc_8B1D
		les	bx, [bp+var_16]
		mov	ax, es:[bx+0Ah]
		mov	[bp+var_18], ax
		les	bx, [bp+var_16]
		mov	dx, es:[bx+8]
		mov	ax, es:[bx+6]
		mov	word ptr [bp+var_16+2],	dx
		mov	word ptr [bp+var_16], ax

loc_8B1D:
		les	bx, [bp+var_16]
		mov	ax, es:[bx+1Ah]
		imul	[bp+var_18]
		mov	[bp+var_18], ax
		mov	ax, [bp+var_18]
		xor	dx, dx
		cmp	dx, [bp+var_6]
		jb	short loc_8B3B
		jnz	short loc_8B4C
		cmp	ax, [bp+var_8]
		jnb	short loc_8B4C

loc_8B3B:
		mov	ax, [bp+var_18]
		sub	[bp+var_8], ax
		sbb	[bp+var_6], 0
		add	word ptr [bp+var_C], 0Ah
		jmp	loc_89F3
; ---------------------------------------------------------------------------

loc_8B4C:
		les	bx, [bp+var_C]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_12+2],	dx
		mov	word ptr [bp+var_12], ax
		les	bx, [bp+var_C]
		mov	ax, es:[bx+4]
		mov	word ptr [bp+var_16+2],	ax
		test	byte ptr [bp+var_16+2],	4
		jz	short loc_8B7B
		les	bx, [bp+var_C]
		mov	ax, es:[bx+6]
		add	ax, [bp+arg_A]
		mov	word ptr [bp+var_16], ss
		jmp	short loc_8B89
; ---------------------------------------------------------------------------

loc_8B7B:
		les	bx, [bp+var_C]
		mov	dx, es:[bx+8]
		mov	ax, es:[bx+6]
		mov	word ptr [bp+var_16], dx

loc_8B89:
		mov	[bp+var_18], ax
		test	byte ptr [bp+var_16+2],	11h
		jnz	short loc_8B95
		jmp	loc_8C1F
; ---------------------------------------------------------------------------

loc_8B95:
		les	bx, [bp+var_12]
		mov	dx, es:[bx+8]
		mov	ax, es:[bx+6]
		mov	word ptr [bp+var_12+2],	dx
		mov	word ptr [bp+var_12], ax
		mov	dx, word ptr [bp+var_16]
		mov	ax, [bp+var_18]
		mov	word ptr [bp+var_1C+2],	dx
		mov	word ptr [bp+var_1C], ax
		test	byte ptr [bp+var_16+2],	80h
		jz	short loc_8BC7
		les	bx, [bp+var_1C]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_16], dx
		jmp	short loc_8BD0
; ---------------------------------------------------------------------------

loc_8BC7:
		les	bx, [bp+var_1C]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_16], ds

loc_8BD0:
		mov	[bp+var_18], ax
		mov	dx, word ptr [bp+var_16]
		mov	ax, [bp+var_18]
		mov	word ptr [bp+driver+2],	dx
		mov	word ptr [bp+driver], ax
		mov	ax, word ptr [bp+var_16+2]
		and	ax, 48h
		cmp	ax, 40h	; '@'
		jnz	short loc_8BEE
		add	[bp+var_18], 4

loc_8BEE:
		les	bx, [bp+var_12]
		test	byte ptr es:[bx+2], 2
		jz	short loc_8C1F
		les	bx, [bp+var_12]
		test	byte ptr es:[bx+8], 20h
		jz	short loc_8C1F
		test	byte ptr [bp+var_16+2],	8
		jz	short loc_8C1F
		lea	ax, [bp+var_12]
		push	ax
		push	word ptr [bp+var_16]
		push	[bp+var_18]
		push	cs
		call	near ptr sub_887E
		add	sp, 6
		mov	word ptr [bp+var_16], dx
		mov	[bp+var_18], ax

loc_8C1F:
					; sub_892F+2C7j ...
		cmp	[bp+var_E], 0
		jnz	short loc_8C6D
		les	bx, [bp+var_12]
		test	byte ptr es:[bx+3], 4
		jz	short loc_8C4D
		push	[bp+arg_A]
		push	[bp+var_6]
		push	[bp+var_8]
		push	word ptr [bp+var_12+2]
		push	word ptr [bp+var_12]
		push	word ptr [bp+var_16]
		push	[bp+var_18]
		push	cs
		call	near ptr sub_877C
		add	sp, 0Eh
		jmp	short loc_8C6D
; ---------------------------------------------------------------------------

loc_8C4D:
		push	[bp+arg_A]
		mov	ax, 1
		push	ax
		push	[bp+var_6]
		push	[bp+var_8]
		push	word ptr [bp+var_12+2]
		push	word ptr [bp+var_12]
		push	word ptr [bp+var_16]
		push	[bp+var_18]
		push	cs
		call	near ptr sub_84B1
		add	sp, 10h

loc_8C6D:
					; sub_892F+31Cj
		mov	ax, word ptr [bp+var_16+2]
		and	ax, 3
		cmp	ax, 3
		jz	short loc_8C7B
		jmp	loc_8D19
; ---------------------------------------------------------------------------

loc_8C7B:
		mov	ax, word ptr [bp+var_16+2]
		and	ax, 48h
		cmp	ax, 48h	; 'H'
		jnz	short loc_8C8A
		sub	word ptr [bp+driver], 4

loc_8C8A:
		les	bx, [bp+var_12]
		test	byte ptr es:[bx+3], 4
		jz	short loc_8CD9
		les	bx, [bp+var_12]
		mov	dx, es:[bx+8]
		mov	ax, es:[bx+6]
		mov	word ptr [bp+var_12+2],	dx
		mov	word ptr [bp+var_12], ax
		les	bx, [bp+var_12]
		mov	ax, es:[bx+16h]
		or	ax, es:[bx+18h]
		jz	short loc_8CC6
		les	bx, [bp+var_12]
		push	word ptr es:[bx+14h]
		les	bx, [bp+var_12]
		push	word ptr es:[bx+18h]
		push	word ptr es:[bx+16h]
		jmp	short loc_8CF8
; ---------------------------------------------------------------------------

loc_8CC6:
		test	byte ptr [bp+var_16+2],	80h
		jz	short loc_8D19
		push	word ptr [bp+driver+2]
		push	word ptr [bp+driver] ; font
		nop
		push	cs
		call	near ptr _registerbgifont
		jmp	short loc_8D17
; ---------------------------------------------------------------------------

loc_8CD9:
		les	bx, [bp+var_12]
		mov	ax, es:[bx+0Eh]
		or	ax, es:[bx+10h]
		jz	short loc_8D06
		les	bx, [bp+var_12]
		push	word ptr es:[bx+12h]
		les	bx, [bp+var_12]
		push	word ptr es:[bx+10h]
		push	word ptr es:[bx+0Eh]

loc_8CF8:
		push	word ptr [bp+driver+2]
		push	word ptr [bp+driver]
		call	sub_6CE8
		add	sp, 0Ah
		jmp	short loc_8D19
; ---------------------------------------------------------------------------

loc_8D06:
		test	byte ptr [bp+var_16+2],	80h
		jz	short loc_8D19
		push	word ptr [bp+driver+2]
		push	word ptr [bp+driver] ; driver
		nop
		push	cs
		call	near ptr _registerbgidriver

loc_8D17:
		pop	cx
		pop	cx

loc_8D19:
					; sub_892F+39Bj ...
		mov	[bp+var_6], 0
		mov	[bp+var_8], 0
		mov	ax, word ptr [bp+var_C]
		sub	word ptr [bp+var_C], 0Ah
		cmp	ax, word ptr [bp+arg_0]
		jbe	short loc_8D32
		jmp	loc_8B4C
; ---------------------------------------------------------------------------

loc_8D32:
		xor	ax, ax

loc_8D34:
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_892F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__CurrExcContext proc far

s1		= dword	ptr -6
var_2		= word ptr -2
arg_0		= word ptr  6
arg_6		= word ptr  0Ch

		push	bp
		mov	bp, sp
		sub	sp, 6
		push	si
		push	di
		mov	ax, [bp+arg_0]
		mov	[bp+var_2], ax
		cmp	[bp+var_2], 0FFFFh
		jz	short loc_8D7D
		mov	bx, [bp+var_2]
		mov	dx, ss:[bx+4]
		mov	ax, ss:[bx+2]
		add	ax, 0FFF8h
		mov	word ptr [bp+s1+2], dx
		mov	word ptr [bp+s1], ax
		mov	ax, 8
		push	ax		; n
		push	ds
		mov	ax, 0DDFh
		push	ax		; s2
		push	word ptr [bp+s1+2]
		push	word ptr [bp+s1] ; s1
		nop
		push	cs
		call	near ptr _memcmp
		add	sp, 0Ah
		or	ax, ax
		jz	short loc_8D82

loc_8D7D:
		mov	ax, 0FFFFh
		jmp	short loc_8D89
; ---------------------------------------------------------------------------

loc_8D82:
		mov	bx, [bp+var_2]
		mov	ax, ss:[bx+arg_6]

loc_8D89:
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
__CurrExcContext endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

; __ThrowFileName(void)
@__ThrowFileName$qv proc far
		push	si
		push	di
		les	bx, ss:16h
		mov	dx, es:[bx+18h]
		mov	ax, es:[bx+16h]
		pop	di
		pop	si
		retf
@__ThrowFileName$qv endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

; __ThrowLineNumber(void)
@__ThrowLineNumber$qv proc far
		push	si
		push	di
		les	bx, ss:16h
		mov	ax, es:[bx+1Ah]
		pop	di
		pop	si
		retf
@__ThrowLineNumber$qv endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function

; __ThrowExceptionName(void)
@__ThrowExceptionName$qv proc far
		push	si
		push	di
		les	bx, ss:16h
		mov	dx, es:[bx+1Eh]
		mov	ax, es:[bx+1Ch]
		pop	di
		pop	si
		retf
@__ThrowExceptionName$qv endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __fastcall __far typeinfo__typeinfo(int, int, int, __int32)
@typeinfo@0$bctr$qmx8typeinfo proc far

src		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  6

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	si
		push	di
		mov	ax, word ptr [bp+arg_0]
		or	ax, word ptr [bp+arg_0+2]
		jnz	short loc_8DE5
		mov	ax, 8
		push	ax
		nop
		push	cs
		call	near ptr @$bnew$qui ; operator new(uint)
		pop	cx
		mov	word ptr [bp+arg_0+2], dx
		mov	word ptr [bp+arg_0], ax
		or	ax, dx
		jz	short loc_8E23

loc_8DE5:
		les	bx, [bp+arg_0]
		mov	word ptr es:[bx+2], seg	seg000
		mov	word ptr es:[bx], 93C1h
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		mov	[bp+var_2], 0
		mov	[bp+src], 0
		lea	ax, [bp+src]
		push	ss
		push	ax		; src
		push	cs		; int
		mov	ax, 93A3h
		push	ax		; int
		push	cs
		call	near ptr @_ThrowException$qnvt1t1t1uiuiuinuc ; _ThrowException(void *,void *,void *,void *,uint,uint,uint,uchar	*)
		add	sp, 1Ah

loc_8E23:
		mov	dx, word ptr [bp+arg_0+2]
		mov	ax, word ptr [bp+arg_0]
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@typeinfo@0$bctr$qmx8typeinfo endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; typeinfo::operator=(typeinfo const &)
@typeinfo@0$basg$qmx8typeinfo proc far

arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		pop	di
		pop	si
		pop	bp
		retf
@typeinfo@0$basg$qmx8typeinfo endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl __far typeinfo___typeinfo(void (*driver)(void), int)
@typeinfo@0$bdtr$qv proc far

driver		= dword	ptr  6
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	dx, [bp+arg_4]
		mov	ax, word ptr [bp+driver]
		or	ax, word ptr [bp+driver+2]
		jz	short loc_8E6E
		les	bx, [bp+driver]
		mov	word ptr es:[bx+2], seg	seg000
		mov	word ptr es:[bx], 93C1h
		test	dl, 1
		jz	short loc_8E6E
		push	word ptr [bp+driver+2]
		push	word ptr [bp+driver] ; driver
		nop
		push	cs
		call	near ptr _registerbgidriver
		pop	cx
		pop	cx

loc_8E6E:
					; typeinfo::~typeinfo(void)+21j
		pop	di
		pop	si
		pop	bp
		retf
@typeinfo@0$bdtr$qv endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; typeinfo::operator==(typeinfo	const &)const
@typeinfo@0$beql$xqmx8typeinfo proc far

arg_0		= dword	ptr  6
arg_4		= dword	ptr  0Ah

		push	bp
		mov	bp, sp
		push	si
		push	di
		les	bx, [bp+arg_4]
		push	word ptr es:[bx+6]
		push	word ptr es:[bx+4]
		les	bx, [bp+arg_0]
		push	word ptr es:[bx+6]
		push	word ptr es:[bx+4]
		push	cs
		call	near ptr sub_62E4
		add	sp, 8
		pop	di
		pop	si
		pop	bp
		retf
@typeinfo@0$beql$xqmx8typeinfo endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; typeinfo::operator!=(typeinfo	const &)const
@typeinfo@0$bneq$xqmx8typeinfo proc far

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

		push	bp
		mov	bp, sp
		push	si
		push	di
		push	[bp+arg_6]
		push	[bp+arg_4]
		push	[bp+arg_2]
		push	[bp+arg_0]
		push	cs
		call	near ptr @typeinfo@0$beql$xqmx8typeinfo	; typeinfo::operator==(typeinfo	&)
		add	sp, 8
		neg	ax
		sbb	ax, ax
		inc	ax
		pop	di
		pop	si
		pop	bp
		retf
@typeinfo@0$bneq$xqmx8typeinfo endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; typeinfo::before(typeinfo const &)const
@typeinfo@0before$xqmx8typeinfo	proc far

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  6
arg_4		= dword	ptr  0Ah

		push	bp
		mov	bp, sp
		sub	sp, 8
		push	si
		push	di
		les	bx, [bp+arg_0]
		mov	ax, es:[bx+4]
		or	ax, es:[bx+6]
		jnz	short loc_8ED2
		xor	ax, ax
		jmp	short loc_8F2B
; ---------------------------------------------------------------------------

loc_8ED2:
		les	bx, [bp+arg_4]
		mov	ax, es:[bx+4]
		or	ax, es:[bx+6]
		jnz	short loc_8EE4
		mov	ax, 1
		jmp	short loc_8F2B
; ---------------------------------------------------------------------------

loc_8EE4:
		les	bx, [bp+arg_4]
		mov	dx, es:[bx+6]
		mov	word ptr [bp+var_4+2], dx
		mov	ax, es:[bx+4]
		mov	word ptr [bp+var_4], ax
		les	bx, [bp+var_4]
		add	ax, es:[bx+4]
		push	dx
		push	ax		; s2
		les	bx, [bp+arg_0]
		mov	dx, es:[bx+6]
		mov	word ptr [bp+var_8+2], dx
		mov	ax, es:[bx+4]
		mov	word ptr [bp+var_8], ax
		les	bx, [bp+var_8]
		add	ax, es:[bx+4]
		push	dx
		push	ax		; s1
		nop
		push	cs
		call	near ptr _strcmp
		add	sp, 8
		or	ax, ax
		jge	short loc_8F29
		mov	ax, 1
		jmp	short loc_8F2B
; ---------------------------------------------------------------------------

loc_8F29:
		xor	ax, ax

loc_8F2B:
					; typeinfo::before(typeinfo &)+29j ...
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@typeinfo@0before$xqmx8typeinfo	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; typeinfo::name(void)const
@typeinfo@0name$xqv proc far

arg_0		= dword	ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		les	bx, [bp+arg_0]
		push	word ptr es:[bx+6]
		push	word ptr es:[bx+4]
		push	cs
		call	near ptr sub_62BF
		pop	cx
		pop	cx
		pop	di
		pop	si
		pop	bp
		retf
@typeinfo@0name$xqv endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __fastcall __far __GetTypeInfo(int, int, int, int, int, __int32, int, int, int, int)
@__GetTypeInfo$qnvt1t1t1 proc far

var_8		= dword	ptr -8
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_C		= word ptr  12h
arg_E		= word ptr  14h

		push	bp
		mov	bp, sp
		sub	sp, 8
		push	si
		push	di
		mov	dx, [bp+arg_E]
		mov	ax, [bp+arg_C]
		mov	word ptr [bp+var_8+2], dx
		mov	word ptr [bp+var_8], ax
		mov	ax, [bp+arg_0]
		or	ax, [bp+arg_2]
		jnz	short loc_8F8D
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		push	ds
		mov	ax, 411Eh
		push	ax		; src
		push	cs		; int
		mov	ax, 938Dh
		push	ax		; int
		push	cs
		call	near ptr @_ThrowException$qnvt1t1t1uiuiuinuc ; _ThrowException(void *,void *,void *,void *,uint,uint,uint,uchar	*)
		add	sp, 1Ah

loc_8F8D:
		les	bx, dword ptr [bp+arg_4]
		mov	dx, [bp+arg_4+2]
		mov	ax, [bp+arg_4]
		sub	ax, es:[bx-2]
		mov	[bp+arg_4+2], dx
		mov	[bp+arg_4], ax
		les	bx, dword ptr [bp+arg_4]
		mov	dx, es:[bx-6]
		mov	ax, es:[bx-8]
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		les	bx, [bp+var_8]
		mov	dx, [bp+var_2]
		mov	ax, [bp+var_4]
		mov	es:[bx+6], dx
		mov	es:[bx+4], ax
		mov	dx, word ptr [bp+var_8+2]
		mov	ax, word ptr [bp+var_8]
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@__GetTypeInfo$qnvt1t1t1 endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_8FCE	proc near
					; sub_8FCE+1C4p ...

var_20		= word ptr -20h
var_1E		= word ptr -1Eh
var_1C		= dword	ptr -1Ch
var_18		= word ptr -18h
var_16		= word ptr -16h
var_14		= dword	ptr -14h
var_10		= word ptr -10h
var_E		= word ptr -0Eh
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= dword	ptr -4
arg_0		= word ptr  4
arg_2		= word ptr  6
arg_4		= dword	ptr  8
arg_8		= word ptr  0Ch
arg_A		= word ptr  0Eh
arg_C		= word ptr  10h
arg_E		= word ptr  12h
arg_10		= word ptr  14h
arg_12		= word ptr  16h
arg_14		= word ptr  18h
arg_16		= word ptr  1Ah
arg_18		= word ptr  1Ch
arg_1A		= word ptr  1Eh
arg_1C		= word ptr  20h
arg_1E		= word ptr  22h

		push	bp
		mov	bp, sp
		sub	sp, 20h
		push	si
		push	di
		mov	[bp+var_8], 0
		mov	[bp+var_A], 0
		mov	[bp+var_C], 0
		mov	[bp+var_E], 0
		mov	ax, [bp+arg_14]
		or	ax, [bp+arg_16]
		jz	short loc_9009
		push	word ptr [bp+arg_4+2]
		push	word ptr [bp+arg_4]
		push	[bp+arg_16]
		push	[bp+arg_14]
		push	cs
		call	near ptr sub_62E4
		add	sp, 8
		or	ax, ax
		jnz	short loc_9013

loc_9009:
		les	bx, [bp+arg_4]
		test	byte ptr es:[bx+8], 4
		jnz	short loc_901A

loc_9013:
		xor	dx, dx
		xor	ax, ax
		jmp	loc_920E
; ---------------------------------------------------------------------------

loc_901A:
		mov	[bp+var_6], 0
		les	bx, [bp+arg_4]
		mov	dx, word ptr [bp+arg_4+2]
		mov	ax, word ptr [bp+arg_4]
		add	ax, es:[bx+0Ch]

loc_902C:
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax

loc_9032:
		les	bx, [bp+var_4]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		mov	word ptr [bp+var_1C+2],	dx
		mov	word ptr [bp+var_1C], ax
		mov	ax, word ptr [bp+var_1C]
		or	ax, word ptr [bp+var_1C+2]
		jnz	short loc_904D
		jmp	loc_91D6
; ---------------------------------------------------------------------------

loc_904D:
		les	bx, [bp+var_4]
		test	byte ptr es:[bx+6], 8
		jz	short loc_905A
		jmp	loc_91CF
; ---------------------------------------------------------------------------

loc_905A:
		cmp	[bp+arg_1A], 0
		jz	short loc_9074
		les	bx, [bp+var_4]
		mov	ax, es:[bx+6]
		and	ax, 3
		cmp	ax, 3
		jnz	short loc_9074
		mov	ax, 1
		jmp	short loc_9076
; ---------------------------------------------------------------------------

loc_9074:
		xor	ax, ax

loc_9076:
		mov	[bp+var_10], ax
		les	bx, [bp+var_4]
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		add	ax, es:[bx+4]
		mov	word ptr [bp+var_14+2],	dx
		mov	word ptr [bp+var_14], ax
		mov	dx, [bp+arg_1E]
		mov	ax, [bp+arg_1C]
		mov	[bp+var_16], dx
		mov	[bp+var_18], ax
		les	bx, [bp+var_4]
		test	byte ptr es:[bx+6], 4
		jz	short loc_90BD
		les	bx, [bp+var_14]
		mov	ax, es:[bx]
		mov	dx, word ptr [bp+var_14+2]
		mov	word ptr [bp+var_14+2],	dx
		mov	word ptr [bp+var_14], ax
		mov	dx, word ptr [bp+var_1C+2]
		mov	ax, word ptr [bp+var_1C]
		mov	[bp+var_16], dx
		mov	[bp+var_18], ax

loc_90BD:
		push	word ptr [bp+var_1C+2]
		push	word ptr [bp+var_1C]
		push	[bp+arg_E]
		push	[bp+arg_C]
		push	cs
		call	near ptr sub_62E4
		add	sp, 8
		or	ax, ax
		jnz	short loc_913F
		les	bx, [bp+var_1C]
		test	byte ptr es:[bx+8], 4
		jnz	short loc_90E1
		jmp	loc_91CF
; ---------------------------------------------------------------------------

loc_90E1:
		push	[bp+var_16]
		push	[bp+var_18]
		push	[bp+var_10]
		push	[bp+arg_18]
		push	[bp+arg_16]
		push	[bp+arg_14]
		push	[bp+arg_12]
		push	[bp+arg_10]
		push	[bp+arg_E]
		push	[bp+arg_C]
		push	[bp+arg_A]
		push	[bp+arg_8]
		push	word ptr [bp+var_1C+2]
		push	word ptr [bp+var_1C]
		push	word ptr [bp+var_14+2]
		push	word ptr [bp+var_14]
		call	sub_8FCE
		add	sp, 20h
		mov	[bp+var_1E], dx
		mov	[bp+var_20], ax
		mov	ax, [bp+var_20]
		or	ax, [bp+var_1E]
		jnz	short loc_9128
		jmp	loc_91CF
; ---------------------------------------------------------------------------

loc_9128:
		mov	dx, [bp+var_1E]
		mov	ax, [bp+var_20]
		mov	word ptr [bp+var_14+2],	dx
		mov	word ptr [bp+var_14], ax
		mov	bx, [bp+arg_18]
		mov	ax, ss:[bx]
		mov	[bp+var_10], ax
		jmp	short loc_919C
; ---------------------------------------------------------------------------

loc_913F:
		mov	ax, [bp+arg_8]
		or	ax, [bp+arg_A]
		jz	short loc_9160
		mov	dx, [bp+arg_A]
		mov	ax, [bp+arg_8]
		cmp	dx, word ptr [bp+var_14+2]
		jnz	short loc_91CF
		cmp	ax, word ptr [bp+var_14]
		jnz	short loc_91CF
		mov	dx, word ptr [bp+var_14+2]
		mov	ax, word ptr [bp+var_14]
		jmp	loc_920E
; ---------------------------------------------------------------------------

loc_9160:
		mov	ax, [bp+arg_10]
		or	ax, [bp+arg_12]
		jz	short loc_919C
		xor	ax, ax
		push	ax
		push	ax
		xor	ax, ax
		push	ax
		push	[bp+arg_18]
		xor	ax, ax
		push	ax
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		push	[bp+arg_16]
		push	[bp+arg_14]
		push	[bp+arg_12]
		push	[bp+arg_10]
		push	word ptr [bp+var_1C+2]
		push	word ptr [bp+var_1C]
		push	word ptr [bp+var_14+2]
		push	word ptr [bp+var_14]
		call	sub_8FCE
		add	sp, 20h
		or	ax, dx
		jz	short loc_91CF

loc_919C:
					; sub_8FCE+198j
		cmp	[bp+var_E], 0
		jz	short loc_91BA
		mov	dx, word ptr [bp+var_14+2]
		mov	ax, word ptr [bp+var_14]
		cmp	dx, [bp+var_A]
		jnz	short loc_91BA
		cmp	ax, [bp+var_C]
		jnz	short loc_91BA
		mov	ax, [bp+var_10]
		or	[bp+var_8], ax
		jmp	short loc_91CF
; ---------------------------------------------------------------------------

loc_91BA:
					; sub_8FCE+1DDj ...
		inc	[bp+var_E]
		mov	dx, word ptr [bp+var_14+2]
		mov	ax, word ptr [bp+var_14]
		mov	[bp+var_A], dx
		mov	[bp+var_C], ax
		mov	ax, [bp+var_10]
		mov	[bp+var_8], ax

loc_91CF:
					; sub_8FCE+110j ...
		add	word ptr [bp+var_4], 8
		jmp	loc_9032
; ---------------------------------------------------------------------------

loc_91D6:
		cmp	[bp+var_6], 0
		jnz	short loc_91EF
		inc	[bp+var_6]
		les	bx, [bp+arg_4]
		mov	dx, word ptr [bp+arg_4+2]
		mov	ax, word ptr [bp+arg_4]
		add	ax, es:[bx+0Ah]
		jmp	loc_902C
; ---------------------------------------------------------------------------

loc_91EF:
		mov	bx, [bp+arg_18]
		mov	ax, [bp+var_8]
		mov	ss:[bx], ax
		cmp	[bp+var_E], 1
		jz	short loc_9208
		mov	[bp+var_A], 0
		mov	[bp+var_C], 0

loc_9208:
		mov	dx, [bp+var_A]
		mov	ax, [bp+var_C]

loc_920E:
					; sub_8FCE+18Fj
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_8FCE	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __fastcall __far __DynamicCast(int, int, int, int, int, __int32, int, int, int, int, int)
@__DynamicCast$qnvt1t1t1i proc far

var_16		= word ptr -16h
var_14		= word ptr -14h
var_12		= word ptr -12h
var_10		= word ptr -10h
var_E		= word ptr -0Eh
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_8		= word ptr  0Eh
arg_A		= word ptr  10h
arg_C		= word ptr  12h
arg_E		= word ptr  14h
arg_10		= word ptr  16h

		push	bp
		mov	bp, sp
		sub	sp, 16h
		push	si
		push	di
		mov	dx, [bp+arg_A]
		mov	ax, [bp+arg_8]
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		mov	dx, [bp+arg_E]
		mov	ax, [bp+arg_C]
		mov	[bp+var_6], dx
		mov	[bp+var_8], ax
		mov	ax, [bp+arg_0]
		or	ax, [bp+arg_2]
		jnz	short loc_923F
		jmp	loc_9343
; ---------------------------------------------------------------------------

loc_923F:
		les	bx, dword ptr [bp+arg_4]
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		sub	ax, es:[bx-4]
		mov	[bp+var_E], dx
		mov	[bp+var_10], ax
		les	bx, dword ptr [bp+arg_4]
		mov	dx, [bp+arg_4+2]
		mov	ax, [bp+arg_4]
		sub	ax, es:[bx-2]
		mov	[bp+arg_4+2], dx
		mov	[bp+arg_4], ax
		les	bx, dword ptr [bp+arg_4]
		mov	dx, es:[bx-6]
		mov	ax, es:[bx-8]
		mov	[bp+var_A], dx
		mov	[bp+var_C], ax
		mov	ax, [bp+arg_C]
		or	ax, [bp+arg_E]
		jz	short loc_9295
		push	[bp+var_A]
		push	[bp+var_C]
		push	[bp+var_6]
		push	[bp+var_8]
		push	cs
		call	near ptr sub_62E4
		add	sp, 8
		or	ax, ax
		jz	short loc_929E

loc_9295:
		mov	dx, [bp+var_E]
		mov	ax, [bp+var_10]
		jmp	loc_9373
; ---------------------------------------------------------------------------

loc_929E:
		push	[bp+var_A]
		push	[bp+var_C]
		push	[bp+var_2]
		push	[bp+var_4]
		push	cs
		call	near ptr sub_62E4
		add	sp, 8
		or	ax, ax
		jnz	short loc_92F7
		xor	ax, ax
		push	ax
		push	ax
		mov	ax, 1
		push	ax
		lea	ax, [bp+var_16]
		push	ax
		push	[bp+var_2]
		push	[bp+var_4]
		push	[bp+arg_2]
		push	[bp+arg_0]
		push	[bp+var_6]
		push	[bp+var_8]
		xor	ax, ax
		push	ax
		push	ax
		push	[bp+var_A]
		push	[bp+var_C]
		push	[bp+var_E]
		push	[bp+var_10]
		call	sub_8FCE
		add	sp, 20h
		mov	[bp+var_12], dx
		mov	[bp+var_14], ax
		mov	ax, [bp+var_14]
		or	ax, [bp+var_12]
		jnz	short loc_933B

loc_92F7:
		xor	ax, ax
		push	ax
		push	ax
		mov	ax, 1
		push	ax
		lea	ax, [bp+var_16]
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		xor	ax, ax
		push	ax
		push	ax
		push	[bp+var_6]
		push	[bp+var_8]
		xor	ax, ax
		push	ax
		push	ax
		push	[bp+var_A]
		push	[bp+var_C]
		push	[bp+var_E]
		push	[bp+var_10]
		call	sub_8FCE
		add	sp, 20h
		mov	[bp+var_12], dx
		mov	[bp+var_14], ax
		mov	ax, [bp+var_14]
		or	ax, [bp+var_12]
		jz	short loc_9343
		cmp	[bp+var_16], 0
		jz	short loc_9343

loc_933B:
		mov	dx, [bp+var_12]
		mov	ax, [bp+var_14]
		jmp	short loc_9373
; ---------------------------------------------------------------------------

loc_9343:
					; __DynamicCast(void *,void *,void *,void *,int)+11Fj ...
		cmp	[bp+arg_10], 0
		jz	short loc_936F
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		push	ds
		mov	ax, 411Fh
		push	ax		; src
		push	cs		; int
		mov	ax, 9379h
		push	ax		; int
		push	cs
		call	near ptr @_ThrowException$qnvt1t1t1uiuiuinuc ; _ThrowException(void *,void *,void *,void *,uint,uint,uint,uchar	*)
		add	sp, 1Ah

loc_936F:
		xor	dx, dx
		xor	ax, ax

loc_9373:
					; __DynamicCast(void *,void *,void *,void *,int)+12Dj
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@__DynamicCast$qnvt1t1t1i endp

; ---------------------------------------------------------------------------
		db 1, 0, 1, 0, 0Ah, 0, 2 dup(0FFh), 2 dup(0), 42h, 61h
		db 64h,	5Fh, 63h, 61h, 73h, 74h, 2 dup(0), 1, 0, 1, 0
		db 0Ah,	0, 2 dup(0FFh),	2 dup(0), 42h, 61h, 64h, 5Fh, 74h
		db 79h,	70h, 65h, 69h, 64h, 2 dup(0), 4, 0, 10h, 20h, 0Ah
		db 0, 0C5h, 93h
		dw seg seg000
aTypeinfo	db 'typeinfo *',0
		db 0, 0C5h, 93h
		dw seg seg000
		db 4 dup(0), 3Eh, 8Eh
		dw seg seg000
		db 8			; Method
		db 0
		db 3			; Destructor/SafeFunction
		db 0
		db 26h,	3 dup(0), 73h, 10h, 30h, 0, 34h, 0Dh dup(0), 1
		db 0, 1, 0, 3Eh, 8Eh
		dw seg seg000
		db 5, 0, 38h, 0, 74h, 79h, 70h,	65h, 69h, 6Eh, 66h, 6Fh
		db 0Eh dup(0)

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __stdcall	_DOSCMD(int, int, char *s, int,	int)
__DOSCMD	proc near

dest		= dword	ptr -0Eh
var_A		= dword	ptr -0Ah
var_6		= dword	ptr -6
var_2		= word ptr -2
arg_0		= word ptr  4
arg_2		= word ptr  6
s		= dword	ptr  8
arg_8		= word ptr  0Ch
arg_A		= word ptr  0Eh

		push	bp
		mov	bp, sp
		sub	sp, 0Eh
		push	si
		push	di
		mov	[bp+var_2], 3
		mov	ax, word ptr [bp+s]
		or	ax, word ptr [bp+s+2]
		jz	short loc_942A
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]	; s
		nop
		push	cs
		call	near ptr _strlen
		pop	cx
		pop	cx
		add	ax, [bp+var_2]
		inc	ax
		mov	[bp+var_2], ax

loc_942A:
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		mov	word ptr [bp+var_6+2], dx
		mov	word ptr [bp+var_6], ax
		jmp	short loc_9454
; ---------------------------------------------------------------------------

loc_9438:
		les	bx, [bp+var_6]
		push	word ptr es:[bx+2]
		push	word ptr es:[bx] ; s
		nop
		push	cs
		call	near ptr _strlen
		pop	cx
		pop	cx
		add	ax, [bp+var_2]
		inc	ax
		mov	[bp+var_2], ax
		add	word ptr [bp+var_6], 4

loc_9454:
		les	bx, [bp+var_6]
		mov	ax, es:[bx]
		or	ax, es:[bx+2]
		jnz	short loc_9438
		push	[bp+var_2]
		nop
		push	cs
		call	near ptr _malloc
		pop	cx
		mov	word ptr [bp+var_A+2], dx
		mov	word ptr [bp+var_A], ax
		or	ax, dx
		jnz	short loc_947A
		xor	dx, dx
		xor	ax, ax
		jmp	loc_9530
; ---------------------------------------------------------------------------

loc_947A:
		mov	dx, word ptr [bp+var_A+2]
		mov	ax, word ptr [bp+var_A]
		inc	ax
		mov	word ptr [bp+dest+2], dx
		mov	word ptr [bp+dest], ax
		les	bx, [bp+dest]
		mov	byte ptr es:[bx], 20h ;	' '
		inc	word ptr [bp+dest]
		mov	ax, word ptr [bp+s]
		or	ax, word ptr [bp+s+2]
		jz	short loc_94BD
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]	; src
		push	word ptr [bp+dest+2]
		push	word ptr [bp+dest] ; dest
		nop
		push	cs
		call	near ptr _stpcpy
		add	sp, 8
		mov	word ptr [bp+dest+2], dx
		mov	word ptr [bp+dest], ax
		les	bx, [bp+dest]
		mov	byte ptr es:[bx], 20h ;	' '
		inc	word ptr [bp+dest]

loc_94BD:
		mov	ax, [bp+arg_8]
		or	ax, [bp+arg_A]
		jz	short loc_950B
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		mov	word ptr [bp+var_6+2], dx
		mov	word ptr [bp+var_6], ax
		jmp	short loc_94FF
; ---------------------------------------------------------------------------

loc_94D3:
		les	bx, [bp+var_6]
		push	word ptr es:[bx+2]
		push	word ptr es:[bx] ; src
		push	word ptr [bp+dest+2]
		push	word ptr [bp+dest] ; dest
		nop
		push	cs
		call	near ptr _stpcpy
		add	sp, 8
		mov	word ptr [bp+dest+2], dx
		mov	word ptr [bp+dest], ax
		les	bx, [bp+dest]
		mov	byte ptr es:[bx], 20h ;	' '
		inc	word ptr [bp+dest]
		add	word ptr [bp+var_6], 4

loc_94FF:
		les	bx, [bp+var_6]
		mov	ax, es:[bx]
		or	ax, es:[bx+2]
		jnz	short loc_94D3

loc_950B:
		les	bx, [bp+dest]
		mov	byte ptr es:[bx-1], 0Dh
		mov	byte ptr es:[bx], 0
		mov	ax, word ptr [bp+dest]
		xor	dx, dx
		sub	ax, word ptr [bp+var_A]
		sbb	dx, 0
		add	al, 0FEh ; 'þ'
		les	bx, [bp+var_A]
		mov	es:[bx], al
		mov	dx, word ptr [bp+var_A+2]
		mov	ax, word ptr [bp+var_A]

loc_9530:
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn	0Ch
__DOSCMD	endp

; ---------------------------------------------------------------------------
		db 8Fh dup(0)
word_95C7	dw 0
		db 50h dup(0)
byte_9619	db 0
byte_961A	db 0
		db 1Ch dup(0), 33h, 0FFh, 8Ch, 0C8h, 8Eh, 0D8h,	8Eh, 0C0h
		db 0FAh, 8Eh, 0D0h, 8Dh, 0A5h, 8Fh, 0, 0FBh, 51h, 52h
		db 0B8h, 3, 4Bh, 8Dh, 9Dh, 0FBh, 0, 8Dh, 95h, 91h, 0, 0CDh
		db 21h,	5Ah, 59h, 72h, 2Dh, 33h, 0FFh, 0FAh, 8Eh, 95h
		db 0F1h, 0, 8Bh, 0A5h, 0F3h, 0,	0FBh, 8Bh, 0ECh, 33h, 0C0h
		db 50h,	8Bh, 85h, 8Fh, 0, 8Eh, 0D8h, 8Eh, 0C0h,	26h, 89h
		db 16h,	2, 0, 26h, 89h,	0Eh, 2Ch, 0, 2Eh, 8Bh, 85h, 0E1h
		db 0, 2Eh, 0FFh, 2Eh, 0F7h, 0, 0B4h, 40h, 0BBh,	2, 0, 0B9h
		db 0Fh,	0, 33h,	0D2h, 0CDh, 21h, 0B8h, 2, 4Ch, 0CDh, 21h
byte_9698	db 0FFh, 0
word_969A	dw 0
word_969C	dw 0
					; __exec:loc_9898r ...
byte_969E	db 1

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

__exec		proc near

var_C		= word ptr -0Ch
var_A		= dword	ptr -0Ah
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= word ptr  0Ch
arg_A		= word ptr  0Eh

		push	bp
		mov	bp, sp
		sub	sp, 0Ch
		cld
		push	si
		push	ds
		push	di
		push	es
		mov	ax, word_E5A6
		mov	cs:word_969C, ax
		mov	ax, 3D00h
		push	ds
		lds	dx, [bp+arg_0]
		int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
					; DS:DX	-> ASCIZ filename
					; AL = access mode
					; 0 - read
		pop	ds
		mov	[bp+var_2], ax
		jnb	short loc_96C3
		jmp	loc_98D1
; ---------------------------------------------------------------------------

loc_96C3:
		mov	es, segx
		mov	cs:word_95C7, es
		mov	ax, es:2Ch
		mov	[bp+var_C], ax
		mov	di, 80h	; ''
		push	ds
		lds	si, [bp+arg_4]
		lodsb
		mov	dx, si
		stosb
		xor	cx, cx
		mov	cl, al
		inc	cx
		rep movsb
		mov	ax, 2901h
		mov	si, dx
		mov	di, 5Ch	; '\'
		int	21h		; DOS -	PARSE FILENAME
					; DS:SI	-> string to parse
					; ES:DI	-> buffer to fill with unopened	FCB
					; AL = bit mask	to control parsing
		mov	cs:byte_9619, al

loc_96F3:
		mov	al, [si]
		cmp	al, 20h	; ' '
		jz	short loc_9704
		cmp	al, 9
		jz	short loc_9704
		cmp	al, 0Dh
		jz	short loc_9704
		inc	si
		jmp	short loc_96F3
; ---------------------------------------------------------------------------

loc_9704:
		mov	ax, 2901h
		mov	di, 6Ch	; 'l'
		int	21h		; DOS -	PARSE FILENAME
					; DS:SI	-> string to parse
					; ES:DI	-> buffer to fill with unopened	FCB
					; AL = bit mask	to control parsing
		mov	cs:byte_961A, al
		pop	ds
		mov	ah, 4Ah	; 'J'
		mov	bx, 0FFFFh
		int	21h		; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
					; ES = segment address of block	to change
					; BX = new size	in paragraphs
		cmp	byte ptr word_E5AC, 3
		jnb	short loc_9723
		sub	bx, 280h

loc_9723:
		mov	[bp+var_4], bx
		mov	ax, [bp+arg_8]
		mov	dx, [bp+arg_A]
		mov	bx, ax
		or	bx, dx
		jnz	short loc_9738
		xor	ax, ax
		mov	di, ax
		jmp	short loc_9755
; ---------------------------------------------------------------------------

loc_9738:
		mov	es, dx
		mov	di, ax
		push	di
		mov	cx, 0FFFFh
		xor	ax, ax

loc_9742:
		repne scasb
		cmp	es:[di], al
		jnz	short loc_9742
		dec	cx
		add	di, 3
		repne scasb
		dec	cx
		mov	ax, cx
		neg	ax
		pop	di

loc_9755:
		mov	word ptr [bp+var_A], di
		mov	word ptr [bp+var_A+2], es
		add	ax, 0Fh
		mov	cx, 4
		shr	ax, cl
		mov	[bp+var_6], ax
		mov	si, word_E5A6
		dec	si
		mov	es, si
		cmp	ax, es:3
		jbe	short loc_977D
		dec	cs:byte_969E
		inc	ax
		sub	[bp+var_4], ax

loc_977D:
		lds	si, [bp+arg_0]
		push	cs
		pop	es
		assume es:seg000
		mov	di, 95C9h

loc_9785:
		lodsb
		stosb
		or	al, al
		jnz	short loc_9785
		mov	bx, [bp+var_2]
		push	ds
		pop	es
		assume es:dseg
		push	cs
		pop	ds
		assume ds:seg000
		mov	di, 9538h
		mov	ah, 3Fh	; '?'
		mov	cx, 18h
		lea	dx, [di+0E3h]
		int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
					; BX = file handle, CX = number	of bytes to read
					; DS:DX	-> buffer
		jb	short loc_97C7
		cmp	word ptr [di+0E3h], 5A4Dh
		jz	short loc_97D3
		mov	ax, es:[si-5]
		or	ah, 20h
		cmp	ax, 632Eh
		jnz	short loc_97C4
		mov	ax, es:[si-3]
		or	ax, 2020h
		cmp	ax, 6D6Fh
		jnz	short loc_97C4
		jmp	short loc_980F
; ---------------------------------------------------------------------------

loc_97C4:
		mov	ax, 0Bh

loc_97C7:
		push	ax
		mov	ah, 3Eh	; '>'
		mov	bx, [bp+var_2]
		int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
					; BX = file handle
		pop	ax
		jmp	loc_98D1
; ---------------------------------------------------------------------------

loc_97D3:
		mov	ax, [di+0E7h]
		xor	dx, dx
		mov	dl, ah
		mov	ah, al
		xor	al, al
		shl	ax, 1
		rcl	dx, 1
		add	ax, [di+0E5h]
		adc	dx, 0
		mov	cx, 4

loc_97ED:
		shr	dx, 1
		rcr	ax, 1
		loop	loc_97ED
		inc	ax
		sub	ax, [di+0EBh]
		add	ax, [di+0EDh]
		xchg	ax, bx
		mov	ax, [di+8Fh]
		add	ax, 10h
		add	[di+0F9h], ax
		add	[di+0F1h], ax
		xchg	ax, bx
		jmp	short loc_9839
; ---------------------------------------------------------------------------

loc_980F:
		mov	ax, 4202h
		xor	cx, cx
		xor	dx, dx
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method: offset from end of file
		mov	cx, 4

loc_981B:
		shr	dx, 1
		rcr	ax, 1
		loop	loc_981B
		inc	ax
		xchg	ax, bx
		mov	ax, [di+8Fh]
		mov	[di+0F9h], ax
		mov	word ptr [di+0F7h], 100h
		mov	[di+0F1h], ax
		add	ax, 10h
		xchg	ax, bx

loc_9839:
		mov	[di+0FBh], bx
		mov	[di+0FDh], bx
		add	ax, 16h
		cmp	ax, [bp+var_4]
		mov	ax, 8
		jbe	short loc_984F
		jmp	loc_97C7
; ---------------------------------------------------------------------------

loc_984F:
		mov	ah, 3Eh	; '>'
		mov	bx, [bp+var_2]
		int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
					; BX = file handle
		mov	es, word ptr [di+8Fh]
		assume es:nothing
		mov	ah, 4Ah	; 'J'
		mov	bx, [bp+var_4]
		int	21h		; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
					; ES = segment address of block	to change
					; BX = new size	in paragraphs
		jnb	short loc_9866
		jmp	loc_97C7
; ---------------------------------------------------------------------------

loc_9866:
		add	bx, [di+8Fh]
		mov	dx, bx
		sub	bx, 17h
		mov	cs:word_969A, bx
		mov	es, bx
		mov	cx, 0B0h ; '°'
		mov	si, 9538h
		xor	di, di
		rep movsw
		mov	es, [bp+var_C]
		mov	cx, [bp+var_6]
		cmp	cs:byte_969E, 0
		jnz	short loc_9898
		mov	ah, 48h	; 'H'
		mov	bx, cx
		int	21h		; DOS -	2+ - ALLOCATE MEMORY
					; BX = number of 16-byte paragraphs desired
		jb	short loc_98D1
		jmp	short loc_989C
; ---------------------------------------------------------------------------

loc_9898:
		mov	ax, cs:word_969C

loc_989C:
		mov	es, ax
		xor	di, di
		lds	si, [bp+var_A]
		assume ds:dseg
		add	cx, cx
		add	cx, cx
		add	cx, cx
		rep movsw
		push	es
		push	dx
		push	ds
		mov	ds, cs:DGROUP@
		nop
		push	cs
		call	near ptr __cexit
		pop	ds
		pop	dx
		cmp	cs:byte_969E, 0
		jnz	short loc_98CB
		mov	es, cs:word_969C
		mov	ah, 49h
		int	21h		; DOS -	2+ - FREE MEMORY
					; ES = segment address of area to be freed

loc_98CB:
		pop	cx
		jmp	dword ptr cs:byte_9698
; ---------------------------------------------------------------------------

loc_98D1:
		pop	es
		pop	di
		pop	ds
		pop	si
		push	ax
		call	__IOERROR
		mov	sp, bp
		pop	bp
		retn
__exec		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int execl(char *path,	char *arg0, ...)
_execl		proc far

s		= dword	ptr  6
_arg0		= word ptr  0Ah

		push	bp
		mov	bp, sp
		push	si
		push	di
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		push	ax		; int
		push	ss		; int
		lea	ax, [bp+_arg0]
		push	ax		; int
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]	; s
		mov	ax, 969Fh
		push	ax		; int
		call	sub_9DFF
		add	sp, 10h
		pop	di
		pop	si
		pop	bp
		retf
_execl		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl setblock(unsigned	int segx, unsigned int newsize)
_setblock	proc far

_segx		= word ptr  6
newsize		= word ptr  8

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ah, 4Ah	; 'J'
		mov	bx, [bp+newsize]
		mov	es, [bp+_segx]
		int	21h		; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
					; ES = segment address of block	to change
					; BX = new size	in paragraphs
		jb	short loc_9916
		mov	ax, 0FFFFh
		jmp	short loc_991C
; ---------------------------------------------------------------------------

loc_9916:
		push	bx
		push	ax
		call	__IOERROR
		pop	ax

loc_991C:
		pop	di
		pop	si
		pop	bp
		retf
_setblock	endp

; ---------------------------------------------------------------------------
		push	si
		push	di
		mov	es, word_E5A6
		xor	di, di
		push	es
		push	word_E5A8
		nop
		push	cs
		call	near ptr _malloc
		pop	bx
		mov	bx, ax
		pop	es
		mov	word ptr dword_F318, ax
		mov	word ptr dword_F318+2, dx
		push	ds
		mov	ds, dx
		or	ax, dx
		jnz	short loc_9949
		nop
		nop
		jmp	near ptr __abort
; ---------------------------------------------------------------------------

loc_9949:
		xor	ax, ax
		mov	cx, 0FFFFh
		cmp	byte ptr es:[di], 0
		jz	short loc_9963

loc_9954:
		mov	[bx], di
		mov	word ptr [bx+2], es
		add	bx, 4
		repne scasb
		cmp	es:[di], al
		jnz	short loc_9954

loc_9963:
		mov	[bx], ax
		mov	[bx+2],	ax
		pop	ds
		pop	di
		pop	si
		mov	ax, word ptr dword_F318+2
		mov	word_E5A2, ax
		mov	ax, word ptr dword_F318
		mov	envp, ax
		retn
; ---------------------------------------------------------------------------

unknown_libname_2:			; BCC v4.x/5.x DOS runtime
		push	si
		push	di
		pop	di
		pop	si
		retf
; ---------------------------------------------------------------------------
		dd byte_D94B
		db 4 dup(0), 7Dh, 99h
		dw seg seg000
		db 0E2h, 0FFh
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, [bp+6]
		or	ax, [bp+8]
		jz	short loc_99D2
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		sub	word ptr es:[bx], 1
		sbb	word ptr es:[bx+2], 0
		xor	ax, ax
		push	ax
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	near ptr @xmsg@$bdtr$qv	; xmsg::~xmsg(void)
		add	sp, 6
		test	byte ptr [bp+0Ah], 1
		jz	short loc_99D0
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	near ptr _registerbgidriver
		pop	cx
		pop	cx
		jmp	short loc_99D4
; ---------------------------------------------------------------------------

loc_99D0:
		jmp	short loc_99D4
; ---------------------------------------------------------------------------

loc_99D2:
		xor	ax, ax

loc_99D4:
					; seg000:loc_99D0j
		pop	di
		pop	si
		pop	bp
		retf
; ---------------------------------------------------------------------------

unknown_libname_3:			; BCC v4.x/5.x DOS runtime
		push	si
		push	di
		pop	di
		pop	si
		retf
; ---------------------------------------------------------------------------
		dd byte_DAF3
		dd byte_DAA5
		db 4 dup(0), 0BEh, 1
		dw seg seg003
		db 87h,	20h, 0FCh, 0FFh, 6 dup(0), 0DDh, 99h
		dw seg seg000
		db 0DEh, 0FFh, 2 dup(0), 5, 3 dup(0), 2	dup(0FFh), 6, 0
		db 5, 3	dup(0),	0E9h, 99h
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, [bp+6]
		or	ax, [bp+8]
		jz	short loc_9A54
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		sub	word ptr es:[bx], 1
		sbb	word ptr es:[bx+2], 0
		xor	ax, ax
		push	ax
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	near ptr @xmsg@$bdtr$qv	; xmsg::~xmsg(void)
		add	sp, 6
		test	byte ptr [bp+0Ah], 1
		jz	short loc_9A52
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	near ptr _registerbgidriver
		pop	cx
		pop	cx
		jmp	short loc_9A56
; ---------------------------------------------------------------------------

loc_9A52:
		jmp	short loc_9A56
; ---------------------------------------------------------------------------

loc_9A54:
		xor	ax, ax

loc_9A56:
					; seg000:loc_9A52j
		pop	di
		pop	si
		pop	bp
		retf
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, [bp+6]
		or	ax, [bp+8]
		jz	short loc_9AA1
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		sub	word ptr es:[bx], 1
		sbb	word ptr es:[bx+2], 0
		xor	ax, ax
		push	ax
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	near ptr @xmsg@$bdtr$qv	; xmsg::~xmsg(void)
		add	sp, 6
		test	byte ptr [bp+0Ah], 1
		jz	short loc_9A9F
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	near ptr _registerbgidriver
		pop	cx
		pop	cx
		jmp	short loc_9AA3
; ---------------------------------------------------------------------------

loc_9A9F:
		jmp	short loc_9AA3
; ---------------------------------------------------------------------------

loc_9AA1:
		xor	ax, ax

loc_9AA3:
					; seg000:loc_9A9Fj
		pop	di
		pop	si
		pop	bp
		retf
; ---------------------------------------------------------------------------

unknown_libname_4:			; BCC v4.x/5.x DOS runtime
		push	si
		push	di
		pop	di
		pop	si
		retf
; ---------------------------------------------------------------------------
unk_9AAC	db    0
		db    0
		db    0
		db    0
		dd unk_9AAC
		db 0E2h, 0FFh, 6, 0Ch
		dw seg seg003
		db 4 dup(0), 0CCh, 0Bh
		dw seg seg003
		db 4, 0, 0FCh, 0FFh, 2 dup(0), 6, 0Ch
		dw seg seg003
		db 4, 0, 0F8h, 0FFh, 6 dup(0), 94h, 0Bh
		dw seg seg003
		db 0, 2	dup(1),	7 dup(0), 0B6h,	9Ah
		dw seg seg000
		db 0DAh, 0FFh, 2 dup(0), 5, 3 dup(0), 0BEh, 9Ah, 6, 0
		db 5, 0, 1, 0, 0D6h, 9Ah, 6, 0Ch
		dw seg seg003
		db 4 dup(0), 0CCh, 0Bh
		dw seg seg003
		db 4, 0, 0FCh, 0FFh, 2 dup(0), 6, 0Ch
		dw seg seg003
		db 4, 0, 0F8h, 0FFh, 6 dup(0), 94h, 0Bh
		dw seg seg003
		db 0, 2	dup(1),	7 dup(0), 0FAh,	9Ah
		dw seg seg000
		db 0DAh, 0FFh, 2 dup(0), 5, 3 dup(0), 2, 9Bh, 6, 0, 5
		db 0, 1, 0, 1Ah, 9Bh, 6, 0Ch
		dw seg seg003
		db 4 dup(0), 0CCh, 0Bh
		dw seg seg003
		db 4, 0, 0FCh, 0FFh, 2 dup(0), 6, 0Ch
		dw seg seg003
		db 4, 0, 0F8h, 0FFh, 6 dup(0), 94h, 0Bh
		dw seg seg003
		db 0, 2	dup(1),	7 dup(0), 3Eh, 9Bh
		dw seg seg000
		db 0DAh, 0FFh, 2 dup(0), 5, 3 dup(0), 46h, 9Bh,	6, 0, 5
		db 0, 1, 0, 5Eh, 9Bh, 4	dup(0),	82h, 9Bh
		dw seg seg000
byte_9B8A	db 0E2h, 0FFh, 52h, 0Bh
		dw seg seg003
		dd byte_E4D6
		dd 0
		dd byte_9B8A+2
		db 0E2h, 0FFh, 4 dup(0), 9Eh, 9Bh
		dw seg seg000
		db 0E2h, 0FFh, 52h, 0Bh
		dw seg seg003
		dd byte_E3D4
		db 4 dup(0), 0A8h, 9Bh
		dw seg seg000
		db 0E2h, 0FFh, 4 dup(0), 0BAh, 9Bh
		dw seg seg000
byte_9BC2	db 0E2h, 0FFh, 52h, 0Bh
		dw seg seg003
		dd byte_E3D4
		dd 0
		dd byte_9BC2+2
		db 0E2h, 0FFh
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		push	word ptr [bp+0Ch]
		push	word ptr [bp+0Ah]
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	near ptr @xmsg@$bctr$qmx4xmsg ;	xmsg::xmsg(xmsg	&)
		add	sp, 8
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		add	word ptr es:[bx], 1
		adc	word ptr es:[bx+2], 0
		mov	dx, [bp+8]
		mov	ax, [bp+6]
		pop	di
		pop	si
		pop	bp
		retf
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, [bp+6]
		or	ax, [bp+8]
		jz	short loc_9C52
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		sub	word ptr es:[bx], 1
		sbb	word ptr es:[bx+2], 0
		xor	ax, ax
		push	ax
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	near ptr @xmsg@$bdtr$qv	; xmsg::~xmsg(void)
		add	sp, 6
		test	byte ptr [bp+0Ah], 1
		jz	short loc_9C50
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	near ptr _registerbgidriver
		pop	cx
		pop	cx
		jmp	short loc_9C54
; ---------------------------------------------------------------------------

loc_9C50:
		jmp	short loc_9C54
; ---------------------------------------------------------------------------

loc_9C52:
		xor	ax, ax

loc_9C54:
					; seg000:loc_9C50j
		pop	di
		pop	si
		pop	bp
		retf
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, [bp+6]
		or	ax, [bp+8]
		jz	short loc_9C9F
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		sub	word ptr es:[bx], 1
		sbb	word ptr es:[bx+2], 0
		xor	ax, ax
		push	ax
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	near ptr @xmsg@$bdtr$qv	; xmsg::~xmsg(void)
		add	sp, 6
		test	byte ptr [bp+0Ah], 1
		jz	short loc_9C9D
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	near ptr _registerbgidriver
		pop	cx
		pop	cx
		jmp	short loc_9CA1
; ---------------------------------------------------------------------------

loc_9C9D:
		jmp	short loc_9CA1
; ---------------------------------------------------------------------------

loc_9C9F:
		xor	ax, ax

loc_9CA1:
					; seg000:loc_9C9Dj
		pop	di
		pop	si
		pop	bp
		retf
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, [bp+6]
		or	ax, [bp+8]
		jz	short loc_9CEC
		nop
		push	cs
		call	near ptr @__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		sub	word ptr es:[bx], 1
		sbb	word ptr es:[bx+2], 0
		xor	ax, ax
		push	ax
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	near ptr @xmsg@$bdtr$qv	; xmsg::~xmsg(void)
		add	sp, 6
		test	byte ptr [bp+0Ah], 1
		jz	short loc_9CEA
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		nop
		push	cs
		call	near ptr _registerbgidriver
		pop	cx
		pop	cx
		jmp	short loc_9CEE
; ---------------------------------------------------------------------------

loc_9CEA:
		jmp	short loc_9CEE
; ---------------------------------------------------------------------------

loc_9CEC:
		xor	ax, ax

loc_9CEE:
					; seg000:loc_9CEAj
		pop	di
		pop	si
		pop	bp
		retf

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_9CF2	proc far

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

		push	bp
		mov	bp, sp
		sub	sp, 8
		push	si
		push	di
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		jmp	short loc_9D63
; ---------------------------------------------------------------------------

loc_9D08:
		les	bx, [bp+var_4]
		mov	al, es:[bx]
		push	ax
		nop
		push	cs
		call	near ptr sub_4DFB
		pop	cx
		or	ax, ax
		jz	short loc_9D27
		inc	word ptr [bp+var_4]
		les	bx, [bp+var_4]
		cmp	byte ptr es:[bx], 0
		jnz	short loc_9D60
		jmp	short loc_9D6C
; ---------------------------------------------------------------------------

loc_9D27:
		mov	dx, [bp+arg_6]
		mov	ax, [bp+arg_4]
		mov	word ptr [bp+var_8+2], dx
		mov	word ptr [bp+var_8], ax
		jmp	short loc_9D46
; ---------------------------------------------------------------------------

loc_9D35:
		les	bx, [bp+var_4]
		mov	al, es:[bx]
		les	bx, [bp+var_8]
		cmp	al, es:[bx]
		jz	short loc_9D4F
		inc	word ptr [bp+var_8]

loc_9D46:
		les	bx, [bp+var_8]
		cmp	byte ptr es:[bx], 0
		jnz	short loc_9D35

loc_9D4F:
		les	bx, [bp+var_8]
		cmp	byte ptr es:[bx], 0
		jz	short loc_9D60
		mov	dx, word ptr [bp+var_4+2]
		mov	ax, word ptr [bp+var_4]
		jmp	short loc_9D70
; ---------------------------------------------------------------------------

loc_9D60:
		inc	word ptr [bp+var_4]

loc_9D63:
		les	bx, [bp+var_4]
		cmp	byte ptr es:[bx], 0
		jnz	short loc_9D08

loc_9D6C:
		xor	dx, dx
		xor	ax, ax

loc_9D70:
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_9CF2	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl __far sub_9D76(int, int, char *pathname, char *src, int)
sub_9D76	proc far

dest		= byte ptr -50h
arg_0		= word ptr  6
arg_2		= word ptr  8
pathname	= dword	ptr  0Ah
src		= dword	ptr  0Eh
arg_C		= word ptr  12h

		push	bp
		mov	bp, sp
		sub	sp, 50h
		push	si
		push	di
		push	[bp+arg_2]
		push	[bp+arg_0]	; src
		push	ss
		lea	ax, [bp+dest]
		push	ax		; dest
		nop
		push	cs
		call	near ptr _strcpy
		push	word ptr [bp+src+2]
		push	word ptr [bp+src] ; src
		push	ss
		lea	ax, [bp+dest]
		push	ax		; dest
		nop
		push	cs
		call	near ptr _strcat
		add	sp, 10h
		cmp	[bp+arg_C], 0
		jz	short loc_9DCA
		push	word ptr [bp+pathname+2]
		push	word ptr [bp+pathname] ; pathname
		push	ds
		mov	ax, 0E52h
		push	ax		; varname
		push	ss
		lea	ax, [bp+dest]
		push	ax		; file
		nop
		push	cs
		call	near ptr __searchenv
		add	sp, 0Ch
		les	bx, [bp+pathname]
		cmp	byte ptr es:[bx], 0
		jz	short loc_9DF7
		jmp	short loc_9DF2
; ---------------------------------------------------------------------------

loc_9DCA:
		push	ss
		lea	ax, [bp+dest]
		push	ax		; src
		push	word ptr [bp+pathname+2]
		push	word ptr [bp+pathname] ; dest
		nop
		push	cs
		call	near ptr _strcpy
		add	sp, 8
		mov	ax, 4
		push	ax		; char
		push	ss
		lea	ax, [bp+dest]
		push	ax		; pathname
		nop
		push	cs
		call	near ptr __access
		add	sp, 6
		or	ax, ax
		jnz	short loc_9DF7

loc_9DF2:
		mov	ax, 1
		jmp	short loc_9DF9
; ---------------------------------------------------------------------------

loc_9DF7:
		xor	ax, ax

loc_9DF9:
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_9D76	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_9DFF(int, char *s, int, int, int, int, int)
sub_9DFF	proc near

pathname	= word ptr -9Ch
var_1A		= word ptr -1Ah
var_18		= word ptr -18h
var_16		= word ptr -16h
var_14		= dword	ptr -14h
s1		= dword	ptr -10h
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  4
s		= dword	ptr  6
arg_6		= word ptr  0Ah
arg_8		= word ptr  0Ch
arg_A		= word ptr  0Eh
arg_C		= word ptr  10h
arg_E		= word ptr  12h

		push	bp
		mov	bp, sp
		sub	sp, 9Ch
		push	si
		push	di
		les	bx, [bp+s]
		mov	al, es:[bx]
		cbw
		mov	dx, ax
		cmp	ax, 61h	; 'a'
		jb	short loc_9E19
		sub	dx, 20h	; ' '

loc_9E19:
		cmp	dx, 41h	; 'A'
		jb	short loc_9E2D
		cmp	dx, 5Ah	; 'Z'
		ja	short loc_9E2D
		les	bx, [bp+s]
		cmp	byte ptr es:[bx+1], 3Ah	; ':'
		jz	short loc_9E43

loc_9E2D:
		push	ds
		mov	ax, 0E57h
		push	ax
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]
		push	cs
		call	near ptr sub_9CF2
		add	sp, 8
		or	ax, dx
		jz	short loc_9E48

loc_9E43:
		mov	[bp+arg_E], 0

loc_9E48:
		mov	[bp+var_1A], 0
		mov	ax, 2Eh	; '.'
		push	ax		; char
		push	word ptr [bp+s+2]
		push	word ptr [bp+s]	; s
		nop
		push	cs
		call	near ptr strrchr
		add	sp, 6
		mov	word ptr [bp+s1+2], dx
		mov	word ptr [bp+s1], ax
		or	ax, dx
		jz	short loc_9EA7
		push	[bp+arg_E]	; int
		push	ds
		mov	ax, 0E5Ah
		push	ax		; src
		push	ss
		lea	ax, [bp+pathname]
		push	ax		; pathname
		push	word ptr [bp+s+2] ; int
		push	word ptr [bp+s]	; int
		push	cs
		call	near ptr sub_9D76
		add	sp, 0Eh
		mov	[bp+var_18], ax
		or	ax, ax
		jnz	short loc_9E8E
		jmp	loc_9F12
; ---------------------------------------------------------------------------

loc_9E8E:
		push	ds
		mov	ax, 0E5Bh
		push	ax		; s2
		push	word ptr [bp+s1+2]
		push	word ptr [bp+s1] ; s1
		nop
		push	cs
		call	near ptr _stricmp
		add	sp, 8
		or	ax, ax
		jnz	short loc_9F12
		jmp	short loc_9F0D
; ---------------------------------------------------------------------------

loc_9EA7:
		push	[bp+arg_E]	; int
		push	ds
		mov	ax, 0E60h
		push	ax		; src
		push	ss
		lea	ax, [bp+pathname]
		push	ax		; pathname
		push	word ptr [bp+s+2] ; int
		push	word ptr [bp+s]	; int
		push	cs
		call	near ptr sub_9D76
		add	sp, 0Eh
		mov	[bp+var_18], ax
		or	ax, ax
		jnz	short loc_9F12
		push	[bp+arg_E]	; int
		push	ds
		mov	ax, 0E65h
		push	ax		; src
		push	ss
		lea	ax, [bp+pathname]
		push	ax		; pathname
		push	word ptr [bp+s+2] ; int
		push	word ptr [bp+s]	; int
		push	cs
		call	near ptr sub_9D76
		add	sp, 0Eh
		mov	[bp+var_18], ax
		or	ax, ax
		jnz	short loc_9F12
		push	[bp+arg_E]	; int
		push	ds
		mov	ax, 0E6Ah
		push	ax		; src
		push	ss
		lea	ax, [bp+pathname]
		push	ax		; pathname
		push	word ptr [bp+s+2] ; int
		push	word ptr [bp+s]	; int
		push	cs
		call	near ptr sub_9D76
		add	sp, 0Eh
		mov	[bp+var_18], ax
		or	ax, ax
		jz	short loc_9F12

loc_9F0D:
		mov	[bp+var_1A], 1

loc_9F12:
		cmp	[bp+var_18], 0
		jz	short loc_9F34
		cmp	[bp+var_1A], 0
		jz	short loc_9F3D
		push	ds
		mov	ax, 0E6Fh
		push	ax		; name
		nop
		push	cs
		call	near ptr _getenv
		pop	cx
		pop	cx
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		or	ax, dx
		jnz	short loc_9F3D

loc_9F34:
		mov	word_E5AE, 2
		jmp	loc_A003
; ---------------------------------------------------------------------------

loc_9F3D:
					; sub_9DFF+133j
		cmp	[bp+var_1A], 0
		jz	short loc_9F56
		push	[bp+var_2]
		push	[bp+var_4]
		push	ds
		mov	ax, 0E77h
		push	ax
		push	[bp+arg_8]
		push	[bp+arg_6]
		jmp	short loc_9F6A
; ---------------------------------------------------------------------------

loc_9F56:
		push	ss		; int
		lea	ax, [bp+pathname]
		push	ax		; int
		xor	ax, ax
		push	ax
		push	ax		; s
		mov	ax, [bp+arg_6]
		add	ax, 4
		push	[bp+arg_8]	; int
		push	ax		; int

loc_9F6A:
		call	__DOSCMD
		mov	[bp+var_6], dx
		mov	[bp+var_8], ax
		mov	ax, [bp+var_8]
		or	ax, [bp+var_6]
		jnz	short loc_9F84
		mov	word_E5AE, 8
		jmp	loc_A003
; ---------------------------------------------------------------------------

loc_9F84:
		mov	ax, [bp+var_8]
		inc	ax
		push	[bp+var_6]
		push	ax		; s
		nop
		push	cs
		call	near ptr _strlen
		pop	cx
		pop	cx
		cmp	ax, 80h	; ''
		jb	short loc_9FAD
		mov	word_E5AE, 14h
		push	[bp+var_6]
		push	[bp+var_8]
		nop
		push	cs
		call	near ptr _farfree
		pop	cx
		pop	cx
		jmp	short loc_A003
; ---------------------------------------------------------------------------

loc_9FAD:
		mov	ax, [bp+arg_A]
		or	ax, [bp+arg_C]
		jnz	short loc_9FC2
		mov	dx, word ptr dword_F318+2
		mov	ax, word ptr dword_F318
		mov	[bp+arg_C], dx
		mov	[bp+arg_A], ax

loc_9FC2:
		push	[bp+arg_C]	; int
		push	[bp+arg_A]	; int
		cmp	[bp+var_1A], 0
		jz	short loc_9FD6
		mov	dx, [bp+var_2]
		mov	ax, [bp+var_4]
		jmp	short loc_9FDC
; ---------------------------------------------------------------------------

loc_9FD6:
		mov	dx, ss
		lea	ax, [bp+pathname]

loc_9FDC:
		push	dx
		push	ax		; s
		push	ss
		lea	ax, [bp+var_14]
		push	ax		; __int32
		call	__DOSENV
		mov	[bp+var_A], dx
		mov	[bp+var_C], ax
		or	ax, dx
		jnz	short loc_A008
		mov	word_E5AE, 8
		push	[bp+var_6]
		push	[bp+var_8]
		nop
		push	cs
		call	near ptr _farfree
		pop	cx
		pop	cx

loc_A003:
					; sub_9DFF+182j ...
		mov	ax, 0FFFFh
		jmp	short loc_A053
; ---------------------------------------------------------------------------

loc_A008:
		call	off_EE5C
		push	[bp+var_A]
		push	[bp+var_C]
		push	[bp+var_6]
		push	[bp+var_8]
		cmp	[bp+var_1A], 0
		jz	short loc_A026
		mov	dx, [bp+var_2]
		mov	ax, [bp+var_4]
		jmp	short loc_A02C
; ---------------------------------------------------------------------------

loc_A026:
		mov	dx, ss
		lea	ax, [bp+pathname]

loc_A02C:
		push	dx
		push	ax
		call	[bp+arg_0]
		add	sp, 0Ch
		mov	[bp+var_16], ax
		push	word ptr [bp+var_14+2]
		push	word ptr [bp+var_14]
		nop
		push	cs
		call	near ptr _farfree
		push	[bp+var_6]
		push	[bp+var_8]
		nop
		push	cs
		call	near ptr _farfree
		add	sp, 8
		mov	ax, [bp+var_16]

loc_A053:
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_9DFF	endp

seg000		ends

; ===========================================================================

; Segment type:	Pure code
seg001		segment	byte public 'CODE' use16
		assume cs:seg001
		;org 9
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_A059	proc near

var_A		= byte ptr -0Ah
var_4		= word ptr -4

		enter	0Ah, 0
		push	si
		push	ds
		push	offset aMiko_cfg ; "MIKO.CFG"
		call	sub_A88
		push	ss
		lea	ax, [bp+var_A]
		push	ax
		push	0Ah
		call	sub_9D4
		call	sub_968
		mov	si, [bp+var_4]
		mov	word ptr dword_F3CE+2, si
		mov	word ptr dword_F3CE, 0
		mov	ax, si
		pop	si
		leave
		retn
sub_A059	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_A08A(char *arg0)
sub_A08A	proc near

_arg0		= dword	ptr  4

		push	bp
		mov	bp, sp
		call	sub_D8CE
		call	sub_126E
		call	sub_20FA
		call	sub_F12
		call	sub_D3F4
		push	large 0
		push	large [bp+_arg0]	; arg0
		push	large [bp+_arg0]	; path
		call	_execl
		add	sp, 0Ch
		pop	bp
		retn	4
sub_A08A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_A0BD	proc near
		push	bp
		mov	bp, sp
		les	bx, dword_F3CE
		mov	al, es:[bx+12h]
		les	bx, off_E5C0
		mov	es:[bx+3], al
		les	bx, dword_F3CE
		mov	al, es:[bx+19h]
		add	al, 30h	; '0'
		les	bx, off_E5C0
		mov	es:[bx+4], al
		les	bx, dword_F3CE
		mov	al, es:[bx+25h]
		les	bx, off_E5C0
		mov	es:[bx+5], al
		push	word ptr off_E5C0+2
		push	bx
		call	sub_A292
		call	sub_ADFC
		call	sub_A2D1
		pop	bp
		retn
sub_A0BD	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
_main		proc far

var_4		= dword	ptr -4
_argc		= word ptr  6
_argv		= dword	ptr  8
_envp		= dword	ptr  0Ch

		enter	4, 0
		mov	word ptr [bp+var_4+2], ds
		mov	word ptr [bp+var_4], 0A8h ; '¨'
		call	sub_A059
		or	ax, ax
		jz	locret_A290
		les	bx, dword_F3CE
		mov	al, es:[bx+12h]
		les	bx, [bp+var_4]
		mov	es:[bx+4], al
		mov	word_10070, 5208h
		push	ds
		push	offset aMSzlEd_dat ; "¶z½ed.dat"
		call	sub_D43C
		call	sub_EEE
		push	ds
		push	offset aGameft_bft ; "GAMEFT.bft"
		call	sub_F2E
		les	bx, dword_F3CE
		mov	al, es:[bx+10h]
		mov	ah, 0
		push	ax
		mov	al, es:[bx+18h]
		mov	ah, 0
		push	ax
		call	sub_CFAA
		call	sub_19E0
		les	bx, dword_F3CE
		cmp	byte ptr es:[bx+30h], 0FEh ; 'þ'
		jb	loc_A1FE
		call	sub_A0BD
		call	sub_B44D
		call	sub_C0F8
		les	bx, dword_F3CE
		cmp	byte ptr es:[bx+30h], 0FFh
		jz	short loc_A187
		cmp	byte ptr es:[bx+0Fh], 0
		jnz	short loc_A1E9

loc_A187:
		les	bx, [bp+var_4]
		mov	al, es:[bx+5]
		les	bx, dword_F3CE
		add	al, es:[bx+0Fh]
		les	bx, [bp+var_4]
		mov	es:[bx+5], al
		mov	dx, 0A6h ; '¦'
		mov	al, 1
		out	dx, al		; Interrupt Controller #2, 8259A
		push	0
		push	word ptr [bp+var_4+2]
		push	bx
		call	sub_CD65
		push	0
		call	sub_CCB8
		push	large 0
		push	0
		call	sub_CCDD
		push	ds
		push	offset unk_FCEA
		push	large [dword_FCD2]
		call	sub_1274
		push	0
		call	sub_11C2
		push	1
		call	sub_622
		push	0
		call	sub_CE7A
		push	4
		call	sub_666

loc_A1E9:
		push	204h
		call	sub_CF8C
		push	64h ; 'd'
		call	sub_CCA3
		call	sub_C814
		jmp	loc_A281
; ---------------------------------------------------------------------------

loc_A1FE:
		les	bx, dword_F3CE
		cmp	byte ptr es:[bx+30h], 0FDh ; 'ý'
		jnz	short loc_A274
		push	64h ; 'd'
		call	sub_CCA3
		call	sub_C814
		les	bx, [bp+var_4]
		mov	byte ptr es:[bx+5], 34h	; '4'
		mov	word_E662, 0
		call	far ptr	loc_19EC
		mov	dx, 0A6h ; '¦'
		mov	al, 1
		out	dx, al		; Interrupt Controller #2, 8259A
		push	0
		push	large [bp+var_4]
		call	sub_CD65
		push	0
		call	sub_CCB8
		push	large 0
		push	0
		call	sub_CCDD
		push	ds
		push	offset unk_FCEA
		push	large [dword_FCD2]
		call	sub_1274
		push	0
		call	sub_11C2
		push	1
		call	sub_622
		push	0
		call	sub_CE7A
		push	4
		call	sub_666
		jmp	short loc_A27E
; ---------------------------------------------------------------------------

loc_A274:
		push	64h ; 'd'
		call	sub_CCA3
		call	sub_C814

loc_A27E:
		call	sub_C0F8

loc_A281:
		push	204h
		call	sub_CF8C
		push	ds
		push	offset arg0	; "op"
		call	sub_A08A

locret_A290:
		leave
		retf
_main		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_A292	proc near

var_2		= word ptr -2
arg_0		= dword	ptr  4

		enter	2, 0
		call	sub_A2D1
		push	large [bp+arg_0]
		call	sub_A88
		or	ax, ax
		jnz	short loc_A2AD
		mov	ax, 1
		leave
		retn	4
; ---------------------------------------------------------------------------

loc_A2AD:
		call	sub_B06
		mov	[bp+var_2], ax
		mov	word_12478, 1F48h
		push	ds
		push	word_12478
		push	ax
		call	sub_9D4
		call	sub_968
		xor	ax, ax
		leave
		retn	4
sub_A292	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_A2D1	proc near
		push	bp
		mov	bp, sp
		pop	bp
		retn
sub_A2D1	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_A2D6	proc near
		push	bp
		mov	bp, sp
		call	sub_846
		mov	ax, 0FFF0h
		mov	dx, 4A0h
		out	dx, ax
		mov	ax, 0FFh
		mov	dx, 4A2h
		out	dx, ax
		mov	ax, 3100h
		mov	dx, 4A4h
		out	dx, ax
		mov	ax, 0FFFFh
		mov	dx, 4A8h
		out	dx, ax
		mov	ax, 0
		mov	dx, 4ACh
		out	dx, ax
		mov	ax, 0Fh
		mov	dx, 4AEh
		out	dx, ax
		pop	bp
		retn
sub_A2D6	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_A30A	proc near
					; sub_A847+4B5p

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  4
arg_2		= word ptr  6

		enter	4, 0
		push	si
		push	di
		mov	ax, [bp+arg_2]
		sar	ax, 3
		mov	dx, [bp+arg_0]
		shl	dx, 6
		add	ax, dx
		mov	dx, [bp+arg_0]
		shl	dx, 4
		add	ax, dx
		mov	si, ax
		call	sub_A2D6
		xor	di, di
		jmp	short loc_A368
; ---------------------------------------------------------------------------

loc_A32F:
		mov	[bp+var_2], 0
		jmp	short loc_A35E
; ---------------------------------------------------------------------------

loc_A336:
		mov	dx, 0A6h ; '¦'
		mov	al, 0
		out	dx, al		; Interrupt Controller #2, 8259A
		les	bx, dword_FC3C
		add	bx, si
		mov	ax, es:[bx]
		mov	[bp+var_4], ax
		mov	al, 1
		out	dx, al		; Interrupt Controller #2, 8259A
		mov	bx, word ptr dword_FC3C
		add	bx, si
		mov	ax, [bp+var_4]
		mov	es:[bx], ax
		add	[bp+var_2], 2
		add	si, 2

loc_A35E:
		cmp	[bp+var_2], 28h	; '('
		jl	short loc_A336
		inc	di
		add	si, 28h	; '('

loc_A368:
		cmp	di, 0C8h ; 'È'
		jl	short loc_A32F
		call	sub_85C
		mov	dx, 0A6h ; '¦'
		mov	al, 0
		out	dx, al		; Interrupt Controller #2, 8259A
		pop	di
		pop	si
		leave
		retn	4
sub_A30A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_A37F	proc near

var_8		= dword	ptr -8
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  4
arg_2		= word ptr  6
arg_4		= word ptr  8
arg_6		= word ptr  0Ah

		enter	8, 0
		push	si
		push	di
		mov	eax, dword_FCD2
		mov	[bp+var_8], eax
		cmp	[bp+arg_2], 1
		jnz	short loc_A39A
		add	word ptr [bp+var_8], 0A0h ; ' '
		jmp	short loc_A3B2
; ---------------------------------------------------------------------------

loc_A39A:
		cmp	[bp+arg_2], 2
		jnz	short loc_A3A7
		add	word ptr [bp+var_8], 0FA00h
		jmp	short loc_A3B2
; ---------------------------------------------------------------------------

loc_A3A7:
		cmp	[bp+arg_2], 3
		jnz	short loc_A3B2
		add	word ptr [bp+var_8], 0FAA0h

loc_A3B2:
		mov	eax, [bp+var_8]
		shr	eax, 10h
		mov	dx, word ptr [bp+var_8]
		shr	dx, 4
		add	ax, dx
		mov	dx, word ptr [bp+var_8]
		and	dx, 0Fh
		mov	word ptr [bp+var_8+2], ax
		mov	word ptr [bp+var_8], dx
		mov	dx, 0A4h ; '¤'
		mov	al, 1
		out	dx, al		; Interrupt Controller #2, 8259A
		mov	ax, [bp+arg_6]
		sar	ax, 3
		mov	dx, [bp+arg_4]
		shl	dx, 6
		add	ax, dx
		mov	dx, [bp+arg_4]
		shl	dx, 4
		add	ax, dx
		mov	si, ax
		mov	dx, 0A6h ; '¦'
		mov	al, 0
		out	dx, al		; Interrupt Controller #2, 8259A
		xor	di, di
		jmp	loc_A491
; ---------------------------------------------------------------------------

loc_A3F7:
		push	large 190h
		push	large [bp+var_8]
		push	140h
		call	sub_35F2
		call	sub_A2D6
		mov	ax, 0FFh
		mov	dx, 4A2h
		out	dx, ax
		mov	ax, 3100h
		mov	dx, 4A4h
		out	dx, ax
		mov	ax, 0Fh
		mov	dx, 4AEh
		out	dx, ax
		mov	bx, [bp+arg_0]
		shl	bx, 3
		mov	ax, di
		and	ax, 3
		add	ax, ax
		add	bx, ax
		mov	ax, [bx+60Ch]
		mov	dx, 4A8h
		out	dx, ax
		mov	[bp+var_4], 7D00h
		mov	[bp+var_2], 0
		jmp	short loc_A461
; ---------------------------------------------------------------------------

loc_A444:
		les	bx, dword_FC3C
		add	bx, [bp+var_4]
		mov	ax, es:[bx]
		mov	bx, word ptr dword_FC3C
		add	bx, si
		mov	es:[bx], ax
		inc	[bp+var_2]
		add	si, 2
		add	[bp+var_4], 2

loc_A461:
		cmp	[bp+var_2], 14h
		jl	short loc_A444
		call	sub_85C
		add	si, 28h	; '('
		add	word ptr [bp+var_8], 140h
		mov	eax, [bp+var_8]
		shr	eax, 10h
		mov	dx, word ptr [bp+var_8]
		shr	dx, 4
		add	ax, dx
		mov	dx, word ptr [bp+var_8]
		and	dx, 0Fh
		mov	word ptr [bp+var_8+2], ax
		mov	word ptr [bp+var_8], dx
		inc	di

loc_A491:
		cmp	di, 0C8h ; 'È'
		jl	loc_A3F7
		mov	dx, 0A4h ; '¤'
		mov	al, 0
		out	dx, al		; Interrupt Controller #2, 8259A
		push	[bp+arg_6]
		push	[bp+arg_4]
		call	sub_A30A
		pop	di
		pop	si
		leave
		retn	8
sub_A37F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_A4AE	proc near
					; sub_ADFC+29p

var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2

		enter	8, 0
		push	si
		push	di
		call	sub_A57F
		mov	dx, 0A6h ; '¦'
		mov	al, 0
		out	dx, al		; Interrupt Controller #2, 8259A
		push	3C00h
		call	sub_2350
		mov	word ptr dword_1247A+2,	ax
		mov	word ptr dword_1247A, 0
		xor	si, si
		mov	di, 140h
		mov	[bp+var_4], 0
		jmp	loc_A573
; ---------------------------------------------------------------------------

loc_A4DB:
		mov	[bp+var_2], 50h	; 'P'
		mov	[bp+var_6], 0
		jmp	loc_A567
; ---------------------------------------------------------------------------

loc_A4E8:
		mov	ax, [bp+var_2]
		sar	ax, 3
		mov	dx, di
		shl	dx, 6
		add	ax, dx
		mov	dx, di
		shl	dx, 4
		add	ax, dx
		mov	[bp+var_8], ax
		les	bx, dword_FC3C
		add	bx, [bp+var_8]
		mov	ax, es:[bx]
		mov	dx, si
		add	dx, dx
		les	bx, dword_1247A
		add	bx, dx
		mov	es:[bx], ax
		inc	si
		les	bx, dword_FC40
		add	bx, [bp+var_8]
		mov	ax, es:[bx]
		mov	dx, si
		add	dx, dx
		les	bx, dword_1247A
		add	bx, dx
		mov	es:[bx], ax
		inc	si
		les	bx, dword_FC44
		add	bx, [bp+var_8]
		mov	ax, es:[bx]
		mov	dx, si
		add	dx, dx
		les	bx, dword_1247A
		add	bx, dx
		mov	es:[bx], ax
		inc	si
		les	bx, dword_FC48
		add	bx, [bp+var_8]
		mov	ax, es:[bx]
		mov	dx, si
		add	dx, dx
		les	bx, dword_1247A
		add	bx, dx
		mov	es:[bx], ax
		inc	si
		add	[bp+var_6], 2
		add	[bp+var_2], 10h

loc_A567:
		cmp	[bp+var_6], 3Ch	; '<'
		jl	loc_A4E8
		inc	[bp+var_4]
		inc	di

loc_A573:
		cmp	[bp+var_4], 40h	; '@'
		jl	loc_A4DB
		pop	di
		pop	si
		leave
		retn
sub_A4AE	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_A57F	proc near
		push	bp
		mov	bp, sp
		cmp	dword_1247A, 0
		jz	short loc_A59C
		push	word ptr dword_1247A+2
		call	sub_2454
		mov	dword_1247A, 0

loc_A59C:
		pop	bp
		retn
sub_A57F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_A59E	proc near

var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2

		enter	6, 0
		push	si
		push	di
		xor	cx, cx
		mov	si, 140h
		mov	[bp+var_4], 0
		jmp	loc_A641
; ---------------------------------------------------------------------------

loc_A5B1:
		mov	[bp+var_2], 50h	; 'P'
		mov	[bp+var_6], 0
		jmp	short loc_A637
; ---------------------------------------------------------------------------

loc_A5BD:
		mov	ax, [bp+var_2]
		sar	ax, 3
		mov	dx, si
		shl	dx, 6
		add	ax, dx
		mov	dx, si
		shl	dx, 4
		add	ax, dx
		mov	di, ax
		mov	ax, cx
		add	ax, ax
		les	bx, dword_1247A
		add	bx, ax
		mov	ax, es:[bx]
		les	bx, dword_FC3C
		add	bx, di
		mov	es:[bx], ax
		inc	cx
		mov	ax, cx
		add	ax, ax
		les	bx, dword_1247A
		add	bx, ax
		mov	ax, es:[bx]
		les	bx, dword_FC40
		add	bx, di
		mov	es:[bx], ax
		inc	cx
		mov	ax, cx
		add	ax, ax
		les	bx, dword_1247A
		add	bx, ax
		mov	ax, es:[bx]
		les	bx, dword_FC44
		add	bx, di
		mov	es:[bx], ax
		inc	cx
		mov	ax, cx
		add	ax, ax
		les	bx, dword_1247A
		add	bx, ax
		mov	ax, es:[bx]
		les	bx, dword_FC48
		add	bx, di
		mov	es:[bx], ax
		inc	cx
		add	[bp+var_6], 2
		add	[bp+var_2], 10h

loc_A637:
		cmp	[bp+var_6], 3Ch	; '<'
		jl	short loc_A5BD
		inc	[bp+var_4]
		inc	si

loc_A641:
		cmp	[bp+var_4], 40h	; '@'
		jl	loc_A5B1
		pop	di
		pop	si
		leave
		retn
sub_A59E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_A64D	proc near

var_2		= byte ptr -2
var_1		= byte ptr -1
arg_0		= dword	ptr  4

		enter	2, 0
		mov	bx, word_12478
		mov	cl, [bx]
		inc	word_12478
		mov	bx, word_12478
		mov	al, [bx]
		mov	[bp+var_1], al
		inc	word_12478
		mov	bx, word_12478
		mov	al, [bx]
		mov	[bp+var_2], al
		inc	word_12478
		mov	al, cl
		mov	ah, 0
		mov	bx, ax
		test	byte ptr [bx+0B69h], 2
		jnz	short loc_A694
		les	bx, [bp+arg_0]
		mov	ax, word_124C4
		mov	es:[bx], ax
		sub	word_12478, 3
		leave
		retn	4
; ---------------------------------------------------------------------------

loc_A694:
		mov	al, [bp+var_1]
		mov	ah, 0
		mov	bx, ax
		test	byte ptr [bx+0B69h], 2
		jnz	short loc_A6B8
		mov	al, cl
		mov	ah, 0
		add	ax, 0FFD0h
		les	bx, [bp+arg_0]
		mov	es:[bx], ax
		sub	word_12478, 2
		leave
		retn	4
; ---------------------------------------------------------------------------

loc_A6B8:
		mov	al, [bp+var_2]
		mov	ah, 0
		mov	bx, ax
		test	byte ptr [bx+0B69h], 2
		jnz	short loc_A6E8
		mov	al, cl
		mov	ah, 0
		add	ax, 0FFD0h
		imul	ax, 0Ah
		mov	dl, [bp+var_1]
		mov	dh, 0
		add	ax, dx
		add	ax, 0FFD0h
		les	bx, [bp+arg_0]
		mov	es:[bx], ax
		dec	word_12478
		leave
		retn	4
; ---------------------------------------------------------------------------

loc_A6E8:
		mov	al, cl
		mov	ah, 0
		add	ax, 0FFD0h
		imul	ax, 64h
		mov	dl, [bp+var_1]
		mov	dh, 0
		add	dx, 0FFD0h
		imul	dx, 0Ah
		add	ax, dx
		mov	dl, [bp+var_2]
		mov	dh, 0
		add	ax, dx
		add	ax, 0FFD0h
		les	bx, [bp+arg_0]
		mov	es:[bx], ax
		leave
		retn	4
sub_A64D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_A713	proc near
					; sub_A847+464p

arg_0		= dword	ptr  4

		push	bp
		mov	bp, sp
		mov	bx, word_12478
		cmp	byte ptr [bx], 2Ch ; ','
		jnz	short loc_A72E
		inc	word_12478
		push	large [bp+arg_0]
		call	sub_A64D
		pop	bp
		retn	4
; ---------------------------------------------------------------------------

loc_A72E:
		les	bx, [bp+arg_0]
		mov	ax, word_124C4
		mov	es:[bx], ax
		pop	bp
		retn	4
sub_A713	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_A73B	proc near
					; sub_ADFC+C6p
		push	bp
		mov	bp, sp
		add	word_124BC, 10h
		cmp	word_124BC, 230h
		jl	short loc_A78D
		add	word_124BE, 10h
		mov	word_124BC, 90h	; ''
		cmp	word_124BE, 180h
		jl	short loc_A78D
		call	sub_A815
		cmp	byte_1247E, 0
		jnz	short loc_A76F
		push	0
		call	sub_CE7A

loc_A76F:
		mov	word_124BC, 50h	; 'P'
		mov	word_124BE, 140h
		mov	dx, 0A6h ; '¦'
		mov	al, 1
		out	dx, al		; Interrupt Controller #2, 8259A
		call	sub_A59E
		mov	dx, 0A6h ; '¦'
		mov	al, 0
		out	dx, al		; Interrupt Controller #2, 8259A
		call	sub_A59E

loc_A78D:
		pop	bp
		retn
sub_A73B	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_A78F	proc near

var_2		= word ptr -2
arg_0		= word ptr  4

		enter	2, 0
		push	si
		push	di
		mov	cx, 140h
		jmp	short loc_A809
; ---------------------------------------------------------------------------

loc_A79A:
		mov	ax, 0FFh
		mov	dx, 4A2h
		out	dx, ax
		mov	ax, 3100h
		mov	dx, 4A4h
		out	dx, ax
		mov	ax, 0Fh
		mov	dx, 4AEh
		out	dx, ax
		mov	bx, [bp+arg_0]
		shl	bx, 3
		mov	ax, cx
		and	ax, 3
		add	ax, ax
		add	bx, ax
		mov	ax, [bx+62Ch]
		mov	dx, 4A8h
		out	dx, ax
		mov	ax, cx
		shl	ax, 6
		mov	dx, cx
		shl	dx, 4
		add	ax, dx
		add	ax, 0Ah
		mov	si, ax
		xor	di, di
		jmp	short loc_A802
; ---------------------------------------------------------------------------

loc_A7DB:
		mov	dx, 0A6h ; '¦'
		mov	al, 1
		out	dx, al		; Interrupt Controller #2, 8259A
		les	bx, dword_FC3C
		add	bx, si
		mov	ax, es:[bx]
		mov	[bp+var_2], ax
		mov	al, 0
		out	dx, al		; Interrupt Controller #2, 8259A
		mov	bx, word ptr dword_FC3C
		add	bx, si
		mov	ax, [bp+var_2]
		mov	es:[bx], ax
		add	di, 10h
		add	si, 2

loc_A802:
		cmp	di, 1E0h
		jl	short loc_A7DB
		inc	cx

loc_A809:
		cmp	cx, 180h
		jl	short loc_A79A
		pop	di
		pop	si
		leave
		retn	2
sub_A78F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_A815	proc near
		push	bp
		mov	bp, sp
		push	si
		call	sub_A2D6
		cmp	byte_1247E, 0
		jnz	short loc_A83A
		xor	si, si
		jmp	short loc_A835
; ---------------------------------------------------------------------------

loc_A827:
		push	si
		call	sub_A78F
		push	word_124C0
		call	sub_CCA3
		inc	si

loc_A835:
		cmp	si, 4
		jl	short loc_A827

loc_A83A:
		push	4
		call	sub_A78F
		call	sub_85C
		pop	si
		pop	bp
		retn
sub_A815	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_A847	proc near

var_16		= byte ptr -16h
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= byte ptr  4

		enter	16h, 0
		push	si
		mov	al, [bp+arg_0]
		mov	ah, 0
		push	ax		; ch
		call	_tolower
		pop	cx
		mov	[bp+arg_0], al
		mov	ah, 0
		mov	[bp+var_6], ax
		mov	cx, 10h		; switch 16 cases
		mov	bx, offset word_ADBC

loc_A866:
		mov	ax, cs:[bx]
		cmp	ax, [bp+var_6]
		jz	short loc_A876
		add	bx, 2
		loop	loc_A866
		jmp	loc_ADB5	; default
; ---------------------------------------------------------------------------

loc_A876:
		jmp	word ptr cs:[bx+20h] ; switch jump

loc_A87A:
		add	word_124BE, 10h	; jumptable 0000A876 case 110
		mov	word_124BC, 50h	; 'P'
		cmp	word_124BE, 180h
		jl	loc_ADB5	; default

loc_A88F:
		mov	bx, word_12478	; jumptable 0000A876 case 115
		mov	al, [bx]
		mov	[bp+arg_0], al
		call	sub_A815
		cmp	[bp+arg_0], 2Dh	; '-'
		jz	short loc_A8C0
		mov	word_124C4, 0
		push	ss
		lea	ax, [bp+var_2]
		push	ax
		call	sub_A64D
		cmp	byte_1247E, 0
		jnz	short loc_A8C4
		push	[bp+var_2]
		call	sub_CE7A
		jmp	short loc_A8C4
; ---------------------------------------------------------------------------

loc_A8C0:
		inc	word_12478

loc_A8C4:
		mov	word_124BC, 50h	; 'P'
		mov	word_124BE, 140h
		mov	dx, 0A6h ; '¦'
		mov	al, 1
		out	dx, al		; Interrupt Controller #2, 8259A
		call	sub_A59E
		mov	dx, 0A6h ; '¦'
		mov	al, 0
		out	dx, al		; Interrupt Controller #2, 8259A
		call	sub_A59E
		jmp	loc_ADB5	; default
; ---------------------------------------------------------------------------

loc_A8E5:
		mov	word_124C4, 0Fh	; jumptable 0000A876 case 99
		push	ss
		lea	ax, [bp+var_2]
		push	ax
		call	sub_A64D
		mov	al, byte ptr [bp+var_2]
		mov	byte_124C2, al
		jmp	loc_ADB5	; default
; ---------------------------------------------------------------------------

loc_A8FC:
		mov	word_124C4, 2	; jumptable 0000A876 case 98
		push	ss
		lea	ax, [bp+var_2]
		push	ax
		call	sub_A64D
		mov	ax, [bp+var_2]
		mov	word_EB2C, ax
		jmp	loc_ADB5	; default
; ---------------------------------------------------------------------------

loc_A913:
		mov	bx, word_12478	; jumptable 0000A876 case 119
		mov	al, [bx]
		mov	ah, 0
		push	ax		; ch
		call	_tolower
		pop	cx
		mov	[bp+arg_0], al
		cmp	[bp+arg_0], 6Fh	; 'o'
		jz	short loc_A931
		cmp	[bp+arg_0], 69h	; 'i'
		jnz	short loc_A95F

loc_A931:
		inc	word_12478
		mov	word_124C4, 1
		push	ss
		lea	ax, [bp+var_2]
		push	ax
		call	sub_A64D
		cmp	[bp+arg_0], 69h	; 'i'
		jnz	short loc_A954
		push	[bp+var_2]
		call	sub_222C
		jmp	loc_AD2B
; ---------------------------------------------------------------------------

loc_A954:
		push	[bp+var_2]
		call	sub_226C
		jmp	loc_AD2B
; ---------------------------------------------------------------------------

loc_A95F:
		call	sub_A815
		mov	word_124C4, 40h	; '@'
		cmp	[bp+arg_0], 6Dh	; 'm'
		jz	short loc_A994
		cmp	[bp+arg_0], 6Bh	; 'k'
		jnz	short loc_A978
		inc	word_12478

loc_A978:
		push	ss
		lea	ax, [bp+var_2]
		push	ax
		call	sub_A64D
		cmp	byte_1247E, 0
		jnz	loc_ADB5	; default
		push	[bp+var_2]
		call	sub_CCA3
		jmp	loc_AD2B
; ---------------------------------------------------------------------------

loc_A994:
		inc	word_12478
		mov	bx, word_12478
		mov	al, [bx]
		mov	[bp+arg_0], al
		cmp	[bp+arg_0], 6Bh	; 'k'
		jnz	short loc_A9AB
		inc	word_12478

loc_A9AB:
		push	ss
		lea	ax, [bp+var_2]
		push	ax
		call	sub_A64D
		push	ss
		lea	ax, [bp+var_4]
		push	ax
		call	sub_A713
		cmp	byte_1247E, 0
		jnz	loc_ADB5	; default
		push	[bp+var_2]
		push	[bp+var_4]
		call	sub_D046
		jmp	loc_ACFF
; ---------------------------------------------------------------------------

loc_A9D2:
		mov	bx, word_12478	; jumptable 0000A876 case 118
		cmp	byte ptr [bx], 70h ; 'p'
		jz	short loc_A9F2
		mov	word_124C4, 1
		push	ss
		lea	ax, [bp+var_2]
		push	ax
		call	sub_A64D
		mov	ax, [bp+var_2]
		mov	word_124C0, ax
		jmp	loc_ADB5	; default
; ---------------------------------------------------------------------------

loc_A9F2:
		inc	word_12478
		mov	word_124C4, 0
		push	ss
		lea	ax, [bp+var_2]
		push	ax
		call	sub_A64D
		mov	dx, 0A4h ; '¤'
		mov	al, byte ptr [bp+var_2]
		out	dx, al		; Interrupt Controller #2, 8259A
		jmp	loc_ADB5	; default
; ---------------------------------------------------------------------------

loc_AA0E:
		mov	word_124C4, 64h	; 'd' ; jumptable 0000A876 case 116
		push	ss
		lea	ax, [bp+var_2]
		push	ax
		call	sub_A64D
		cmp	byte_1247E, 0
		jnz	short loc_AA2A
		push	1
		call	sub_CCA3

loc_AA2A:
		mov	ax, [bp+var_2]
		mov	word_E662, ax
		call	far ptr	loc_19EC
		jmp	loc_ADB5	; default
; ---------------------------------------------------------------------------

loc_AA38:
		mov	bx, word_12478	; jumptable 0000A876 case 102
		mov	al, [bx]
		mov	[bp+arg_0], al
		cmp	[bp+arg_0], 6Dh	; 'm'
		jz	short loc_AA83
		cmp	[bp+arg_0], 69h	; 'i'
		jz	short loc_AA55
		cmp	[bp+arg_0], 6Fh	; 'o'
		jnz	loc_ADB5	; default

loc_AA55:
		inc	word_12478
		mov	word_124C4, 1
		push	ss
		lea	ax, [bp+var_2]
		push	ax
		call	sub_A64D
		cmp	[bp+arg_0], 69h	; 'i'
		jnz	short loc_AA78
		push	[bp+var_2]
		call	sub_622
		jmp	loc_AD2B
; ---------------------------------------------------------------------------

loc_AA78:
		push	[bp+var_2]
		call	sub_666
		jmp	loc_AD2B
; ---------------------------------------------------------------------------

loc_AA83:
		inc	word_12478
		mov	word_124C4, 1
		push	ss
		lea	ax, [bp+var_2]
		push	ax
		call	sub_A64D
		mov	ax, [bp+var_2]
		add	ax, 200h
		push	ax
		jmp	loc_AD26
; ---------------------------------------------------------------------------

loc_AA9F:
		mov	bx, word_12478	; jumptable 0000A876 case 103
		cmp	byte ptr [bx], 61h ; 'a'
		jz	short loc_AAF2
		mov	word_124C4, 8
		push	ss
		lea	ax, [bp+var_2]
		push	ax
		call	sub_A64D
		mov	[bp+var_4], 0
		jmp	short loc_AAE0
; ---------------------------------------------------------------------------

loc_AABD:
		test	byte ptr [bp+var_4], 1
		jz	short loc_AAC7
		push	4
		jmp	short loc_AACA
; ---------------------------------------------------------------------------

loc_AAC7:
		push	18Ch

loc_AACA:
		call	sub_1988
		cmp	byte_1247E, 0
		jnz	short loc_AADD
		push	1
		call	sub_CCA3

loc_AADD:
		inc	[bp+var_4]

loc_AAE0:
		mov	ax, [bp+var_4]
		cmp	ax, [bp+var_2]
		jle	short loc_AABD
		push	0
		call	sub_1988
		jmp	loc_AD2B
; ---------------------------------------------------------------------------

loc_AAF2:
		inc	word_12478
		mov	word_124C4, 0
		push	ss
		lea	ax, [bp+var_2]
		push	ax
		call	sub_A64D
		mov	dx, 0A6h ; '¦'
		mov	al, 1
		out	dx, al		; Interrupt Controller #2, 8259A
		push	word_124BC
		push	word_124BE
		push	[bp+var_2]
		mov	al, byte_124C2
		mov	ah, 0
		push	ax
		call	sub_3760
		call	sub_A73B
		jmp	loc_ADB5	; default
; ---------------------------------------------------------------------------

loc_AB26:
		mov	word_124C4, 0	; jumptable 0000A876 case 107
		push	ss
		lea	ax, [bp+var_2]
		push	ax
		call	sub_A64D
		cmp	byte_1247E, 0
		jnz	loc_ADB5	; default
		push	[bp+var_2]
		call	sub_CE7A
		jmp	loc_AD2B
; ---------------------------------------------------------------------------

loc_AB48:
		mov	dx, 0A6h ; '¦'  ; jumptable 0000A876 case 64
		mov	al, 1
		out	dx, al		; Interrupt Controller #2, 8259A
		call	sub_1188
		mov	dx, 0A6h ; '¦'
		mov	al, 0
		out	dx, al		; Interrupt Controller #2, 8259A
		call	sub_1188
		jmp	loc_ADB5	; default
; ---------------------------------------------------------------------------

loc_AB61:
		mov	bx, word_12478	; jumptable 0000A876 case 112
		mov	al, [bx]
		mov	[bp+arg_0], al
		inc	word_12478
		cmp	[bp+arg_0], 3Dh	; '='
		jz	short loc_AB7A
		cmp	[bp+arg_0], 40h	; '@'
		jnz	short loc_ABAA

loc_AB7A:
		mov	dx, 0A6h ; '¦'
		mov	al, 1
		out	dx, al		; Interrupt Controller #2, 8259A
		cmp	[bp+arg_0], 3Dh	; '='
		jnz	short loc_AB8D
		push	0
		call	sub_CCB8

loc_AB8D:
		push	large 0
		push	0
		call	sub_CCDD
		push	0
		call	sub_11C2
		mov	dx, 0A6h ; '¦'
		mov	al, 0
		out	dx, al		; Interrupt Controller #2, 8259A
		call	sub_A4AE
		jmp	loc_ADB5	; default
; ---------------------------------------------------------------------------

loc_ABAA:
		cmp	[bp+arg_0], 2Dh	; '-'
		jnz	short loc_ABC1
		push	ds
		push	offset unk_FCEA
		push	large [dword_FCD2]
		call	sub_1274
		jmp	loc_ADB5	; default
; ---------------------------------------------------------------------------

loc_ABC1:
		cmp	[bp+arg_0], 70h	; 'p'
		jnz	short loc_ABD1
		push	0
		call	sub_CCB8
		jmp	loc_AD2B
; ---------------------------------------------------------------------------

loc_ABD1:
		cmp	[bp+arg_0], 2Ch	; ','
		jz	short loc_ABDE
		dec	word_12478
		jmp	loc_ADB5	; default
; ---------------------------------------------------------------------------

loc_ABDE:
		mov	[bp+var_2], 0
		jmp	short loc_AC12
; ---------------------------------------------------------------------------

loc_ABE5:
		mov	bx, word_12478
		mov	al, [bx]
		mov	[bp+arg_0], al
		inc	word_12478
		mov	ah, 0
		mov	bx, ax
		test	byte ptr [bx+0B69h], 20h
		jnz	short loc_AC18
		cmp	[bp+arg_0], 20h	; ' '
		jz	short loc_AC18
		lea	bx, [bp+var_16]
		add	bx, [bp+var_2]
		mov	al, [bp+arg_0]
		mov	ss:[bx], al
		inc	[bp+var_2]

loc_AC12:
		cmp	[bp+var_2], 0Ch
		jl	short loc_ABE5

loc_AC18:
					; sub_A847+3BAj
		lea	bx, [bp+var_16]
		add	bx, [bp+var_2]
		mov	byte ptr ss:[bx], 0
		push	ds
		push	offset unk_FCEA
		push	large [dword_FCD2]
		call	sub_1274
		push	0
		push	ss
		lea	ax, [bp+var_16]
		push	ax
		call	sub_CD65
		jmp	loc_ADB5	; default
; ---------------------------------------------------------------------------

loc_AC3F:
		mov	word_124C4, 4	; jumptable 0000A876 case 61
		mov	bx, word_12478
		mov	al, [bx]
		mov	[bp+arg_0], al
		cmp	[bp+arg_0], 3Dh	; '='
		jz	short loc_AC94
		push	ss
		lea	ax, [bp+var_2]
		push	ax
		call	sub_A64D
		mov	dx, 0A4h ; '¤'
		mov	al, 1
		out	dx, al		; Interrupt Controller #2, 8259A
		mov	dx, 0A6h ; '¦'
		mov	al, 0
		out	dx, al		; Interrupt Controller #2, 8259A
		cmp	[bp+var_2], 4
		jge	short loc_AC70
		jmp	short loc_ACE0
; ---------------------------------------------------------------------------

loc_AC70:
		push	large 0C00000h
		call	sub_C82
		push	large 140040h
		push	large 3B0107h
		call	sub_BEA
		mov	dx, 7Ch	; '|'
		mov	al, 0
		out	dx, al
		jmp	short loc_ACF0
; ---------------------------------------------------------------------------

loc_AC94:
		inc	word_12478
		push	ss
		lea	ax, [bp+var_2]
		push	ax
		call	sub_A64D
		mov	word_124C4, 1
		push	ss
		lea	ax, [bp+var_4]
		push	ax
		call	sub_A713
		xor	si, si
		jmp	short loc_ACCF
; ---------------------------------------------------------------------------

loc_ACB2:
		push	large 0A00040h
		push	[bp+var_2]
		push	si
		call	sub_A37F
		cmp	byte_1247E, 0
		jnz	short loc_ACCE
		push	[bp+var_4]
		call	sub_CCA3

loc_ACCE:
		inc	si

loc_ACCF:
		cmp	si, 4
		jl	short loc_ACB2
		mov	dx, 0A4h ; '¤'
		mov	al, 1
		out	dx, al		; Interrupt Controller #2, 8259A
		mov	dx, 0A6h ; '¦'
		mov	al, 0
		out	dx, al		; Interrupt Controller #2, 8259A

loc_ACE0:
		push	large 0A00040h
		push	0
		push	[bp+var_2]
		call	sub_CDAB

loc_ACF0:
		mov	dx, 0A4h ; '¤'
		mov	al, 0
		out	dx, al		; Interrupt Controller #2, 8259A
		push	large 0A00040h
		call	sub_A30A

loc_ACFF:
		jmp	loc_ADB5	; default
; ---------------------------------------------------------------------------

loc_AD02:
		mov	bx, word_12478	; jumptable 0000A876 case 109
		mov	al, [bx]
		mov	[bp+arg_0], al
		cmp	[bp+arg_0], 24h	; '$'
		jnz	short loc_AD1A
		inc	word_12478
		push	100h
		jmp	short loc_AD26
; ---------------------------------------------------------------------------

loc_AD1A:
		cmp	[bp+arg_0], 2Ah	; '*'
		jnz	short loc_AD2E
		inc	word_12478

loc_AD24:
		push	0

loc_AD26:
					; sub_A847+4D1j
		call	sub_CF8C

loc_AD2B:
					; sub_A847+115j ...
		; Hack
		db 0e9h
		db 087h
		db 000h
; ---------------------------------------------------------------------------

loc_AD2E:
		cmp	[bp+arg_0], 2Ch	; ','
		; Hack
		db 00fh
		db 085h
		db 07fh
		db 000h
		inc	word_12478
		mov	[bp+var_2], 0
		jmp	short loc_AD6E
; ---------------------------------------------------------------------------

loc_AD41:
		mov	bx, word_12478
		mov	al, [bx]
		mov	[bp+arg_0], al
		inc	word_12478
		mov	ah, 0
		mov	bx, ax
		test	byte ptr [bx+0B69h], 20h
		jnz	short loc_AD74
		cmp	[bp+arg_0], 20h	; ' '
		jz	short loc_AD74
		lea	bx, [bp+var_16]
		add	bx, [bp+var_2]
		mov	al, [bp+arg_0]
		mov	ss:[bx], al
		inc	[bp+var_2]

loc_AD6E:
		cmp	[bp+var_2], 0Ch
		jl	short loc_AD41

loc_AD74:
					; sub_A847+516j
		lea	bx, [bp+var_16]
		add	bx, [bp+var_2]
		mov	byte ptr ss:[bx], 0
		push	100h
		call	sub_CF8C
		push	ss
		lea	ax, [bp+var_16]
		push	ax
		push	600h
		call	sub_D112
		jmp	short loc_AD24
; ---------------------------------------------------------------------------

loc_AD95:
		push	ss		; jumptable 0000A876 case 101
		lea	ax, [bp+var_2]
		push	ax
		call	sub_A64D
		call	sub_D594
		push	[bp+var_2]
		call	sub_D5A0
		call	sub_D5DA
		jmp	short loc_ADB5	; default
; ---------------------------------------------------------------------------

loc_ADB1:
		mov	al, 0FFh	; jumptable 0000A876 case 36
		jmp	short loc_ADB7
; ---------------------------------------------------------------------------

loc_ADB5:
		mov	al, 0		; default

loc_ADB7:
		pop	si
		leave
		retn	2
sub_A847	endp

; ---------------------------------------------------------------------------
word_ADBC	dw    24h,   3Dh,   40h,   62h
		dw    63h,   65h,   66h,   67h ; value table for switch	statement
		dw    6Bh,   6Dh,   6Eh,   70h
		dw    73h,   74h,   76h,   77h
		dw offset loc_ADB1	; jump table for switch	statement
		dw offset loc_AC3F
		dw offset loc_AB48
		dw offset loc_A8FC
		dw offset loc_A8E5
		dw offset loc_AD95
		dw offset loc_AA38
		dw offset loc_AA9F
		dw offset loc_AB26
		dw offset loc_AD02
		dw offset loc_A87A
		dw offset loc_AB61
		dw offset loc_A88F
		dw offset loc_AA0E
		dw offset loc_A9D2
		dw offset loc_A913

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_ADFC	proc near

var_6		= dword	ptr -6
var_1		= byte ptr -1

		enter	6, 0
		mov	word ptr [bp+var_6+2], ds
		mov	word ptr [bp+var_6], 654h
		mov	word_124BC, 50h	; 'P'
		mov	word_124BE, 140h
		mov	word_124C0, 1
		mov	byte_124C2, 0Fh
		mov	word_EB2C, 2
		call	sub_A4AE
		mov	byte_1247E, 0

loc_AE2D:
		call	far ptr	sub_D48A
		test	byte ptr word_10072+1, 10h
		jz	short loc_AE40
		mov	byte_1247E, 1
		jmp	short loc_AE45
; ---------------------------------------------------------------------------

loc_AE40:
		mov	byte_1247E, 0

loc_AE45:
		mov	bx, word_12478
		mov	al, [bx]
		mov	[bp+var_1], al
		inc	word_12478
		mov	ah, 0
		mov	bx, ax
		test	byte ptr [bx+0B69h], 20h
		jnz	short loc_AE2D
		cmp	[bp+var_1], 20h	; ' '
		jz	short loc_AE2D
		cmp	[bp+var_1], 5Ch	; '\'
		jnz	short loc_AE82
		mov	bx, word_12478
		mov	al, [bx]
		mov	[bp+var_1], al
		inc	word_12478
		push	word ptr [bp+var_1]
		call	sub_A847
		cmp	al, 0FFh
		jnz	short loc_AE2D
		jmp	short loc_AEC8
; ---------------------------------------------------------------------------

loc_AE82:
		les	bx, [bp+var_6]
		mov	al, [bp+var_1]
		mov	es:[bx], al
		mov	bx, word_12478
		mov	al, [bx]
		mov	[bp+var_1], al
		mov	bx, word ptr [bp+var_6]
		mov	es:[bx+1], al
		inc	word_12478
		mov	dx, 0A4h ; '¤'
		mov	al, 0
		out	dx, al		; Interrupt Controller #2, 8259A
		mov	dx, 0A6h ; '¦'
		mov	al, 1
		out	dx, al		; Interrupt Controller #2, 8259A
		push	word_124BC
		push	word_124BE
		mov	al, byte_124C2
		mov	ah, 0
		push	ax
		push	word ptr [bp+var_6+2]
		push	bx
		call	far ptr	loc_D1FC
		call	sub_A73B
		jmp	loc_AE2D
; ---------------------------------------------------------------------------

loc_AEC8:
		call	sub_A59E
		call	sub_A57F
		leave
		retn
sub_ADFC	endp

; ---------------------------------------------------------------------------
		enter	2, 0
		push	si
		push	di
		mov	si, [bp+4]
		or	si, si
		jnz	short loc_AEF1
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		mov	al, byte_124C6
		mov	ah, 0
		push	ax
		call	far ptr	loc_D356
		jmp	loc_B027
; ---------------------------------------------------------------------------

loc_AEF1:
		push	large 0C0000Fh
		call	sub_C82
		mov	bx, 4
		mov	ax, si
		cwd
		idiv	bx
		mov	si, ax
		push	word ptr [bp+8]
		push	ax
		mov	al, byte_124C7
		mov	ah, 0
		add	ax, ax
		mov	bx, ax
		push	word ptr [bx+1F4h]
		call	sub_CED0
		mov	di, ax
		push	word ptr [bp+6]
		push	si
		mov	al, byte_124C7
		mov	ah, 0
		add	ax, ax
		mov	bx, ax
		push	word ptr [bx+174h]
		call	sub_CED0
		mov	[bp-2],	ax
		push	di
		push	ax
		mov	al, byte_124C6
		mov	ah, 0
		inc	ax
		push	ax
		push	0
		call	far ptr	loc_D078
		mov	al, byte_124C7
		add	al, 40h	; '@'
		mov	byte_124C7, al
		push	word ptr [bp+8]
		push	si
		mov	ah, 0
		add	ax, ax
		mov	bx, ax
		push	word ptr [bx+1F4h]
		call	sub_CED0
		mov	di, ax
		push	word ptr [bp+6]
		push	si
		mov	al, byte_124C7
		mov	ah, 0
		add	ax, ax
		mov	bx, ax
		push	word ptr [bx+174h]
		call	sub_CED0
		mov	[bp-2],	ax
		push	di
		push	ax
		mov	al, byte_124C6
		mov	ah, 0
		inc	ax
		push	ax
		push	1
		call	far ptr	loc_D078
		mov	al, byte_124C7
		add	al, 40h	; '@'
		mov	byte_124C7, al
		push	word ptr [bp+8]
		push	si
		mov	ah, 0
		add	ax, ax
		mov	bx, ax
		push	word ptr [bx+1F4h]
		call	sub_CED0
		mov	di, ax
		push	word ptr [bp+6]
		push	si
		mov	al, byte_124C7
		mov	ah, 0
		add	ax, ax
		mov	bx, ax
		push	word ptr [bx+174h]
		call	sub_CED0
		mov	[bp-2],	ax
		push	di
		push	ax
		mov	al, byte_124C6
		mov	ah, 0
		inc	ax
		push	ax
		push	2
		call	far ptr	loc_D078
		mov	al, byte_124C7
		add	al, 40h	; '@'
		mov	byte_124C7, al
		push	word ptr [bp+8]
		push	si
		mov	ah, 0
		add	ax, ax
		mov	bx, ax
		push	word ptr [bx+1F4h]
		call	sub_CED0
		mov	di, ax
		push	word ptr [bp+6]
		push	si
		mov	al, byte_124C7
		mov	ah, 0
		add	ax, ax
		mov	bx, ax
		push	word ptr [bx+174h]
		call	sub_CED0
		mov	[bp-2],	ax
		push	di
		push	ax
		mov	al, byte_124C6
		mov	ah, 0
		inc	ax
		push	ax
		push	3
		call	far ptr	loc_D078
		mov	al, byte_124C7
		add	al, 40h	; '@'
		mov	byte_124C7, al
		mov	dx, 7Ch	; '|'
		mov	al, 0
		out	dx, al

loc_B027:
		pop	di
		pop	si
		leave
		retn	6
; ---------------------------------------------------------------------------
		enter	2, 0
		push	si
		push	di
		mov	si, [bp+4]
		or	si, si
		jnz	short loc_B04E
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		mov	al, byte_124C6
		mov	ah, 0
		push	ax
		call	far ptr	loc_D356
		jmp	loc_B13E
; ---------------------------------------------------------------------------

loc_B04E:
		push	large 0C0000Fh
		call	sub_C82
		mov	ax, si
		cwd
		sub	ax, dx
		sar	ax, 1
		mov	si, ax
		push	word ptr [bp+8]
		cwd
		sub	ax, dx
		sar	ax, 1
		push	ax
		push	word_E7E4
		call	sub_CED0
		mov	di, ax
		push	word ptr [bp+6]
		mov	ax, si
		cwd
		sub	ax, dx
		sar	ax, 1
		push	ax
		push	word_E764
		call	sub_CED0
		mov	[bp-2],	ax
		push	di
		push	ax
		mov	al, byte_124C6
		mov	ah, 0
		inc	ax
		push	ax
		push	0
		call	far ptr	loc_D078
		push	word ptr [bp+8]
		push	si
		push	word_E7A4
		call	sub_CED0
		mov	di, ax
		push	word ptr [bp+6]
		push	si
		push	word_E724
		call	sub_CED0
		mov	[bp-2],	ax
		push	di
		push	ax
		mov	al, byte_124C6
		mov	ah, 0
		inc	ax
		push	ax
		push	1
		call	far ptr	loc_D078
		push	word ptr [bp+8]
		mov	ax, si
		cwd
		sub	ax, dx
		sar	ax, 1
		push	ax
		push	word_E8E4
		call	sub_CED0
		mov	di, ax
		push	word ptr [bp+6]
		mov	ax, si
		cwd
		sub	ax, dx
		sar	ax, 1
		push	ax
		push	word_E864
		call	sub_CED0
		mov	[bp-2],	ax
		push	di
		push	ax
		mov	al, byte_124C6
		mov	ah, 0
		inc	ax
		push	ax
		push	2
		call	far ptr	loc_D078
		push	word ptr [bp+8]
		push	si
		push	word_E8A4
		call	sub_CED0
		mov	di, ax
		push	word ptr [bp+6]
		push	si
		push	word_E824
		call	sub_CED0
		mov	[bp-2],	ax
		push	di
		push	ax
		mov	al, byte_124C6
		mov	ah, 0
		inc	ax
		push	ax
		push	3
		call	far ptr	loc_D078
		mov	dx, 7Ch	; '|'
		mov	al, 0
		out	dx, al

loc_B13E:
		pop	di
		pop	si
		leave
		retn	6
; ---------------------------------------------------------------------------
		enter	2, 0
		push	si
		push	di
		mov	si, [bp+4]
		or	si, si
		jnz	short loc_B165
		push	word ptr [bp+8]
		push	word ptr [bp+6]
		mov	al, byte_124C6
		mov	ah, 0
		push	ax
		call	far ptr	loc_D356
		jmp	loc_B255
; ---------------------------------------------------------------------------

loc_B165:
		push	large 0C0000Fh
		call	sub_C82
		mov	ax, si
		cwd
		sub	ax, dx
		sar	ax, 1
		mov	si, ax
		push	word ptr [bp+8]
		cwd
		sub	ax, dx
		sar	ax, 1
		push	ax
		push	word_E724
		call	sub_CED0
		mov	di, ax
		push	word ptr [bp+6]
		mov	ax, si
		cwd
		sub	ax, dx
		sar	ax, 1
		push	ax
		push	word_E6A4
		call	sub_CED0
		mov	[bp-2],	ax
		push	di
		push	ax
		mov	al, byte_124C6
		mov	ah, 0
		inc	ax
		push	ax
		push	0
		call	far ptr	loc_D078
		push	word ptr [bp+8]
		push	si
		push	word_E724
		call	sub_CED0
		mov	di, ax
		push	word ptr [bp+6]
		push	si
		push	word_E6A4
		call	sub_CED0
		mov	[bp-2],	ax
		push	di
		push	ax
		mov	al, byte_124C6
		mov	ah, 0
		inc	ax
		push	ax
		push	1
		call	far ptr	loc_D078
		push	word ptr [bp+8]
		mov	ax, si
		cwd
		sub	ax, dx
		sar	ax, 1
		push	ax
		push	word_E824
		call	sub_CED0
		mov	di, ax
		push	word ptr [bp+6]
		mov	ax, si
		cwd
		sub	ax, dx
		sar	ax, 1
		push	ax
		push	word_E7A4
		call	sub_CED0
		mov	[bp-2],	ax
		push	di
		push	ax
		mov	al, byte_124C6
		mov	ah, 0
		inc	ax
		push	ax
		push	2
		call	far ptr	loc_D078
		push	word ptr [bp+8]
		push	si
		push	word_E824
		call	sub_CED0
		mov	di, ax
		push	word ptr [bp+6]
		push	si
		push	word_E7A4
		call	sub_CED0
		mov	[bp-2],	ax
		push	di
		push	ax
		mov	al, byte_124C6
		mov	ah, 0
		inc	ax
		push	ax
		push	3
		call	far ptr	loc_D078
		mov	dx, 7Ch	; '|'
		mov	al, 0
		out	dx, al

loc_B255:
		pop	di
		pop	si
		leave
		retn	6

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_B25B	proc near

arg_0		= word ptr  4
arg_2		= word ptr  6
arg_4		= word ptr  8
arg_6		= word ptr  0Ah
arg_8		= word ptr  0Ch

		push	bp
		mov	bp, sp
		push	si
		mov	si, [bp+arg_0]
		mov	ax, si
		cwd
		sub	ax, dx
		sar	ax, 1
		mov	si, ax
		mov	ax, [bp+arg_8]
		sub	ax, si
		push	ax
		mov	ax, [bp+arg_6]
		sub	ax, si
		push	ax
		mov	ax, si
		add	ax, ax
		add	ax, [bp+arg_4]
		push	ax
		mov	ax, si
		add	ax, ax
		add	ax, [bp+arg_2]
		push	ax
		call	far ptr	loc_D6F6
		pop	si
		pop	bp
		retn	0Ah
sub_B25B	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_B291	proc near

var_2		= word ptr -2
arg_0		= word ptr  4
arg_2		= word ptr  6

		enter	2, 0
		push	si
		push	di
		mov	di, [bp+arg_2]
		mov	si, 3Fh	; '?'
		mov	[bp+var_2], 0
		mov	dx, 0A6h ; '¦'
		mov	al, 0
		out	dx, al		; Interrupt Controller #2, 8259A
		mov	dx, 0A4h ; '¤'
		mov	al, 1
		jmp	short loc_B30B
; ---------------------------------------------------------------------------

loc_B2AF:
		push	di
		push	[bp+arg_0]
		mov	al, byte_124C6
		mov	ah, 0
		shl	ax, 4
		mov	bx, ax
		push	word ptr [bx+1B48h]
		mov	al, byte_124C6
		mov	ah, 0
		shl	ax, 4
		mov	bx, ax
		push	word ptr [bx+1B4Ah]
		lea	ax, [si+1]
		push	ax
		call	sub_B25B
		dec	si
		mov	al, byte_124C7
		add	al, 8
		mov	byte_124C7, al
		push	di
		push	[bp+arg_0]
		push	si
		call	word_124C8

loc_B2E8:
		cmp	word_F42A, 2
		jb	short loc_B2E8
		mov	word_F42A, 0
		mov	dx, 0A4h ; '¤'
		mov	al, byte ptr [bp+var_2]
		out	dx, al		; Interrupt Controller #2, 8259A
		mov	ax, 1
		sub	ax, [bp+var_2]
		mov	[bp+var_2], ax
		mov	dx, 0A6h ; '¦'
		mov	al, byte ptr [bp+var_2]

loc_B30B:
		out	dx, al		; Interrupt Controller #2, 8259A
		or	si, si
		jg	short loc_B2AF
		push	[bp+var_2]
		call	sub_11C2
		pop	di
		pop	si
		leave
		retn	4
sub_B291	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_B31E	proc near
					; sub_B44D+23Fp ...

var_2		= word ptr -2
arg_0		= word ptr  4
arg_2		= word ptr  6

		enter	2, 0
		push	si
		push	di
		mov	di, [bp+arg_2]
		xor	si, si
		mov	[bp+var_2], 0
		mov	dx, 0A6h ; '¦'
		mov	al, 0
		out	dx, al		; Interrupt Controller #2, 8259A
		mov	dx, 0A4h ; '¤'
		mov	al, 1

loc_B339:
		out	dx, al		; Interrupt Controller #2, 8259A
		push	di
		push	[bp+arg_0]
		mov	al, byte_124C6
		mov	ah, 0
		shl	ax, 4
		mov	bx, ax
		push	word ptr [bx+1B48h]
		mov	al, byte_124C6
		mov	ah, 0
		shl	ax, 4
		mov	bx, ax
		push	word ptr [bx+1B4Ah]
		push	si
		call	sub_B25B
		inc	si
		mov	al, byte_124C7
		add	al, 8
		mov	byte_124C7, al
		cmp	si, 40h	; '@'
		jge	short loc_B39A
		push	di
		push	[bp+arg_0]
		push	si
		call	word_124C8

loc_B375:
		cmp	word_F42A, 2
		jb	short loc_B375
		mov	word_F42A, 0
		mov	dx, 0A4h ; '¤'
		mov	al, byte ptr [bp+var_2]
		out	dx, al		; Interrupt Controller #2, 8259A
		mov	ax, 1
		sub	ax, [bp+var_2]
		mov	[bp+var_2], ax
		mov	dx, 0A6h ; '¦'
		mov	al, byte ptr [bp+var_2]
		jmp	short loc_B339
; ---------------------------------------------------------------------------

loc_B39A:
		mov	ax, 1
		sub	ax, [bp+var_2]
		push	ax
		call	sub_11C2
		pop	di
		pop	si
		leave
		retn	4
sub_B31E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_B3AC	proc near
					; sub_B44D+2F1p

var_2		= word ptr -2
arg_0		= word ptr  4
arg_2		= word ptr  6
arg_4		= word ptr  8
arg_6		= word ptr  0Ah

		enter	2, 0
		push	si
		push	di
		mov	di, [bp+arg_6]
		xor	si, si
		mov	[bp+var_2], 0
		mov	dx, 0A6h ; '¦'
		mov	al, 0
		out	dx, al		; Interrupt Controller #2, 8259A
		mov	dx, 0A4h ; '¤'
		mov	al, 1

loc_B3C7:
		out	dx, al		; Interrupt Controller #2, 8259A
		push	di
		push	[bp+arg_4]
		push	word_10098
		push	word_1009A
		push	si
		call	sub_B25B
		push	[bp+arg_2]
		push	[bp+arg_0]
		push	word_10078
		push	word_1007A
		push	si
		call	sub_B25B
		inc	si
		mov	al, byte_124C7
		add	al, 0F8h ; 'ø'
		mov	byte_124C7, al
		cmp	si, 40h	; '@'
		jge	short loc_B43B
		mov	byte_124C6, 2
		push	di
		push	[bp+arg_4]
		push	si
		call	word_124C8
		mov	byte_124C6, 0
		push	[bp+arg_2]
		push	[bp+arg_0]
		push	si
		call	word_124C8

loc_B416:
		cmp	word_F42A, 2
		jb	short loc_B416
		mov	word_F42A, 0
		mov	dx, 0A4h ; '¤'
		mov	al, byte ptr [bp+var_2]
		out	dx, al		; Interrupt Controller #2, 8259A
		mov	ax, 1
		sub	ax, [bp+var_2]
		mov	[bp+var_2], ax
		mov	dx, 0A6h ; '¦'
		mov	al, byte ptr [bp+var_2]
		jmp	short loc_B3C7
; ---------------------------------------------------------------------------

loc_B43B:
		mov	ax, 1
		sub	ax, [bp+var_2]
		push	ax
		call	sub_11C2
		pop	di
		pop	si
		leave
		retn	8
sub_B3AC	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_B44D	proc near
		push	bp
		mov	bp, sp
		mov	word_E662, 0
		call	far ptr	loc_19EC
		mov	dx, 0A6h ; '¦'
		mov	al, 1
		out	dx, al		; Interrupt Controller #2, 8259A
		push	0
		push	ds
		push	offset aSff1_pi	; "sff1.pi"
		call	sub_CD65
		push	0
		call	sub_CCB8
		push	large 0
		push	0
		call	sub_CCDD
		push	ds
		push	offset unk_FCEA
		push	large [dword_FCD2]
		call	sub_1274
		push	0
		call	sub_11C2
		call	sub_D626
		push	100h
		call	sub_CF8C
		push	ds
		push	offset aStaff	; "staff"
		push	600h
		call	sub_D112
		push	0
		call	sub_CF8C
		push	0Ch
		call	sub_622
		push	0
		push	ds
		push	offset aSff1_cdg ; "sff1.cdg"
		push	0
		call	sub_D77E
		push	1
		push	ds
		push	offset aSff1b_cdg ; "sff1b.cdg"
		push	0
		call	far ptr	sub_D778
		push	large 30040h
		call	sub_D046
		mov	byte_124C6, 0
		mov	word_124C8, 0E80h
		push	large 16000A0h
		call	sub_B291
		push	2
		push	ds
		push	offset aSff2_cdg ; "sff2.cdg"
		push	0
		call	sub_D77E
		push	3
		push	ds
		push	offset aSff2b_cdg ; "sff2b.cdg"
		push	0
		call	far ptr	sub_D778
		push	large 700A0h
		call	sub_D046
		mov	word_124C8, 0FDDh
		push	large 16000A0h
		call	sub_B31E
		mov	byte_124C6, 2
		mov	word_124C8, 10F4h
		push	large 0C00080h
		call	sub_B291
		mov	dx, 0A6h ; '¦'
		mov	al, 0
		out	dx, al		; Interrupt Controller #2, 8259A
		mov	byte_124C6, 0
		push	0
		push	ds
		push	offset aSff3_cdg ; "sff3.cdg"
		push	0
		call	sub_D77E
		push	1
		push	ds
		push	offset aSff3b_cdg ; "sff3b.cdg"
		push	0
		call	far ptr	sub_D778
		push	large 0B00A0h
		call	sub_D046
		push	large 12000C8h
		call	sub_B291
		push	large 1300A0h
		call	sub_D046
		mov	word_124C8, 0FDDh
		push	large 0C00080h
		push	large 12000C8h
		call	sub_B3AC
		push	4
		call	sub_666
		call	sub_D8CE
		mov	dx, 0A6h ; '¦'
		mov	al, 1
		out	dx, al		; Interrupt Controller #2, 8259A
		push	0
		push	ds
		push	offset aSff2_pi	; "sff2.pi"
		call	sub_CD65
		push	0
		call	sub_CCB8
		push	large 0
		push	0
		call	sub_CCDD
		push	ds
		push	offset unk_FCEA
		push	large [dword_FCD2]
		call	sub_1274
		push	0
		call	sub_11C2
		call	sub_D626
		push	4
		call	sub_622
		push	2
		push	ds
		push	offset aSff4_cdg ; "sff4.cdg"
		push	0
		call	sub_D77E
		push	3
		push	ds
		push	offset aSff4b_cdg ; "sff4b.cdg"
		push	0
		call	far ptr	sub_D778
		push	large 1700A0h
		call	sub_D046
		mov	byte_124C6, 2
		mov	word_124C8, 10F4h
		push	large 200070h
		call	sub_B291
		push	2
		call	sub_D898
		push	4
		push	ds
		push	offset aSff5_cdg ; "sff5.cdg"
		push	0
		call	sub_D77E
		push	5
		push	ds
		push	offset aSff5b_cdg ; "sff5b.cdg"
		push	0
		call	far ptr	sub_D778
		push	large 1B00A0h
		call	sub_D046
		mov	byte_124C6, 4
		mov	word_124C8, 0FDDh
		push	large 2000B8h
		call	sub_B291
		push	0
		push	ds
		push	offset aSff8_cdg ; "sff8.cdg"
		push	0
		call	sub_D77E
		push	1
		push	ds
		push	offset aSff8b_cdg ; "sff8b.cdg"
		push	0
		call	far ptr	sub_D778
		push	large 1F00A0h
		call	sub_D046
		mov	word_124C8, 10F4h
		push	large 2000B8h
		call	sub_B31E
		mov	byte_124C6, 0
		push	large 4000B8h
		call	sub_B291
		push	4
		push	ds
		push	offset aSff9_cdg ; "sff9.cdg"
		push	0
		call	sub_D77E
		push	5
		push	ds
		push	offset aSff9b_cdg ; "sff9b.cdg"
		push	0
		call	far ptr	sub_D778
		push	large 2300A0h
		call	sub_D046
		mov	word_124C8, 0E80h
		push	large 4000B8h
		call	sub_B31E
		mov	byte_124C6, 4
		push	large 4000B8h
		call	sub_B291
		push	0
		push	ds
		push	offset aSff6_cdg ; "sff6.cdg"
		push	0
		call	sub_D77E
		push	1
		push	ds
		push	offset aSff6b_cdg ; "sff6b.cdg"
		push	0
		call	far ptr	sub_D778
		push	large 2700A0h
		call	sub_D046
		mov	word_124C8, 0FDDh
		push	large 4000B8h
		call	sub_B31E
		mov	byte_124C6, 0
		push	large 2000B8h
		call	sub_B291
		push	large 2B00A0h
		call	sub_D046
		mov	word_124C8, 10F4h
		push	large 200070h
		push	large 2000B8h
		call	sub_B3AC
		push	0
		push	ds
		push	offset aSff7_cdg ; "sff7.cdg"
		push	0
		call	sub_D77E
		push	1
		push	ds
		push	offset aSff7b_cdg ; "sff7b.cdg"
		push	0
		call	far ptr	sub_D778
		mov	byte_124C6, 0
		push	large 200150h
		call	sub_B291
		push	large 3000A0h
		call	sub_D046
		call	sub_D6C4
		call	sub_D8CE
		push	4
		call	sub_666
		pop	bp
		retn
sub_B44D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_B787	proc near

var_6		= word ptr -6
var_4		= byte ptr -4
var_3		= byte ptr -3
var_2		= byte ptr -2
var_1		= byte ptr -1
arg_0		= word ptr  4
arg_2		= word ptr  6
arg_4		= word ptr  8

		enter	6, 0
		push	si
		xor	si, si
		mov	[bp+var_4], 2
		mov	ax, [bp+arg_0]
		mov	bx, 64h	; 'd'
		xor	dx, dx
		div	bx
		mov	[bp+var_6], ax
		mov	ax, [bp+arg_0]
		xor	dx, dx
		div	bx
		mov	[bp+arg_0], dx
		cmp	byte_EC73, 0
		jnz	short loc_B7C5
		or	si, [bp+var_6]
		or	si, si
		jz	short loc_B7C1
		mov	al, byte ptr [bp+var_6]
		add	al, 0A0h ; ' '
		mov	[bp+var_4], al
		jmp	short loc_B7C5
; ---------------------------------------------------------------------------

loc_B7C1:
		mov	[bp+var_4], 2

loc_B7C5:
		mov	ax, [bp+arg_0]
		mov	bx, 0Ah
		xor	dx, dx
		div	bx
		mov	[bp+var_6], ax
		mov	ax, [bp+arg_0]
		xor	dx, dx
		div	bx
		mov	[bp+arg_0], dx
		or	si, [bp+var_6]
		mov	al, byte_EC73
		mov	ah, 0
		or	si, ax
		or	si, si
		jz	short loc_B7F4
		mov	al, byte ptr [bp+var_6]
		add	al, 0A0h ; ' '
		mov	[bp+var_3], al
		jmp	short loc_B7F8
; ---------------------------------------------------------------------------

loc_B7F4:
		mov	[bp+var_3], 2

loc_B7F8:
		mov	al, byte ptr [bp+arg_0]
		add	al, 0A0h ; ' '
		mov	[bp+var_2], al
		mov	[bp+var_1], 0
		push	[bp+arg_4]
		push	[bp+arg_2]
		push	10h
		push	ss
		lea	ax, [bp+var_4]
		push	ax
		push	0Eh
		call	sub_36B6
		pop	si
		leave
		retn	6
sub_B787	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_B81D	proc near

var_C		= byte ptr -0Ch
var_4		= byte ptr -4
var_2		= byte ptr -2
var_1		= byte ptr -1

		enter	0Ch, 0
		push	si
		mov	[bp+var_2], 0
		xor	si, si
		jmp	short loc_B851
; ---------------------------------------------------------------------------

loc_B82A:
		mov	ax, 7
		sub	ax, si
		les	bx, dword_F3CE
		add	bx, ax
		mov	al, es:[bx+1Dh]
		mov	[bp+var_1], al
		or	[bp+var_2], al
		cmp	[bp+var_2], 0
		jz	short loc_B84C
		add	al, 0A0h ; ' '
		mov	[bp+si+var_C], al
		jmp	short loc_B850
; ---------------------------------------------------------------------------

loc_B84C:
		mov	[bp+si+var_C], 2

loc_B850:
		inc	si

loc_B851:
		cmp	si, 8
		jl	short loc_B82A
		mov	[bp+var_4], 0
		push	large 0A00060h
		push	10h
		push	ss
		lea	ax, [bp+var_C]
		push	ax
		push	0Eh
		call	sub_36B6
		mov	[bp+var_2], 1
		push	large 1200060h
		push	0Eh
		push	ds
		push	offset aU_	; "_"
		call	far ptr	loc_D1FC
		pop	si
		leave
		retn
sub_B81D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_B886	proc near
					; sub_BB81+1C5p ...

var_6		= dword	ptr -6
var_2		= word ptr -2
arg_0		= word ptr  4
arg_2		= word ptr  6
arg_4		= word ptr  8
arg_6		= word ptr  0Ah

		enter	6, 0
		push	si
		push	di
		mov	si, [bp+arg_6]
		mov	di, [bp+arg_4]
		cmp	[bp+arg_2], 0
		jz	short loc_B8A2
		mov	[bp+var_6], 0F4240h
		jmp	short loc_B8AA
; ---------------------------------------------------------------------------

loc_B8A2:
		mov	[bp+var_6], 0

loc_B8AA:
		mov	ax, [bp+arg_2]
		cmp	ax, [bp+arg_0]
		jz	short loc_B8E3
		cmp	[bp+arg_2], 0
		jz	short loc_B8CD
		movzx	ebx, [bp+arg_2]
		mov	eax, [bp+var_6]
		xor	edx, edx
		div	ebx
		mov	[bp+var_6], eax
		jmp	short loc_B8D5
; ---------------------------------------------------------------------------

loc_B8CD:
		mov	[bp+var_6], 0

loc_B8D5:
		movzx	eax, [bp+arg_0]
		imul	eax, [bp+var_6]
		mov	[bp+var_6], eax

loc_B8E3:
		cmp	byte_EC4A, 0
		jnz	short loc_B8F4
		mov	eax, dword_124CE
		add	eax, [bp+var_6]
		jmp	short loc_B8FC
; ---------------------------------------------------------------------------

loc_B8F4:
		mov	eax, dword_124CE
		sub	eax, [bp+var_6]

loc_B8FC:
		mov	dword_124CE, eax
		mov	eax, [bp+var_6]
		mov	ebx, 2710h
		xor	edx, edx
		div	ebx
		mov	[bp+var_2], ax
		push	si
		push	di
		push	ax
		call	sub_B787
		mov	ebx, 2710h
		mov	eax, [bp+var_6]
		xor	edx, edx
		div	ebx
		mov	[bp+var_6], edx
		mov	eax, [bp+var_6]
		mov	ebx, 64h ; 'd'
		xor	edx, edx
		div	ebx
		mov	[bp+var_2], ax
		mov	byte_EC73, 1
		lea	ax, [si+30h]
		push	ax
		push	di
		push	[bp+var_2]
		call	sub_B787
		mov	byte_EC73, 0
		lea	ax, [si+30h]
		push	ax
		push	di
		push	0Eh
		push	ds
		push	offset aBd	; "D"
		call	far ptr	loc_D1FC
		lea	ax, [si+60h]
		push	ax
		push	di
		push	0Eh
		push	ds
		push	offset aBu	; ""
		call	far ptr	loc_D1FC
		pop	di
		pop	si
		leave
		retn	8
sub_B886	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_B97B	proc near
					; sub_BB81+478p

var_2		= word ptr -2
arg_0		= dword	ptr  4
arg_4		= word ptr  8
arg_6		= word ptr  0Ah

		enter	2, 0
		push	si
		push	di
		mov	si, [bp+arg_6]
		mov	di, [bp+arg_4]
		mov	eax, [bp+arg_0]
		mov	ebx, 2710h
		xor	edx, edx
		div	ebx
		mov	[bp+var_2], ax
		push	si
		push	di
		push	ax
		call	sub_B787
		mov	ebx, 2710h
		mov	eax, [bp+arg_0]
		xor	edx, edx
		div	ebx
		mov	[bp+arg_0], edx
		mov	eax, [bp+arg_0]
		mov	ebx, 64h ; 'd'
		xor	edx, edx
		div	ebx
		mov	[bp+var_2], ax
		mov	byte_EC73, 1
		lea	ax, [si+30h]
		push	ax
		push	di
		push	[bp+var_2]
		call	sub_B787
		mov	byte_EC73, 0
		lea	ax, [si+30h]
		push	ax
		push	di
		push	0Eh
		push	ds
		push	offset aBd_0	; "D"
		call	far ptr	loc_D1FC
		pop	di
		pop	si
		leave
		retn	8
sub_B97B	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_B9F2	proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		enter	8, 0
		les	bx, dword_F3CE
		mov	eax, es:[bx+14h]
		mov	dword_E6A0, eax
		mov	al, es:[bx+0Ch]
		mov	ah, 0
		dec	ax
		mov	bx, ax
		cmp	bx, 5
		ja	short loc_BA52
		add	bx, bx
		jmp	cs:off_BB75[bx]

loc_BA18:
		mov	[bp+var_4], 9C4h
		jmp	short loc_BA52
; ---------------------------------------------------------------------------

loc_BA22:
		mov	[bp+var_4], 7D0h
		jmp	short loc_BA52
; ---------------------------------------------------------------------------

loc_BA2C:
		mov	[bp+var_4], 5DCh
		jmp	short loc_BA52
; ---------------------------------------------------------------------------

loc_BA36:
		mov	[bp+var_4], 3E8h
		jmp	short loc_BA52
; ---------------------------------------------------------------------------

loc_BA40:
		mov	[bp+var_4], 1F4h
		jmp	short loc_BA52
; ---------------------------------------------------------------------------

loc_BA4A:
		mov	[bp+var_4], 0

loc_BA52:
		les	bx, dword_F3CE
		mov	al, es:[bx+0Eh]
		mov	ah, 0
		or	ax, ax
		jz	short loc_BA67
		cmp	ax, 1
		jz	short loc_BA71
		jmp	short loc_BA79
; ---------------------------------------------------------------------------

loc_BA67:
		add	[bp+var_4], 9C4h
		jmp	short loc_BA79
; ---------------------------------------------------------------------------

loc_BA71:
		add	[bp+var_4], 5DCh

loc_BA79:
		les	bx, dword_F3CE
		cmp	byte ptr es:[bx+49h], 0
		jz	short loc_BA8C
		add	[bp+var_4], 7D0h

loc_BA8C:
		les	bx, dword_F3CE
		cmp	word ptr es:[bx+38h], 0
		jz	short loc_BAA5
		mov	ax, es:[bx+38h]
		add	ax, ax
		movzx	eax, ax
		add	[bp+var_4], eax

loc_BAA5:
		mov	[bp+var_8], 0F4240h
		les	bx, dword_F3CE
		mov	ax, es:[bx+28h]
		cmp	ax, es:[bx+2Ah]
		jz	short loc_BAF3
		cmp	word ptr es:[bx+28h], 0
		jz	short loc_BAD8
		movzx	ebx, word ptr es:[bx+28h]
		mov	eax, [bp+var_8]
		xor	edx, edx
		div	ebx
		mov	[bp+var_8], eax
		jmp	short loc_BAE0
; ---------------------------------------------------------------------------

loc_BAD8:
		mov	[bp+var_8], 0

loc_BAE0:
		les	bx, dword_F3CE
		movzx	eax, word ptr es:[bx+2Ah]
		imul	eax, [bp+var_8]
		mov	[bp+var_8], eax

loc_BAF3:
		mov	eax, 0F4240h
		sub	eax, [bp+var_8]
		mov	[bp+var_8], eax
		mov	ebx, 64h ; 'd'
		xor	edx, edx
		div	ebx
		mov	[bp+var_8], eax
		cmp	[bp+var_8], 0
		jz	short loc_BB2A
		call	sub_1C5A
		cwde
		xor	edx, edx
		div	[bp+var_8]
		add	[bp+var_4], edx

loc_BB2A:
		mov	eax, [bp+var_4]
		imul	eax, 64h
		mov	[bp+var_4], eax
		cmp	[bp+var_4], 0F4240h
		jbe	short loc_BB48
		mov	[bp+var_4], 0F4240h

loc_BB48:
		mov	eax, dword_124CE
		add	eax, [bp+var_4]
		mov	dword_124CE, eax
		push	large 0C00108h
		push	large [bp+var_4]
		call	sub_B97B
		push	large 1200108h
		push	0Eh
		push	ds
		push	offset aBu_0	; ""
		call	far ptr	loc_D1FC
		leave
		retn
sub_B9F2	endp

; ---------------------------------------------------------------------------
		db 0
off_BB75	dw offset loc_BA18
		dw offset loc_BA22
		dw offset loc_BA2C
		dw offset loc_BA36
		dw offset loc_BA40
		dw offset loc_BA4A

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_BB81	proc near

var_4		= dword	ptr -4

		enter	4, 0
		push	si
		mov	word_EB2C, 2
		mov	dx, 0A6h ; '¦'
		mov	al, 0
		out	dx, al		; Interrupt Controller #2, 8259A
		mov	dx, 0A4h ; '¤'
		out	dx, al		; Interrupt Controller #2, 8259A
		push	large 100030h
		push	0Fh
		push	ds
		push	offset aB@b@b@b@b@b@b@ ; "@@@@@@@ rO»è"
		call	far ptr	loc_D1FC
		push	large 100048h
		push	0Fh
		push	ds
		push	offset aUqiUx	; "ïÕx"
		call	far ptr	loc_D1FC
		push	large 100060h
		push	0Fh
		push	ds
		push	offset aNPiuU_	; "ÅI¾_"
		call	far ptr	loc_D1FC
		push	large 100078h
		push	0Fh
		push	ds
		push	offset aGGxi	; "~Xñ"
		call	far ptr	loc_D1FC
		push	large 100090h
		push	0Fh
		push	ds
		push	offset aGGaogcpi ; "{gpñ"
		call	far ptr	loc_D1FC
		push	large 1000A8h
		push	0Fh
		push	ds
		push	offset aGqbGatbrmcj ; "Q[B¬¦"
		call	far ptr	loc_D1FC
		push	large 1000C0h
		push	0Fh
		push	ds
		push	offset aIlcSObcj ; "«ìÞ¡¦"
		call	far ptr	loc_D1FC
		push	large 1000D8h
		push	0Fh
		push	ds
		push	offset aGagcgegai ; "ACeñû¦"
		call	far ptr	loc_D1FC
		push	large 1000F0h
		push	0Fh
		push	ds
		push	offset aUU_gagcgeganNv ; "¾_ACeÅ_¦"
		call	far ptr	loc_D1FC
		push	large 100108h
		push	0Fh
		push	ds
		push	offset aLcnzvv	; "C¢"
		call	far ptr	loc_D1FC
		push	large 100120h
		push	0Fh
		push	ds
		push	offset aPicacovCj ; "¿¦"
		call	far ptr	loc_D1FC
		push	large 100150h
		push	0Fh
		push	ds
		push	offset aVavVVSrso ; " È½ÌrO"
		call	far ptr	loc_D1FC
		les	bx, dword_F3CE
		cmp	byte ptr es:[bx+11h], 6
		jnz	short loc_BC71
		mov	al, 4
		jmp	short loc_BC79
; ---------------------------------------------------------------------------

loc_BC71:
		les	bx, dword_F3CE
		mov	al, es:[bx+0Fh]

loc_BC79:
		mov	byte_124D2, al
		push	large 0B00048h
		push	10h
		push	ds
		mov	ah, 0
		shl	ax, 3
		add	ax, 71Bh
		push	ax
		push	0Eh
		call	sub_36B6
		call	sub_B81D
		push	large 0F00078h
		les	bx, dword_F3CE
		mov	al, es:[bx+31h]
		mov	ah, 0
		push	ax
		call	sub_B787
		push	large 0F00090h
		les	bx, dword_F3CE
		mov	al, es:[bx+32h]
		mov	ah, 0
		push	ax
		call	sub_B787
		push	large 1200078h
		push	0Eh
		push	ds
		push	offset aTimes	; "ñ"
		call	far ptr	loc_D1FC
		push	large 1200090h
		push	0Eh
		push	ds
		push	offset aTimes_0	; "ñ"
		call	far ptr	loc_D1FC
		mov	byte_124CC, 1
		les	bx, dword_F3CE
		cmp	byte ptr es:[bx+11h], 6
		jz	short loc_BD0A
		cmp	byte ptr es:[bx+30h], 0FFh
		jnz	short loc_BCFF
		mov	word ptr es:[bx+26h], 0ABE0h

loc_BCFF:
		push	large 0C000A8h
		push	0ABE0h
		jmp	short loc_BD24
; ---------------------------------------------------------------------------

loc_BD0A:
		les	bx, dword_F3CE
		cmp	byte ptr es:[bx+30h], 0FDh ; 'ý'
		jnz	short loc_BD1B
		mov	word ptr es:[bx+26h], 2EE0h

loc_BD1B:
		push	large 0C000A8h
		push	2EE0h

loc_BD24:
		les	bx, dword_F3CE
		push	word ptr es:[bx+26h]
		call	sub_B886
		mov	byte_124CC, 0
		push	large 0C000C0h
		les	bx, dword_F3CE
		push	word ptr es:[bx+34h]
		push	word ptr es:[bx+36h]
		call	sub_B886
		push	large 0C000D8h
		les	bx, dword_F3CE
		push	word ptr es:[bx+28h]
		push	word ptr es:[bx+2Ah]
		call	sub_B886
		push	large 0C000F0h
		les	bx, dword_F3CE
		push	word ptr es:[bx+2Ch]
		push	word ptr es:[bx+2Eh]
		call	sub_B886
		call	sub_B9F2
		push	large 0C00120h
		les	bx, dword_F3CE
		mov	eax, es:[bx+44h]
		mov	ebx, 0Ah
		xor	edx, edx
		div	ebx
		push	ax
		mov	bx, word ptr dword_F3CE
		mov	eax, es:[bx+40h]
		mov	ebx, 0Ah
		xor	edx, edx
		div	ebx
		push	ax
		call	sub_B886
		mov	ebx, 5
		mov	eax, dword_124CE
		cdq
		idiv	ebx
		mov	dword_124CE, eax
		les	bx, dword_F3CE
		cmp	byte ptr es:[bx+24h], 9
		jb	short loc_BDD4
		add	dword_124CE, 927C0h
		jmp	short loc_BE08
; ---------------------------------------------------------------------------

loc_BDD4:
		les	bx, dword_F3CE
		movzx	eax, byte ptr es:[bx+23h]
		imul	eax, 2710h
		add	dword_124CE, eax
		cmp	byte ptr es:[bx+24h], 3
		jbe	short loc_BE08
		mov	al, es:[bx+24h]
		mov	ah, 0
		add	ax, 0FFFDh
		cwde
		imul	eax, 186A0h
		add	dword_124CE, eax

loc_BE08:
					; sub_BB81+26Ej
		mov	al, byte_124D2
		mov	ah, 0
		mov	bx, ax
		cmp	bx, 4
		ja	short loc_BE6F
		add	bx, bx
		jmp	cs:off_C0EE[bx]

loc_BE1B:
		sub	dword_124CE, 0C350h
		mov	[bp+var_4], 0C3500h
		jmp	short loc_BE6F
; ---------------------------------------------------------------------------

loc_BE2E:
					; sub_BB81+302j
		mov	[bp+var_4], 0F4240h
		jmp	short loc_BE6F
; ---------------------------------------------------------------------------

loc_BE38:
					; sub_BB81+302j
		add	dword_124CE, 249F0h
		mov	[bp+var_4], 124F80h
		jmp	short loc_BE6F
; ---------------------------------------------------------------------------

loc_BE4B:
					; sub_BB81+302j
		add	dword_124CE, 493E0h
		mov	[bp+var_4], 155CC0h
		jmp	short loc_BE6F
; ---------------------------------------------------------------------------

loc_BE5E:
					; sub_BB81+302j
		add	dword_124CE, 6DDD0h
		mov	[bp+var_4], 16E360h

loc_BE6F:
					; sub_BB81+2ABj ...
		les	bx, dword_F3CE
		mov	al, es:[bx+0Ch]
		mov	ah, 0
		dec	ax
		mov	bx, ax
		cmp	bx, 5
		ja	short loc_BECA
		add	bx, bx
		jmp	cs:off_C0E2[bx]

loc_BE88:
		add	dword_124CE, 0C350h
		add	[bp+var_4], 186A0h
		jmp	short loc_BECA
; ---------------------------------------------------------------------------

loc_BE9B:
		add	dword_124CE, 61A8h
		add	[bp+var_4], 0C350h
		jmp	short loc_BECA
; ---------------------------------------------------------------------------

loc_BEAE:
		sub	[bp+var_4], 61A8h
		jmp	short loc_BECA
; ---------------------------------------------------------------------------

loc_BEB8:
		sub	[bp+var_4], 0C350h
		jmp	short loc_BECA
; ---------------------------------------------------------------------------

loc_BEC2:
		sub	[bp+var_4], 124F8h

loc_BECA:
					; sub_BB81+302j ...
		les	bx, dword_F3CE
		mov	al, es:[bx+0Eh]
		mov	ah, 0
		or	ax, ax
		jz	short loc_BEDF
		cmp	ax, 1
		jz	short loc_BEF2
		jmp	short loc_BF03
; ---------------------------------------------------------------------------

loc_BEDF:
		add	dword_124CE, 0C350h
		add	[bp+var_4], 186A0h
		jmp	short loc_BF03
; ---------------------------------------------------------------------------

loc_BEF2:
		add	dword_124CE, 4E20h
		add	[bp+var_4], 0C350h

loc_BF03:
					; sub_BB81+36Fj
		les	bx, dword_F3CE
		cmp	byte ptr es:[bx+49h], 0
		jnz	short loc_BF17
		sub	dword_124CE, 186A0h

loc_BF17:
		les	bx, dword_F3CE
		cmp	byte ptr es:[bx+31h], 0Fh
		jb	short loc_BF2D
		sub	dword_124CE, 493E0h
		jmp	short loc_BF43
; ---------------------------------------------------------------------------

loc_BF2D:
		les	bx, dword_F3CE
		movzx	eax, byte ptr es:[bx+31h]
		imul	eax, 4E20h
		sub	dword_124CE, eax

loc_BF43:
		les	bx, dword_F3CE
		cmp	byte ptr es:[bx+32h], 1Eh
		jb	short loc_BF59
		sub	dword_124CE, 15F90h
		jmp	short loc_BF6F
; ---------------------------------------------------------------------------

loc_BF59:
		les	bx, dword_F3CE
		movzx	eax, byte ptr es:[bx+32h]
		imul	eax, 0BB8h
		sub	dword_124CE, eax

loc_BF6F:
		les	bx, dword_F3CE
		cmp	byte ptr es:[bx+30h], 0FDh ; 'ý'
		jnb	short loc_BFA1
		cmp	byte_124D2, 4
		jz	short loc_BF96
		mov	ebx, 2
		mov	eax, dword_124CE
		cdq
		idiv	ebx
		mov	dword_124CE, eax
		jmp	short loc_BFB4
; ---------------------------------------------------------------------------

loc_BF96:
		sub	dword_124CE, 30D40h
		jmp	short loc_BFB4
; ---------------------------------------------------------------------------

loc_BFA1:
		les	bx, dword_F3CE
		cmp	byte ptr es:[bx+30h], 0FEh ; 'þ'
		jnz	short loc_BFB4
		sub	[bp+var_4], 186A0h

loc_BFB4:
					; sub_BB81+41Ej ...
		cmp	dword_124CE, 0
		jge	short loc_BFC7
		mov	dword_124CE, 0
		jmp	short loc_BFD9
; ---------------------------------------------------------------------------

loc_BFC7:
		mov	eax, dword_124CE
		cmp	eax, [bp+var_4]
		jbe	short loc_BFD9
		mov	eax, [bp+var_4]
		mov	dword_124CE, eax

loc_BFD9:
					; sub_BB81+44Ej
		les	bx, dword_F3CE
		mov	eax, es:[bx+44h]
		shr	eax, 1
		cmp	eax, es:[bx+40h]
		jbe	loc_C0AE
		push	large 0C00150h
		push	large [dword_124CE]
		call	sub_B97B
		push	large 1200150h
		push	0Eh
		push	ds
		push	offset aPoint	; "_"
		call	far ptr	loc_D1FC
		push	ds
		push	offset a_ude_txt ; "_ude.txt"
		call	sub_A88
		cmp	dword_124CE, 16E360h
		jge	short loc_C084
		cmp	dword_124CE, 0
		jnz	short loc_C02E
		mov	si, 19h
		jmp	short loc_C074
; ---------------------------------------------------------------------------

loc_C02E:
		cmp	dword_124CE, 100590h
		jge	short loc_C051
		mov	eax, dword_124CE
		mov	ebx, 0C350h
		cdq
		idiv	ebx
		mov	dx, 18h
		sub	dx, ax
		mov	si, dx
		jmp	short loc_C074
; ---------------------------------------------------------------------------

loc_C051:
		cmp	dword_124CE, 124F80h
		jge	short loc_C061
		mov	si, 3
		jmp	short loc_C074
; ---------------------------------------------------------------------------

loc_C061:
		cmp	dword_124CE, 149970h
		jge	short loc_C071
		mov	si, 2
		jmp	short loc_C074
; ---------------------------------------------------------------------------

loc_C071:
		mov	si, 1

loc_C074:
					; sub_BB81+4CEj ...
		mov	ax, si
		imul	ax, 1Eh
		cwde
		push	eax
		push	0
		call	sub_AC4

loc_C084:
		push	ds
		push	offset unk_124D3
		push	1Eh
		call	sub_9D4
		mov	byte_124EF, 0
		call	sub_968
		push	40h ; '@'
		call	sub_CCA3
		push	large 400168h
		push	0Fh
		push	ds
		push	offset unk_124D3
		jmp	short loc_C0CB
; ---------------------------------------------------------------------------

loc_C0AE:
		push	large 0C00150h
		push	0Eh
		push	ds
		push	offset aBhbhbhbhbhbhu_ ; "HHHHHH_"
		call	far ptr	loc_D1FC
		push	large 400168h
		push	0Fh
		push	ds
		push	offset aPicacovVVcvsfT ; "¿Éæé»èsÂ"

loc_C0CB:
		call	far ptr	loc_D1FC
		push	0
		call	sub_CE7A
		push	2
		call	sub_666
		pop	si
		leave
		retn
sub_BB81	endp

; ---------------------------------------------------------------------------
		db    0
off_C0E2	dw offset loc_BE88
		dw offset loc_BE9B
		dw offset loc_BECA
		dw offset loc_BEAE
		dw offset loc_BEB8
		dw offset loc_BEC2
off_C0EE	dw offset loc_BE1B
		dw offset loc_BE2E
		dw offset loc_BE38
		dw offset loc_BE4B
		dw offset loc_BE5E

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_C0F8	proc near
		push	bp
		mov	bp, sp
		mov	word_E662, 0
		call	far ptr	loc_19EC
		mov	dx, 0A6h ; '¦'
		mov	al, 1
		out	dx, al		; Interrupt Controller #2, 8259A
		push	0
		push	ds
		push	offset aUde_pi	; "ude.pi"
		call	sub_CD65
		push	0
		call	sub_CCB8
		push	large 0
		push	0
		call	sub_CCDD
		push	ds
		push	offset unk_FCEA
		push	large [dword_FCD2]
		call	sub_1274
		push	0
		call	sub_11C2
		push	4
		call	sub_622
		call	sub_BB81
		pop	bp
		retn
sub_C0F8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_C149	proc near

var_1		= byte ptr -1

		enter	2, 0
		push	si
		mov	si, 4
		jmp	short loc_C176
; ---------------------------------------------------------------------------

loc_C153:
		mov	al, [si+3FC3h]
		mov	[bp+var_1], al
		mov	al, byte_124F3
		ror	[bp+var_1], 3
		xor	[bp+var_1], al
		mov	al, [si+3FC2h]
		mov	dl, byte_124F2
		add	dl, [bp+var_1]
		add	al, dl
		mov	[si+3FC2h], al
		inc	si

loc_C176:
		cmp	si, 0C3h ; 'Ã'
		jl	short loc_C153
		mov	al, byte_124F2
		add	[si+3FC2h], al
		xor	cx, cx
		mov	si, 4
		jmp	short loc_C193
; ---------------------------------------------------------------------------

loc_C18A:
		mov	al, [si+3FC2h]
		mov	ah, 0
		add	cx, ax
		inc	si

loc_C193:
		cmp	si, 0C4h ; 'Ä'
		jl	short loc_C18A
		mov	al, byte ptr word_124F4
		sub	al, cl
		pop	si
		leave
		retn
sub_C149	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_C1A1	proc near
					; sub_C316+4p ...

var_1		= byte ptr -1

		enter	2, 0
		push	si
		mov	word_124F4, 0
		mov	si, 4
		jmp	short loc_C1BC
; ---------------------------------------------------------------------------

loc_C1B1:
		mov	al, [si+3FC2h]
		mov	ah, 0
		add	word_124F4, ax
		inc	si

loc_C1BC:
		cmp	si, 0C4h ; 'Ä'
		jl	short loc_C1B1
		call	sub_1C5A
		mov	byte_124F2, al
		call	sub_1C5A
		mov	byte_124F3, al
		mov	[bp+var_1], 0
		mov	si, 0C3h ; 'Ã'
		jmp	short loc_C1FE
; ---------------------------------------------------------------------------

loc_C1DB:
		mov	al, [si+3FC2h]
		mov	dl, byte_124F2
		add	dl, [bp+var_1]
		sub	al, dl
		mov	[si+3FC2h], al
		mov	al, [si+3FC2h]
		mov	[bp+var_1], al
		mov	al, byte_124F3
		ror	[bp+var_1], 3
		xor	[bp+var_1], al
		dec	si

loc_C1FE:
		cmp	si, 4
		jge	short loc_C1DB
		pop	si
		leave
		retn
sub_C1A1	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_C206	proc near

var_1		= byte ptr -1

		enter	2, 0
		push	si
		push	di
		mov	[bp+var_1], 0A9h ; '©'
		xor	si, si
		jmp	short loc_C27A
; ---------------------------------------------------------------------------

loc_C214:
		mov	byte_125A0, 19h
		xor	di, di
		jmp	short loc_C228
; ---------------------------------------------------------------------------

loc_C21D:
		mov	bx, si
		shl	bx, 3
		mov	byte ptr [bx+di+4020h],	0A0h ; ' '
		inc	di

loc_C228:
		cmp	di, 8
		jl	short loc_C21D
		or	si, si
		jnz	short loc_C23D
		mov	bx, si
		shl	bx, 3
		mov	byte ptr [bx+4025h], 0A1h ; '¡'
		jmp	short loc_C24C
; ---------------------------------------------------------------------------

loc_C23D:
		mov	bx, si
		shl	bx, 3
		mov	al, [bp+var_1]
		mov	[bx+4024h], al
		dec	[bp+var_1]

loc_C24C:
		mov	ax, si
		cwd
		sub	ax, dx
		sar	ax, 1
		mov	dl, 0A5h ; '¥'
		sub	dl, al
		mov	[si+4072h], dl
		xor	di, di
		jmp	short loc_C26A
; ---------------------------------------------------------------------------

loc_C25F:
		mov	bx, si
		imul	bx, 9
		mov	byte ptr [bx+di+3FC6h],	0C4h ; 'Ä'
		inc	di

loc_C26A:
		cmp	di, 8
		jl	short loc_C25F
		mov	bx, si
		imul	bx, 9
		mov	byte ptr [bx+3FCEh], 0
		inc	si

loc_C27A:
		cmp	si, 0Ah
		jl	short loc_C214
		push	ds
		push	offset aGensou_scr ; "GENSOU.SCR"
		call	sub_978
		xor	si, si
		jmp	short loc_C29F
; ---------------------------------------------------------------------------

loc_C28C:
		call	sub_C1A1
		push	ds
		push	offset byte_124F2
		push	0C4h ; 'Ä'
		call	sub_B14
		call	sub_C149
		inc	si

loc_C29F:
		cmp	si, 0Ah
		jl	short loc_C28C
		call	sub_968
		pop	di
		pop	si
		leave
		retn
sub_C206	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_C2AD	proc near

arg_0		= byte ptr  4

		push	bp
		mov	bp, sp
		push	ds
		push	offset aGensou_scr_0 ; "GENSOU.SCR"
		call	sub_9B8
		or	ax, ax
		jz	short loc_C307
		push	ds
		push	offset aGensou_scr_1 ; "GENSOU.SCR"
		call	sub_A88
		mov	al, byte_125B7
		mov	ah, 0
		imul	ax, 0C4h
		movzx	eax, ax
		push	eax
		push	0
		call	sub_AC4
		cmp	[bp+arg_0], 0
		jz	short loc_C2EF
		push	large 3D4h
		push	1
		call	sub_AC4

loc_C2EF:
		push	ds
		push	offset byte_124F2
		push	0C4h ; 'Ä'
		call	sub_9D4
		call	sub_968
		call	sub_C149
		or	al, al
		jz	short loc_C310

loc_C307:
		call	sub_C206
		mov	al, 1
		pop	bp
		retn	2
; ---------------------------------------------------------------------------

loc_C310:
		mov	al, 0
		pop	bp
		retn	2
sub_C2AD	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_C316	proc near
					; sub_C814:loc_CB7Fp
		push	bp
		mov	bp, sp
		push	si
		call	sub_C1A1
		push	ds
		push	offset aGensou_scr_2 ; "GENSOU.SCR"
		call	sub_8A8
		mov	al, byte_125B7
		mov	ah, 0
		imul	ax, 0C4h
		movzx	eax, ax
		push	eax
		push	0
		call	sub_AC4
		cmp	byte ptr word_125B8, 0
		jz	short loc_C350
		push	large 3D4h
		push	1
		call	sub_AC4

loc_C350:
		push	ds
		push	offset byte_124F2
		push	0C4h ; 'Ä'
		call	sub_B14
		xor	si, si
		jmp	short loc_C3A5
; ---------------------------------------------------------------------------

loc_C360:
		mov	ax, si
		imul	ax, 0C4h
		movzx	eax, ax
		push	eax
		push	0
		call	sub_AC4
		push	ds
		push	offset byte_124F2
		push	0C4h ; 'Ä'
		call	sub_9D4
		call	sub_C149
		call	sub_C1A1
		mov	ax, si
		imul	ax, 0C4h
		movzx	eax, ax
		push	eax
		push	0
		call	sub_AC4
		push	ds
		push	offset byte_124F2
		push	0C4h ; 'Ä'
		call	sub_B14
		inc	si

loc_C3A5:
		cmp	si, 0Ah
		jl	short loc_C360
		call	sub_968
		pop	si
		pop	bp
		retn
sub_C316	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_C3B2	proc near

var_2		= word ptr -2

		enter	2, 0
		mov	[bp+var_2], 9
		jmp	short loc_C40E
; ---------------------------------------------------------------------------

loc_C3BD:
		mov	cx, 7
		jmp	short loc_C407
; ---------------------------------------------------------------------------

loc_C3C2:
		les	bx, dword_F3CE
		add	bx, cx
		mov	al, es:[bx+1Dh]
		mov	ah, 0
		mov	bx, [bp+var_2]
		shl	bx, 3
		add	bx, cx
		mov	dl, [bx+4020h]
		mov	dh, 0
		add	dx, 0FF60h
		cmp	ax, dx
		jg	short loc_C40B
		les	bx, dword_F3CE
		add	bx, cx
		mov	al, es:[bx+1Dh]
		mov	ah, 0
		mov	bx, [bp+var_2]
		shl	bx, 3
		add	bx, cx
		mov	dl, [bx+4020h]
		mov	dh, 0
		add	dx, 0FF60h
		cmp	ax, dx
		jl	short loc_C41B
		dec	cx

loc_C407:
		or	cx, cx
		jge	short loc_C3C2

loc_C40B:
		dec	[bp+var_2]

loc_C40E:
		cmp	[bp+var_2], 0
		jge	short loc_C3BD
		mov	byte_125B6, 0
		jmp	short loc_C430
; ---------------------------------------------------------------------------

loc_C41B:
		cmp	[bp+var_2], 9
		jnz	short loc_C428
		mov	byte_125B6, 0FFh
		leave
		retn
; ---------------------------------------------------------------------------

loc_C428:
		mov	al, byte ptr [bp+var_2]
		inc	al
		mov	byte_125B6, al

loc_C430:
		mov	[bp+var_2], 8
		jmp	short loc_C489
; ---------------------------------------------------------------------------

loc_C437:
		mov	cx, 7
		jmp	short loc_C455
; ---------------------------------------------------------------------------

loc_C43C:
		mov	bx, [bp+var_2]
		imul	bx, 9
		add	bx, cx
		mov	al, [bx+3FC6h]
		mov	bx, [bp+var_2]
		imul	bx, 9
		add	bx, cx
		mov	[bx+3FCFh], al
		dec	cx

loc_C455:
		or	cx, cx
		jge	short loc_C43C
		mov	cx, 7
		jmp	short loc_C477
; ---------------------------------------------------------------------------

loc_C45E:
		mov	bx, [bp+var_2]
		shl	bx, 3
		add	bx, cx
		mov	al, [bx+4020h]
		mov	bx, [bp+var_2]
		shl	bx, 3
		add	bx, cx
		mov	[bx+4028h], al
		dec	cx

loc_C477:
		or	cx, cx
		jge	short loc_C45E
		mov	bx, [bp+var_2]
		mov	al, [bx+4072h]
		mov	[bx+4073h], al
		dec	[bp+var_2]

loc_C489:
		mov	al, byte_125B6
		mov	ah, 0
		cmp	ax, [bp+var_2]
		jle	short loc_C437
		mov	cx, 7
		jmp	short loc_C4AA
; ---------------------------------------------------------------------------

loc_C498:
		mov	al, byte_125B6
		mov	ah, 0
		imul	ax, 9
		add	ax, cx
		mov	bx, ax
		mov	byte ptr [bx+3FC6h], 0C4h ; 'Ä'
		dec	cx

loc_C4AA:
		or	cx, cx
		jge	short loc_C498
		mov	cx, 7
		jmp	short loc_C4D1
; ---------------------------------------------------------------------------

loc_C4B3:
		les	bx, dword_F3CE
		add	bx, cx
		mov	al, es:[bx+1Dh]
		add	al, 0A0h ; ' '
		mov	dl, byte_125B6
		mov	dh, 0
		shl	dx, 3
		add	dx, cx
		mov	bx, dx
		mov	[bx+4020h], al
		dec	cx

loc_C4D1:
		or	cx, cx
		jge	short loc_C4B3
		les	bx, dword_F3CE
		cmp	byte ptr es:[bx+30h], 0FDh ; 'ý'
		jb	short loc_C4EE
		mov	al, byte_125B6
		mov	ah, 0
		mov	bx, ax
		mov	byte ptr [bx+4072h], 0E9h ; 'é'
		leave
		retn
; ---------------------------------------------------------------------------

loc_C4EE:
		les	bx, dword_F3CE
		mov	al, es:[bx+11h]
		add	al, 0A1h ; '¡'
		mov	dl, byte_125B6
		mov	dh, 0
		mov	bx, dx
		mov	[bx+4072h], al
		leave
		retn
sub_C3B2	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_C506	proc near

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= byte ptr  4
arg_2		= word ptr  6

		enter	4, 0
		push	si
		push	di
		mov	si, [bp+arg_2]
		or	si, si
		jnz	short loc_C518
		mov	ax, 60h	; '`'
		jmp	short loc_C520
; ---------------------------------------------------------------------------

loc_C518:
		mov	ax, si
		shl	ax, 4
		add	ax, 70h	; 'p'

loc_C520:
		mov	[bp+var_4], ax
		cmp	[bp+arg_0], 0
		jnz	short loc_C52E
		mov	ax, 0ACh ; '¬'
		jmp	short loc_C531
; ---------------------------------------------------------------------------

loc_C52E:
		mov	ax, 1E0h

loc_C531:
		mov	di, ax
		mov	al, byte_125B6
		mov	ah, 0
		cmp	ax, si
		jnz	short loc_C549
		mov	al, [bp+arg_0]
		cmp	al, byte ptr word_125B8
		jnz	short loc_C549
		mov	al, 0Ah
		jmp	short loc_C54B
; ---------------------------------------------------------------------------

loc_C549:
		mov	al, 0

loc_C54B:
		mov	[bp+arg_0], al
		mov	bx, si
		shl	bx, 3
		mov	al, [bx+4027h]
		mov	ah, 0
		add	ax, 0FF60h
		cmp	ax, 0Ah
		jl	short loc_C589
		lea	ax, [di-20h]
		push	ax
		push	[bp+var_4]
		mov	bx, si
		shl	bx, 3
		mov	al, [bx+4027h]
		mov	ah, 0
		add	ax, 0FF60h
		mov	bx, 0Ah
		cwd
		idiv	bx
		mov	dl, [bp+arg_0]
		mov	dh, 0
		add	ax, dx
		push	ax
		call	sub_275E

loc_C589:
		lea	ax, [di-10h]
		push	ax
		push	[bp+var_4]
		mov	bx, si
		shl	bx, 3
		mov	al, [bx+4027h]
		mov	ah, 0
		add	ax, 0FF60h
		mov	bx, 0Ah
		cwd
		idiv	bx
		mov	al, [bp+arg_0]
		mov	ah, 0
		add	dx, ax
		push	dx
		call	sub_275E
		mov	[bp+var_2], 6
		jmp	short loc_C5E0
; ---------------------------------------------------------------------------

loc_C5B8:
		push	di
		push	[bp+var_4]
		mov	bx, si
		shl	bx, 3
		add	bx, [bp+var_2]
		mov	al, [bx+4020h]
		mov	ah, 0
		mov	dl, [bp+arg_0]
		mov	dh, 0
		add	ax, dx
		add	ax, 0FF60h
		push	ax
		call	sub_275E
		dec	[bp+var_2]
		add	di, 10h

loc_C5E0:
		cmp	[bp+var_2], 0
		jge	short loc_C5B8
		pop	di
		pop	si
		leave
		retn	4
sub_C506	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_C5EC	proc near

var_5		= byte ptr -5
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  4
arg_2		= word ptr  6
arg_4		= word ptr  8

		enter	6, 0
		push	si
		push	di
		mov	si, [bp+arg_4]
		mov	di, [bp+arg_2]
		mov	al, byte_125B6
		mov	ah, 0
		cmp	ax, si
		jnz	short loc_C60E
		mov	al, byte ptr word_125B8
		mov	ah, 0
		cmp	ax, di
		jnz	short loc_C60E
		mov	al, 7
		jmp	short loc_C610
; ---------------------------------------------------------------------------

loc_C60E:
		mov	al, 0Ch

loc_C610:
		mov	[bp+var_5], al
		or	si, si
		jnz	short loc_C61C
		mov	ax, 60h	; '`'
		jmp	short loc_C624
; ---------------------------------------------------------------------------

loc_C61C:
		mov	ax, si
		shl	ax, 4
		add	ax, 70h	; 'p'

loc_C624:
		mov	[bp+var_4], ax
		or	di, di
		jnz	short loc_C630
		mov	ax, 124h
		jmp	short loc_C633
; ---------------------------------------------------------------------------

loc_C630:
		mov	ax, 258h

loc_C633:
		mov	[bp+var_2], ax
		add	ax, 2
		push	ax
		mov	ax, [bp+var_4]
		add	ax, 2
		push	ax
		push	[bp+arg_0]
		push	0Eh
		call	sub_3760
		push	[bp+var_2]
		push	[bp+var_4]
		push	[bp+arg_0]
		mov	al, [bp+var_5]
		mov	ah, 0
		push	ax
		call	sub_3760
		pop	di
		pop	si
		leave
		retn	6
sub_C5EC	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_C665	proc near
					; sub_C814+315p

var_2		= word ptr -2
arg_0		= byte ptr  4
arg_2		= byte ptr  6
arg_4		= word ptr  8

		enter	2, 0
		push	si
		push	di
		mov	si, [bp+arg_4]
		cmp	[bp+arg_2], 0
		jnz	short loc_C679
		mov	ax, 2
		jmp	short loc_C67C
; ---------------------------------------------------------------------------

loc_C679:
		mov	ax, 28h	; '('

loc_C67C:
		mov	di, ax
		or	si, si
		jnz	short loc_C687
		mov	ax, 6
		jmp	short loc_C68A
; ---------------------------------------------------------------------------

loc_C687:
		lea	ax, [si+7]

loc_C68A:
		mov	[bp+var_2], ax
		mov	ax, di
		shl	ax, 3
		add	ax, 2
		push	ax
		mov	ax, [bp+var_2]
		shl	ax, 4
		add	ax, 2
		push	ax
		push	large 800010h
		call	sub_CBF3
		mov	ax, di
		shl	ax, 3
		add	ax, 2
		push	ax
		mov	ax, [bp+var_2]
		shl	ax, 4
		add	ax, 2
		push	ax
		push	10h
		mov	ax, si
		imul	ax, 9
		add	ax, 3FC6h
		push	ds
		push	ax
		push	0Eh
		call	sub_36B6
		push	di
		push	[bp+var_2]
		mov	ax, si
		imul	ax, 9
		add	ax, 3FC6h
		push	ds
		push	ax
		push	41h ; 'A'
		call	sub_1008
		mov	al, [bp+arg_0]
		mov	ah, 0
		add	ax, ax
		add	ax, di
		push	ax
		push	[bp+var_2]
		mov	bx, si
		imul	bx, 9
		mov	al, [bp+arg_0]
		mov	ah, 0
		add	bx, ax
		mov	al, [bx+3FC6h]
		mov	ah, 0
		push	ax
		push	45h ; 'E'
		call	sub_FC4
		pop	di
		pop	si
		leave
		retn	6
sub_C665	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_C711	proc near

var_2		= word ptr -2
arg_0		= word ptr  4
arg_2		= word ptr  6

		enter	2, 0
		push	si
		push	di
		mov	si, [bp+arg_2]
		cmp	byte ptr [bp+arg_0], 0
		jnz	short loc_C725
		mov	ax, 10h
		jmp	short loc_C728
; ---------------------------------------------------------------------------

loc_C725:
		mov	ax, 140h

loc_C728:
		mov	[bp+var_2], ax
		or	si, si
		jnz	short loc_C734
		mov	ax, 60h	; '`'
		jmp	short loc_C73C
; ---------------------------------------------------------------------------

loc_C734:
		mov	ax, si
		shl	ax, 4
		add	ax, 70h	; 'p'

loc_C73C:
		mov	di, ax
		mov	ax, [bp+var_2]
		add	ax, 2
		push	ax
		lea	ax, [di+2]
		push	ax
		push	10h
		mov	ax, si
		imul	ax, 9
		add	ax, 3FC6h
		push	ds
		push	ax
		push	0Eh
		call	sub_36B6
		mov	al, byte_125B6
		mov	ah, 0
		cmp	ax, si
		jnz	short loc_C76E
		mov	al, byte ptr [bp+arg_0]
		cmp	al, byte ptr word_125B8
		jz	short loc_C787

loc_C76E:
		push	[bp+var_2]
		push	di
		push	10h
		mov	ax, si
		imul	ax, 9
		add	ax, 3FC6h
		push	ds
		push	ax
		push	0Ch
		call	sub_36B6
		jmp	short loc_C7AB
; ---------------------------------------------------------------------------

loc_C787:
		mov	ax, [bp+var_2]
		mov	bx, 8
		cwd
		idiv	bx
		push	ax
		mov	ax, di
		mov	bx, 10h
		cwd
		idiv	bx
		push	ax
		mov	ax, si
		imul	ax, 9
		add	ax, 3FC6h
		push	ds
		push	ax
		push	41h ; 'A'
		call	sub_1008

loc_C7AB:
		push	si
		push	[bp+arg_0]
		call	sub_C506
		push	si
		mov	al, byte ptr [bp+arg_0]
		mov	ah, 0
		push	ax
		mov	al, [si+4072h]
		mov	ah, 0
		push	ax
		call	sub_C5EC
		pop	di
		pop	si
		leave
		retn	4
sub_C711	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_C7C9	proc near

arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		push	si
		xor	si, si
		jmp	short loc_C7D9
; ---------------------------------------------------------------------------

loc_C7D1:
		push	si
		push	[bp+arg_0]
		call	sub_C711
		inc	si

loc_C7D9:
		cmp	si, 0Ah
		jl	short loc_C7D1
		pop	si
		pop	bp
		retn	2
sub_C7C9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_C7E3	proc near
					; sub_C814+253p ...

arg_0		= word ptr  4
arg_2		= word ptr  6
arg_4		= word ptr  8

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	si, [bp+arg_4]
		mov	di, [bp+arg_2]
		mov	ax, si
		add	ax, ax
		add	ax, 17h
		push	ax
		lea	ax, [di+12h]
		push	ax
		mov	bx, di
		imul	bx, 11h
		mov	al, [bx+si+82Ch]
		mov	ah, 0
		push	ax
		push	[bp+arg_0]
		call	sub_FC4
		pop	di
		pop	si
		pop	bp
		retn	6
sub_C7E3	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_C814	proc near

var_A		= byte ptr -0Ah
var_9		= byte ptr -9
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2

		enter	0Ah, 0
		push	si
		push	di
		xor	si, si
		mov	[bp+var_9], 0
		mov	word_E662, 0
		call	far ptr	loc_19EC
		mov	dx, 0A6h ; '¦'
		mov	al, 1
		out	dx, al		; Interrupt Controller #2, 8259A
		push	0
		push	ds
		push	offset aHi01_pi	; "hi01.pi"
		call	sub_CD65
		push	0
		call	sub_CCB8
		push	large 0
		push	0
		call	sub_CCDD
		push	ds
		push	offset unk_FCEA
		push	large [dword_FCD2]
		call	sub_1274
		push	0
		call	sub_11C2
		push	ds
		push	offset aScnum2_bft ; "scnum2.bft"
		call	sub_2684
		les	bx, dword_F3CE
		cmp	byte ptr es:[bx+11h], 6
		jnz	short loc_C87A
		mov	al, 4
		jmp	short loc_C882
; ---------------------------------------------------------------------------

loc_C87A:
		les	bx, dword_F3CE
		mov	al, es:[bx+0Fh]

loc_C882:
		mov	byte_125B7, al
		les	bx, dword_F3CE
		cmp	byte ptr es:[bx+12h], 31h ; '1'
		jnz	short loc_C895
		mov	ax, 1
		jmp	short loc_C897
; ---------------------------------------------------------------------------

loc_C895:
		xor	ax, ax

loc_C897:
		mov	byte ptr word_125B8, al
		mov	al, 1
		sub	al, byte ptr word_125B8
		push	ax
		call	sub_C2AD
		mov	al, byte ptr word_125B8
		mov	ah, 0
		mov	dx, 1
		sub	dx, ax
		push	dx
		call	sub_C7C9
		push	word_125B8
		call	sub_C2AD
		les	bx, dword_F3CE
		cmp	byte ptr es:[bx+49h], 0
		jnz	short loc_C8CB
		cmp	byte_125B7, 4
		jnz	short loc_C8D9

loc_C8CB:
		call	sub_C3B2
		mov	al, byte ptr word_125B8
		mov	ah, 0
		push	ax
		call	sub_C7C9
		jmp	short loc_C909
; ---------------------------------------------------------------------------

loc_C8D9:
		mov	byte_125B6, 0FFh
		mov	al, byte ptr word_125B8
		mov	ah, 0
		push	ax
		call	sub_C7C9
		push	large 7C00C4h
		push	9
		push	ds
		push	offset aGxgnbGvbGhvVGv ; "X[[hÅÌvCÅÍAXRAÍL"...
		call	far ptr	loc_D1FC
		push	large 7800C0h
		push	2
		push	ds
		push	offset aGxgnbGvbGhvV_1 ; "X[[hÅÌvCÅÍAXRAÍL"...
		call	far ptr	loc_D1FC

loc_C909:
		les	bx, dword_F3CE
		cmp	byte ptr es:[bx+30h], 0FFh
		jz	short loc_C922
		cmp	byte ptr es:[bx+30h], 0FDh ; 'ý'
		jz	short loc_C922
		cmp	byte_125B7, 0
		jnz	short loc_C95E

loc_C922:
					; sub_C814+105j
		mov	al, byte_125A0
		mov	[bp+var_A], al
		cmp	[bp+var_A], 4
		jb	short loc_C944
		les	bx, dword_F3CE
		cmp	byte ptr es:[bx+19h], 0
		jnz	short loc_C93D
		mov	al, 1
		jmp	short loc_C93F
; ---------------------------------------------------------------------------

loc_C93D:
		mov	al, 2

loc_C93F:
		mov	[bp+var_A], al
		jmp	short loc_C958
; ---------------------------------------------------------------------------

loc_C944:
		les	bx, dword_F3CE
		cmp	byte ptr es:[bx+19h], 0
		jnz	short loc_C953
		mov	al, 1
		jmp	short loc_C955
; ---------------------------------------------------------------------------

loc_C953:
		mov	al, 2

loc_C955:
		or	[bp+var_A], al

loc_C958:
		mov	al, [bp+var_A]
		mov	byte_125A0, al

loc_C95E:
		push	100h
		call	sub_CF8C
		push	ds
		push	offset aName	; "name"
		push	600h
		call	sub_D112
		push	0
		call	sub_CF8C
		push	2
		call	sub_622
		cmp	byte_125B6, 0FFh
		jz	loc_CB7F
		mov	[bp+var_6], 0
		jmp	short loc_C9CB
; ---------------------------------------------------------------------------

loc_C990:
		mov	[bp+var_8], 0
		jmp	short loc_C9C2
; ---------------------------------------------------------------------------

loc_C997:
		mov	ax, [bp+var_8]
		add	ax, ax
		add	ax, 17h
		push	ax
		mov	ax, [bp+var_6]
		add	ax, 12h
		push	ax
		mov	bx, [bp+var_6]
		imul	bx, 11h
		add	bx, [bp+var_8]
		mov	al, [bx+82Ch]
		mov	ah, 0
		push	ax
		push	0E1h ; 'á'
		call	sub_FC4
		inc	[bp+var_8]

loc_C9C2:
		cmp	[bp+var_8], 11h
		jl	short loc_C997
		inc	[bp+var_6]

loc_C9CB:
		cmp	[bp+var_6], 3
		jl	short loc_C990
		push	large 170012h
		mov	al, byte_ED5C
		mov	ah, 0
		push	ax
		push	85h ; ''
		call	sub_FC4
		xor	di, di
		mov	[bp+var_2], 0
		call	far ptr	sub_D48A
		mov	[bp+var_4], 1

loc_C9F6:
		call	sub_D492
		cmp	[bp+var_4], 0
		jnz	loc_CB3B
		test	byte ptr word_10072, 0Fh
		jz	short loc_CA6A
		push	di
		push	[bp+var_2]
		push	0E1h ; 'á'
		call	sub_C7E3
		test	byte ptr word_10072, 1
		jz	short loc_CA1E
		dec	[bp+var_2]

loc_CA1E:
		test	byte ptr word_10072, 2
		jz	short loc_CA28
		inc	[bp+var_2]

loc_CA28:
		test	byte ptr word_10072, 4
		jz	short loc_CA30
		dec	di

loc_CA30:
		test	byte ptr word_10072, 8
		jz	short loc_CA38
		inc	di

loc_CA38:
		cmp	[bp+var_2], 0
		jge	short loc_CA45
		mov	[bp+var_2], 2
		jmp	short loc_CA50
; ---------------------------------------------------------------------------

loc_CA45:
		cmp	[bp+var_2], 2
		jle	short loc_CA50
		mov	[bp+var_2], 0

loc_CA50:
					; sub_C814+235j
		or	di, di
		jge	short loc_CA59
		mov	di, 10h
		jmp	short loc_CA60
; ---------------------------------------------------------------------------

loc_CA59:
		cmp	di, 10h
		jle	short loc_CA60
		xor	di, di

loc_CA60:
					; sub_C814+248j
		push	di
		push	[bp+var_2]
		push	85h ; ''
		call	sub_C7E3

loc_CA6A:
		test	byte ptr word_10072, 20h
		jnz	short loc_CA7A
		test	byte ptr word_10072+1, 20h
		jz	loc_CB03

loc_CA7A:
		mov	bx, [bp+var_2]
		imul	bx, 11h
		mov	al, [bx+di+82Ch]
		mov	[bp+var_A], al
		mov	ah, 0
		sub	ax, 0CDh ; 'Í'
		mov	bx, ax
		cmp	bx, 8
		ja	short loc_CABD
		add	bx, bx
		jmp	cs:off_CB9E[bx]

loc_CA9A:
		mov	[bp+var_A], 2
		jmp	short loc_CABD
; ---------------------------------------------------------------------------

loc_CAA0:
		mov	al, byte_125B6
		mov	ah, 0
		imul	ax, 9
		mov	bx, ax
		mov	byte ptr [bx+si+3FC6h],	2
		or	si, si
		jle	short loc_CAF5
		dec	si
		jmp	short loc_CAF5
; ---------------------------------------------------------------------------

loc_CAB6:
		cmp	si, 7
		jge	short loc_CAF5
		jmp	short loc_CAF4
; ---------------------------------------------------------------------------

loc_CABD:
					; sub_C814+281j ...
		mov	al, byte_125B6
		mov	ah, 0
		imul	ax, 9
		mov	dl, [bp+var_A]
		mov	bx, ax
		mov	[bx+si+3FC6h], dl
		cmp	si, 7
		jnz	short loc_CAEF
		push	di
		push	[bp+var_2]
		push	0E1h ; 'á'
		call	sub_C7E3
		mov	di, 10h
		mov	[bp+var_2], 2
		push	di
		push	[bp+var_2]
		push	85h ; ''
		call	sub_C7E3

loc_CAEF:
		cmp	si, 7
		jge	short loc_CAF5

loc_CAF4:
		inc	si

loc_CAF5:
					; sub_C814+2A0j ...
		mov	al, byte_125B6
		mov	ah, 0
		push	ax
		push	word_125B8
		push	si
		call	sub_C665

loc_CB03:
		test	byte ptr word_10072, 10h
		jz	short loc_CB2C
		mov	al, byte_125B6
		mov	ah, 0
		imul	ax, 9
		mov	bx, ax
		mov	byte ptr [bx+si+3FC6h],	2
		or	si, si
		jle	short loc_CB1E
		dec	si

loc_CB1E:
		mov	al, byte_125B6
		mov	ah, 0
		push	ax
		push	word_125B8
		push	si
		call	sub_C665

loc_CB2C:
		test	byte ptr word_10072+1, 10h
		jnz	short loc_CB7A
		mov	ax, word_10072
		mov	[bp+var_4], ax
		jmp	short loc_CB6B
; ---------------------------------------------------------------------------

loc_CB3B:
		mov	ax, word_10072
		cmp	ax, [bp+var_4]
		jnz	short loc_CB59
		inc	[bp+var_9]
		cmp	[bp+var_9], 1Eh
		jbe	short loc_CB6B
		test	[bp+var_9], 1
		jnz	short loc_CB6B
		mov	[bp+var_4], 0
		jmp	short loc_CB6B
; ---------------------------------------------------------------------------

loc_CB59:
		cmp	word_10072, 0
		jz	short loc_CB62
		jmp	short loc_CB67
; ---------------------------------------------------------------------------

loc_CB62:
		mov	[bp+var_4], 0

loc_CB67:
		mov	[bp+var_9], 0

loc_CB6B:
					; sub_C814+336j ...
		call	far ptr	sub_D48A
		push	1
		call	sub_CCA3
		jmp	loc_C9F6
; ---------------------------------------------------------------------------

loc_CB7A:
					; sub_C814+31Dj
		call	sub_C316
		jmp	short loc_CB89
; ---------------------------------------------------------------------------

loc_CB7F:
		call	sub_C316
		push	0
		call	sub_CE7A

loc_CB89:
		call	sub_2520
		call	sub_20FA
		push	1
		call	sub_666
		pop	di
		pop	si
		leave
		retn
sub_C814	endp

; ---------------------------------------------------------------------------
off_CB9E	dw offset loc_CA9A
		dw offset loc_CAA0
		dw offset loc_CAB6
		dw offset loc_CABD
		dw offset loc_CABD
		dw offset loc_CABD
		dw offset loc_CABD
		dw offset loc_CABD
		dw offset loc_CB7A

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_CBB0	proc near
		push	bp
		mov	bp, sp
		mov	al, 0
		out	7Ch, al
		mov	al, 7
		out	6Ah, al		; PC-98	GDC (6a):
					;
		mov	al, 5
		out	6Ah, al		; PC-98	GDC (6a):
					;
		mov	al, 80h	; ''
		out	7Ch, al
		mov	al, 6
		out	6Ah, al		; PC-98	GDC (6a):
					;
		mov	ax, 0FFF0h
		mov	dx, 4A0h
		out	dx, ax
		mov	ax, 0FFh
		mov	dx, 4A2h
		out	dx, ax
		mov	ax, 3100h
		mov	dx, 4A4h
		out	dx, ax
		mov	ax, 0FFFFh
		mov	dx, 4A8h
		out	dx, ax
		mov	ax, 0
		mov	dx, 4ACh
		out	dx, ax
		mov	ax, 0Fh
		mov	dx, 4AEh
		out	dx, ax
		pop	bp
		retn
sub_CBB0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_CBF3	proc near

var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  4
arg_2		= word ptr  6
arg_4		= word ptr  8
arg_6		= word ptr  0Ah

		enter	8, 0
		push	si
		push	di
		mov	di, [bp+arg_2]
		call	sub_CBB0
		mov	ax, [bp+arg_6]
		sar	ax, 3
		mov	dx, [bp+arg_4]
		shl	dx, 6
		add	ax, dx
		mov	dx, [bp+arg_4]
		shl	dx, 4
		add	ax, dx
		mov	[bp+var_6], ax
		mov	bx, 10h
		mov	ax, di
		cwd
		idiv	bx
		mov	di, ax
		mov	[bp+var_4], 0
		jmp	short loc_CC66
; ---------------------------------------------------------------------------

loc_CC29:
		mov	[bp+var_2], 0
		mov	si, [bp+var_6]
		jmp	short loc_CC5A
; ---------------------------------------------------------------------------

loc_CC33:
		mov	dx, 0A6h ; '¦'
		mov	al, 1
		out	dx, al		; Interrupt Controller #2, 8259A
		les	bx, dword_FC3C
		add	bx, si
		mov	ax, es:[bx]
		mov	[bp+var_8], ax
		mov	al, 0
		out	dx, al		; Interrupt Controller #2, 8259A
		mov	bx, word ptr dword_FC3C
		add	bx, si
		mov	ax, [bp+var_8]
		mov	es:[bx], ax
		inc	[bp+var_2]
		add	si, 2

loc_CC5A:
		cmp	[bp+var_2], di
		jl	short loc_CC33
		inc	[bp+var_4]
		add	[bp+var_6], 50h	; 'P'

loc_CC66:
		mov	ax, [bp+var_4]
		cmp	ax, [bp+arg_0]
		jl	short loc_CC29
		call	sub_85C
		pop	di
		pop	si
		leave
		retn	8
sub_CBF3	endp

seg001		ends

; ===========================================================================

; Segment type:	Pure code
seg002		segment	byte public 'CODE' use16
		assume cs:seg002
		;org 9
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing
		db    0

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_CC7A	proc far
		push	bp
		mov	bp, sp
		mov	dword_FC3C, 0A8000000h
		mov	dword_FC40, 0B0000000h
		mov	dword_FC44, 0B8000000h
		mov	dword_FC48, 0E0000000h
		pop	bp
		retf
sub_CC7A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_CCA3	proc far

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		mov	word_F42A, 0

loc_CCAC:
		mov	ax, word_F42A
		cmp	ax, [bp+arg_0]
		jb	short loc_CCAC
		pop	bp
		retf	2
sub_CCA3	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_CCB8	proc far

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		push	30h ; '0'       ; n
		push	ds
		mov	ax, [bp+arg_0]
		imul	ax, 48h
		add	ax, 17D2h
		push	ax		; src
		push	ds
		push	offset unk_F3FA	; dest
		call	_memcpy
		add	sp, 0Ah
		call	far ptr	loc_19EC
		pop	bp
		retf	2
sub_CCB8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_CCDD	proc far

var_6		= word ptr -6
var_4		= dword	ptr -4
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

		enter	6, 0
		push	si
		push	di
		mov	si, [bp+arg_2]
		mov	di, [bp+arg_0]
		mov	bx, di
		shl	bx, 2
		mov	ax, [bx+17A4h]
		mov	dx, [bx+17A2h]
		mov	word ptr [bp+var_4+2], ax
		mov	word ptr [bp+var_4], dx
		mov	[bp+var_6], 0
		jmp	short loc_CD51
; ---------------------------------------------------------------------------

loc_CD03:
		push	[bp+arg_4]
		push	si
		push	large [bp+var_4]
		mov	bx, di
		imul	bx, 48h
		push	word ptr [bx+17CEh]
		call	sub_18BA
		inc	si
		cmp	si, 190h
		jl	short loc_CD24
		sub	si, 190h

loc_CD24:
		mov	bx, di
		imul	bx, 48h
		mov	ax, [bx+17CEh]
		shr	ax, 1
		add	word ptr [bp+var_4], ax
		mov	eax, [bp+var_4]
		shr	eax, 10h
		mov	dx, word ptr [bp+var_4]
		shr	dx, 4
		add	ax, dx
		mov	dx, word ptr [bp+var_4]
		and	dx, 0Fh
		mov	word ptr [bp+var_4+2], ax
		mov	word ptr [bp+var_4], dx
		inc	[bp+var_6]

loc_CD51:
		mov	bx, di
		imul	bx, 48h
		mov	ax, [bx+17D0h]
		cmp	ax, [bp+var_6]
		ja	short loc_CD03
		pop	di
		pop	si
		leave
		retf	6
sub_CCDD	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_CD65	proc far

var_2		= word ptr -2
arg_0		= dword	ptr  6
arg_4		= word ptr  0Ah

		enter	2, 0
		push	si
		mov	si, [bp+arg_4]
		mov	ax, si
		imul	ax, 48h
		add	ax, 17BAh
		push	ds
		push	ax
		mov	bx, si
		shl	bx, 2
		push	large dword ptr	[bx+17A2h]
		call	sub_1274
		push	large [bp+arg_0]
		mov	ax, si
		imul	ax, 48h
		add	ax, 17BAh
		push	ds
		push	ax
		mov	ax, si
		shl	ax, 2
		add	ax, 17A2h
		push	ds
		push	ax
		call	sub_12CC
		mov	[bp+var_2], ax
		pop	si
		leave
		retf	6
sub_CD65	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_CDAB	proc far

var_6		= word ptr -6
var_4		= dword	ptr -4
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

		enter	6, 0
		push	si
		push	di
		mov	si, [bp+arg_4]
		mov	di, [bp+arg_0]
		mov	bx, [bp+arg_2]
		shl	bx, 2
		mov	ax, [bx+17A4h]
		mov	dx, [bx+17A2h]
		mov	word ptr [bp+var_4+2], ax
		mov	word ptr [bp+var_4], dx
		cmp	di, 1
		jnz	short loc_CDD7
		add	word ptr [bp+var_4], 0A0h ; ' '
		jmp	short loc_CDED
; ---------------------------------------------------------------------------

loc_CDD7:
		cmp	di, 2
		jnz	short loc_CDE3
		add	word ptr [bp+var_4], 0FA00h
		jmp	short loc_CDED
; ---------------------------------------------------------------------------

loc_CDE3:
		cmp	di, 3
		jnz	short loc_CDED
		add	word ptr [bp+var_4], 0FAA0h

loc_CDED:
		mov	eax, [bp+var_4]
		shr	eax, 10h
		mov	dx, word ptr [bp+var_4]
		shr	dx, 4
		add	ax, dx
		mov	dx, word ptr [bp+var_4]
		and	dx, 0Fh
		mov	word ptr [bp+var_4+2], ax
		mov	word ptr [bp+var_4], dx
		mov	[bp+var_6], 0
		jmp	short loc_CE4F
; ---------------------------------------------------------------------------

loc_CE10:
		push	[bp+arg_6]
		push	si
		push	large [bp+var_4]
		push	140h
		call	sub_18BA
		inc	si
		cmp	si, 190h
		jl	short loc_CE2B
		sub	si, 190h

loc_CE2B:
		add	word ptr [bp+var_4], 140h
		mov	eax, [bp+var_4]
		shr	eax, 10h
		mov	dx, word ptr [bp+var_4]
		shr	dx, 4
		add	ax, dx
		mov	dx, word ptr [bp+var_4]
		and	dx, 0Fh
		mov	word ptr [bp+var_4+2], ax
		mov	word ptr [bp+var_4], dx
		inc	[bp+var_6]

loc_CE4F:
		cmp	[bp+var_6], 0C8h ; 'È'
		jl	short loc_CE10
		pop	di
		pop	si
		leave
		retf	8
sub_CDAB	endp

; ---------------------------------------------------------------------------
		push	di
		xor	ax, ax
		mov	di, 196Ah
		xor	dl, dl
		jmp	short loc_CE71
; ---------------------------------------------------------------------------

loc_CE66:
		xor	dl, dl
		mov	cx, 8

loc_CE6B:
		rol	al, 1
		rcr	dl, 1
		loop	loc_CE6B

loc_CE71:
		mov	[di], dl
		inc	di
		inc	al
		jnz	short loc_CE66
		pop	di
		retf

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_CE7A	proc far

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	si, [bp+arg_0]
		xor	di, di

loc_CE84:
		nop
		push	cs
		call	sub_D48A
		push	1
		nop
		push	cs
		call	near ptr sub_CCA3
		nop
		push	cs
		call	near ptr sub_D492
		cmp	word_10072, 0
		jnz	short loc_CE84
		or	si, si
		jnz	short loc_CEC6
		mov	si, 270Fh
		jmp	short loc_CEC6
; ---------------------------------------------------------------------------

loc_CEA5:
		nop
		push	cs
		call	sub_D48A
		push	1
		nop
		push	cs
		call	near ptr sub_CCA3
		nop
		push	cs
		call	near ptr sub_D492
		cmp	word_10072, 0
		jnz	short loc_CECA
		inc	di
		cmp	si, 270Fh
		jnz	short loc_CEC6
		xor	di, di

loc_CEC6:
		cmp	di, si
		jl	short loc_CEA5

loc_CECA:
		pop	di
		pop	si
		pop	bp
		retf	2
sub_CE7A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_CED0	proc far

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		movsx	eax, [bp+arg_2]
		movsx	edx, [bp+arg_0]
		imul	eax, edx
		sar	eax, 8
		add	ax, [bp+arg_4]
		pop	bp
		retf	6
sub_CED0	endp

; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp
		push	si
		mov	si, [bp+0Eh]
		mov	bx, [bp+6]
		add	bx, bx
		movsx	eax, word ptr [bp+8]
		movsx	edx, word ptr [bx+1F4h]
		imul	eax, edx
		sar	eax, 8
		add	ax, [bp+0Ch]
		mov	[si], ax
		movsx	eax, word ptr [bp+8]
		movsx	edx, word ptr [bx+174h]
		imul	eax, edx
		sar	eax, 8
		add	ax, [bp+0Ah]
		mov	[si+2],	ax
		pop	si
		pop	bp
		retf	0Ah

; =============== S U B	R O U T	I N E =======================================


sub_CF2E	proc far
		xor	ax, ax
		mov	byte_FF9A, 60h ; '`'
		mov	byte_EAD2, al
		mov	byte_EAD1, al
		mov	byte_EAD0, al
		mov	es, ax
		assume es:seg000
		les	bx, dword ptr es:loc_17E+2
		assume es:nothing
		cmp	byte ptr es:[bx+2], 50h	; 'P'
		jnz	short locret_CF5B
		cmp	byte ptr es:[bx+3], 4Dh	; 'M'
		jnz	short locret_CF5B
		cmp	byte ptr es:[bx+4], 44h	; 'D'
		jnz	short locret_CF5B
		inc	ax

locret_CF5B:
		retf
sub_CF2E	endp


; =============== S U B	R O U T	I N E =======================================


sub_CF5C	proc far
		xor	ax, ax
		mov	es, ax
		assume es:seg000
		les	bx, dword ptr es:loc_182+2
		assume es:nothing
		cmp	byte ptr es:[bx+2], 4Dh	; 'M'
		jnz	short loc_CF88
		cmp	byte ptr es:[bx+3], 4Dh	; 'M'
		jnz	short loc_CF88
		cmp	byte ptr es:[bx+4], 44h	; 'D'
		jnz	short loc_CF88
		mov	byte_FF9A, 61h ; 'a'
		mov	byte_EAD2, 1
		mov	ax, 1
		retf
; ---------------------------------------------------------------------------

loc_CF88:
		xor	ax, ax
		retf
sub_CF5C	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_CF8C	proc far

arg_0		= word ptr  6

		push	bp
		mov	bp, sp
		cmp	byte_EAD1, 0
		jz	short loc_CFA6
		mov	ax, [bp+arg_0]
		cmp	byte_EAD1, 3
		jz	short loc_CFA4
		int	60h
		jmp	short loc_CFA6
; ---------------------------------------------------------------------------

loc_CFA4:
		int	61h		; reserved for user interrupt

loc_CFA6:
		pop	bp
		retf	2
sub_CF8C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_CFAA	proc far

arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	si, [bp+arg_2]
		mov	di, [bp+arg_0]
		nop
		push	cs
		call	near ptr sub_CF2E
		cmp	si, 3
		jnz	short loc_CFC4
		nop
		push	cs
		call	near ptr sub_CF5C

loc_CFC4:
		mov	ah, 9
		int	60h
		cmp	al, 0FFh
		jnz	short loc_CFD3
		mov	byte_EAD1, 0
		jmp	short loc_CFE3
; ---------------------------------------------------------------------------

loc_CFD3:
		or	al, al
		jnz	short loc_CFDE
		mov	byte_EAD1, 1
		jmp	short loc_CFE3
; ---------------------------------------------------------------------------

loc_CFDE:
		mov	byte_EAD1, 2

loc_CFE3:
		cmp	di, 1
		jnz	short loc_CFFB
		cmp	byte_EAD1, 0
		jz	short loc_CFF4
		mov	ax, 1
		jmp	short loc_CFF6
; ---------------------------------------------------------------------------

loc_CFF4:
		xor	ax, ax

loc_CFF6:
		mov	byte_EAD0, al
		jmp	short loc_D00C
; ---------------------------------------------------------------------------

loc_CFFB:
		cmp	di, 2
		jnz	short loc_D007
		mov	byte_EAD0, 2
		jmp	short loc_D00C
; ---------------------------------------------------------------------------

loc_D007:
		mov	byte_EAD0, 0

loc_D00C:
		or	si, si
		jnz	short loc_D017
		mov	byte_EAD1, 0
		jmp	short loc_D03B
; ---------------------------------------------------------------------------

loc_D017:
		cmp	si, 3
		jnz	short loc_D02A
		cmp	byte_EAD2, 0
		jz	short loc_D02A
		mov	byte_EAD1, 3
		jmp	short loc_D03B
; ---------------------------------------------------------------------------

loc_D02A:
		cmp	si, 1
		jnz	short loc_D03B
		cmp	byte_EAD1, 0
		jz	short loc_D03B
		mov	byte_EAD1, 1

loc_D03B:
		mov	al, byte_EAD1
		mov	ah, 0
		pop	di
		pop	si
		pop	bp
		retf	4
sub_CFAA	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_D046	proc far
					; sub_B44D+8CP	...

arg_0		= word ptr  6
arg_2		= word ptr  8

		push	bp
		mov	bp, sp
		cmp	byte_EAD1, 0
		jnz	short loc_D05C
		push	[bp+arg_0]
		nop
		push	cs
		call	near ptr sub_CCA3
		pop	bp
		retf	4
; ---------------------------------------------------------------------------

loc_D05C:
		mov	ah, 5
		cmp	byte_EAD1, 3
		jz	short loc_D069
		int	60h		; - FTP	Packet Driver -	BASIC FUNC - TERMINATE DRIVER FOR HANDLE
					; BX = handle
					; Return: CF set on error, DH =	error code
					; CF clear if successful
		jmp	short loc_D06E
; ---------------------------------------------------------------------------

loc_D069:
		mov	dx, 0C0h ; 'À'
		int	61h		; reserved for user interrupt

loc_D06E:
		cmp	ax, [bp+arg_2]
		jb	short loc_D05C
		pop	bp
		retf	4
sub_D046	endp

; ---------------------------------------------------------------------------
		db    0
; ---------------------------------------------------------------------------

loc_D078:
		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	si, [bp+8]
		shl	si, 4
		add	si, 1B46h
		mov	cx, [bp+0Ch]
		mov	di, cx
		sar	di, 4
		shl	di, 1
		add	di, [si+6]
		mov	ax, [si+8]
		shl	ax, 1
		mov	cs:byte_D0DD, al
		and	cx, 0Fh
		mov	bx, cx
		shl	bx, 1
		mov	bx, [bx+580h]
		mov	cs:word_D0E4, bx
		mov	cs:word_D0F1, bx
		jmp	short $+2
		shl	ax, 1
		add	ax, 50h	; 'P'
		mov	dx, ax
		mov	ax, [bp+0Ah]
		mov	bx, ax
		shl	ax, 2
		add	ax, bx
		add	ax, 0A800h
		mov	es, ax
		push	ds
		mov	ax, [si+0Eh]
		mov	si, [si]
		mov	ds, ax
		mov	ax, [bp+6]
		mov	bp, dx
		mul	si
		mov	si, ax
		cld
; ---------------------------------------------------------------------------
		db 0B5h
byte_D0DD	db 80h
		db 0ADh, 0D3h, 0C8h, 8Bh, 0D0h,	25h
word_D0E4	dw 1234h
		db 33h,	0D0h, 0ABh, 0FEh, 0CDh,	0ADh, 0D3h, 0C8h, 8Bh
		db 0D8h, 25h
word_D0F1	dw 1234h
		db 33h,	0D8h, 0Bh, 0C2h, 8Bh, 0D3h, 0ABh, 0FEh,	0CDh, 75h
		db 0EDh, 0Bh, 0D2h, 74h, 5, 26h, 89h, 15h, 33h,	0D2h, 2Bh
		db 0FDh, 79h, 0D1h, 1Fh, 5Fh, 5Eh, 5Dh,	0CAh, 8, 0

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_D112	proc far
					; sub_B44D+59P	...

arg_0		= word ptr  6
arg_2		= dword	ptr  8

		push	bp
		mov	bp, sp
		push	si
		xor	si, si
		jmp	short loc_D127
; ---------------------------------------------------------------------------

loc_D11A:
		les	bx, [bp+arg_2]
		add	bx, si
		mov	al, es:[bx]
		mov	[si+1B32h], al
		inc	si

loc_D127:
		cmp	si, 0Dh
		jl	short loc_D11A
		xor	si, si

loc_D12E:
		inc	si
		cmp	byte ptr [si+1B32h], 0
		jnz	short loc_D12E
		mov	byte ptr [si+1B36h], 0
		mov	byte ptr [si+1B32h], 2Eh ; '.'
		inc	si
		cmp	[bp+arg_0], 0B00h
		jnz	short loc_D17A
		mov	byte ptr [si+1B32h], 65h ; 'e'
		mov	byte ptr [si+1B33h], 66h ; 'f'
		cmp	byte_EAD0, 0
		jz	loc_D1F7
		cmp	byte_EAD0, 2
		jnz	short loc_D173
		mov	byte ptr [si+1B34h], 73h ; 's'
		push	ds
		push	offset unk_10062
		call	sub_2E94
		jmp	loc_D1F7
; ---------------------------------------------------------------------------

loc_D173:
		mov	byte ptr [si+1B34h], 63h ; 'c'
		jmp	short loc_D1CA
; ---------------------------------------------------------------------------

loc_D17A:
		cmp	byte_EAD1, 0
		jz	short loc_D1F7
		push	100h
		nop
		push	cs
		call	near ptr sub_CF8C
		mov	al, byte_EAD1
		mov	ah, 0
		shl	ax, 2
		mov	bx, ax
		les	bx, [bx+5A4h]
		mov	al, es:[bx]
		mov	[si+1B32h], al
		mov	al, byte_EAD1
		mov	ah, 0
		shl	ax, 2
		mov	bx, ax
		les	bx, [bx+5A4h]
		mov	al, es:[bx+1]
		mov	[si+1B33h], al
		mov	al, byte_EAD1
		mov	ah, 0
		shl	ax, 2
		mov	bx, ax
		les	bx, [bx+5A4h]
		mov	al, es:[bx+2]
		mov	[si+1B34h], al

loc_D1CA:
		push	ds
		mov	dx, 1B32h
		mov	ax, 3D00h
		int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
					; DS:DX	-> ASCIZ filename
					; AL = access mode
					; 0 - read
		mov	bx, ax
		mov	ax, [bp+arg_0]
		cmp	ah, 6
		jnz	short loc_D1E8
		cmp	byte_EAD1, 3
		jnz	short loc_D1E8
		int	61h		; reserved for user interrupt
		jmp	short loc_D1EA
; ---------------------------------------------------------------------------

loc_D1E8:
		int	60h

loc_D1EA:
		mov	ax, 3F00h
		mov	cx, 5000h
		int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
					; BX = file handle, CX = number	of bytes to read
					; DS:DX	-> buffer
		pop	ds
		mov	ah, 3Eh
		int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
					; BX = file handle

loc_D1F7:
		pop	si
		pop	bp
		retf	6
sub_D112	endp

; ---------------------------------------------------------------------------

loc_D1FC:
		push	bp
		mov	bp, sp
		push	si
		push	di
		push	ds
		mov	dx, [bp+0Ah]
		mov	al, 0C0h ; 'À'
		pushf
		cli
		out	7Ch, al
		popf
		shr	dx, 1
		sbb	al, al
		out	7Eh, al
		shr	dx, 1
		sbb	al, al
		out	7Eh, al
		shr	dx, 1
		sbb	al, al
		out	7Eh, al
		shr	dx, 1
		sbb	al, al
		out	7Eh, al
		mov	ax, 0A800h
		mov	es, ax
		assume es:nothing
		mov	dx, [bp+0Ch]
		shl	dx, 6
		mov	di, dx
		shr	dx, 2
		add	di, dx
		mov	cx, [bp+0Eh]
		mov	al, 0Bh
		out	68h, al
		mov	bx, word_EB2C
		add	bx, bx
		cmp	bx, 8
		jb	short loc_D258
		cmp	bx, 10h
		jnb	short loc_D258
		mov	ax, [bx+5CCh]
		mov	word ptr cs:loc_D350+3,	ax
		mov	bx, 8

loc_D258:
		mov	ax, [bx+5C0h]
		mov	cs:word_D2BB, ax
		mov	ax, [bx+5CAh]
		mov	word ptr cs:loc_D30C+1,	ax
		mov	ax, word_EB2E
		mov	cs:word_D2DA, ax
		mov	word ptr cs:loc_D320+1,	ax
		push	ds
		pop	fs
		assume fs:dseg
		lds	si, [bp+6]
		lodsb
		or	al, al
		jz	short loc_D2E5

loc_D27E:
		mov	dx, cx
		shr	dx, 3
		add	di, dx
		and	cx, 7
		mov	ah, 9
		test	al, 0E0h
		jns	short loc_D2F7
		jp	short loc_D2F4
		mov	ah, al
		lodsb
		shl	ah, 1
		cmp	al, 9Fh	; ''
		jnb	short loc_D29E
		cmp	al, 80h	; ''
		adc	ax, 0FEDFh

loc_D29E:
		sbb	al, 0FEh ; 'þ'
		and	ax, 7F7Fh
		out	0A1h, al	; Interrupt Controller #2, 8259A
		mov	al, ah
		out	0A3h, al	; Interrupt Controller #2, 8259A
		nop
		mov	al, ch
		or	al, 20h
		out	0A5h, al	; Interrupt Controller #2, 8259A
		in	al, 0A9h	; Interrupt Controller #2, 8259A
		mov	ah, al
		mov	al, ch
		out	0A5h, al	; Interrupt Controller #2, 8259A
		in	al, 0A9h	; Interrupt Controller #2, 8259A
; ---------------------------------------------------------------------------
		db 0E8h
word_D2BB	dw 78h
		db 8Ah,	0F8h, 0B3h, 0, 0D3h, 0E8h, 0D3h, 0EBh, 86h, 0E0h
		db 0ABh, 26h, 88h, 1Dh,	83h, 0C7h, 4Eh,	0FEh, 0C5h, 80h
		db 0FDh, 10h, 72h, 0D5h, 81h, 0EFh, 0, 5, 0BAh
word_D2DA	dw 1234h
; ---------------------------------------------------------------------------

loc_D2DC:
		xor	ch, ch
		add	cx, dx
		lodsb
		or	al, al
		jnz	short loc_D27E

loc_D2E5:
		mov	al, 0Ah
		out	68h, al
		xor	al, al
		out	7Ch, al
		pop	ds
		pop	di
		pop	si
		pop	bp
		retf	0Ah
; ---------------------------------------------------------------------------

loc_D2F4:
		add	ax, 80h	; ''

loc_D2F7:
		cmp	al, 20h	; ' '
		jz	short loc_D320
		out	0A1h, al	; Interrupt Controller #2, 8259A
		mov	al, ah
		out	0A3h, al	; Interrupt Controller #2, 8259A
		nop

loc_D302:
		mov	al, ch
		or	al, 20h
		out	0A5h, al	; Interrupt Controller #2, 8259A
		in	al, 0A9h	; Interrupt Controller #2, 8259A
		xor	ah, ah

loc_D30C:
		call	sub_D335
		ror	ax, cl
		stosw
		add	di, 4Eh	; 'N'
		inc	ch
		cmp	ch, 10h
		jb	short loc_D302
		sub	di, 500h

loc_D320:
		mov	dx, 1234h
		shr	dx, 1
		jmp	short loc_D2DC
; ---------------------------------------------------------------------------
		nop
		mov	dx, ax
		add	dx, dx
		or	ax, dx
		retn
; ---------------------------------------------------------------------------
		mov	dx, ax
		shl	dx, 1
		or	ax, dx

; =============== S U B	R O U T	I N E =======================================


sub_D335	proc near
					; seg002:06D6p
		mov	dx, ax
		mov	bp, ax
		add	bp, bp
		or	ax, bp
		xor	dx, ax
		add	dx, dx
		not	dx
		and	ax, dx
		retn
sub_D335	endp

; ---------------------------------------------------------------------------
		call	sub_D335
		mov	bl, ch
		and	bx, 3
		add	bx, bx

loc_D350:
		and	ax, fs:[bx+1234h]
		retn
; ---------------------------------------------------------------------------

loc_D356:
		push	bp
		mov	bp, sp
		push	si
		push	di
		push	ds
		cli
		mov	al, 0C0h ; 'À'
		out	7Ch, al
		mov	dx, 7Eh	; '~'
		xor	al, al
		out	dx, al
		out	dx, al
		out	dx, al
		out	dx, al
		sti
		mov	si, [bp+6]
		shl	si, 4
		add	si, 1B46h
		mov	ax, [si+0Eh]
		mov	cs:word_D3CE, ax
		jmp	short $+2
		mov	ax, [bp+8]
		mov	bx, ax
		shl	ax, 2
		add	ax, bx
		add	ax, 0A800h
		mov	es, ax
		assume es:nothing
		push	0
		add	ax, 3800h
		push	ax
		sub	ax, 2800h
		push	ax
		sub	ax, 800h
		push	ax
		mov	ax, [bp+0Ah]
		shr	ax, 3
		add	ax, [si+6]
		mov	di, ax
		mov	bx, ax
		mov	ax, [si+8]
		mov	bp, ax
		shl	ax, 2
		add	ax, 50h	; 'P'
		mov	dx, ax
		mov	ax, [si+0Ch]
		mov	ds, ax
		xor	si, si
		cld
		nop

loc_D3BE:
		mov	cx, bp
		rep movsd
		sub	di, dx
		jns	short loc_D3BE
		xor	al, al
		out	7Ch, al
		xor	si, si
; ---------------------------------------------------------------------------
		db 0B8h
word_D3CE	dw 1234h
; ---------------------------------------------------------------------------
		mov	ds, ax

loc_D3D2:
		mov	di, bx

loc_D3D4:
		mov	cx, bp

loc_D3D6:
		lodsd
		or	es:[di], eax
		add	di, 4
		loop	loc_D3D6
		sub	di, dx
		jns	short loc_D3D4
		pop	ax
		mov	es, ax
		or	ax, ax
		jnz	short loc_D3D2
		pop	ds
		pop	di
		pop	si
		pop	bp
		retf	6
; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_D3F4	proc far
		push	bp
		mov	bp, sp
		call	sub_29D2
		mov	dx, 0A6h ; '¦'
		mov	al, 1
		out	dx, al		; Interrupt Controller #2, 8259A
		call	sub_1188
		mov	dx, 0A6h ; '¦'
		mov	al, 0
		out	dx, al		; Interrupt Controller #2, 8259A
		call	sub_1188
		mov	dx, 0A6h ; '¦'
		mov	al, 0
		out	dx, al		; Interrupt Controller #2, 8259A
		mov	dx, 0A4h ; '¤'
		out	dx, al		; Interrupt Controller #2, 8259A
		call	sub_24FC
		call	sub_21BE
		call	sub_20FA
		call	sub_19E6
		call	sub_87C
		call	sub_3574
		pop	bp
		retf
sub_D3F4	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_D43C	proc far

arg_0		= dword	ptr  6

		push	bp
		mov	bp, sp
		push	word_10070
		call	sub_22E0
		or	ax, ax
		jz	short loc_D453
		mov	ax, 1
		pop	bp
		retf	4
; ---------------------------------------------------------------------------

loc_D453:
		mov	word_E69A, 1000h
		nop
		push	cs
		call	near ptr sub_CC7A
		call	sub_2110
		call	sub_87C
		call	sub_113A
		call	sub_2B6E
		push	large [bp+arg_0]
		call	sub_2916
		push	800h
		call	sub_33D0
		xor	ax, ax
		pop	bp
		retf	4
sub_D43C	endp

; ---------------------------------------------------------------------------
		db    0

; =============== S U B	R O U T	I N E =======================================


sub_D48A	proc near
					; sub_C814+1D8P ...
		xor	ax, ax
		mov	word_10072, ax
		mov	word_F3F6, ax
sub_D48A	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


sub_D492	proc far
					; sub_CE7A+18p	...
		xor	ax, ax
		mov	es, ax
		assume es:seg000
		mov	ah, es:byte_531
		test	ah, 4
		jz	short loc_D4A5
		or	word_10072, 1

loc_D4A5:
		test	ah, 20h
		jz	short loc_D4AF
		or	word_10072, 2

loc_D4AF:
		test	ah, 8
		jz	short loc_D4B9
		or	word_10072, 4

loc_D4B9:
		test	ah, 10h
		jz	short loc_D4C3
		or	word_10072, 8

loc_D4C3:
		mov	ah, es:byte_533
		test	ah, 1
		jz	short loc_D4D2
		or	word_10072, 8

loc_D4D2:
		test	ah, 4
		jz	short loc_D4DD
		or	word_10072, 400h

loc_D4DD:
		test	ah, 8
		jz	short loc_D4E7
		or	word_10072, 2

loc_D4E7:
		test	ah, 10h
		jz	short loc_D4F2
		or	word_10072, 800h

loc_D4F2:
		mov	ah, es:byte_532
		test	ah, 40h
		jz	short loc_D501
		or	word_10072, 4

loc_D501:
		test	ah, 4
		jz	short loc_D50C
		or	word_10072, 100h

loc_D50C:
		test	ah, 8
		jz	short loc_D516
		or	word_10072, 1

loc_D516:
		test	ah, 10h
		jz	short loc_D521
		or	word_10072, 200h

loc_D521:
		mov	ah, es:byte_52F
		test	ah, 2
		jz	short loc_D530
		or	word_10072, 20h

loc_D530:
		test	ah, 4
		jz	short loc_D53A
		or	word_10072, 10h

loc_D53A:
		mov	ah, es:byte_52C
		test	ah, 1
		jz	short loc_D54A
		or	word_10072, 4000h

loc_D54A:
		mov	ah, es:byte_52A
		test	ah, 1
		jz	short loc_D55A
		or	word_10072, 1000h

loc_D55A:
		mov	ah, es:byte_52D
		test	ah, 10h
		jz	short loc_D56A
		or	word_10072, 2000h

loc_D56A:
		mov	ah, es:byte_530
		test	ah, 10h
		jz	short loc_D579
		or	word_10072, 20h

loc_D579:
		mov	ah, 2
		int	18h		; TRANSFER TO ROM BASIC
					; causes transfer to ROM-based BASIC (IBM-PC)
					; often	reboots	a compatible; often has	no effect at all
		and	al, 1
		mov	byte_10074, al
		cmp	word_E658, 0
		jz	short locret_D592
		call	sub_2CFC
		or	word_10072, ax

locret_D592:
		retf
sub_D492	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_D594	proc far
		mov	byte_EB31, 0
		mov	byte_EB30, 0FFh
		retf
sub_D594	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_D5A0	proc far
		mov	bx, sp
		mov	dx, ss:[bx+4]
		cmp	byte_EAD0, 0
		jz	short locret_D5D6
		cmp	byte_EB30, 0FFh
		jnz	short loc_D5BB
		mov	byte_EB30, dl
		retf	2
; ---------------------------------------------------------------------------

loc_D5BB:
		mov	bl, byte_EB30
		xor	bh, bh
		mov	al, [bx+55Eh]
		mov	bx, dx
		cmp	al, [bx+55Eh]
		ja	short locret_D5D6
		mov	byte_EB30, dl
		mov	byte_EB31, 0

locret_D5D6:
		retf	2
sub_D5A0	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_D5DA	proc far
		cmp	byte_EAD0, 0
		jz	short locret_D625
		cmp	byte_EB30, 0FFh
		jz	short locret_D625
		cmp	byte_EB31, 0
		jnz	short loc_D607
		mov	al, byte_EB30
		cmp	byte_EAD0, 2
		jz	short loc_D5FF
		mov	ah, 0Ch
		int	60h		; - Banyan VINES, 3com - GET STATION ADDRESS
					; Return: AL = status, 00h successful, ES:SI ->	6-byte station address
					; 02h semaphore	service	is unavailable
		jmp	short loc_D607
; ---------------------------------------------------------------------------

loc_D5FF:
		xor	ah, ah
		push	ax
		call	sub_32C6

loc_D607:
		inc	byte_EB31
		mov	bl, byte_EB30
		xor	bh, bh
		mov	al, [bx+56Fh]
		cmp	al, byte_EB31
		jnb	short locret_D625
		mov	byte_EB31, 0
		mov	byte_EB30, 0FFh

locret_D625:
		retf
sub_D5DA	endp


; =============== S U B	R O U T	I N E =======================================


sub_D626	proc far
					; sub_B44D+189P
		push	si
		push	di
		cmp	word_EB32, 0
		jnz	short loc_D65B
		push	7D00h
		call	sub_2350
		mov	word_EB32, ax
		push	7D00h
		call	sub_2350
		mov	word_EB34, ax
		push	7D00h
		call	sub_2350
		mov	word_EB36, ax
		push	7D00h
		call	sub_2350
		mov	word_EB38, ax

loc_D65B:
		mov	dl, 4
		push	ds
		push	0E000h
		push	word_EB38
		push	0B800h
		push	word_EB36
		push	0B000h
		push	word_EB34
		push	0A800h
		push	word_EB32

loc_D67A:
		pop	es
		assume es:nothing
		pop	ds
		xor	si, si
		xor	di, di
		mov	cx, 1F40h
		rep movsd
		dec	dl
		jnz	short loc_D67A
		pop	ds
		pop	di
		pop	si
		retf
sub_D626	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		push	si
		push	di
		mov	dl, 4
		push	ds
		push	0E000h
		push	word_EB38
		push	0B800h
		push	word_EB36
		push	0B000h
		push	word_EB34
		push	0A800h
		push	word_EB32

loc_D6AF:
		pop	ds
		pop	es
		xor	si, si
		xor	di, di
		mov	cx, 1F40h
		rep movsd
		dec	dl
		jnz	short loc_D6AF
		pop	ds
		pop	di
		pop	si
		retf
; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_D6C4	proc far
		cmp	word_EB32, 0
		jz	short locret_D6F5
		push	word_EB32
		call	sub_2454
		push	word_EB34
		call	sub_2454
		push	word_EB36
		call	sub_2454
		push	word_EB38
		call	sub_2454
		mov	word_EB32, 0

locret_D6F5:
		retf
sub_D6C4	endp

; ---------------------------------------------------------------------------

loc_D6F6:
		push	bp
		mov	bp, sp
		push	di
		push	si
		push	ds
		cld
		mov	ax, [bp+0Ch]
		mov	dx, [bp+0Ah]
		mov	bx, ax
		sar	bx, 4
		shl	bx, 1
		shl	dx, 6
		add	bx, dx
		shr	dx, 2
		add	bx, dx
		mov	cs:word_D75C, bx
		and	ax, 0Fh
		mov	cx, ax
		add	ax, [bp+8]
		shr	ax, 4
		or	cx, cx
		jz	short loc_D729
		inc	ax

loc_D729:
		mov	cs:word_D761, ax
		jmp	short $+2
		mov	cx, 28h	; '('
		sub	cx, ax
		shl	cx, 1
		mov	ax, [bp+6]
		mov	bp, cx
		push	0E000h
		push	word_EB38
		push	0B800h
		push	word_EB36
		push	0B000h
		push	word_EB34
		push	0A800h
		push	word_EB32
		mov	dl, 4
		mov	bx, ax
; ---------------------------------------------------------------------------
		db 0BFh
word_D75C	dw 1234h
		db 1Fh,	7, 0B9h
word_D761	dw 1234h
		db 8Bh,	0F7h, 0F3h, 0A5h, 3, 0FDh, 4Bh,	79h, 0F4h, 0FEh
		db 0CAh, 75h, 0E9h, 1Fh, 5Eh, 5Fh, 5Dh,	0CAh, 8, 0, 90h

; =============== S U B	R O U T	I N E =======================================


sub_D778	proc near
		mov	byte_EB3A, 1
		nop
sub_D778	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_D77E	proc far

arg_0		= word ptr  6
arg_2		= dword	ptr  8
arg_6		= word ptr  0Ch

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	di, [bp+arg_6]
		push	di
		nop
		push	cs
		call	near ptr sub_D898
		shl	di, 4
		add	di, 1B46h
		push	large [bp+arg_2]
		call	sub_A88
		push	ds
		push	di
		push	10h
		call	sub_9D4
		mov	ax, [di]
		mov	dx, ax
		cmp	byte ptr [di+0Bh], 0
		jz	short loc_D7BA
		shl	ax, 2
		cmp	byte ptr [di+0Bh], 2
		jz	short loc_D7BA
		add	ax, dx

loc_D7BA:
		mul	[bp+arg_0]
		movzx	eax, ax
		push	eax
		push	1
		call	sub_AC4
		call	sub_D7DE
		call	sub_968
		mov	byte_EB3A, 0
		pop	di
		pop	si
		pop	bp
		retf	8
sub_D77E	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_D7DE	proc near
		mov	al, [di+0Bh]
		or	al, al
		jz	short loc_D813
		cmp	al, 2
		jz	short loc_D7F0
		cmp	byte_EB3A, 0
		jnz	short loc_D806

loc_D7F0:
		push	word ptr [di]
		call	sub_2350
		mov	[di+0Ch], ax
		push	ax
		push	0
		push	word ptr [di]
		call	sub_9D4
		jmp	short loc_D813
; ---------------------------------------------------------------------------

loc_D806:
		movzx	eax, word ptr [di]
		push	eax
		push	1
		call	sub_AC4

loc_D813:
		cmp	byte ptr [di+0Bh], 2
		jz	short locret_D835
		mov	ax, [di]
		shl	ax, 2
		push	ax
		call	sub_2350
		mov	[di+0Eh], ax
		push	ax
		push	0
		mov	ax, [di]
		shl	ax, 2
		push	ax
		call	sub_9D4

locret_D835:
		retn
sub_D7DE	endp

; ---------------------------------------------------------------------------
		mov	byte_EB3A, 1
		nop
		push	bp
		mov	bp, sp
		push	si
		push	di
		push	large dword ptr	[bp+6]
		call	sub_A88
		mov	di, [bp+0Ah]
		shl	di, 4
		add	di, 1B46h
		push	ds
		push	di
		push	10h
		call	sub_9D4
		mov	si, di
		mov	bp, [bp+0Ah]
		mov	al, [si+0Ah]
		mov	byte_10476, al
		push	ds
		pop	es
		assume es:dseg

loc_D86A:
		push	bp
		push	cs
		call	near ptr sub_D898
		mov	cx, 3
		rep movsd
		sub	si, 0Ch
		sub	di, 0Ch
		call	sub_D7DE
		inc	bp
		add	di, 10h
		dec	byte_10476
		jnz	short loc_D86A
		call	sub_968
		mov	byte_EB3A, 0
		pop	di
		pop	si
		pop	bp
		retf	6

; =============== S U B	R O U T	I N E =======================================


sub_D898	proc far
		mov	bx, sp
		push	di
		mov	di, ss:[bx+4]
		shl	di, 4
		add	di, 1B52h
		cmp	word ptr [di], 0
		jz	short loc_D8B6
		push	word ptr [di]
		call	sub_2454
		mov	word ptr [di], 0

loc_D8B6:
		add	di, 2
		cmp	word ptr [di], 0
		jz	short loc_D8C9
		push	word ptr [di]
		call	sub_2454
		mov	word ptr [di], 0

loc_D8C9:
		pop	di
		retf	2
sub_D898	endp

; ---------------------------------------------------------------------------
		nop

; =============== S U B	R O U T	I N E =======================================


sub_D8CE	proc far
		push	si
		mov	si, 3Fh	; '?'

loc_D8D2:
		push	si
		push	cs
		call	near ptr sub_D898
		dec	si
		jge	short loc_D8D2
		pop	si
		retf
sub_D8CE	endp

seg002		ends

; ===========================================================================

; Segment type:	Pure code
seg003		segment	byte public 'CODE' use16
		assume cs:seg003
		;org 0Ch
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; string::string(string	const &)
@string@$bctr$qmx6string proc far
					; xmsg::xmsg(xmsg &)+56P ...

var_1E		= word ptr -1Eh
arg_0		= dword	ptr  6
arg_4		= dword	ptr  0Ah

		push	bp
		mov	bp, sp
		sub	sp, 1Eh
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 9985h
		call	___InitExceptBlocks
		mov	ax, word ptr [bp+arg_0]
		or	ax, word ptr [bp+arg_0+2]
		jnz	short loc_D90B
		mov	ax, 4
		push	ax
		call	@$bnew$qui	; operator new(uint)
		pop	cx
		mov	word ptr [bp+arg_0+2], dx
		mov	word ptr [bp+arg_0], ax
		or	ax, dx
		jz	short loc_D925

loc_D90B:
		les	bx, [bp+arg_4]
		mov	dx, es:[bx+2]
		mov	ax, es:[bx]
		les	bx, [bp+arg_0]
		mov	es:[bx+2], dx
		mov	es:[bx], ax
		les	bx, es:[bx]
		inc	word ptr es:[bx]

loc_D925:
		call	@__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		add	word ptr es:[bx], 1
		adc	word ptr es:[bx+2], 0
		push	[bp+var_1E]
		call	___ExitExceptBlocks
		mov	dx, word ptr [bp+arg_0+2]
		mov	ax, word ptr [bp+arg_0]
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@string@$bctr$qmx6string endp

; ---------------------------------------------------------------------------
byte_D94B	db 6, 0, 3, 0, 26h, 0, 2 dup(0FFh), 7, 0, 2Eh, 0, 3Ah
		db 0Dh dup(0), 2, 0, 2,	0, 8Bh,	99h
		dw seg seg000
		db 5, 0, 3Eh, 0, 78h, 61h, 2 dup(6Ch), 6Fh, 63h, 2 dup(0)
		db 0BDh, 0
		dw seg seg003
		db 2 dup(0), 3,	0Dh dup(0), 4, 0, 3, 0,	26h, 0,	2 dup(0FFh)
		db 3, 0, 2Ch, 0, 30h, 0Dh dup(0), 1, 0,	1, 0, 92h, 60h
		dw seg seg000
		db 5, 0, 34h, 0, 78h, 6Dh, 73h,	67h, 0Eh dup(0)

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl __far string__string(__int32, char *s)
@string@$bctr$qnxc proc	far
					; string::assert_element(uint)+5Ap ...

var_22		= word ptr -22h
var_16		= word ptr -16h
var_4		= dword	ptr -4
arg_0		= dword	ptr  6
src		= dword	ptr  0Ah

		push	bp
		mov	bp, sp
		sub	sp, 22h
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 99F7h
		call	___InitExceptBlocks
		mov	ax, word ptr [bp+arg_0]
		or	ax, word ptr [bp+arg_0+2]
		jnz	short loc_D9F4
		mov	ax, 4
		push	ax
		call	@$bnew$qui	; operator new(uint)
		pop	cx
		mov	word ptr [bp+arg_0+2], dx
		mov	word ptr [bp+arg_0], ax
		or	ax, dx
		jz	short loc_DA68

loc_D9F4:
		mov	ax, 0Ch
		push	ax
		call	@$bnew$qui	; operator new(uint)
		pop	cx
		mov	word ptr [bp+var_4+2], dx
		mov	word ptr [bp+var_4], ax
		or	ax, dx
		jz	short loc_DA58
		mov	[bp+var_16], 0Eh
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		push	ax		; int
		push	ax		; int
		mov	ax, word ptr [bp+src]
		or	ax, word ptr [bp+src+2]
		jz	short loc_DA2A
		push	word ptr [bp+src+2]
		push	word ptr [bp+src] ; s
		call	_strlen
		pop	cx
		pop	cx
		jmp	short loc_DA2C
; ---------------------------------------------------------------------------

loc_DA2A:
		xor	ax, ax

loc_DA2C:
		push	ax		; n
		push	word ptr [bp+src+2]
		push	word ptr [bp+src] ; src
		push	word ptr [bp+var_4+2]
		push	word ptr [bp+var_4] ; __int32
		nop
		push	cs
		call	near ptr @TStringRef@$bctr$qnxcuit1uiui	; TStringRef::TStringRef(char *,uint,char *,uint,uint)
		add	sp, 12h
		call	@__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		sub	word ptr es:[bx], 1
		sbb	word ptr es:[bx+2], 0
		mov	[bp+var_16], 6

loc_DA58:
		mov	dx, word ptr [bp+var_4+2]
		mov	ax, word ptr [bp+var_4]
		les	bx, [bp+arg_0]
		mov	es:[bx+2], dx
		mov	es:[bx], ax

loc_DA68:
		call	@__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		add	word ptr es:[bx], 1
		adc	word ptr es:[bx+2], 0
		push	[bp+var_22]
		call	___ExitExceptBlocks
		mov	dx, word ptr [bp+arg_0+2]
		mov	ax, word ptr [bp+arg_0]
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@string@$bctr$qnxc endp

; ---------------------------------------------------------------------------
		db 4, 0, 90h, 20h, 0Ah,	0, 9Dh,	2
		dw seg seg003
aTstringref	db 'TStringRef *',0
byte_DAA5	db 4, 0, 3, 0, 26h, 0, 2 dup(0FFh), 7, 0, 3Ah, 0, 46h
		db 0Dh dup(0), 2, 0, 2,	0, 0Dh,	9Ah
		dw seg seg000
		db 5, 0, 4Ah, 0
aStringLengther	db 'string::lengtherror',0
		dd byte_DB35
		db 2 dup(0), 3,	0Dh dup(0)
byte_DAF3	db 6, 0, 3, 0, 26h, 0, 2 dup(0FFh), 7, 0, 2Eh, 0, 3Ah
		db 0Dh dup(0), 2, 0, 2,	0, 5Ah,	9Ah
		dw seg seg000
		db 5, 0, 3Eh, 0, 78h, 61h, 2 dup(6Ch), 6Fh, 63h, 2 dup(0)
		db 65h,	2
		dw seg seg003
		db 2 dup(0), 3,	0Dh dup(0)
byte_DB35	db 4, 0, 3, 0, 26h, 0, 2 dup(0FFh), 3, 0, 2Ch, 0, 30h
		db 0Dh dup(0), 1, 0, 1,	0, 92h,	60h
		dw seg seg000
		db 5, 0, 34h, 0, 78h, 6Dh, 73h,	67h, 0Eh dup(0), 0Ch, 0
		db 3, 0, 26h, 0, 2 dup(0FFh), 7, 0, 32h, 0, 3Eh, 0Dh dup(0)
		db 1, 0, 1, 0, 0B4h, 6
		dw seg seg003
		db 5, 0, 42h, 0, 54h, 53h, 74h,	72h, 69h, 6Eh, 67h, 52h
		db 65h,	66h, 2 dup(0), 0E3h, 2
		dw seg seg003
		db 2 dup(0), 3,	0Dh dup(0), 2, 0, 3, 0,	1Ah, 0,	2 dup(0FFh)
		db 1, 0, 26h, 0, 2Ah, 0Dh dup(0), 54h, 52h, 65h, 66h, 65h
		db 72h,	65h, 6Eh, 63h, 65h, 0Ah	dup(0)

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl __far string___string(void (*driver)(void), char)
@string@$bdtr$qv proc far
					; xmsg::~xmsg(void)+3FP ...

var_1E		= word ptr -1Eh
driver		= dword	ptr  6
arg_4		= byte ptr  0Ah

		push	bp
		mov	bp, sp
		sub	sp, 1Eh
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 9AB0h
		call	___InitExceptBlocks
		call	@__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		sub	word ptr es:[bx], 1
		sbb	word ptr es:[bx+2], 0
		mov	ax, word ptr [bp+driver]
		or	ax, word ptr [bp+driver+2]
		jz	short loc_DC59
		les	bx, [bp+driver]
		les	bx, es:[bx]
		dec	word ptr es:[bx]
		mov	ax, es:[bx]
		or	ax, ax
		jnz	short loc_DC46
		call	@__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		add	word ptr es:[bx], 1
		adc	word ptr es:[bx+2], 0
		mov	ax, 3
		push	ax		; char
		les	bx, [bp+driver]
		push	word ptr es:[bx+2]
		push	word ptr es:[bx] ; driver
		nop
		push	cs
		call	near ptr sub_DF84
		add	sp, 6

loc_DC46:
		test	[bp+arg_4], 1
		jz	short loc_DC59
		push	word ptr [bp+driver+2]
		push	word ptr [bp+driver] ; driver
		call	_registerbgidriver
		pop	cx
		pop	cx

loc_DC59:
					; string::~string(void)+69j
		push	[bp+var_1E]
		call	___ExitExceptBlocks
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@string@$bdtr$qv endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; string::assert_element(unsigned int)const
@string@assert_element$xqui proc far

var_28		= word ptr -28h
var_26		= word ptr -26h
var_1A		= word ptr -1Ah
src		= byte ptr -8
driver		= byte ptr -4
arg_0		= dword	ptr  6
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		sub	sp, 28h
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 9AE4h
		call	___InitExceptBlocks
		mov	ax, [bp+arg_4]
		mov	[bp+var_28], ax
		les	bx, [bp+arg_0]
		les	bx, es:[bx]
		mov	ax, es:[bx+6]
		cmp	ax, [bp+var_28]
		jbe	short loc_DC94
		mov	ax, 1
		jmp	short loc_DC96
; ---------------------------------------------------------------------------

loc_DC94:
		xor	ax, ax

loc_DC96:
		or	ax, ax
		jnz	short loc_DD17
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		push	ax		; int
		push	ax		; int
		mov	ax, 5
		push	ax		; int
		mov	ax, seg	seg000
		push	ax		; int
		mov	ax, 9BD6h
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		mov	[bp+var_1A], 6
		push	ds
		mov	ax, 0DF8h
		push	ax		; s
		push	ss
		lea	ax, [bp+driver]
		push	ax		; __int32
		nop
		push	cs
		call	near ptr @string@$bctr$qnxc ; string::string(char *)
		add	sp, 8
		lea	ax, [bp+driver]
		push	ss
		push	ax
		push	ss
		lea	ax, [bp+src]
		push	ax
		call	@xmsg@$bctr$qmx6string ; xmsg::xmsg(string &)
		add	sp, 8
		mov	[bp+var_1A], 0Eh
		mov	ax, 2
		push	ax		; char
		push	ss
		lea	ax, [bp+driver]
		push	ax		; driver
		push	cs
		call	near ptr @string@$bdtr$qv ; string::~string(void)
		add	sp, 6
		mov	[bp+var_1A], 6
		call	@__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		add	word ptr es:[bx], 1
		adc	word ptr es:[bx+2], 0
		lea	ax, [bp+src]
		push	ss
		push	ax		; src
		push	cs		; int
		mov	ax, 0C06h
		push	ax		; int
		call	@_ThrowException$qnvt1t1t1uiuiuinuc ; _ThrowException(void *,void *,void *,void	*,uint,uint,uint,uchar *)
		add	sp, 1Ah

loc_DD17:
		push	[bp+var_26]
		call	___ExitExceptBlocks
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@string@assert_element$xqui endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; string::assert_index(unsigned	int)const
@string@assert_index$xqui proc far

var_28		= word ptr -28h
var_26		= word ptr -26h
var_1A		= word ptr -1Ah
src		= byte ptr -8
driver		= byte ptr -4
arg_0		= dword	ptr  6
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		sub	sp, 28h
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 9B28h
		call	___InitExceptBlocks
		mov	ax, [bp+arg_4]
		mov	[bp+var_28], ax
		les	bx, [bp+arg_0]
		les	bx, es:[bx]
		mov	ax, es:[bx+6]
		cmp	ax, [bp+var_28]
		jb	short loc_DD52
		mov	ax, 1
		jmp	short loc_DD54
; ---------------------------------------------------------------------------

loc_DD52:
		xor	ax, ax

loc_DD54:
		or	ax, ax
		jnz	short loc_DDD5
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		push	ax		; int
		push	ax		; int
		mov	ax, 5
		push	ax		; int
		mov	ax, seg	seg000
		push	ax		; int
		mov	ax, 9BD6h
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		mov	[bp+var_1A], 6
		push	ds
		mov	ax, 0E16h
		push	ax		; s
		push	ss
		lea	ax, [bp+driver]
		push	ax		; __int32
		nop
		push	cs
		call	near ptr @string@$bctr$qnxc ; string::string(char *)
		add	sp, 8
		lea	ax, [bp+driver]
		push	ss
		push	ax
		push	ss
		lea	ax, [bp+src]
		push	ax
		call	@xmsg@$bctr$qmx6string ; xmsg::xmsg(string &)
		add	sp, 8
		mov	[bp+var_1A], 0Eh
		mov	ax, 2
		push	ax		; char
		push	ss
		lea	ax, [bp+driver]
		push	ax		; driver
		push	cs
		call	near ptr @string@$bdtr$qv ; string::~string(void)
		add	sp, 6
		mov	[bp+var_1A], 6
		call	@__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		add	word ptr es:[bx], 1
		adc	word ptr es:[bx+2], 0
		lea	ax, [bp+src]
		push	ss
		push	ax		; src
		push	cs		; int
		mov	ax, 0C06h
		push	ax		; int
		call	@_ThrowException$qnvt1t1t1uiuiuinuc ; _ThrowException(void *,void *,void *,void	*,uint,uint,uint,uchar *)
		add	sp, 1Ah

loc_DDD5:
		push	[bp+var_26]
		call	___ExitExceptBlocks
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@string@assert_index$xqui endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; TSubString::assert_element(unsigned int)const
@TSubString@assert_element$xqui	proc far

var_28		= word ptr -28h
var_26		= word ptr -26h
var_1A		= word ptr -1Ah
src		= byte ptr -8
driver		= byte ptr -4
arg_0		= dword	ptr  6
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp
		sub	sp, 28h
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 9B6Ch
		call	___InitExceptBlocks
		mov	ax, [bp+arg_4]
		mov	[bp+var_28], ax
		les	bx, [bp+arg_0]
		mov	ax, es:[bx+6]
		cmp	ax, [bp+var_28]
		jbe	short loc_DE0D
		mov	ax, 1
		jmp	short loc_DE0F
; ---------------------------------------------------------------------------

loc_DE0D:
		xor	ax, ax

loc_DE0F:
		or	ax, ax
		jnz	short loc_DE90
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		push	ax		; int
		push	ax		; int
		mov	ax, 5
		push	ax		; int
		mov	ax, seg	seg000
		push	ax		; int
		mov	ax, 9BD6h
		push	ax		; int
		xor	ax, ax
		push	ax		; int
		push	ax		; int
		mov	[bp+var_1A], 6
		push	ds
		mov	ax, 0E34h
		push	ax		; s
		push	ss
		lea	ax, [bp+driver]
		push	ax		; __int32
		nop
		push	cs
		call	near ptr @string@$bctr$qnxc ; string::string(char *)
		add	sp, 8
		lea	ax, [bp+driver]
		push	ss
		push	ax
		push	ss
		lea	ax, [bp+src]
		push	ax
		call	@xmsg@$bctr$qmx6string ; xmsg::xmsg(string &)
		add	sp, 8
		mov	[bp+var_1A], 0Eh
		mov	ax, 2
		push	ax		; char
		push	ss
		lea	ax, [bp+driver]
		push	ax		; driver
		push	cs
		call	near ptr @string@$bdtr$qv ; string::~string(void)
		add	sp, 6
		mov	[bp+var_1A], 6
		call	@__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		add	word ptr es:[bx], 1
		adc	word ptr es:[bx+2], 0
		lea	ax, [bp+src]
		push	ss
		push	ax		; src
		push	cs		; int
		mov	ax, 0C06h
		push	ax		; int
		call	@_ThrowException$qnvt1t1t1uiuiuinuc ; _ThrowException(void *,void *,void *,void	*,uint,uint,uint,uchar *)
		add	sp, 1Ah

loc_DE90:
		push	[bp+var_26]
		call	___ExitExceptBlocks
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
@TSubString@assert_element$xqui	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl __far TStringRef__TStringRef(__int32, void *src, size_t n, int, int, int,	int)
@TStringRef@$bctr$qnxcuit1uiui proc far

arg_0		= dword	ptr  6
src		= dword	ptr  0Ah
n		= word ptr  0Eh
arg_A		= word ptr  10h
arg_C		= word ptr  12h
arg_E		= word ptr  14h
arg_10		= word ptr  16h

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	ax, word ptr [bp+arg_0]
		or	ax, word ptr [bp+arg_0+2]
		jnz	short loc_DEC2
		mov	ax, 0Ch
		push	ax
		call	@$bnew$qui	; operator new(uint)
		pop	cx
		mov	word ptr [bp+arg_0+2], dx
		mov	word ptr [bp+arg_0], ax
		or	ax, dx
		jnz	short loc_DEC2
		jmp	loc_DF68
; ---------------------------------------------------------------------------

loc_DEC2:
					; TStringRef::TStringRef(char *,uint,char *,uint,uint)+1Fj
		les	bx, [bp+arg_0]
		mov	word ptr es:[bx], 1
		mov	word ptr es:[bx+0Ah], 0
		mov	ax, [bp+n]
		add	ax, [bp+arg_E]
		mov	es:[bx+6], ax
		mov	ax, es:[bx+6]
		add	ax, [bp+arg_10]
		push	ax
		nop
		push	cs
		call	near ptr sub_E11C
		pop	cx
		les	bx, [bp+arg_0]
		mov	es:[bx+8], ax
		mov	ax, es:[bx+8]
		inc	ax
		push	ax
		call	_malloc
		pop	cx
		les	bx, [bp+arg_0]
		mov	es:[bx+4], dx
		mov	es:[bx+2], ax
		mov	ax, es:[bx+2]
		or	ax, es:[bx+4]
		jnz	short loc_DF1C
		push	ds
		mov	ax, 0B4Eh
		push	ax
		call	@xalloc@raise$qv ; xalloc::raise(void)
		pop	cx
		pop	cx

loc_DF1C:
		push	[bp+n]		; n
		push	word ptr [bp+src+2]
		push	word ptr [bp+src] ; src
		les	bx, [bp+arg_0]
		push	word ptr es:[bx+4]
		push	word ptr es:[bx+2] ; dest
		call	_memcpy
		push	[bp+arg_E]	; n
		push	[bp+arg_C]
		push	[bp+arg_A]	; src
		les	bx, [bp+arg_0]
		mov	ax, es:[bx+2]
		add	ax, [bp+n]
		push	word ptr es:[bx+4]
		push	ax		; dest
		call	_memcpy
		add	sp, 14h
		les	bx, [bp+arg_0]
		les	bx, es:[bx+2]
		mov	ax, [bp+n]
		add	ax, [bp+arg_E]
		add	bx, ax
		mov	byte ptr es:[bx], 0

loc_DF68:
		call	@__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		add	word ptr es:[bx], 1
		adc	word ptr es:[bx+2], 0
		mov	dx, word ptr [bp+arg_0+2]
		mov	ax, word ptr [bp+arg_0]
		pop	di
		pop	si
		pop	bp
		retf
@TStringRef@$bctr$qnxcuit1uiui endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

; int __cdecl __far sub_DF84(void (*driver)(void), char)
sub_DF84	proc far

var_1E		= word ptr -1Eh
driver		= dword	ptr  6
arg_4		= byte ptr  0Ah

		push	bp
		mov	bp, sp

; TStringRef::~TStringRef(void)
@TStringRef@$bdtr$qv:
		sub	sp, 1Eh
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 9B86h
		call	___InitExceptBlocks
		call	@__RefDestructorCount$qv ; __RefDestructorCount(void)
		mov	bx, ax
		mov	es, dx
		sub	word ptr es:[bx], 1
		sbb	word ptr es:[bx+2], 0
		mov	ax, word ptr [bp+driver]
		or	ax, word ptr [bp+driver+2]
		jz	short loc_DFD6
		les	bx, [bp+driver]
		push	word ptr es:[bx+4]
		push	word ptr es:[bx+2]
		call	_farfree
		pop	cx
		pop	cx
		test	[bp+arg_4], 1
		jz	short loc_DFD6
		push	word ptr [bp+driver+2]
		push	word ptr [bp+driver] ; driver
		call	_registerbgidriver
		pop	cx
		pop	cx

loc_DFD6:
		push	[bp+var_1E]
		call	___ExitExceptBlocks
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_DF84	endp

; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp

; TStringRef::reserve(unsigned int)
@TStringRef@reserve$qui:
		sub	sp, 20h
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 9B98h
		call	___InitExceptBlocks
		les	bx, [bp+6]
		or	word ptr es:[bx+0Ah], 1
		mov	ax, [bp+0Ah]
		inc	ax
		push	ax
		nop
		push	cs
		call	near ptr sub_E11C
		pop	cx
		mov	[bp-20h], ax
		les	bx, [bp+6]
		mov	ax, es:[bx+8]
		sub	ax, [bp-20h]
		cmp	ax, word_F326
		jbe	short loc_E044
		mov	ax, [bp-20h]
		inc	ax
		push	ax
		push	word ptr es:[bx+4]
		push	word ptr es:[bx+2]
		call	_realloc
		add	sp, 6
		les	bx, [bp+6]
		mov	es:[bx+4], dx
		mov	es:[bx+2], ax
		mov	ax, [bp-20h]
		mov	es:[bx+8], ax

loc_E044:
		push	word ptr [bp-1Eh]
		call	___ExitExceptBlocks
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp

; TStringRef::check_freeboard(void)
@TStringRef@check_freeboard$qv:
		sub	sp, 20h
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 9BA2h
		call	___InitExceptBlocks
		les	bx, [bp+6]
		push	word ptr es:[bx+6]
		nop
		push	cs
		call	near ptr sub_E11C
		pop	cx
		mov	[bp-20h], ax
		les	bx, [bp+6]
		mov	ax, es:[bx+8]
		sub	ax, [bp-20h]
		cmp	ax, word_F326
		jbe	short loc_E0AC
		mov	ax, [bp-20h]
		inc	ax
		push	ax
		push	word ptr es:[bx+4]
		push	word ptr es:[bx+2]
		call	_realloc
		add	sp, 6
		les	bx, [bp+6]
		mov	es:[bx+4], dx
		mov	es:[bx+2], ax
		mov	ax, [bp-20h]
		mov	es:[bx+8], ax

loc_E0AC:
		push	word ptr [bp-1Eh]
		call	___ExitExceptBlocks
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf

; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_E0BA	proc far

var_1E		= word ptr -1Eh
arg_0		= dword	ptr  6
arg_4		= word ptr  0Ah

		push	bp
		mov	bp, sp

; TStringRef::grow_to(unsigned int)
@TStringRef@grow_to$qui:
		sub	sp, 1Eh
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 9BB4h
		call	___InitExceptBlocks
		les	bx, [bp+arg_0]
		mov	ax, [bp+arg_4]
		mov	es:[bx+8], ax
		mov	ax, es:[bx+8]
		inc	ax
		push	ax
		push	word ptr es:[bx+4]
		push	word ptr es:[bx+2]
		call	_realloc
		add	sp, 6
		les	bx, [bp+arg_0]
		mov	es:[bx+4], dx
		mov	es:[bx+2], ax
		mov	ax, es:[bx+2]
		or	ax, es:[bx+4]
		jnz	short loc_E10E
		push	ds
		mov	ax, 0B4Eh
		push	ax
		call	@xalloc@raise$qv ; xalloc::raise(void)
		pop	cx
		pop	cx

loc_E10E:
		push	[bp+var_1E]
		call	___ExitExceptBlocks
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_E0BA	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: library function bp-based	frame

sub_E11C	proc far
					; seg003:0736p	...

var_20		= word ptr -20h
var_1E		= word ptr -1Eh
arg_0		= word ptr  6

		push	bp
		mov	bp, sp

; TStringRef::round_capacity(unsigned int)
@TStringRef@round_capacity$qui:
		sub	sp, 20h
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 9BBEh
		call	___InitExceptBlocks
		mov	ax, word_F322
		mov	[bp+var_20], ax
		mov	cx, word_F324
		mov	ax, [bp+arg_0]
		sub	ax, [bp+var_20]
		add	ax, cx
		dec	ax
		xor	dx, dx
		div	cx
		imul	cx
		add	ax, [bp+var_20]
		push	ax
		push	[bp+var_1E]
		call	___ExitExceptBlocks
		pop	ax
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
sub_E11C	endp

; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp

; TStringRef::splice(unsigned int, unsigned int, char const *, unsigned	int)
@TStringRef@splice$quiuinxcui:
		sub	sp, 26h
		push	si
		push	di
		mov	ax, seg	seg000
		mov	bx, 9BD0h
		call	___InitExceptBlocks
		les	bx, [bp+6]
		mov	ax, es:[bx+6]
		add	ax, [bp+12h]
		sub	ax, [bp+0Ch]
		mov	[bp-24h], ax
		push	ax
		push	cs
		call	near ptr sub_E11C
		pop	cx
		mov	[bp-26h], ax
		les	bx, [bp+6]
		mov	ax, es:[bx+8]
		cmp	ax, [bp-26h]
		jnb	short loc_E1A3
		push	word ptr [bp-26h]
		push	word ptr [bp+8]
		push	bx
		push	cs
		call	near ptr sub_E0BA
		add	sp, 6
		jmp	short loc_E212
; ---------------------------------------------------------------------------

loc_E1A3:
		les	bx, [bp+6]
		mov	ax, es:[bx+8]
		sub	ax, [bp-26h]
		cmp	ax, word_F326
		jbe	short loc_E212
		test	byte ptr es:[bx+0Ah], 1
		jnz	short loc_E212
		mov	ax, [bp-26h]
		inc	ax
		push	ax
		call	_malloc
		pop	cx
		mov	[bp-20h], dx
		mov	[bp-22h], ax
		les	bx, [bp+6]
		mov	ax, es:[bx+2]
		or	ax, es:[bx+4]
		jnz	short loc_E1E4
		push	ds
		mov	ax, 0B4Eh
		push	ax
		call	@xalloc@raise$qv ; xalloc::raise(void)
		pop	cx
		pop	cx

loc_E1E4:
		cmp	word ptr [bp+0Ah], 0
		jz	short loc_E206
		push	word ptr [bp+0Ah]
		les	bx, [bp+6]
		push	word ptr es:[bx+4]
		push	word ptr es:[bx+2]
		push	word ptr [bp-20h]
		push	word ptr [bp-22h]
		call	_memcpy
		add	sp, 0Ah

loc_E206:
		les	bx, [bp+6]
		mov	ax, [bp-26h]
		mov	es:[bx+8], ax
		jmp	short loc_E223
; ---------------------------------------------------------------------------

loc_E212:
		les	bx, [bp+6]
		mov	dx, es:[bx+4]
		mov	ax, es:[bx+2]
		mov	[bp-20h], dx
		mov	[bp-22h], ax

loc_E223:
		les	bx, [bp+6]
		mov	dx, es:[bx+4]
		mov	ax, es:[bx+2]
		cmp	dx, [bp-20h]
		jnz	short loc_E240
		cmp	ax, [bp-22h]
		jnz	short loc_E240
		mov	ax, [bp+12h]
		cmp	ax, [bp+0Ch]
		jz	short loc_E272

loc_E240:
		les	bx, [bp+6]
		mov	ax, es:[bx+6]
		sub	ax, [bp+0Ah]
		sub	ax, [bp+0Ch]
		push	ax
		mov	ax, es:[bx+2]
		add	ax, [bp+0Ah]
		add	ax, [bp+0Ch]
		push	word ptr es:[bx+4]
		push	ax
		mov	ax, [bp-22h]
		add	ax, [bp+0Ah]
		add	ax, [bp+12h]
		push	word ptr [bp-20h]
		push	ax
		call	_memmove
		add	sp, 0Ah

loc_E272:
		cmp	word ptr [bp+12h], 0
		jz	short loc_E2B6
		mov	ax, [bp+0Eh]
		or	ax, [bp+10h]
		jz	short loc_E29D
		push	word ptr [bp+12h]
		push	word ptr [bp+10h]
		push	word ptr [bp+0Eh]
		mov	ax, [bp-22h]
		add	ax, [bp+0Ah]
		push	word ptr [bp-20h]
		push	ax
		call	_memmove
		add	sp, 0Ah
		jmp	short loc_E2B6
; ---------------------------------------------------------------------------

loc_E29D:
		push	word ptr [bp+12h]
		mov	ax, 20h	; ' '
		push	ax
		mov	ax, [bp-22h]
		add	ax, [bp+0Ah]
		push	word ptr [bp-20h]
		push	ax
		call	_memset
		add	sp, 8

loc_E2B6:
		les	bx, [bp+6]
		mov	ax, [bp-24h]
		mov	es:[bx+6], ax
		push	es
		les	ax, [bp-22h]
		mov	dx, es
		pop	es
		add	ax, es:[bx+6]
		mov	bx, ax
		mov	es, dx
		mov	byte ptr es:[bx], 0
		les	bx, [bp+6]
		mov	dx, es:[bx+4]
		mov	ax, es:[bx+2]
		cmp	dx, [bp-20h]
		jnz	short loc_E2E8
		cmp	ax, [bp-22h]
		jz	short loc_E30B

loc_E2E8:
		les	bx, [bp+6]
		push	word ptr es:[bx+4]
		push	word ptr es:[bx+2]
		call	_farfree
		pop	cx
		pop	cx
		les	bx, [bp+6]
		mov	dx, [bp-20h]
		mov	ax, [bp-22h]
		mov	es:[bx+4], dx
		mov	es:[bx+2], ax

loc_E30B:
		push	word ptr [bp-1Eh]
		call	___ExitExceptBlocks
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp

; string::set_case_sensitive(int)
@string@set_case_sensitive$qi:
		sub	sp, 2
		push	si
		push	di
		mov	ax, word_F31C
		mov	[bp-2],	ax
		mov	ax, [bp+6]
		mov	word_F31C, ax
		mov	ax, [bp-2]
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp

; string::set_paranoid_check(int)
@string@set_paranoid_check$qi:
		sub	sp, 2
		push	si
		push	di
		mov	ax, word_F31E
		mov	[bp-2],	ax
		mov	ax, [bp+6]
		mov	word_F31E, ax
		mov	ax, [bp-2]
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp

; string::skip_whitespace(int)
@string@skip_whitespace$qi:
		sub	sp, 2
		push	si
		push	di
		mov	ax, word_F320
		mov	[bp-2],	ax
		mov	ax, [bp+6]
		mov	word_F320, ax
		mov	ax, [bp-2]
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp

; string::initial_capacity(unsigned int)
@string@initial_capacity$qui:
		sub	sp, 2
		push	si
		push	di
		mov	ax, word_F322
		mov	[bp-2],	ax
		mov	ax, [bp+6]
		mov	word_F322, ax
		mov	ax, [bp-2]
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp

; string::resize_increment(unsigned int)
@string@resize_increment$qui:
		sub	sp, 2
		push	si
		push	di
		mov	ax, word_F324
		mov	[bp-2],	ax
		mov	ax, [bp+6]
		mov	word_F324, ax
		cmp	word_F324, 0
		jnz	short loc_E3AE
		mov	word_F324, 1

loc_E3AE:
		mov	ax, [bp-2]
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
; ---------------------------------------------------------------------------
		push	bp
		mov	bp, sp

; string::max_waste(unsigned int)
@string@max_waste$qui:
		sub	sp, 2
		push	si
		push	di
		mov	ax, word_F326
		mov	[bp-2],	ax
		mov	ax, [bp+6]
		mov	word_F326, ax
		mov	ax, [bp-2]
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retf
; ---------------------------------------------------------------------------
byte_E3D4	db 4, 0, 3, 0, 26h, 0, 2 dup(0FFh), 7, 0, 3Ah, 0, 46h
		db 0Dh dup(0), 2, 0, 2,	0, 0Bh,	9Ch
		dw seg seg000
		db 5, 0, 4Ah, 0
aStringLength_0	db 'string::lengtherror',0
		dd byte_E464
		dw 0
		db 3, 0Dh dup(0), 6, 0,	3, 0, 26h, 0, 2	dup(0FFh), 7, 0
		db 2Eh,	0, 3Ah,	0Dh dup(0), 2, 0, 2, 0,	58h, 9Ch
		dw seg seg000
		db 5, 0, 3Eh, 0, 78h, 61h, 2 dup(6Ch), 6Fh, 63h, 2 dup(0)
		db 94h,	0Bh
		dw seg seg003
		db 2 dup(0), 3,	0Dh dup(0)
byte_E464	db 4, 0, 3, 0, 26h, 0, 2 dup(0FFh), 3, 0, 2Ch, 0, 30h
		db 0Dh dup(0), 1, 0, 1,	0, 92h,	60h
		dw seg seg000
		db 5, 0, 34h, 0, 78h, 6Dh, 73h,	67h, 0Eh dup(0), 4, 0
		db 3, 0, 26h, 0, 2 dup(0FFh), 3, 0, 2Eh, 0, 32h, 0Dh dup(0)
		db 1, 0, 1, 0, 11h, 3
		dw seg seg003
		db 5, 0, 36h, 0, 73h, 74h, 72h,	69h, 6Eh, 67h, 0Eh dup(0)
byte_E4D6	db 4, 0, 3, 0, 26h, 0, 2 dup(0FFh), 7, 0, 3Ah, 0, 46h
		db 0Dh dup(0), 2, 0, 2,	0, 0A5h, 9Ch
		dw seg seg000
		db 5, 0, 4Ah, 0
aStringOutofran	db 'string::outofrange',0
		db    0
		dd byte_E464
		db 2 dup(0), 3,	19h dup(0)
seg003		ends

; ===========================================================================

; Segment type:	Pure data
dseg		segment	para public 'DATA' use16
		assume cs:dseg
word_E530	dw 0
word_E532	dw 0
CheckStr	db 'NULL CHECK',0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
aBorlandCCopyri	db 'Borland C++ - Copyright 1993 Borland Intl.',0
aDivideError	db 'Divide error',0Dh,0Ah,0
dword_E58A	dd 0
					; __restorezero+4r ...
dword_E58E	dd 0
					; __restorezero+Fr ...
dword_E592	dd 0
					; __restorezero+1Ar ...
dword_E596	dd 0
					; __restorezero+25r ...
; int argc
argc		dw 0
; char **argv
argv		dw 0
word_E59E	dw 0
; char **envp
envp		dw 0
word_E5A2	dw 0
word_E5A4	dw 0
word_E5A6	dw 0
word_E5A8	dw 0
; unsigned int segx
segx		dw 0
word_E5AC	dw 0
word_E5AE	dw 0
					; seg000:4C2Ew	...
		db 0FFh
		db 0FFh
		db  20h
		db  41h	; A
word_E5B4	dw 0
word_E5B6	dw 0
word_E5B8	dw 0
word_E5BA	dw 0
word_E5BC	dw 0
word_E5BE	dw 0
off_E5C0	dd a_ed000_txt
					; "_ED000.TXT"
aMiko_cfg	db 'MIKO.CFG',0
a_ed000_txt	db '_ED000.TXT',0
aCong00_pi	db 'CONG00.pi',0
aMSzlEd_dat	db '¶z½ed.dat',0
aGameft_bft	db 'GAMEFT.bft',0
; char arg0[]
arg0		db 'op',0
		db    0
word_E5FE	dw 0
word_E600	dw 0
word_E602	dw 0
byte_E604	db 0
byte_E605	db 0
aBfnt		db 'BFNT'
		db  1Ah
		db    0
word_E60C	dw 0
word_E60E	dw 27Fh
word_E610	dw 27Fh
word_E612	dw 0
word_E614	dw 18Fh
word_E616	dw 18Fh
word_E618	dw 0A800h
word_E61A	dw 7CB0h
word_E61C	dw 0
word_E61E	dw 0FFFFh
byte_E620	db 0
		db    0
		db  0Dh
		db  16h
		db  20h
		db  22h	; "
		db  27h	; '
		db  2Ah	; *
		db  2Eh	; .
		db  36h	; 6
		db  3Fh	; ?
		db    0
aIbmadsp	db '$IBMADSP',0
aIbmafnt	db '$IBMAFNT',0
dword_E63E	dd 0
word_E642	dw 0
		db  10h
		db    0
		db  10h
		db    0
		db    0
		db    0
		db 0FFh
		db    0
word_E64C	dw 0A800h
word_E64E	dw 3E80h
word_E650	dw 190h
		db  50h	; P
		db    0
word_E654	dw 0
		db  55h	; U
		db    0
word_E658	dw 0
					; sub_D492+F0r
		dw 0
		dw 0
		dw 0
word_E660	dw 0
					; sub_ED2:loc_E88w ...
word_E662	dw 64h
					; sub_622:loc_649w ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db 0FFh
		db 0FFh
		db    0
		db    0
		db 0FFh
		db    0
		db 0FFh
		db    0
		db 0FFh
		db    0
		db    0
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db    0
		db 0FFh
		db 0FFh
		db 0FFh
		db  77h	; w
		db  77h	; w
		db  77h	; w
		db    0
		db    0
		db 0AAh	; ª
		db 0AAh	; ª
		db    0
		db    0
		db 0AAh	; ª
		db    0
		db 0AAh	; ª
		db    0
		db 0AAh	; ª
		db    0
		db    0
		db 0AAh	; ª
		db 0AAh	; ª
		db 0AAh	; ª
		db 0AAh	; ª
		db    0
		db 0AAh	; ª
		db 0AAh	; ª
		db 0AAh	; ª
word_E694	dw 0
		db    0
		db    0
		db    0
		db    0
word_E69A	dw 200h
word_E69C	dw 0
					; sub_6A4+48w ...
		db    0
		db    0
dword_E6A0	dd 1
word_E6A4	dw 0
		db    6
		db    0
		db  0Dh
		db    0
		db  13h
		db    0
		db  19h
		db    0
		db  1Fh
		db    0
		db  26h	; &
		db    0
		db  2Ch	; ,
		db    0
		db  32h	; 2
		db    0
		db  38h	; 8
		db    0
		db  3Eh	; >
		db    0
		db  44h	; D
		db    0
		db  4Ah	; J
		db    0
		db  50h	; P
		db    0
		db  56h	; V
		db    0
		db  5Ch	; \
		db    0
		db  62h	; b
		db    0
		db  68h	; h
		db    0
		db  6Dh	; m
		db    0
		db  73h	; s
		db    0
		db  79h	; y
		db    0
		db  7Eh	; ~
		db    0
		db  84h	; 
		db    0
		db  89h	; 
		db    0
		db  8Eh	; 
		db    0
		db  93h	; 
		db    0
		db  98h	; 
		db    0
		db  9Dh	; 
		db    0
		db 0A2h	; ¢
		db    0
		db 0A7h	; §
		db    0
		db 0ACh	; ¬
		db    0
		db 0B1h	; ±
		db    0
		db 0B5h	; µ
		db    0
		db 0B9h	; ¹
		db    0
		db 0BEh	; ¾
		db    0
		db 0C2h	; Â
		db    0
		db 0C6h	; Æ
		db    0
		db 0CAh	; Ê
		db    0
		db 0CEh	; Î
		db    0
		db 0D1h	; Ñ
		db    0
		db 0D5h	; Õ
		db    0
		db 0D8h	; Ø
		db    0
		db 0DCh	; Ü
		db    0
		db 0DFh	; ß
		db    0
		db 0E2h	; â
		db    0
		db 0E5h	; å
		db    0
		db 0E7h	; ç
		db    0
		db 0EAh	; ê
		db    0
		db 0EDh	; í
		db    0
		db 0EFh	; ï
		db    0
		db 0F1h	; ñ
		db    0
		db 0F3h	; ó
		db    0
		db 0F5h	; õ
		db    0
		db 0F7h	; ÷
		db    0
		db 0F8h	; ø
		db    0
		db 0FAh	; ú
		db    0
		db 0FBh	; û
		db    0
		db 0FCh	; ü
		db    0
		db 0FDh	; ý
		db    0
		db 0FEh	; þ
		db    0
		db 0FFh
		db    0
		db 0FFh
		db    0
		db    0
		db    1
		db    0
		db    1
word_E724	dw 100h
		db    0
		db    1
		db    0
		db    1
		db 0FFh
		db    0
		db 0FFh
		db    0
		db 0FEh	; þ
		db    0
		db 0FDh	; ý
		db    0
		db 0FCh	; ü
		db    0
		db 0FBh	; û
		db    0
		db 0FAh	; ú
		db    0
		db 0F8h	; ø
		db    0
		db 0F7h	; ÷
		db    0
		db 0F5h	; õ
		db    0
		db 0F3h	; ó
		db    0
		db 0F1h	; ñ
		db    0
		db 0EFh	; ï
		db    0
		db 0EDh	; í
		db    0
		db 0EAh	; ê
		db    0
		db 0E7h	; ç
		db    0
		db 0E5h	; å
		db    0
		db 0E2h	; â
		db    0
		db 0DFh	; ß
		db    0
		db 0DCh	; Ü
		db    0
		db 0D8h	; Ø
		db    0
		db 0D5h	; Õ
		db    0
		db 0D1h	; Ñ
		db    0
		db 0CEh	; Î
		db    0
		db 0CAh	; Ê
		db    0
		db 0C6h	; Æ
		db    0
		db 0C2h	; Â
		db    0
		db 0BEh	; ¾
		db    0
		db 0B9h	; ¹
		db    0
word_E764	dw 0B5h
		db 0B1h	; ±
		db    0
		db 0ACh	; ¬
		db    0
		db 0A7h	; §
		db    0
		db 0A2h	; ¢
		db    0
		db  9Dh	; 
		db    0
		db  98h	; 
		db    0
		db  93h	; 
		db    0
		db  8Eh	; 
		db    0
		db  89h	; 
		db    0
		db  84h	; 
		db    0
		db  7Eh	; ~
		db    0
		db  79h	; y
		db    0
		db  73h	; s
		db    0
		db  6Dh	; m
		db    0
		db  68h	; h
		db    0
		db  62h	; b
		db    0
		db  5Ch	; \
		db    0
		db  56h	; V
		db    0
		db  50h	; P
		db    0
		db  4Ah	; J
		db    0
		db  44h	; D
		db    0
		db  3Eh	; >
		db    0
		db  38h	; 8
		db    0
		db  32h	; 2
		db    0
		db  2Ch	; ,
		db    0
		db  26h	; &
		db    0
		db  1Fh
		db    0
		db  19h
		db    0
		db  13h
		db    0
		db  0Dh
		db    0
		db    6
		db    0
word_E7A4	dw 0
		db 0FAh	; ú
		db 0FFh
		db 0F3h	; ó
		db 0FFh
		db 0EDh	; í
		db 0FFh
		db 0E7h	; ç
		db 0FFh
		db 0E1h	; á
		db 0FFh
		db 0DAh	; Ú
		db 0FFh
		db 0D4h	; Ô
		db 0FFh
		db 0CEh	; Î
		db 0FFh
		db 0C8h	; È
		db 0FFh
		db 0C2h	; Â
		db 0FFh
		db 0BCh	; ¼
		db 0FFh
		db 0B6h	; ¶
		db 0FFh
		db 0B0h	; °
		db 0FFh
		db 0AAh	; ª
		db 0FFh
		db 0A4h	; ¤
		db 0FFh
		db  9Eh	; 
		db 0FFh
		db  98h	; 
		db 0FFh
		db  93h	; 
		db 0FFh
		db  8Dh	; 
		db 0FFh
		db  87h	; 
		db 0FFh
		db  82h	; 
		db 0FFh
		db  7Ch	; |
		db 0FFh
		db  77h	; w
		db 0FFh
		db  72h	; r
		db 0FFh
		db  6Dh	; m
		db 0FFh
		db  68h	; h
		db 0FFh
		db  63h	; c
		db 0FFh
		db  5Eh	; ^
		db 0FFh
		db  59h	; Y
		db 0FFh
		db  54h	; T
		db 0FFh
		db  4Fh	; O
		db 0FFh
word_E7E4	dw 0FF4Bh
		db  47h	; G
		db 0FFh
		db  42h	; B
		db 0FFh
		db  3Eh	; >
		db 0FFh
		db  3Ah	; :
		db 0FFh
		db  36h	; 6
		db 0FFh
		db  32h	; 2
		db 0FFh
		db  2Fh	; /
		db 0FFh
		db  2Bh	; +
		db 0FFh
		db  28h	; (
		db 0FFh
		db  24h	; $
		db 0FFh
		db  21h	; !
		db 0FFh
		db  1Eh
		db 0FFh
		db  1Bh
		db 0FFh
		db  19h
		db 0FFh
		db  16h
		db 0FFh
		db  13h
		db 0FFh
		db  11h
		db 0FFh
		db  0Fh
		db 0FFh
		db  0Dh
		db 0FFh
		db  0Bh
		db 0FFh
		db    9
		db 0FFh
		db    8
		db 0FFh
		db    6
		db 0FFh
		db    5
		db 0FFh
		db    4
		db 0FFh
		db    3
		db 0FFh
		db    2
		db 0FFh
		db    1
		db 0FFh
		db    1
		db 0FFh
		db    0
		db 0FFh
		db    0
		db 0FFh
word_E824	dw 0FF00h
		db    0
		db 0FFh
		db    0
		db 0FFh
		db    1
		db 0FFh
		db    1
		db 0FFh
		db    2
		db 0FFh
		db    3
		db 0FFh
		db    4
		db 0FFh
		db    5
		db 0FFh
		db    6
		db 0FFh
		db    8
		db 0FFh
		db    9
		db 0FFh
		db  0Bh
		db 0FFh
		db  0Dh
		db 0FFh
		db  0Fh
		db 0FFh
		db  11h
		db 0FFh
		db  13h
		db 0FFh
		db  16h
		db 0FFh
		db  19h
		db 0FFh
		db  1Bh
		db 0FFh
		db  1Eh
		db 0FFh
		db  21h	; !
		db 0FFh
		db  24h	; $
		db 0FFh
		db  28h	; (
		db 0FFh
		db  2Bh	; +
		db 0FFh
		db  2Fh	; /
		db 0FFh
		db  32h	; 2
		db 0FFh
		db  36h	; 6
		db 0FFh
		db  3Ah	; :
		db 0FFh
		db  3Eh	; >
		db 0FFh
		db  42h	; B
		db 0FFh
		db  47h	; G
		db 0FFh
word_E864	dw 0FF4Bh
		db  4Fh	; O
		db 0FFh
		db  54h	; T
		db 0FFh
		db  59h	; Y
		db 0FFh
		db  5Eh	; ^
		db 0FFh
		db  63h	; c
		db 0FFh
		db  68h	; h
		db 0FFh
		db  6Dh	; m
		db 0FFh
		db  72h	; r
		db 0FFh
		db  77h	; w
		db 0FFh
		db  7Ch	; |
		db 0FFh
		db  82h	; 
		db 0FFh
		db  87h	; 
		db 0FFh
		db  8Dh	; 
		db 0FFh
		db  93h	; 
		db 0FFh
		db  98h	; 
		db 0FFh
		db  9Eh	; 
		db 0FFh
		db 0A4h	; ¤
		db 0FFh
		db 0AAh	; ª
		db 0FFh
		db 0B0h	; °
		db 0FFh
		db 0B6h	; ¶
		db 0FFh
		db 0BCh	; ¼
		db 0FFh
		db 0C2h	; Â
		db 0FFh
		db 0C8h	; È
		db 0FFh
		db 0CEh	; Î
		db 0FFh
		db 0D4h	; Ô
		db 0FFh
		db 0DAh	; Ú
		db 0FFh
		db 0E1h	; á
		db 0FFh
		db 0E7h	; ç
		db 0FFh
		db 0EDh	; í
		db 0FFh
		db 0F3h	; ó
		db 0FFh
		db 0FAh	; ú
		db 0FFh
word_E8A4	dw 0
		db    6
		db    0
		db  0Dh
		db    0
		db  13h
		db    0
		db  19h
		db    0
		db  1Fh
		db    0
		db  26h	; &
		db    0
		db  2Ch	; ,
		db    0
		db  32h	; 2
		db    0
		db  38h	; 8
		db    0
		db  3Eh	; >
		db    0
		db  44h	; D
		db    0
		db  4Ah	; J
		db    0
		db  50h	; P
		db    0
		db  56h	; V
		db    0
		db  5Ch	; \
		db    0
		db  62h	; b
		db    0
		db  68h	; h
		db    0
		db  6Dh	; m
		db    0
		db  73h	; s
		db    0
		db  79h	; y
		db    0
		db  7Eh	; ~
		db    0
		db  84h	; 
		db    0
		db  89h	; 
		db    0
		db  8Eh	; 
		db    0
		db  93h	; 
		db    0
		db  98h	; 
		db    0
		db  9Dh	; 
		db    0
		db 0A2h	; ¢
		db    0
		db 0A7h	; §
		db    0
		db 0ACh	; ¬
		db    0
		db 0B1h	; ±
		db    0
word_E8E4	dw 0B5h
		db 0B9h	; ¹
		db    0
		db 0BEh	; ¾
		db    0
		db 0C2h	; Â
		db    0
		db 0C6h	; Æ
		db    0
		db 0CAh	; Ê
		db    0
		db 0CEh	; Î
		db    0
		db 0D1h	; Ñ
		db    0
		db 0D5h	; Õ
		db    0
		db 0D8h	; Ø
		db    0
		db 0DCh	; Ü
		db    0
		db 0DFh	; ß
		db    0
		db 0E2h	; â
		db    0
		db 0E5h	; å
		db    0
		db 0E7h	; ç
		db    0
		db 0EAh	; ê
		db    0
		db 0EDh	; í
		db    0
		db 0EFh	; ï
		db    0
		db 0F1h	; ñ
		db    0
		db 0F3h	; ó
		db    0
		db 0F5h	; õ
		db    0
		db 0F7h	; ÷
		db    0
		db 0F8h	; ø
		db    0
		db 0FAh	; ú
		db    0
		db 0FBh	; û
		db    0
		db 0FCh	; ü
		db    0
		db 0FDh	; ý
		db    0
		db 0FEh	; þ
		db    0
		db 0FFh
		db    0
		db 0FFh
		db    0
		db    0
		db    1
		db    0
		db    1
		db    0
		db    0
word_E926	dw 0A000h
		db  50h	; P
		db    0
word_E92A	dw 1
unk_E92C	db    0
		db    0
word_E92E	dw 0
word_E930	dw 0
byte_E932	db 0
		db  90h	; 
		db 0FFh
		db  7Fh	; 
		db  3Fh	; ?
		db  1Fh
		db  0Fh
		db    7
		db    3
		db    1
word_E93C	dw 0
word_E93E	dw 0
word_E940	dw 0
word_E942	dw 100h
		db    0
		db    0
		db    0
		db    0
		db    0
byte_E949	db 0
					; sub_2684:loc_26CAr
		dw 0
		dw 0
		dw 0
word_E950	dw 0
word_E952	dw 0
		dw 0
		dw 0
		dw 0
		dw 0
		dw 0
		dw 0
word_E960	dw 0
		dw 0
word_E964	dw 0
word_E966	dw 0
					; sub_2564+5r ...
word_E968	dw 0
a_exe		db '.exe',0
		db    0
word_E970	dw 1
		db  48h	; H
		db  57h	; W
		db 0C0h	; À
		db  4Dh	; M
		db 0D8h	; Ø
		db  92h	; 
		db 0D8h	; Ø
		db  82h	; 
		db  88h	; 
		db  74h	; t
		db    8
		db  6Eh	; n
		db 0F8h	; ø
		db  61h	; a
		db  64h	; d
		db    0
		db  68h	; h
		db  52h	; R
		db  64h	; d
		db    0
		db 0A0h	;  
		db  8Ah	; 
		db  78h	; x
		db  7Bh	; {
		db  64h	; d
		db    0
		db 0C8h	; È
		db  67h	; g
		db  68h	; h
		db  5Ch	; \
		db  64h	; d
		db    0
		db  68h	; h
		db  5Ch	; \
		db  68h	; h
		db  52h	; R
		db  64h	; d
		db    0
		db 0A0h	;  
		db  8Ah	; 
		db  78h	; x
		db  7Bh	; {
		db  64h	; d
		db    0
		db 0C8h	; È
		db  67h	; g
		db  64h	; d
		db    0
		db  40h	; @
		db    0
		db  20h
		db    0
		db  20h
		db    0
		db  10h
		db    0
		db  10h
		db    0
		db  10h
		db    0
		db  10h
		db    0
		db    8
		db    0
		db    8
		db    0
		db    8
		db    0
		db    8
		db    0
		db    8
		db    0
		db    8
		db    0
		db    8
		db    0
		db    8
		db    0
		db    4
		db    0
		db    4
		db    0
		db    4
		db    0
		db    4
		db    0
		db    4
		db    0
		db    4
		db    0
		db    4
		db    0
		db    4
		db    0
		db    4
		db    0
		db    4
		db    0
		db    4
		db    0
		db    4
		db    0
		db    4
		db    0
		db    4
		db    0
		db    4
		db    0
		db    4
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    2
		db    0
		db    1
		db    0
word_EA22	dw 0
word_EA24	dw 0
word_EA26	dw 0
word_EA28	dw 0
word_EA2A	dw 0
word_EA2C	dw 0
					; sub_3198:loc_3242r ...
word_EA2E	dw 0
word_EA30	dw 0
word_EA32	dw 0
word_EA34	dw 0
					; sub_33D0+139r
word_EA36	dw 0
word_EA38	dw 0
word_EA3A	dw 0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_EA5C	dw 0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_EA7E	dw 0
word_EA80	dw 0
word_EA82	dw 0
word_EA84	dw 0
word_EA86	dw 0
					; sub_33D0+F5w
word_EA88	dw 0
					; sub_33D0:loc_3565w ...
word_EA8A	dw 0
					; sub_33D0+126w
word_EA8C	dw 0
					; sub_33D0+122w
		dw 0
		db  20h
		db  10h
		db    2
		db  12h
		db  12h
		db  40h	; @
		db  10h
		db  11h
		db    2
		db  12h
		db  20h
		db  20h
		db  20h
		db  20h
		db    0
		db    0
		db    0
		db  24h	; $
		db  10h
		db    4
		db  10h
		db    8
		db  30h	; 0
		db  50h	; P
		db  11h
		db    4
		db  0Bh
		db  50h	; P
		db  50h	; P
		db  50h	; P
		db  20h
		db    0
		db 0FFh
		db 0FFh
		db  7Fh	; 
		db 0FFh
		db  3Fh	; ?
		db 0FFh
		db  1Fh
		db 0FFh
		db  0Fh
		db 0FFh
		db    7
		db 0FFh
		db    3
		db 0FFh
		db    1
		db 0FFh
		db    0
		db 0FFh
		db    0
		db  7Fh	; 
		db    0
		db  3Fh	; ?
		db    0
		db  1Fh
		db    0
		db  0Fh
		db    0
		db    7
		db    0
		db    3
		db    0
		db    1
byte_EAD0	db 0
					; sub_CFAA:loc_CFF6w ...
byte_EAD1	db 0
byte_EAD2	db 0
		db    0
		dd aM26			; "m26"
		dd aM26			; "m26"
		dd aM86			; "m86"
		dd aMmd			; "mmd"
aM26		db 'm26',0
aM86		db 'm86',0
aMmd		db 'mmd',0
		db  71h	; q
		db    0
		db  6Bh	; k
		db    0
		db  78h	; x
		db    0
		db  72h	; r
		db    0
		db  89h	; 
		db    0
		db  1Fh
		db    0
		db  19h
		db    0
		db  26h	; &
		db    0
		db  20h
		db    0
		db  37h	; 7
		db    0
		db 0DCh	; Ü
		db    5
		db 0E4h	; ä
		db    5
		db 0ECh	; ì
		db    5
		db 0F4h	; ô
		db    5
		db  88h	; 
		db  88h	; 
		db    0
		db    0
		db  22h	; "
		db  22h	; "
		db    0
		db    0
		db  88h	; 
		db  88h	; 
		db  44h	; D
		db  44h	; D
		db  22h	; "
		db  22h	; "
		db  11h
		db  11h
		db 0AAh	; ª
		db 0AAh	; ª
		db  44h	; D
		db  44h	; D
		db 0AAh	; ª
		db 0AAh	; ª
		db  11h
		db  11h
		db 0AAh	; ª
		db 0AAh	; ª
		db  55h	; U
		db  55h	; U
		db 0AAh	; ª
		db 0AAh	; ª
		db  55h	; U
		db  55h	; U
word_EB2C	dw 2
word_EB2E	dw 10h
byte_EB30	db 0FFh
byte_EB31	db 0
word_EB32	dw 0
word_EB34	dw 0
word_EB36	dw 0
word_EB38	dw 0
byte_EB3A	db 0
		db    0
		db    0
		db    0
		db  11h
		db  11h
		db    0
		db    0
		db  44h	; D
		db  44h	; D
		db  88h	; 
		db  88h	; 
		db  11h
		db  11h
		db  22h	; "
		db  22h	; "
		db  44h	; D
		db  44h	; D
		db 0AAh	; ª
		db 0AAh	; ª
		db  55h	; U
		db  55h	; U
		db 0AAh	; ª
		db 0AAh	; ª
		db  55h	; U
		db  55h	; U
		db 0EEh	; î
		db 0EEh	; î
		db  77h	; w
		db  77h	; w
		db 0BBh	; »
		db 0BBh	; »
		db 0DDh	; Ý
		db 0DDh	; Ý
		db  88h	; 
		db  88h	; 
		db    0
		db    0
		db  22h	; "
		db  22h	; "
		db    0
		db    0
		db  88h	; 
		db  88h	; 
		db  44h	; D
		db  44h	; D
		db  22h	; "
		db  22h	; "
		db  11h
		db  11h
		db 0AAh	; ª
		db 0AAh	; ª
		db  44h	; D
		db  44h	; D
		db 0AAh	; ª
		db 0AAh	; ª
		db  11h
		db  11h
		db 0AAh	; ª
		db 0AAh	; ª
		db  44h	; D
		db  44h	; D
		db 0AAh	; ª
		db 0AAh	; ª
		db  55h	; U
		db  55h	; U
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db 0FFh
		db  20h
		db  20h
		db    0
		db    0
aSff1_pi	db 'sff1.pi',0
aStaff		db 'staff',0
aSff1_cdg	db 'sff1.cdg',0
aSff1b_cdg	db 'sff1b.cdg',0
aSff2_cdg	db 'sff2.cdg',0
aSff2b_cdg	db 'sff2b.cdg',0
aSff3_cdg	db 'sff3.cdg',0
aSff3b_cdg	db 'sff3b.cdg',0
aSff2_pi	db 'sff2.pi',0
aSff4_cdg	db 'sff4.cdg',0
aSff4b_cdg	db 'sff4b.cdg',0
aSff5_cdg	db 'sff5.cdg',0
aSff5b_cdg	db 'sff5b.cdg',0
aSff8_cdg	db 'sff8.cdg',0
aSff8b_cdg	db 'sff8b.cdg',0
aSff9_cdg	db 'sff9.cdg',0
aSff9b_cdg	db 'sff9b.cdg',0
aSff6_cdg	db 'sff6.cdg',0
aSff6b_cdg	db 'sff6b.cdg',0
aSff7_cdg	db 'sff7.cdg',0
aSff7b_cdg	db 'sff7b.cdg',0
		db    0
byte_EC4A	db 0
		db    2
		db    2
		db    2
		db 0AEh	; ®
		db 0AAh	; ª
		db 0BCh	; ¼
		db 0C2h	; Â
		db    0
		db    2
		db 0B7h	; ·
		db 0B8h	; ¸
		db 0BBh	; »
		db 0B6h	; ¶
		db 0AAh	; ª
		db 0B5h	; µ
		db    0
		db    2
		db    2
		db    2
		db 0B1h	; ±
		db 0AAh	; ª
		db 0BBh	; »
		db 0ADh	; ­
		db    0
		db 0B5h	; µ
		db 0BEh	; ¾
		db 0B7h	; ·
		db 0AAh	; ª
		db 0BDh	; ½
		db 0B2h	; ²
		db 0ACh	; ¬
		db    0
		db    2
		db    2
		db 0AEh	; ®
		db 0C1h	; Á
		db 0BDh	; ½
		db 0BBh	; »
		db 0AAh	; ª
		db    0
byte_EC73	db 0
aU_		db '_',0
aBd		db 'D',0
aBu		db '',0
aBd_0		db 'D',0
aBu_0		db '',0
aB@b@b@b@b@b@b@	db '@@@@@@@ rO»è',0
aUqiUx		db 'ïÕx',0
aNPiuU_		db 'ÅI¾_',0
aGGxi		db '~Xñ',0
aGGaogcpi	db '{gpñ',0
aGqbGatbrmcj	db 'Q[B¬¦',0
aIlcSObcj	db '«ìÞ¡¦',0
aGagcgegai	db 'ACeñû¦',0
aUU_gagcgeganNv	db '¾_ACeÅ_¦',0
aLcnzvv		db 'C¢',0
aPicacovCj	db '¿¦',0
aVavVVSrso	db ' È½ÌrO',0
aTimes		db 'ñ',0
aTimes_0	db 'ñ',0
aPoint		db '_',0
a_ude_txt	db '_ude.txt',0
aBhbhbhbhbhbhu_	db 'HHHHHH_',0
aPicacovVVcvsfT	db '¿Éæé»èsÂ',0
aUde_pi		db 'ude.pi',0
		db    0
byte_ED5C	db 0AAh
		db 0ABh	; «
		db 0ACh	; ¬
		db 0ADh	; ­
		db 0AEh	; ®
		db 0AFh	; ¯
		db 0B0h	; °
		db 0B1h	; ±
		db 0B2h	; ²
		db 0B3h	; ³
		db 0B4h	; ´
		db 0B5h	; µ
		db 0B6h	; ¶
		db 0B7h	; ·
		db 0B8h	; ¸
		db 0B9h	; ¹
		db 0BAh	; º
		db 0BBh	; »
		db 0BCh	; ¼
		db 0BDh	; ½
		db 0BEh	; ¾
		db 0BFh	; ¿
		db 0C0h	; À
		db 0C1h	; Á
		db 0C2h	; Â
		db 0C3h	; Ã
		db 0C4h	; Ä
		db 0C5h	; Å
		db    3
		db    6
		db    7
		db    8
		db  0Ch
		db  0Fh
		db 0A0h	;  
		db 0A1h	; ¡
		db 0A2h	; ¢
		db 0A3h	; £
		db 0A4h	; ¤
		db 0A5h	; ¥
		db 0A6h	; ¦
		db 0A7h	; §
		db 0A8h	; ¨
		db 0A9h	; ©
		db 0E6h	; æ
		db 0E7h	; ç
		db 0E8h	; è
		db 0CEh	; Î
		db 0CFh	; Ï
		db 0CDh	; Í
		db 0D5h	; Õ
aGensou_scr	db 'GENSOU.SCR',0
aGensou_scr_0	db 'GENSOU.SCR',0
aGensou_scr_1	db 'GENSOU.SCR',0
aGensou_scr_2	db 'GENSOU.SCR',0
aHi01_pi	db 'hi01.pi',0
aScnum2_bft	db 'scnum2.bft',0
aGxgnbGvbGhvVGv	db 'X[[hÅÌvCÅÍAXRAÍL^³êÜ¹ñ',0
aGxgnbGvbGhvV_1	db 'X[[hÅÌvCÅÍAXRAÍL^³êÜ¹ñ',0
aName		db 'name',0
		db    0
aAbnormalProgra	db 'Abnormal program termination',0Dh,0Ah,0
		db    0
word_EE5A	dw 0
					; _atexit:loc_3871r ...
off_EE5C	dd sub_3A84
off_EE60	dd sub_3A84
off_EE64	dd sub_3A84
		db    0
		db    0
word_EE6A	dw 209h
byte_EE6C	db 0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  38h	; 8
		db    9
		db    0
		db    0
word_EE7E	dw 20Ah
byte_EE80	db 1
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  4Ch	; L
		db    9
		db    0
		db    0
		db    2
		db    2
byte_EE94	db 2
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  60h	; `
		db    9
		db    0
		db    0
		db  43h	; C
		db    2
		db    3
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  74h	; t
		db    9
		db    0
		db    0
		db  42h	; B
		db    2
		db    4
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  88h	; 
		db    9
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_EFF8	dw 14h
		db    1
		db  60h	; `
		db    2
		db  60h	; `
		db    2
		db  60h	; `
		db    4
		db 0A0h	;  
		db    2
		db 0A0h	;  
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_F022	dw 0
					; __IOERROR+2Bw
		db    0
		db  13h
		db    2
		db    2
		db    4
		db    5
		db    6
		db    8
		db    8
		db    8
		db  14h
		db  15h
		db    5
		db  13h
		db  0Eh
		db    5
		db    5
		db  11h
		db    2
		db  1Eh
		db  29h	; )
		db  2Ch	; ,
		db  28h	; (
		db  28h	; (
		db  28h	; (
		db  28h	; (
		db  28h	; (
		db  29h	; )
		db  2Ch	; ,
		db  28h	; (
		db  28h	; (
		db  28h	; (
		db    5
		db    5
		db  29h	; )
		db  17h
		db  17h
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Fh
		db  2Ch	; ,
		db  23h	; #
		db    2
		db  2Ch	; ,
		db  0Fh
		db  2Ah	; *
		db  28h	; (
		db  28h	; (
		db  28h	; (
		db  13h
		db  1Bh
		db  1Ch
		db    2
		db    2
		db    5
		db  0Fh
		db    2
		db  17h
		db  28h	; (
		db  2Ah	; *
		db  13h
		db  2Ah	; *
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Eh
		db  0Eh
		db  23h	; #
		db  0Eh
		db  1Ch
		db  28h	; (
		db  17h
		db  23h	; #
		db  25h	; %
		db  13h
		db  28h	; (
		db    0
unk_F07E	db    0
		db    0
		db    0
		db    0
word_F082	dw 0
word_F084	dw 3D35h
					; set_new_handler(void (*)(void))+1Fw ...
seg_F086	dw seg seg000
					; set_new_handler(void (*)(void))+1Bw ...
aOutOfMemory	db 'Out of memory',0
word_F096	dw 1000h
		public __ctype
; unsigned __int8 _ctype[257]
__ctype		db    0, 20h, 20h, 20h,	20h, 20h, 20h, 20h
		db  20h, 20h, 21h, 21h,	21h, 21h, 21h, 20h
		db  20h, 20h, 20h, 20h,	20h, 20h, 20h, 20h
		db  20h, 20h, 20h, 20h,	20h, 20h, 20h, 20h
		db  20h, 81h, 40h, 40h,	40h, 40h, 40h, 40h
		db  40h, 40h, 40h, 40h,	40h, 40h, 40h, 40h
		db  40h, 12h, 12h, 12h,	12h, 12h, 12h, 12h
		db  12h, 12h, 12h, 40h,	40h, 40h, 40h, 40h
		db  40h, 40h, 14h, 14h,	14h, 14h, 14h, 14h
		db    4,   4,	4,   4,	  4,   4,   4,	 4
		db    4,   4,	4,   4,	  4,   4,   4,	 4
		db    4,   4,	4,   4,	40h, 40h, 40h, 40h
		db  40h, 40h, 18h, 18h,	18h, 18h, 18h, 18h
		db    8,   8,	8,   8,	  8,   8,   8,	 8
		db    8,   8,	8,   8,	  8,   8,   8,	 8
		db    8,   8,	8,   8,	40h, 40h, 40h, 40h
		db  20h,   0,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0,	 0
		db    0,   0,	0,   0,	  0,   0,   0,	 0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		dd @terminate$qv	; terminate(void)
		dd @unexpected$qv	; unexpected(void)
word_F1AC	dw 0
word_F1AE	dw 0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_F2C2	dw 0
word_F2C4	dw 0
byte_F2C6	db 0
byte_F2C7	db 0
word_F2C8	dw 0
word_F2CA	dw 0
					; seg000:loc_4BA3w
		dw 0
		dw 0
word_F2D0	dw 0
word_F2D2	dw 0
					; seg000:loc_4ABDw ...
		dw 0
		dw 0
		dw 0
		dw 0
		dw 0
		dw 0
		db    2
		db    4
		db    8
		db  0Bh
		db  0Fh
		db  16h
		db    0
		db  15h
		db  8Ch	; 
		db  0Bh
		db    0
		db    0
dword_F2EC	dd 0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  5Ch	; \
		db    0
word_F300	dw 0
					; _setvbuf+4Bw
word_F302	dw 0
					; _setvbuf+35w
word_F304	dw 30h
aNotype		db '<notype>',0
aBccxh1		db '**BCCxh1',0
dword_F318	dd 0
word_F31C	dw 1
word_F31E	dw 0
word_F320	dw 1
word_F322	dw 3Fh
word_F324	dw 40h
word_F326	dw 3Fh
aStringReferenc	db 'String reference out of range',0
aStringRefere_0	db 'String reference out of range',0
aStringRefere_1	db 'String reference out of range',0
aPath		db 'PATH',0
		db '/\',0
		db    0
a_bat		db '.BAT',0
a_com		db '.COM',0
a_exe_0		db '.EXE',0
a_bat_0		db '.BAT',0
aComspec	db 'COMSPEC',0
		db  2Fh	; /
		db  63h	; c
		db    0
		db    1
		db  20h
		dd @string@contains$xqnxc ; string::contains(char *)
		db    0
		db    2
		db  43h	; C
		db  40h	; @
		db    0
		db    0
		db    0
		db  10h
		db  5Fh	; _
		db  44h	; D
		db    0
		db    0
		db    0
		db  0Fh
		db 0B2h	; ²
		db  4Dh	; M
		db    0
		db    0
		db    0
		db  10h
		db  20h
		db  99h	; 
		db    0
		db    0
		db    1
		db  20h
		dd loc_3EE3
dword_F3CE	dd 0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
dword_F3E6	dd 0
word_F3EA	dw 0
word_F3EC	dw 0
word_F3EE	dw 0
word_F3F0	dw 0
word_F3F2	dw 0
word_F3F4	dw 0
					; sub_8FC:loc_92Dw ...
word_F3F6	dw 0
		db    0
		db    0
unk_F3FA	db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_F42A	dw 0
word_F42C	dw 0
word_F42E	dw 0
word_F430	dw 0
word_F432	dw 0
word_F434	dw 0
word_F436	dw 0
word_F438	dw 0
word_F43A	dw 0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
dword_FC3C	dd 0
dword_FC40	dd 0
dword_FC44	dd 0
dword_FC48	dd 0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_FCCC	dw 0
word_FCCE	dw 0
word_FCD0	dw 0
dword_FCD2	dd 0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
unk_FCEA	db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
byte_FF9A	db 0
		db    0
word_FF9C	dw 0
word_FF9E	dw 0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
unk_10062	db    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		db    ?	;
word_10070	dw ?
word_10072	dw ?
					; sub_C814+200r ...
byte_10074	db ?
		db    ?	;
		dw ?
word_10078	dw ?
word_1007A	dw ?
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
word_10098	dw ?
word_1009A	dw ?
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		db    ?	;
		db    ?	;
byte_10476	db ?
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		db    ?	;
		db ?
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
word_12478	dw ?
dword_1247A	dd ?
byte_1247E	db ?
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		db    ?	;
word_124BC	dw ?
word_124BE	dw ?
word_124C0	dw ?
					; sub_A847+1A5w ...
byte_124C2	db ?
					; sub_A847+2CEr ...
		db    ?	;
word_124C4	dw ?
byte_124C6	db ?
byte_124C7	db ?
word_124C8	dw ?
		dw ?
byte_124CC	db ?
					; sub_BB81+1AEw
		db    ?	;
dword_124CE	dd ?
					; sub_B886:loc_B8F4r ...
byte_124D2	db ?
					; sub_BB81:loc_BE08r ...
unk_124D3	db    ?	;
					; sub_BB81+528o
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
byte_124EF	db ?
		db    ?	;
		db    ?	;
byte_124F2	db ?
byte_124F3	db ?
word_124F4	dw ?
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		db    ?	;
		db    ?	;
word_12530	dw ?
					; sub_12CC+15Dr ...
word_12532	dw ?
dword_12534	dd ?
					; sub_12CC+191r ...
word_12538	dw ?
					; sub_12CC:loc_1756r
word_1253A	dw ?
					; sub_12CC+159w ...
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
byte_125A0	db ?
					; sub_C814:loc_C922r ...
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		db    ?	;
byte_125B6	db ?
byte_125B7	db ?
word_125B8	dw ?
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
		dd    ?	;
word_1263A	dw ?
word_1263C	dw ?
					; sub_12CC+16Dw ...
word_1263E	dw ?
					; sub_12CC+4A0r ...
word_12640	dw ?
					; sub_12CC+1B1r ...
word_12642	dw ?
					; sub_12CC+1A3r ...
word_12644	dw ?
dword_12646	dd ?
dword_1264A	dd ?
					; __ExceptionHandler+2D1r ...
		dw ?
dseg		ends

; ===========================================================================

; Segment type:	Uninitialized
seg005		segment	byte stack 'STACK' use16
		assume cs:seg005
		assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing
		db 80h dup(?)
seg005		ends


		end start
